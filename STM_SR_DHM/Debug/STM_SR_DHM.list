
STM_SR_DHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  0800e5e8  0800e5e8  0001e5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ede8  0800ede8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800ede8  0800ede8  0001ede8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edf0  0800edf0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edf0  0800edf0  0001edf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edf4  0800edf4  0001edf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800edf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000268c  20000204  0800effc  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002890  0800effc  00022890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000259f5  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004bbf  00000000  00000000  00045c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cf0  00000000  00000000  0004a7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a88  00000000  00000000  0004c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cf75  00000000  00000000  0004df60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c0e6  00000000  00000000  0007aed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010136b  00000000  00000000  00096fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00198326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086e4  00000000  00000000  001983a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e5d0 	.word	0x0800e5d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800e5d0 	.word	0x0800e5d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9bd 	b.w	8000f44 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <OneWire_Delay+0x2c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8000f5a:	bf00      	nop
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <OneWire_Delay+0x2c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d9f9      	bls.n	8000f5c <OneWire_Delay+0x14>
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	20000780 	.word	0x20000780

08000f78 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	889b      	ldrh	r3, [r3, #4]
 8000f90:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 ffa3 	bl	8003ee8 <HAL_GPIO_Init>
}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b088      	sub	sp, #32
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8000fb2:	2311      	movs	r3, #17
 8000fb4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	889b      	ldrh	r3, [r3, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f107 020c 	add.w	r2, r7, #12
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 ff8a 	bl	8003ee8 <HAL_GPIO_Init>
}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	889b      	ldrh	r3, [r3, #4]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	619a      	str	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	889a      	ldrh	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffda 	bl	8000fdc <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffbe 	bl	8000faa <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 800102e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001032:	f7ff ff89 	bl	8000f48 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff9e 	bl	8000f78 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 800103c:	2046      	movs	r0, #70	; 0x46
 800103e:	f7ff ff83 	bl	8000f48 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f003 f8f3 	bl	8004238 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001056:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800105a:	f7ff ff75 	bl	8000f48 <OneWire_Delay>

	return i;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00f      	beq.n	800109a <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffae 	bl	8000fdc <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff92 	bl	8000faa <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001086:	2006      	movs	r0, #6
 8001088:	f7ff ff5e 	bl	8000f48 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff73 	bl	8000f78 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8001092:	2040      	movs	r0, #64	; 0x40
 8001094:	f7ff ff58 	bl	8000f48 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8001098:	e00e      	b.n	80010b8 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff9e 	bl	8000fdc <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff82 	bl	8000faa <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 80010a6:	203c      	movs	r0, #60	; 0x3c
 80010a8:	f7ff ff4e 	bl	8000f48 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff63 	bl	8000f78 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f7ff ff48 	bl	8000f48 <OneWire_Delay>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff85 	bl	8000fdc <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff69 	bl	8000faa <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff ff35 	bl	8000f48 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff4a 	bl	8000f78 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f7ff ff2f 	bl	8000f48 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	889b      	ldrh	r3, [r3, #4]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f003 f89f 	bl	8004238 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <OneWire_ReadBit+0x44>
		bit = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8001104:	2032      	movs	r0, #50	; 0x32
 8001106:	f7ff ff1f 	bl	8000f48 <OneWire_Delay>

	return bit;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001120:	2308      	movs	r3, #8
 8001122:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff9a 	bl	8001068 <OneWire_WriteBit>
		byte >>= 1;
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	3b01      	subs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ee      	bne.n	8001124 <OneWire_WriteByte+0x10>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001156:	2308      	movs	r3, #8
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	2300      	movs	r3, #0
 800115c:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffab 	bl	80010c0 <OneWire_ReadBit>
 800116a:	4603      	mov	r3, r0
 800116c:	01db      	lsls	r3, r3, #7
 800116e:	b25a      	sxtb	r2, r3
 8001170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	3b01      	subs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1eb      	bne.n	800115e <OneWire_ReadByte+0x10>
	
	return byte;
 8001186:	7bbb      	ldrb	r3, [r7, #14]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	71da      	strb	r2, [r3, #7]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a1b      	ldrb	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 809a 	bne.w	8001314 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff1a 	bl	800101a <OneWire_Reset>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00a      	beq.n	8001202 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	71da      	strb	r2, [r3, #7]
			return 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	e09b      	b.n	800133a <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff84 	bl	8001114 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff57 	bl	80010c0 <OneWire_ReadBit>
 8001212:	4603      	mov	r3, r0
 8001214:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff52 	bl	80010c0 <OneWire_ReadBit>
 800121c:	4603      	mov	r3, r0
 800121e:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001220:	7a7b      	ldrb	r3, [r7, #9]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <OneWire_Search+0x76>
 8001226:	7a3b      	ldrb	r3, [r7, #8]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d064      	beq.n	80012f6 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 800122c:	7a7a      	ldrb	r2, [r7, #9]
 800122e:	7a3b      	ldrb	r3, [r7, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	d002      	beq.n	800123a <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001234:	7a7b      	ldrb	r3, [r7, #9]
 8001236:	72bb      	strb	r3, [r7, #10]
 8001238:	e026      	b.n	8001288 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	799b      	ldrb	r3, [r3, #6]
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	429a      	cmp	r2, r3
 8001242:	d20d      	bcs.n	8001260 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001244:	7b7b      	ldrb	r3, [r7, #13]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	7a5a      	ldrb	r2, [r3, #9]
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	4013      	ands	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	72bb      	strb	r3, [r7, #10]
 800125e:	e008      	b.n	8001272 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	799b      	ldrb	r3, [r3, #6]
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	429a      	cmp	r2, r3
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001272:	7abb      	ldrb	r3, [r7, #10]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d802      	bhi.n	8001288 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7bba      	ldrb	r2, [r7, #14]
 8001286:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d10c      	bne.n	80012a8 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 800128e:	7b7b      	ldrb	r3, [r7, #13]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	7a59      	ldrb	r1, [r3, #9]
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	7afa      	ldrb	r2, [r7, #11]
 800129a:	430a      	orrs	r2, r1
 800129c:	b2d1      	uxtb	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	460a      	mov	r2, r1
 80012a4:	725a      	strb	r2, [r3, #9]
 80012a6:	e010      	b.n	80012ca <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 80012a8:	7b7b      	ldrb	r3, [r7, #13]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	7a5b      	ldrb	r3, [r3, #9]
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	7b7b      	ldrb	r3, [r7, #13]
 80012c0:	b2d1      	uxtb	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 80012ca:	7abb      	ldrb	r3, [r7, #10]
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff feca 	bl	8001068 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3301      	adds	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 80012da:	7afb      	ldrb	r3, [r7, #11]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 80012e0:	7afb      	ldrb	r3, [r7, #11]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d104      	bne.n	80012f0 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	3301      	adds	r3, #1
 80012ea:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 80012ec:	2301      	movs	r3, #1
 80012ee:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
 80012f2:	2b07      	cmp	r3, #7
 80012f4:	d98a      	bls.n	800120c <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b40      	cmp	r3, #64	; 0x40
 80012fa:	d90b      	bls.n	8001314 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7bba      	ldrb	r2, [r7, #14]
 8001300:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	799b      	ldrb	r3, [r3, #6]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001310:	2301      	movs	r3, #1
 8001312:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001314:	7b3b      	ldrb	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <OneWire_Search+0x16c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7a5b      	ldrb	r3, [r3, #9]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001338:	7b3b      	ldrb	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff20 	bl	8001190 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001350:	21f0      	movs	r1, #240	; 0xf0
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff2f 	bl	80011b6 <OneWire_Search>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800136a:	21f0      	movs	r1, #240	; 0xf0
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff22 	bl	80011b6 <OneWire_Search>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001386:	2155      	movs	r1, #85	; 0x55
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fec3 	bl	8001114 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e00a      	b.n	80013aa <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff feb8 	bl	8001114 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b07      	cmp	r3, #7
 80013ae:	d9f1      	bls.n	8001394 <OneWire_SelectWithPointer+0x18>
	}
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e00a      	b.n	80013de <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	440b      	add	r3, r1
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	440a      	add	r2, r1
 80013d4:	7a52      	ldrb	r2, [r2, #9]
 80013d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	3301      	adds	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	d9f1      	bls.n	80013c8 <OneWire_GetFullROM+0x10>
	}
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <OneWire_Init+0x54>)
 8001400:	f005 fcda 	bl	8006db8 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	88fa      	ldrh	r2, [r7, #6]
 800140e:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff fdca 	bl	8000faa <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff fdf0 	bl	8000ffc <OneWire_OutputHigh>
	HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	f002 fbef 	bl	8003c00 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7ff fdda 	bl	8000fdc <OneWire_OutputLow>
	HAL_Delay(100);
 8001428:	2064      	movs	r0, #100	; 0x64
 800142a:	f002 fbe9 	bl	8003c00 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff fde4 	bl	8000ffc <OneWire_OutputHigh>
	HAL_Delay(200);
 8001434:	20c8      	movs	r0, #200	; 0xc8
 8001436:	f002 fbe3 	bl	8003c00 <HAL_Delay>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000780 	.word	0x20000780

08001448 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <DS18B20_StartAll+0x20>)
 800144e:	f7ff fde4 	bl	800101a <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8001452:	21cc      	movs	r1, #204	; 0xcc
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <DS18B20_StartAll+0x20>)
 8001456:	f7ff fe5d 	bl	8001114 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 800145a:	2144      	movs	r1, #68	; 0x44
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DS18B20_StartAll+0x20>)
 800145e:	f7ff fe59 	bl	8001114 <OneWire_WriteByte>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200004c0 	.word	0x200004c0

0800146c <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8001478:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <DS18B20_Read+0x144>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	429a      	cmp	r2, r3
 8001480:	d301      	bcc.n	8001486 <DS18B20_Read+0x1a>
		return 0;
 8001482:	2300      	movs	r3, #0
 8001484:	e090      	b.n	80015a8 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4a49      	ldr	r2, [pc, #292]	; (80015b4 <DS18B20_Read+0x148>)
 8001490:	4413      	add	r3, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f93c 	bl	8001710 <DS18B20_Is>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <DS18B20_Read+0x36>
		return 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	e082      	b.n	80015a8 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 80014a2:	4845      	ldr	r0, [pc, #276]	; (80015b8 <DS18B20_Read+0x14c>)
 80014a4:	f7ff fe0c 	bl	80010c0 <OneWire_ReadBit>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 80014ae:	2300      	movs	r3, #0
 80014b0:	e07a      	b.n	80015a8 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 80014b2:	4841      	ldr	r0, [pc, #260]	; (80015b8 <DS18B20_Read+0x14c>)
 80014b4:	f7ff fdb1 	bl	800101a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4a3d      	ldr	r2, [pc, #244]	; (80015b4 <DS18B20_Read+0x148>)
 80014be:	4413      	add	r3, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	483d      	ldr	r0, [pc, #244]	; (80015b8 <DS18B20_Read+0x14c>)
 80014c4:	f7ff ff5a 	bl	800137c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80014c8:	21be      	movs	r1, #190	; 0xbe
 80014ca:	483b      	ldr	r0, [pc, #236]	; (80015b8 <DS18B20_Read+0x14c>)
 80014cc:	f7ff fe22 	bl	8001114 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80014d0:	2300      	movs	r3, #0
 80014d2:	74fb      	strb	r3, [r7, #19]
 80014d4:	e00d      	b.n	80014f2 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 80014d6:	7cfc      	ldrb	r4, [r7, #19]
 80014d8:	4837      	ldr	r0, [pc, #220]	; (80015b8 <DS18B20_Read+0x14c>)
 80014da:	f7ff fe38 	bl	800114e <OneWire_ReadByte>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4423      	add	r3, r4
 80014e8:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	3301      	adds	r3, #1
 80014f0:	74fb      	strb	r3, [r7, #19]
 80014f2:	7cfb      	ldrb	r3, [r7, #19]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d9ee      	bls.n	80014d6 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 80014f8:	7a3b      	ldrb	r3, [r7, #8]
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7a7b      	ldrb	r3, [r7, #9]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8001508:	482b      	ldr	r0, [pc, #172]	; (80015b8 <DS18B20_Read+0x14c>)
 800150a:	f7ff fd86 	bl	800101a <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800150e:	7b3b      	ldrb	r3, [r7, #12]
 8001510:	115b      	asrs	r3, r3, #5
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3309      	adds	r3, #9
 800151c:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	3b09      	subs	r3, #9
 8001522:	2b03      	cmp	r3, #3
 8001524:	d83a      	bhi.n	800159c <DS18B20_Read+0x130>
 8001526:	a201      	add	r2, pc, #4	; (adr r2, 800152c <DS18B20_Read+0xc0>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	08001555 	.word	0x08001555
 8001534:	0800156d 	.word	0x0800156d
 8001538:	08001585 	.word	0x08001585
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 800153c:	8a3b      	ldrh	r3, [r7, #16]
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001546:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800154a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8001552:	e025      	b.n	80015a0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8001554:	8a3b      	ldrh	r3, [r7, #16]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001566:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 800156a:	e019      	b.n	80015a0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 800156c:	8a3b      	ldrh	r3, [r7, #16]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001576:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800157a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800157e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8001582:	e00d      	b.n	80015a0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8001584:	8a3b      	ldrh	r3, [r7, #16]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80015bc <DS18B20_Read+0x150>
 8001592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001596:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 800159a:	e001      	b.n	80015a0 <DS18B20_Read+0x134>
		default:
			result = 0xFF;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <DS18B20_Read+0x154>)
 800159e:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	20000220 	.word	0x20000220
 80015b4:	20000480 	.word	0x20000480
 80015b8:	200004c0 	.word	0x200004c0
 80015bc:	3d800000 	.word	0x3d800000
 80015c0:	437f0000 	.word	0x437f0000

080015c4 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <DS18B20_SetResolution+0x140>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	79fa      	ldrb	r2, [r7, #7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d301      	bcc.n	80015e2 <DS18B20_SetResolution+0x1e>
		return 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	e08c      	b.n	80016fc <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4a48      	ldr	r2, [pc, #288]	; (8001708 <DS18B20_SetResolution+0x144>)
 80015e8:	4413      	add	r3, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f890 	bl	8001710 <DS18B20_Is>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <DS18B20_SetResolution+0x36>
		return 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e080      	b.n	80016fc <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 80015fa:	4844      	ldr	r0, [pc, #272]	; (800170c <DS18B20_SetResolution+0x148>)
 80015fc:	f7ff fd0d 	bl	800101a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4a40      	ldr	r2, [pc, #256]	; (8001708 <DS18B20_SetResolution+0x144>)
 8001606:	4413      	add	r3, r2
 8001608:	4619      	mov	r1, r3
 800160a:	4840      	ldr	r0, [pc, #256]	; (800170c <DS18B20_SetResolution+0x148>)
 800160c:	f7ff feb6 	bl	800137c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001610:	21be      	movs	r1, #190	; 0xbe
 8001612:	483e      	ldr	r0, [pc, #248]	; (800170c <DS18B20_SetResolution+0x148>)
 8001614:	f7ff fd7e 	bl	8001114 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8001618:	483c      	ldr	r0, [pc, #240]	; (800170c <DS18B20_SetResolution+0x148>)
 800161a:	f7ff fd98 	bl	800114e <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 800161e:	483b      	ldr	r0, [pc, #236]	; (800170c <DS18B20_SetResolution+0x148>)
 8001620:	f7ff fd95 	bl	800114e <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8001624:	4839      	ldr	r0, [pc, #228]	; (800170c <DS18B20_SetResolution+0x148>)
 8001626:	f7ff fd92 	bl	800114e <OneWire_ReadByte>
 800162a:	4603      	mov	r3, r0
 800162c:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 800162e:	4837      	ldr	r0, [pc, #220]	; (800170c <DS18B20_SetResolution+0x148>)
 8001630:	f7ff fd8d 	bl	800114e <OneWire_ReadByte>
 8001634:	4603      	mov	r3, r0
 8001636:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001638:	4834      	ldr	r0, [pc, #208]	; (800170c <DS18B20_SetResolution+0x148>)
 800163a:	f7ff fd88 	bl	800114e <OneWire_ReadByte>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d108      	bne.n	800165a <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800164e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	f023 0320 	bic.w	r3, r3, #32
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e022      	b.n	80016a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	2b0a      	cmp	r3, #10
 800165e:	d108      	bne.n	8001672 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001666:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e016      	b.n	80016a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	2b0b      	cmp	r3, #11
 8001676:	d108      	bne.n	800168a <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f023 0320 	bic.w	r3, r3, #32
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e00a      	b.n	80016a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b0c      	cmp	r3, #12
 800168e:	d107      	bne.n	80016a0 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001696:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	f043 0320 	orr.w	r3, r3, #32
 800169e:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 80016a0:	481a      	ldr	r0, [pc, #104]	; (800170c <DS18B20_SetResolution+0x148>)
 80016a2:	f7ff fcba 	bl	800101a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <DS18B20_SetResolution+0x144>)
 80016ac:	4413      	add	r3, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	4816      	ldr	r0, [pc, #88]	; (800170c <DS18B20_SetResolution+0x148>)
 80016b2:	f7ff fe63 	bl	800137c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 80016b6:	214e      	movs	r1, #78	; 0x4e
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <DS18B20_SetResolution+0x148>)
 80016ba:	f7ff fd2b 	bl	8001114 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <DS18B20_SetResolution+0x148>)
 80016c4:	f7ff fd26 	bl	8001114 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 80016c8:	7b7b      	ldrb	r3, [r7, #13]
 80016ca:	4619      	mov	r1, r3
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <DS18B20_SetResolution+0x148>)
 80016ce:	f7ff fd21 	bl	8001114 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4619      	mov	r1, r3
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <DS18B20_SetResolution+0x148>)
 80016d8:	f7ff fd1c 	bl	8001114 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <DS18B20_SetResolution+0x148>)
 80016de:	f7ff fc9c 	bl	800101a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <DS18B20_SetResolution+0x144>)
 80016e8:	4413      	add	r3, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <DS18B20_SetResolution+0x148>)
 80016ee:	f7ff fe45 	bl	800137c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80016f2:	2148      	movs	r1, #72	; 0x48
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <DS18B20_SetResolution+0x148>)
 80016f6:	f7ff fd0d 	bl	8001114 <OneWire_WriteByte>

	return 1;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000220 	.word	0x20000220
 8001708:	20000480 	.word	0x20000480
 800170c:	200004c0 	.word	0x200004c0

08001710 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b28      	cmp	r3, #40	; 0x28
 800171e:	d101      	bne.n	8001724 <DS18B20_Is+0x14>
		return 1;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <DS18B20_Is+0x16>
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DS18B20_AllDone+0x10>)
 800173a:	f7ff fcc1 	bl	80010c0 <OneWire_ReadBit>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200004c0 	.word	0x200004c0

08001748 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 800174e:	f7ff fff1 	bl	8001734 <DS18B20_AllDone>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d02e      	beq.n	80017b6 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001758:	2300      	movs	r3, #0
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	e026      	b.n	80017ac <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <DS18B20_ReadAll+0x78>)
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	330c      	adds	r3, #12
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <DS18B20_ReadAll+0x78>)
 8001772:	4413      	add	r3, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ffcb 	bl	8001710 <DS18B20_Is>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d012      	beq.n	80017a6 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	3308      	adds	r3, #8
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <DS18B20_ReadAll+0x78>)
 8001788:	441a      	add	r2, r3
 800178a:	79fc      	ldrb	r4, [r7, #7]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe6b 	bl	800146c <DS18B20_Read>
 8001796:	4603      	mov	r3, r0
 8001798:	4619      	mov	r1, r3
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <DS18B20_ReadAll+0x78>)
 800179c:	0123      	lsls	r3, r4, #4
 800179e:	4413      	add	r3, r2
 80017a0:	330c      	adds	r3, #12
 80017a2:	460a      	mov	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3301      	adds	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <DS18B20_ReadAll+0x7c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3d3      	bcc.n	800175e <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000480 	.word	0x20000480
 80017c4:	20000220 	.word	0x20000220

080017c8 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <DS18B20_GetROM+0x50>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d302      	bcc.n	80017e4 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <DS18B20_GetROM+0x50>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e00d      	b.n	8001806 <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 80017ea:	79f9      	ldrb	r1, [r7, #7]
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	4403      	add	r3, r0
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <DS18B20_GetROM+0x54>)
 80017f6:	0109      	lsls	r1, r1, #4
 80017f8:	4401      	add	r1, r0
 80017fa:	440a      	add	r2, r1
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3301      	adds	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b07      	cmp	r3, #7
 800180a:	d9ee      	bls.n	80017ea <DS18B20_GetROM+0x22>
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	20000220 	.word	0x20000220
 800181c:	20000480 	.word	0x20000480

08001820 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <DS18B20_Quantity+0x14>)
 8001826:	781b      	ldrb	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000220 	.word	0x20000220

08001838 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <DS18B20_GetTemperature+0x40>)
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	330c      	adds	r3, #12
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <DS18B20_GetTemperature+0x20>
		return 0;
 8001854:	2300      	movs	r3, #0
 8001856:	e008      	b.n	800186a <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <DS18B20_GetTemperature+0x40>)
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	4413      	add	r3, r2
 8001860:	3308      	adds	r3, #8
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]
	return 1;
 8001868:	2301      	movs	r3, #1

}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000480 	.word	0x20000480

0800187c <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	2300      	movs	r3, #0
 800188c:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, _DS18B20_GPIO, _DS18B20_PIN); // Init OneWire bus
 800188e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001892:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001896:	481e      	ldr	r0, [pc, #120]	; (8001910 <DS18B20_Init+0x94>)
 8001898:	f7ff fdaa 	bl	80013f0 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 800189c:	481c      	ldr	r0, [pc, #112]	; (8001910 <DS18B20_Init+0x94>)
 800189e:	f7ff fd50 	bl	8001342 <OneWire_First>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73fb      	strb	r3, [r7, #15]
	while(next)
 80018a6:	e018      	b.n	80018da <DS18B20_Init+0x5e>
	{
		TempSensorCount++;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <DS18B20_Init+0x98>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <DS18B20_Init+0x98>)
 80018b2:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	73ba      	strb	r2, [r7, #14]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <DS18B20_Init+0x9c>)
 80018be:	4413      	add	r3, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	4813      	ldr	r0, [pc, #76]	; (8001910 <DS18B20_Init+0x94>)
 80018c4:	f7ff fd78 	bl	80013b8 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80018c8:	4811      	ldr	r0, [pc, #68]	; (8001910 <DS18B20_Init+0x94>)
 80018ca:	f7ff fd4a 	bl	8001362 <OneWire_Next>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <DS18B20_Init+0x98>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d803      	bhi.n	80018e2 <DS18B20_Init+0x66>
	while(next)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e3      	bne.n	80018a8 <DS18B20_Init+0x2c>
 80018e0:	e000      	b.n	80018e4 <DS18B20_Init+0x68>
			break;
 80018e2:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	737b      	strb	r3, [r7, #13]
 80018e8:	e00a      	b.n	8001900 <DS18B20_Init+0x84>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe67 	bl	80015c4 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 80018f6:	f7ff fda7 	bl	8001448 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	3301      	adds	r3, #1
 80018fe:	737b      	strb	r3, [r7, #13]
 8001900:	7b7a      	ldrb	r2, [r7, #13]
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3f0      	bcc.n	80018ea <DS18B20_Init+0x6e>
	}
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200004c0 	.word	0x200004c0
 8001914:	20000220 	.word	0x20000220
 8001918:	20000480 	.word	0x20000480

0800191c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2110      	movs	r1, #16
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f002 fc9e 	bl	8004268 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800192c:	2001      	movs	r0, #1
 800192e:	f002 f967 	bl	8003c00 <HAL_Delay>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}

08001936 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2110      	movs	r1, #16
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f002 fc91 	bl	8004268 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f002 f95a 	bl	8003c00 <HAL_Delay>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800195a:	bf00      	nop
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <SPI_TxByte+0x30>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d1f8      	bne.n	800195c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800196a:	1df9      	adds	r1, r7, #7
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	2201      	movs	r2, #1
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <SPI_TxByte+0x30>)
 8001972:	f004 fcec 	bl	800634e <HAL_SPI_Transmit>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200006d0 	.word	0x200006d0

08001984 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001990:	bf00      	nop
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <SPI_TxBuffer+0x30>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b02      	cmp	r3, #2
 800199e:	d1f8      	bne.n	8001992 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80019a0:	887a      	ldrh	r2, [r7, #2]
 80019a2:	2364      	movs	r3, #100	; 0x64
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4803      	ldr	r0, [pc, #12]	; (80019b4 <SPI_TxBuffer+0x30>)
 80019a8:	f004 fcd1 	bl	800634e <HAL_SPI_Transmit>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200006d0 	.word	0x200006d0

080019b8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80019be:	23ff      	movs	r3, #255	; 0xff
 80019c0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019c2:	bf00      	nop
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <SPI_RxByte+0x34>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d1f8      	bne.n	80019c4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019d2:	1dba      	adds	r2, r7, #6
 80019d4:	1df9      	adds	r1, r7, #7
 80019d6:	2364      	movs	r3, #100	; 0x64
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <SPI_RxByte+0x34>)
 80019de:	f004 fe24 	bl	800662a <HAL_SPI_TransmitReceive>

	return data;
 80019e2:	79bb      	ldrb	r3, [r7, #6]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200006d0 	.word	0x200006d0

080019f0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80019f8:	f7ff ffde 	bl	80019b8 <SPI_RxByte>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	701a      	strb	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <SD_ReadyWait+0x30>)
 8001a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a18:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001a1a:	f7ff ffcd 	bl	80019b8 <SPI_RxByte>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d003      	beq.n	8001a30 <SD_ReadyWait+0x24>
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SD_ReadyWait+0x30>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f4      	bne.n	8001a1a <SD_ReadyWait+0xe>

	return res;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200004d4 	.word	0x200004d4

08001a40 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001a46:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001a4a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001a4c:	f7ff ff73 	bl	8001936 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	e005      	b.n	8001a62 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001a56:	20ff      	movs	r0, #255	; 0xff
 8001a58:	f7ff ff7a 	bl	8001950 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b09      	cmp	r3, #9
 8001a66:	ddf6      	ble.n	8001a56 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001a68:	f7ff ff58 	bl	800191c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001a6c:	2340      	movs	r3, #64	; 0x40
 8001a6e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001a80:	2395      	movs	r3, #149	; 0x95
 8001a82:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001a84:	463b      	mov	r3, r7
 8001a86:	2106      	movs	r1, #6
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff7b 	bl	8001984 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001a8e:	e002      	b.n	8001a96 <SD_PowerOn+0x56>
	{
		cnt--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001a96:	f7ff ff8f 	bl	80019b8 <SPI_RxByte>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d002      	beq.n	8001aa6 <SD_PowerOn+0x66>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f4      	bne.n	8001a90 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001aa6:	f7ff ff46 	bl	8001936 <DESELECT>
	SPI_TxByte(0XFF);
 8001aaa:	20ff      	movs	r0, #255	; 0xff
 8001aac:	f7ff ff50 	bl	8001950 <SPI_TxByte>

	PowerFlag = 1;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <SD_PowerOn+0x80>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000222 	.word	0x20000222

08001ac4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <SD_PowerOff+0x14>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	20000222 	.word	0x20000222

08001adc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <SD_CheckPower+0x14>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000222 	.word	0x20000222

08001af4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <SD_RxDataBlock+0x58>)
 8001b00:	22c8      	movs	r2, #200	; 0xc8
 8001b02:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001b04:	f7ff ff58 	bl	80019b8 <SPI_RxByte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d103      	bne.n	8001b1a <SD_RxDataBlock+0x26>
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <SD_RxDataBlock+0x58>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f4      	bne.n	8001b04 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2bfe      	cmp	r3, #254	; 0xfe
 8001b1e:	d001      	beq.n	8001b24 <SD_RxDataBlock+0x30>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e00f      	b.n	8001b44 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff60 	bl	80019f0 <SPI_RxBytePtr>
	} while(len--);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	603a      	str	r2, [r7, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f4      	bne.n	8001b24 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001b3a:	f7ff ff3d 	bl	80019b8 <SPI_RxByte>
	SPI_RxByte();
 8001b3e:	f7ff ff3b 	bl	80019b8 <SPI_RxByte>

	return TRUE;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200004d6 	.word	0x200004d6

08001b50 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001b60:	f7ff ff54 	bl	8001a0c <SD_ReadyWait>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2bff      	cmp	r3, #255	; 0xff
 8001b68:	d001      	beq.n	8001b6e <SD_TxDataBlock+0x1e>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e02f      	b.n	8001bce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff feed 	bl	8001950 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	2bfd      	cmp	r3, #253	; 0xfd
 8001b7a:	d020      	beq.n	8001bbe <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff feff 	bl	8001984 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001b86:	f7ff ff17 	bl	80019b8 <SPI_RxByte>
		SPI_RxByte();
 8001b8a:	f7ff ff15 	bl	80019b8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001b8e:	e00b      	b.n	8001ba8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001b90:	f7ff ff12 	bl	80019b8 <SPI_RxByte>
 8001b94:	4603      	mov	r3, r0
 8001b96:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d006      	beq.n	8001bb0 <SD_TxDataBlock+0x60>
			i++;
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d9f0      	bls.n	8001b90 <SD_TxDataBlock+0x40>
 8001bae:	e000      	b.n	8001bb2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001bb0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ff00 	bl	80019b8 <SPI_RxByte>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0fa      	beq.n	8001bb4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d101      	bne.n	8001bcc <SD_TxDataBlock+0x7c>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <SD_TxDataBlock+0x7e>

	return FALSE;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	6039      	str	r1, [r7, #0]
 8001be0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001be2:	f7ff ff13 	bl	8001a0c <SD_ReadyWait>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2bff      	cmp	r3, #255	; 0xff
 8001bea:	d001      	beq.n	8001bf0 <SD_SendCmd+0x1a>
 8001bec:	23ff      	movs	r3, #255	; 0xff
 8001bee:	e042      	b.n	8001c76 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff feac 	bl	8001950 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	0e1b      	lsrs	r3, r3, #24
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fea6 	bl	8001950 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	0c1b      	lsrs	r3, r3, #16
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fea0 	bl	8001950 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fe9a 	bl	8001950 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fe95 	bl	8001950 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b40      	cmp	r3, #64	; 0x40
 8001c2a:	d102      	bne.n	8001c32 <SD_SendCmd+0x5c>
 8001c2c:	2395      	movs	r3, #149	; 0x95
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e007      	b.n	8001c42 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b48      	cmp	r3, #72	; 0x48
 8001c36:	d102      	bne.n	8001c3e <SD_SendCmd+0x68>
 8001c38:	2387      	movs	r3, #135	; 0x87
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e001      	b.n	8001c42 <SD_SendCmd+0x6c>
	else crc = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fe83 	bl	8001950 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b4c      	cmp	r3, #76	; 0x4c
 8001c4e:	d101      	bne.n	8001c54 <SD_SendCmd+0x7e>
 8001c50:	f7ff feb2 	bl	80019b8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001c54:	230a      	movs	r3, #10
 8001c56:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001c58:	f7ff feae 	bl	80019b8 <SPI_RxByte>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001c60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da05      	bge.n	8001c74 <SD_SendCmd+0x9e>
 8001c68:	7bbb      	ldrb	r3, [r7, #14]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	73bb      	strb	r3, [r7, #14]
 8001c6e:	7bbb      	ldrb	r3, [r7, #14]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f1      	bne.n	8001c58 <SD_SendCmd+0x82>

	return res;
 8001c74:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SD_disk_initialize+0x14>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0d1      	b.n	8001e38 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001c94:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <SD_disk_initialize+0x1c0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <SD_disk_initialize+0x2a>
 8001ca2:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <SD_disk_initialize+0x1c0>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	e0c6      	b.n	8001e38 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001caa:	f7ff fec9 	bl	8001a40 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001cae:	f7ff fe35 	bl	800191c <SELECT>

	/* check disk type */
	type = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2040      	movs	r0, #64	; 0x40
 8001cba:	f7ff ff8c 	bl	8001bd6 <SD_SendCmd>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	f040 80a1 	bne.w	8001e08 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <SD_disk_initialize+0x1c4>)
 8001cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ccc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001cce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001cd2:	2048      	movs	r0, #72	; 0x48
 8001cd4:	f7ff ff7f 	bl	8001bd6 <SD_SendCmd>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d155      	bne.n	8001d8a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e00c      	b.n	8001cfe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001ce4:	7bfc      	ldrb	r4, [r7, #15]
 8001ce6:	f7ff fe67 	bl	80019b8 <SPI_RxByte>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4423      	add	r3, r4
 8001cf4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d9ef      	bls.n	8001ce4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001d04:	7abb      	ldrb	r3, [r7, #10]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d17e      	bne.n	8001e08 <SD_disk_initialize+0x188>
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	2baa      	cmp	r3, #170	; 0xaa
 8001d0e:	d17b      	bne.n	8001e08 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001d10:	2100      	movs	r1, #0
 8001d12:	2077      	movs	r0, #119	; 0x77
 8001d14:	f7ff ff5f 	bl	8001bd6 <SD_SendCmd>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d807      	bhi.n	8001d2e <SD_disk_initialize+0xae>
 8001d1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d22:	2069      	movs	r0, #105	; 0x69
 8001d24:	f7ff ff57 	bl	8001bd6 <SD_SendCmd>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001d2e:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <SD_disk_initialize+0x1c4>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ec      	bne.n	8001d10 <SD_disk_initialize+0x90>
 8001d36:	e000      	b.n	8001d3a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001d38:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001d3a:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <SD_disk_initialize+0x1c4>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d062      	beq.n	8001e08 <SD_disk_initialize+0x188>
 8001d42:	2100      	movs	r1, #0
 8001d44:	207a      	movs	r0, #122	; 0x7a
 8001d46:	f7ff ff46 	bl	8001bd6 <SD_SendCmd>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d15b      	bne.n	8001e08 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e00c      	b.n	8001d70 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001d56:	7bfc      	ldrb	r4, [r7, #15]
 8001d58:	f7ff fe2e 	bl	80019b8 <SPI_RxByte>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4423      	add	r3, r4
 8001d66:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d9ef      	bls.n	8001d56 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001d76:	7a3b      	ldrb	r3, [r7, #8]
 8001d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SD_disk_initialize+0x104>
 8001d80:	230c      	movs	r3, #12
 8001d82:	e000      	b.n	8001d86 <SD_disk_initialize+0x106>
 8001d84:	2304      	movs	r3, #4
 8001d86:	73bb      	strb	r3, [r7, #14]
 8001d88:	e03e      	b.n	8001e08 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2077      	movs	r0, #119	; 0x77
 8001d8e:	f7ff ff22 	bl	8001bd6 <SD_SendCmd>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d808      	bhi.n	8001daa <SD_disk_initialize+0x12a>
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2069      	movs	r0, #105	; 0x69
 8001d9c:	f7ff ff1b 	bl	8001bd6 <SD_SendCmd>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d801      	bhi.n	8001daa <SD_disk_initialize+0x12a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e000      	b.n	8001dac <SD_disk_initialize+0x12c>
 8001daa:	2301      	movs	r3, #1
 8001dac:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001dae:	7bbb      	ldrb	r3, [r7, #14]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d10e      	bne.n	8001dd2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001db4:	2100      	movs	r1, #0
 8001db6:	2077      	movs	r0, #119	; 0x77
 8001db8:	f7ff ff0d 	bl	8001bd6 <SD_SendCmd>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d80e      	bhi.n	8001de0 <SD_disk_initialize+0x160>
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2069      	movs	r0, #105	; 0x69
 8001dc6:	f7ff ff06 	bl	8001bd6 <SD_SendCmd>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <SD_disk_initialize+0x160>
 8001dd0:	e00c      	b.n	8001dec <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2041      	movs	r0, #65	; 0x41
 8001dd6:	f7ff fefe 	bl	8001bd6 <SD_SendCmd>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <SD_disk_initialize+0x1c4>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e2      	bne.n	8001dae <SD_disk_initialize+0x12e>
 8001de8:	e000      	b.n	8001dec <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001dea:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <SD_disk_initialize+0x1c4>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <SD_disk_initialize+0x184>
 8001df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df8:	2050      	movs	r0, #80	; 0x50
 8001dfa:	f7ff feec 	bl	8001bd6 <SD_SendCmd>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SD_disk_initialize+0x188>
 8001e04:	2300      	movs	r3, #0
 8001e06:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001e08:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <SD_disk_initialize+0x1c8>)
 8001e0a:	7bbb      	ldrb	r3, [r7, #14]
 8001e0c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001e0e:	f7ff fd92 	bl	8001936 <DESELECT>
	SPI_RxByte();
 8001e12:	f7ff fdd1 	bl	80019b8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <SD_disk_initialize+0x1c0>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SD_disk_initialize+0x1c0>)
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	e001      	b.n	8001e32 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001e2e:	f7ff fe49 	bl	8001ac4 <SD_PowerOff>
	}

	return Stat;
 8001e32:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <SD_disk_initialize+0x1c0>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	20000000 	.word	0x20000000
 8001e44:	200004d6 	.word	0x200004d6
 8001e48:	20000221 	.word	0x20000221

08001e4c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SD_disk_status+0x14>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e002      	b.n	8001e66 <SD_disk_status+0x1a>
	return Stat;
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SD_disk_status+0x28>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000

08001e78 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <SD_disk_read+0x1c>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <SD_disk_read+0x20>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e051      	b.n	8001f3c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001e98:	4b2a      	ldr	r3, [pc, #168]	; (8001f44 <SD_disk_read+0xcc>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <SD_disk_read+0x32>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e048      	b.n	8001f3c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <SD_disk_read+0xd0>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <SD_disk_read+0x44>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	025b      	lsls	r3, r3, #9
 8001eba:	607b      	str	r3, [r7, #4]

	SELECT();
 8001ebc:	f7ff fd2e 	bl	800191c <SELECT>

	if (count == 1)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d111      	bne.n	8001eea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	2051      	movs	r0, #81	; 0x51
 8001eca:	f7ff fe84 	bl	8001bd6 <SD_SendCmd>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d129      	bne.n	8001f28 <SD_disk_read+0xb0>
 8001ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed8:	68b8      	ldr	r0, [r7, #8]
 8001eda:	f7ff fe0b 	bl	8001af4 <SD_RxDataBlock>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d021      	beq.n	8001f28 <SD_disk_read+0xb0>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	e01e      	b.n	8001f28 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	2052      	movs	r0, #82	; 0x52
 8001eee:	f7ff fe72 	bl	8001bd6 <SD_SendCmd>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d117      	bne.n	8001f28 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f7ff fdf9 	bl	8001af4 <SD_RxDataBlock>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <SD_disk_read+0xa6>
				buff += 512;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f0e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ed      	bne.n	8001ef8 <SD_disk_read+0x80>
 8001f1c:	e000      	b.n	8001f20 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001f1e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001f20:	2100      	movs	r1, #0
 8001f22:	204c      	movs	r0, #76	; 0x4c
 8001f24:	f7ff fe57 	bl	8001bd6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001f28:	f7ff fd05 	bl	8001936 <DESELECT>
	SPI_RxByte();
 8001f2c:	f7ff fd44 	bl	80019b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf14      	ite	ne
 8001f36:	2301      	movne	r3, #1
 8001f38:	2300      	moveq	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000221 	.word	0x20000221

08001f4c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <SD_disk_write+0x1c>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <SD_disk_write+0x20>
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e06b      	b.n	8002044 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f6c:	4b37      	ldr	r3, [pc, #220]	; (800204c <SD_disk_write+0x100>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <SD_disk_write+0x32>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e062      	b.n	8002044 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <SD_disk_write+0x100>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SD_disk_write+0x44>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e059      	b.n	8002044 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <SD_disk_write+0x104>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <SD_disk_write+0x56>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	607b      	str	r3, [r7, #4]

	SELECT();
 8001fa2:	f7ff fcbb 	bl	800191c <SELECT>

	if (count == 1)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d110      	bne.n	8001fce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	2058      	movs	r0, #88	; 0x58
 8001fb0:	f7ff fe11 	bl	8001bd6 <SD_SendCmd>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d13a      	bne.n	8002030 <SD_disk_write+0xe4>
 8001fba:	21fe      	movs	r1, #254	; 0xfe
 8001fbc:	68b8      	ldr	r0, [r7, #8]
 8001fbe:	f7ff fdc7 	bl	8001b50 <SD_TxDataBlock>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d033      	beq.n	8002030 <SD_disk_write+0xe4>
			count = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	e030      	b.n	8002030 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <SD_disk_write+0x104>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2077      	movs	r0, #119	; 0x77
 8001fde:	f7ff fdfa 	bl	8001bd6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	2057      	movs	r0, #87	; 0x57
 8001fe6:	f7ff fdf6 	bl	8001bd6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	2059      	movs	r0, #89	; 0x59
 8001fee:	f7ff fdf2 	bl	8001bd6 <SD_SendCmd>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11b      	bne.n	8002030 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ff8:	21fc      	movs	r1, #252	; 0xfc
 8001ffa:	68b8      	ldr	r0, [r7, #8]
 8001ffc:	f7ff fda8 	bl	8001b50 <SD_TxDataBlock>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <SD_disk_write+0xd0>
				buff += 512;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800200c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3b01      	subs	r3, #1
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ee      	bne.n	8001ff8 <SD_disk_write+0xac>
 800201a:	e000      	b.n	800201e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800201c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800201e:	21fd      	movs	r1, #253	; 0xfd
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fd95 	bl	8001b50 <SD_TxDataBlock>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <SD_disk_write+0xe4>
			{
				count = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002030:	f7ff fc81 	bl	8001936 <DESELECT>
	SPI_RxByte();
 8002034:	f7ff fcc0 	bl	80019b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000000 	.word	0x20000000
 8002050:	20000221 	.word	0x20000221

08002054 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b08b      	sub	sp, #44	; 0x2c
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	603a      	str	r2, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	460b      	mov	r3, r1
 8002062:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SD_disk_ioctl+0x1e>
 800206e:	2304      	movs	r3, #4
 8002070:	e113      	b.n	800229a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002078:	79bb      	ldrb	r3, [r7, #6]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d121      	bne.n	80020c2 <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d009      	beq.n	800209a <SD_disk_ioctl+0x46>
 8002086:	2b02      	cmp	r3, #2
 8002088:	d00d      	beq.n	80020a6 <SD_disk_ioctl+0x52>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800208e:	f7ff fd19 	bl	8001ac4 <SD_PowerOff>
			res = RES_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002098:	e0fd      	b.n	8002296 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800209a:	f7ff fcd1 	bl	8001a40 <SD_PowerOn>
			res = RES_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020a4:	e0f7      	b.n	8002296 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	1c5c      	adds	r4, r3, #1
 80020aa:	f7ff fd17 	bl	8001adc <SD_CheckPower>
 80020ae:	4603      	mov	r3, r0
 80020b0:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020b8:	e0ed      	b.n	8002296 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80020ba:	2304      	movs	r3, #4
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020c0:	e0e9      	b.n	8002296 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80020c2:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <SD_disk_ioctl+0x250>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SD_disk_ioctl+0x80>
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0e2      	b.n	800229a <SD_disk_ioctl+0x246>

		SELECT();
 80020d4:	f7ff fc22 	bl	800191c <SELECT>

		switch (ctrl)
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	2b0d      	cmp	r3, #13
 80020dc:	f200 80cc 	bhi.w	8002278 <SD_disk_ioctl+0x224>
 80020e0:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <SD_disk_ioctl+0x94>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	080021e3 	.word	0x080021e3
 80020ec:	08002121 	.word	0x08002121
 80020f0:	080021d3 	.word	0x080021d3
 80020f4:	08002279 	.word	0x08002279
 80020f8:	08002279 	.word	0x08002279
 80020fc:	08002279 	.word	0x08002279
 8002100:	08002279 	.word	0x08002279
 8002104:	08002279 	.word	0x08002279
 8002108:	08002279 	.word	0x08002279
 800210c:	08002279 	.word	0x08002279
 8002110:	08002279 	.word	0x08002279
 8002114:	080021f5 	.word	0x080021f5
 8002118:	08002219 	.word	0x08002219
 800211c:	0800223d 	.word	0x0800223d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002120:	2100      	movs	r1, #0
 8002122:	2049      	movs	r0, #73	; 0x49
 8002124:	f7ff fd57 	bl	8001bd6 <SD_SendCmd>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80a8 	bne.w	8002280 <SD_disk_ioctl+0x22c>
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2110      	movs	r1, #16
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fcdc 	bl	8001af4 <SD_RxDataBlock>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 809e 	beq.w	8002280 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8002144:	7b3b      	ldrb	r3, [r7, #12]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d10e      	bne.n	800216c <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800214e:	7d7b      	ldrb	r3, [r7, #21]
 8002150:	b29a      	uxth	r2, r3
 8002152:	7d3b      	ldrb	r3, [r7, #20]
 8002154:	b29b      	uxth	r3, r3
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b29b      	uxth	r3, r3
 800215a:	4413      	add	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	3301      	adds	r3, #1
 8002160:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002162:	8bfb      	ldrh	r3, [r7, #30]
 8002164:	029a      	lsls	r2, r3, #10
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e02e      	b.n	80021ca <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800216c:	7c7b      	ldrb	r3, [r7, #17]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	b2da      	uxtb	r2, r3
 8002174:	7dbb      	ldrb	r3, [r7, #22]
 8002176:	09db      	lsrs	r3, r3, #7
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4413      	add	r3, r2
 800217c:	b2da      	uxtb	r2, r3
 800217e:	7d7b      	ldrb	r3, [r7, #21]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 0306 	and.w	r3, r3, #6
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4413      	add	r3, r2
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3302      	adds	r3, #2
 8002190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002194:	7d3b      	ldrb	r3, [r7, #20]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	b2db      	uxtb	r3, r3
 800219a:	b29a      	uxth	r2, r3
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	7cbb      	ldrb	r3, [r7, #18]
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80021bc:	8bfa      	ldrh	r2, [r7, #30]
 80021be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021c2:	3b09      	subs	r3, #9
 80021c4:	409a      	lsls	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80021d0:	e056      	b.n	8002280 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80021e0:	e055      	b.n	800228e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80021e2:	f7ff fc13 	bl	8001a0c <SD_ReadyWait>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2bff      	cmp	r3, #255	; 0xff
 80021ea:	d14b      	bne.n	8002284 <SD_disk_ioctl+0x230>
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80021f2:	e047      	b.n	8002284 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80021f4:	2100      	movs	r1, #0
 80021f6:	2049      	movs	r0, #73	; 0x49
 80021f8:	f7ff fced 	bl	8001bd6 <SD_SendCmd>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d142      	bne.n	8002288 <SD_disk_ioctl+0x234>
 8002202:	2110      	movs	r1, #16
 8002204:	6a38      	ldr	r0, [r7, #32]
 8002206:	f7ff fc75 	bl	8001af4 <SD_RxDataBlock>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d03b      	beq.n	8002288 <SD_disk_ioctl+0x234>
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002216:	e037      	b.n	8002288 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002218:	2100      	movs	r1, #0
 800221a:	204a      	movs	r0, #74	; 0x4a
 800221c:	f7ff fcdb 	bl	8001bd6 <SD_SendCmd>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d132      	bne.n	800228c <SD_disk_ioctl+0x238>
 8002226:	2110      	movs	r1, #16
 8002228:	6a38      	ldr	r0, [r7, #32]
 800222a:	f7ff fc63 	bl	8001af4 <SD_RxDataBlock>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02b      	beq.n	800228c <SD_disk_ioctl+0x238>
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800223a:	e027      	b.n	800228c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800223c:	2100      	movs	r1, #0
 800223e:	207a      	movs	r0, #122	; 0x7a
 8002240:	f7ff fcc9 	bl	8001bd6 <SD_SendCmd>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800224a:	2300      	movs	r3, #0
 800224c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002250:	e00b      	b.n	800226a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8002252:	6a3c      	ldr	r4, [r7, #32]
 8002254:	1c63      	adds	r3, r4, #1
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	f7ff fbae 	bl	80019b8 <SPI_RxByte>
 800225c:	4603      	mov	r3, r0
 800225e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002260:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002264:	3301      	adds	r3, #1
 8002266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800226a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800226e:	2b03      	cmp	r3, #3
 8002270:	d9ef      	bls.n	8002252 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002278:	2304      	movs	r3, #4
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800227e:	e006      	b.n	800228e <SD_disk_ioctl+0x23a>
			break;
 8002280:	bf00      	nop
 8002282:	e004      	b.n	800228e <SD_disk_ioctl+0x23a>
			break;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <SD_disk_ioctl+0x23a>
			break;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <SD_disk_ioctl+0x23a>
			break;
 800228c:	bf00      	nop
		}

		DESELECT();
 800228e:	f7ff fb52 	bl	8001936 <DESELECT>
		SPI_RxByte();
 8002292:	f7ff fb91 	bl	80019b8 <SPI_RxByte>
	}

	return res;
 8002296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800229a:	4618      	mov	r0, r3
 800229c:	372c      	adds	r7, #44	; 0x2c
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000000 	.word	0x20000000

080022a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	4b59      	ldr	r3, [pc, #356]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	4a58      	ldr	r2, [pc, #352]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ca:	4b56      	ldr	r3, [pc, #344]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a52      	ldr	r2, [pc, #328]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e2:	4b50      	ldr	r3, [pc, #320]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <MX_GPIO_Init+0x17c>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <MX_GPIO_Init+0x17c>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a46      	ldr	r2, [pc, #280]	; (8002424 <MX_GPIO_Init+0x17c>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b44      	ldr	r3, [pc, #272]	; (8002424 <MX_GPIO_Init+0x17c>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_DIODE_Pin|CS_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	f240 2111 	movw	r1, #529	; 0x211
 8002324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002328:	f001 ff9e 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2101      	movs	r1, #1
 8002330:	483d      	ldr	r0, [pc, #244]	; (8002428 <MX_GPIO_Init+0x180>)
 8002332:	f001 ff99 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233c:	483b      	ldr	r0, [pc, #236]	; (800242c <MX_GPIO_Init+0x184>)
 800233e:	f001 ff93 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002348:	4b39      	ldr	r3, [pc, #228]	; (8002430 <MX_GPIO_Init+0x188>)
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4835      	ldr	r0, [pc, #212]	; (800242c <MX_GPIO_Init+0x184>)
 8002358:	f001 fdc6 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_DIODE_Pin;
 800235c:	2301      	movs	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002364:	2302      	movs	r3, #2
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_DIODE_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002376:	f001 fdb7 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA9 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_9;
 800237a:	f44f 7304 	mov.w	r3, #528	; 0x210
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002380:	2301      	movs	r3, #1
 8002382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002396:	f001 fda7 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_Pin;
 800239a:	2301      	movs	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	481d      	ldr	r0, [pc, #116]	; (8002428 <MX_GPIO_Init+0x180>)
 80023b2:	f001 fd99 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_SENSOR_Pin;
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <MX_GPIO_Init+0x188>)
 80023be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ce:	f001 fd8b 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_DAT_Pin;
 80023d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711_DAT_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	4811      	ldr	r0, [pc, #68]	; (800242c <MX_GPIO_Init+0x184>)
 80023e8:	f001 fd7e 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_CLK_Pin;
 80023ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HX711_CLK_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4809      	ldr	r0, [pc, #36]	; (800242c <MX_GPIO_Init+0x184>)
 8002406:	f001 fd6f 	bl	8003ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	2017      	movs	r0, #23
 8002410:	f001 fcf3 	bl	8003dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002414:	2017      	movs	r0, #23
 8002416:	f001 fd0c 	bl	8003e32 <HAL_NVIC_EnableIRQ>

}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800
 8002430:	10210000 	.word	0x10210000

08002434 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 800243a:	2304      	movs	r3, #4
 800243c:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 800243e:	e006      	b.n	800244e <hx711_delay_us+0x1a>
  {
    delay--;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	607b      	str	r3, [r7, #4]
    __NOP(); __NOP(); __NOP(); __NOP();
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	bf00      	nop
  while (delay > 0)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f5      	bne.n	8002440 <hx711_delay_us+0xc>
  }
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8002468:	e002      	b.n	8002470 <hx711_lock+0x10>
    hx711_delay(1);
 800246a:	2001      	movs	r0, #1
 800246c:	f001 fbc8 	bl	8003c00 <HAL_Delay>
  while (hx711->lock)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7d1b      	ldrb	r3, [r3, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f8      	bne.n	800246a <hx711_lock+0xa>
  hx711->lock = 1;      
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	751a      	strb	r2, [r3, #20]
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	751a      	strb	r2, [r3, #20]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7ff ffd5 	bl	8002460 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80024cc:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80024de:	2301      	movs	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e6:	2302      	movs	r3, #2
 80024e8:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f001 fcf7 	bl	8003ee8 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 80024fe:	2301      	movs	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002502:	2302      	movs	r3, #2
 8002504:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8002506:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	f001 fce9 	bl	8003ee8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	891b      	ldrh	r3, [r3, #8]
 800251e:	2201      	movs	r2, #1
 8002520:	4619      	mov	r1, r3
 8002522:	f001 fea1 	bl	8004268 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8002526:	200a      	movs	r0, #10
 8002528:	f001 fb6a 	bl	8003c00 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	891b      	ldrh	r3, [r3, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	4619      	mov	r1, r3
 8002538:	f001 fe96 	bl	8004268 <HAL_GPIO_WritePin>
  hx711_delay(10);  
 800253c:	200a      	movs	r0, #10
 800253e:	f001 fb5f 	bl	8003c00 <HAL_Delay>
  hx711_value(hx711);
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f80a 	bl	800255c <hx711_value>
  hx711_value(hx711);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f807 	bl	800255c <hx711_value>
  hx711_unlock(hx711); 
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff ff99 	bl	8002486 <hx711_unlock>
}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8002568:	f001 fb3e 	bl	8003be8 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800256e:	e00b      	b.n	8002588 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8002570:	2001      	movs	r0, #1
 8002572:	f001 fb45 	bl	8003c00 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8002576:	f001 fb37 	bl	8003be8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b96      	cmp	r3, #150	; 0x96
 8002582:	d901      	bls.n	8002588 <hx711_value+0x2c>
      return 0;
 8002584:	2300      	movs	r3, #0
 8002586:	e055      	b.n	8002634 <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	895b      	ldrh	r3, [r3, #10]
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f001 fe50 	bl	8004238 <HAL_GPIO_ReadPin>
 8002598:	4603      	mov	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	d0e8      	beq.n	8002570 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 800259e:	2300      	movs	r3, #0
 80025a0:	74fb      	strb	r3, [r7, #19]
 80025a2:	e02a      	b.n	80025fa <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	891b      	ldrh	r3, [r3, #8]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4619      	mov	r1, r3
 80025b0:	f001 fe5a 	bl	8004268 <HAL_GPIO_WritePin>
    hx711_delay_us();
 80025b4:	f7ff ff3e 	bl	8002434 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	891b      	ldrh	r3, [r3, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	4619      	mov	r1, r3
 80025c4:	f001 fe50 	bl	8004268 <HAL_GPIO_WritePin>
    hx711_delay_us();
 80025c8:	f7ff ff34 	bl	8002434 <hx711_delay_us>
    data = data << 1;    
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	895b      	ldrh	r3, [r3, #10]
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f001 fe2b 	bl	8004238 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d102      	bne.n	80025ee <hx711_value+0x92>
      data ++;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 80025ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	74fb      	strb	r3, [r7, #19]
 80025fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80025fe:	2b17      	cmp	r3, #23
 8002600:	ddd0      	ble.n	80025a4 <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8002608:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	891b      	ldrh	r3, [r3, #8]
 8002612:	2201      	movs	r2, #1
 8002614:	4619      	mov	r1, r3
 8002616:	f001 fe27 	bl	8004268 <HAL_GPIO_WritePin>
  hx711_delay_us();
 800261a:	f7ff ff0b 	bl	8002434 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	891b      	ldrh	r3, [r3, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	4619      	mov	r1, r3
 800262a:	f001 fe1d 	bl	8004268 <HAL_GPIO_WritePin>
  hx711_delay_us();
 800262e:	f7ff ff01 	bl	8002434 <hx711_delay_us>
  return data;    
 8002632:	697b      	ldr	r3, [r7, #20]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 800263c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002640:	b088      	sub	sp, #32
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff08 	bl	8002460 <hx711_lock>
  int64_t  ave = 0;
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	f04f 0400 	mov.w	r4, #0
 8002658:	e9c7 3406 	strd	r3, r4, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 800265c:	2300      	movs	r3, #0
 800265e:	82fb      	strh	r3, [r7, #22]
 8002660:	e014      	b.n	800268c <hx711_weight+0x50>
  {
    ave += hx711_value(hx711);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff7a 	bl	800255c <hx711_value>
 8002668:	4603      	mov	r3, r0
 800266a:	469b      	mov	fp, r3
 800266c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8002670:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002674:	eb1b 0301 	adds.w	r3, fp, r1
 8002678:	eb4c 0402 	adc.w	r4, ip, r2
 800267c:	e9c7 3406 	strd	r3, r4, [r7, #24]
    hx711_delay(5);
 8002680:	2005      	movs	r0, #5
 8002682:	f001 fabd 	bl	8003c00 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8002686:	8afb      	ldrh	r3, [r7, #22]
 8002688:	3301      	adds	r3, #1
 800268a:	82fb      	strh	r3, [r7, #22]
 800268c:	8afa      	ldrh	r2, [r7, #22]
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	429a      	cmp	r2, r3
 8002692:	d3e6      	bcc.n	8002662 <hx711_weight+0x26>
  }
  int32_t data = (int32_t)(ave / sample);
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	f04f 0400 	mov.w	r4, #0
 800269a:	461a      	mov	r2, r3
 800269c:	4623      	mov	r3, r4
 800269e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026a2:	f7fe fa81 	bl	8000ba8 <__aeabi_ldivmod>
 80026a6:	4603      	mov	r3, r0
 80026a8:	460c      	mov	r4, r1
 80026aa:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	ed93 7a04 	vldr	s14, [r3, #16]
 80026c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c6:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fedb 	bl	8002486 <hx711_unlock>
  return answer;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	ee07 3a90 	vmov	s15, r3
}
 80026d6:	eeb0 0a67 	vmov.f32	s0, s15
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
	...

080026e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <MX_I2C1_Init+0x74>)
 80026ea:	4a1c      	ldr	r2, [pc, #112]	; (800275c <MX_I2C1_Init+0x78>)
 80026ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <MX_I2C1_Init+0x74>)
 80026f0:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <MX_I2C1_Init+0x7c>)
 80026f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <MX_I2C1_Init+0x74>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <MX_I2C1_Init+0x74>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <MX_I2C1_Init+0x74>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <MX_I2C1_Init+0x74>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <MX_I2C1_Init+0x74>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_I2C1_Init+0x74>)
 8002714:	2200      	movs	r2, #0
 8002716:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <MX_I2C1_Init+0x74>)
 800271a:	2200      	movs	r2, #0
 800271c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800271e:	480e      	ldr	r0, [pc, #56]	; (8002758 <MX_I2C1_Init+0x74>)
 8002720:	f001 fdd2 	bl	80042c8 <HAL_I2C_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800272a:	f000 fd39 	bl	80031a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800272e:	2100      	movs	r1, #0
 8002730:	4809      	ldr	r0, [pc, #36]	; (8002758 <MX_I2C1_Init+0x74>)
 8002732:	f002 f8c1 	bl	80048b8 <HAL_I2CEx_ConfigAnalogFilter>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800273c:	f000 fd30 	bl	80031a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002740:	2100      	movs	r1, #0
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_I2C1_Init+0x74>)
 8002744:	f002 f903 	bl	800494e <HAL_I2CEx_ConfigDigitalFilter>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800274e:	f000 fd27 	bl	80031a0 <Error_Handler>
  }

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200004d8 	.word	0x200004d8
 800275c:	40005400 	.word	0x40005400
 8002760:	10909cec 	.word	0x10909cec

08002764 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_I2C_MspInit+0x7c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d128      	bne.n	80027d8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_I2C_MspInit+0x80>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <HAL_I2C_MspInit+0x80>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_I2C_MspInit+0x80>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin|LCD_I2C_SCL_Pin;
 800279e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a4:	2312      	movs	r3, #18
 80027a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b0:	2304      	movs	r3, #4
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	480b      	ldr	r0, [pc, #44]	; (80027e8 <HAL_I2C_MspInit+0x84>)
 80027bc:	f001 fb94 	bl	8003ee8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_I2C_MspInit+0x80>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_I2C_MspInit+0x80>)
 80027c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ca:	6593      	str	r3, [r2, #88]	; 0x58
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_I2C_MspInit+0x80>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027d8:	bf00      	nop
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40005400 	.word	0x40005400
 80027e4:	40021000 	.word	0x40021000
 80027e8:	48000400 	.word	0x48000400

080027ec <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80027f6:	4a38      	ldr	r2, [pc, #224]	; (80028d8 <HD44780_Init+0xec>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80027fc:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HD44780_Init+0xf0>)
 80027fe:	2208      	movs	r2, #8
 8002800:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HD44780_Init+0xf4>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8002808:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <HD44780_Init+0xec>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d907      	bls.n	8002820 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002810:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HD44780_Init+0xf4>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	f043 0308 	orr.w	r3, r3, #8
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HD44780_Init+0xf4>)
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e006      	b.n	800282e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HD44780_Init+0xf4>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HD44780_Init+0xf4>)
 800282c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800282e:	f000 f983 	bl	8002b38 <DelayInit>
  HAL_Delay(50);
 8002832:	2032      	movs	r0, #50	; 0x32
 8002834:	f001 f9e4 	bl	8003c00 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HD44780_Init+0xf0>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f941 	bl	8002ac4 <ExpanderWrite>
  HAL_Delay(1000);
 8002842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002846:	f001 f9db 	bl	8003c00 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800284a:	2030      	movs	r0, #48	; 0x30
 800284c:	f000 f929 	bl	8002aa2 <Write4Bits>
  DelayUS(4500);
 8002850:	f241 1094 	movw	r0, #4500	; 0x1194
 8002854:	f000 f99a 	bl	8002b8c <DelayUS>

  Write4Bits(0x03 << 4);
 8002858:	2030      	movs	r0, #48	; 0x30
 800285a:	f000 f922 	bl	8002aa2 <Write4Bits>
  DelayUS(4500);
 800285e:	f241 1094 	movw	r0, #4500	; 0x1194
 8002862:	f000 f993 	bl	8002b8c <DelayUS>

  Write4Bits(0x03 << 4);
 8002866:	2030      	movs	r0, #48	; 0x30
 8002868:	f000 f91b 	bl	8002aa2 <Write4Bits>
  DelayUS(4500);
 800286c:	f241 1094 	movw	r0, #4500	; 0x1194
 8002870:	f000 f98c 	bl	8002b8c <DelayUS>

  Write4Bits(0x02 << 4);
 8002874:	2020      	movs	r0, #32
 8002876:	f000 f914 	bl	8002aa2 <Write4Bits>
  DelayUS(100);
 800287a:	2064      	movs	r0, #100	; 0x64
 800287c:	f000 f986 	bl	8002b8c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <HD44780_Init+0xf4>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f043 0320 	orr.w	r3, r3, #32
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f8cc 	bl	8002a28 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <HD44780_Init+0xf8>)
 8002892:	2204      	movs	r2, #4
 8002894:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8002896:	f000 f875 	bl	8002984 <HD44780_Display>
  HD44780_Clear();
 800289a:	f000 f82b 	bl	80028f4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HD44780_Init+0xfc>)
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HD44780_Init+0xfc>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f8ba 	bl	8002a28 <SendCommand>
  DelayUS(4500);
 80028b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80028b8:	f000 f968 	bl	8002b8c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80028bc:	490b      	ldr	r1, [pc, #44]	; (80028ec <HD44780_Init+0x100>)
 80028be:	2000      	movs	r0, #0
 80028c0:	f000 f876 	bl	80029b0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80028c4:	490a      	ldr	r1, [pc, #40]	; (80028f0 <HD44780_Init+0x104>)
 80028c6:	2001      	movs	r0, #1
 80028c8:	f000 f872 	bl	80029b0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80028cc:	f000 f81d 	bl	800290a <HD44780_Home>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000526 	.word	0x20000526
 80028dc:	20000528 	.word	0x20000528
 80028e0:	20000524 	.word	0x20000524
 80028e4:	20000527 	.word	0x20000527
 80028e8:	20000525 	.word	0x20000525
 80028ec:	20000004 	.word	0x20000004
 80028f0:	2000000c 	.word	0x2000000c

080028f4 <HD44780_Clear>:

void HD44780_Clear()
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80028f8:	2001      	movs	r0, #1
 80028fa:	f000 f895 	bl	8002a28 <SendCommand>
  DelayUS(2000);
 80028fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002902:	f000 f943 	bl	8002b8c <DelayUS>
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}

0800290a <HD44780_Home>:

void HD44780_Home()
{
 800290a:	b580      	push	{r7, lr}
 800290c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800290e:	2002      	movs	r0, #2
 8002910:	f000 f88a 	bl	8002a28 <SendCommand>
  DelayUS(2000);
 8002914:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002918:	f000 f938 	bl	8002b8c <DelayUS>
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	460a      	mov	r2, r1
 800292a:	71fb      	strb	r3, [r7, #7]
 800292c:	4613      	mov	r3, r2
 800292e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HD44780_SetCursor+0x5c>)
 8002932:	f107 0408 	add.w	r4, r7, #8
 8002936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800293c:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HD44780_SetCursor+0x60>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	79ba      	ldrb	r2, [r7, #6]
 8002942:	429a      	cmp	r2, r3
 8002944:	d303      	bcc.n	800294e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HD44780_SetCursor+0x60>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	3b01      	subs	r3, #1
 800294c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	f107 0218 	add.w	r2, r7, #24
 8002956:	4413      	add	r3, r2
 8002958:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4413      	add	r3, r2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	b25b      	sxtb	r3, r3
 8002966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800296a:	b25b      	sxtb	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f85a 	bl	8002a28 <SendCommand>
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}
 800297c:	0800e5e8 	.word	0x0800e5e8
 8002980:	20000526 	.word	0x20000526

08002984 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HD44780_Display+0x28>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HD44780_Display+0x28>)
 8002994:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HD44780_Display+0x28>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	f043 0308 	orr.w	r3, r3, #8
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f841 	bl	8002a28 <SendCommand>
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000527 	.word	0x20000527

080029b0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f828 	bl	8002a28 <SendCommand>
  for (int i=0; i<8; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e009      	b.n	80029f2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f82c 	bl	8002a44 <SendChar>
  for (int i=0; i<8; i++)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3301      	adds	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	ddf2      	ble.n	80029de <HD44780_CreateSpecialChar+0x2e>
  }
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8002a08:	e006      	b.n	8002a18 <HD44780_PrintStr+0x18>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f816 	bl	8002a44 <SendChar>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f4      	bne.n	8002a0a <HD44780_PrintStr+0xa>
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f812 	bl	8002a60 <Send>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <SendChar>:

static void SendChar(uint8_t ch)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f804 	bl	8002a60 <Send>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	460a      	mov	r2, r1
 8002a6a:	71fb      	strb	r3, [r7, #7]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f023 030f 	bic.w	r3, r3, #15
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	79bb      	ldrb	r3, [r7, #6]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f80b 	bl	8002aa2 <Write4Bits>
  Write4Bits((lownib)|mode);
 8002a8c:	7bba      	ldrb	r2, [r7, #14]
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f804 	bl	8002aa2 <Write4Bits>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f808 	bl	8002ac4 <ExpanderWrite>
  PulseEnable(value);
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f820 	bl	8002afc <PulseEnable>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <ExpanderWrite+0x30>)
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002ada:	f107 020f 	add.w	r2, r7, #15
 8002ade:	230a      	movs	r3, #10
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	217e      	movs	r1, #126	; 0x7e
 8002ae6:	4804      	ldr	r0, [pc, #16]	; (8002af8 <ExpanderWrite+0x34>)
 8002ae8:	f001 fc7e 	bl	80043e8 <HAL_I2C_Master_Transmit>
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000528 	.word	0x20000528
 8002af8:	200004d8 	.word	0x200004d8

08002afc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ffd8 	bl	8002ac4 <ExpanderWrite>
  DelayUS(20);
 8002b14:	2014      	movs	r0, #20
 8002b16:	f000 f839 	bl	8002b8c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ffce 	bl	8002ac4 <ExpanderWrite>
  DelayUS(20);
 8002b28:	2014      	movs	r0, #20
 8002b2a:	f000 f82f 	bl	8002b8c <DelayUS>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <DelayInit>:

static void DelayInit(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <DelayInit+0x4c>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <DelayInit+0x4c>)
 8002b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b46:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <DelayInit+0x4c>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <DelayInit+0x4c>)
 8002b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b52:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <DelayInit+0x50>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <DelayInit+0x50>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <DelayInit+0x50>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <DelayInit+0x50>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <DelayInit+0x50>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002b72:	bf00      	nop
  __ASM volatile ("NOP");
 8002b74:	bf00      	nop
  __ASM volatile ("NOP");
 8002b76:	bf00      	nop
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000edf0 	.word	0xe000edf0
 8002b88:	e0001000 	.word	0xe0001000

08002b8c <DelayUS>:

static void DelayUS(uint32_t us) {
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <DelayUS+0x40>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <DelayUS+0x44>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0c9a      	lsrs	r2, r3, #18
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <DelayUS+0x48>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <DelayUS+0x48>)
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f6      	bhi.n	8002bae <DelayUS+0x22>
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	20000014 	.word	0x20000014
 8002bd0:	431bde83 	.word	0x431bde83
 8002bd4:	e0001000 	.word	0xe0001000

08002bd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002be0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002be4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002bf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bf4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002bf8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00b      	beq.n	8002c18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002c00:	e000      	b.n	8002c04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002c02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f9      	beq.n	8002c02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002c0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002c18:	687b      	ldr	r3, [r7, #4]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart2;
int _write(int file, char *ptr, int len)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e009      	b.n	8002c4c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	60ba      	str	r2, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ffc9 	bl	8002bd8 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	dbf1      	blt.n	8002c38 <_write+0x12>
	}
	return len;
 8002c54:	687b      	ldr	r3, [r7, #4]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == RPM_SENSOR_Pin)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d126      	bne.n	8002cc0 <HAL_GPIO_EXTI_Callback+0x60>
  {
	  uint32_t now = TIM16->CNT; // Get current timer count + compensation
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_GPIO_EXTI_Callback+0x6c>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	617b      	str	r3, [r7, #20]
	  uint32_t tmp_compensation = compensation;
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_GPIO_EXTI_Callback+0x70>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	613b      	str	r3, [r7, #16]
	  compensation = 0; // zero compensation value
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_GPIO_EXTI_Callback+0x70>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
	  uint32_t delta = now + tmp_compensation - lastCapture; // Calculate time difference
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	441a      	add	r2, r3
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	60fb      	str	r3, [r7, #12]
	  lastCapture = now;
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	6013      	str	r3, [r2, #0]
	  capturedBuffer[bufferIndex] = delta; // Store time difference in buffer
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_GPIO_EXTI_Callback+0x78>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_GPIO_EXTI_Callback+0x7c>)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  bufferIndex = (bufferIndex + 1) % 2; // Wrap buffer index
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_GPIO_EXTI_Callback+0x78>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	bfb8      	it	lt
 8002cb8:	425b      	neglt	r3, r3
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_GPIO_EXTI_Callback+0x78>)
 8002cbe:	701a      	strb	r2, [r3, #0]
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40014400 	.word	0x40014400
 8002cd0:	20000234 	.word	0x20000234
 8002cd4:	20000224 	.word	0x20000224
 8002cd8:	20000230 	.word	0x20000230
 8002cdc:	20000228 	.word	0x20000228

08002ce0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d106      	bne.n	8002cfe <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		compensation += 0xFFFF; // compensate for timer overflow
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002cf8:	33ff      	adds	r3, #255	; 0xff
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002cfc:	6013      	str	r3, [r2, #0]
	}
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	200007cc 	.word	0x200007cc
 8002d10:	20000234 	.word	0x20000234

08002d14 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_UART_RxCpltCallback+0x28>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d104      	bne.n	8002d32 <HAL_UART_RxCpltCallback+0x1e>
    {
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4905      	ldr	r1, [pc, #20]	; (8002d40 <HAL_UART_RxCpltCallback+0x2c>)
 8002d2c:	4803      	ldr	r0, [pc, #12]	; (8002d3c <HAL_UART_RxCpltCallback+0x28>)
 8002d2e:	f004 fdd7 	bl	80078e0 <HAL_UART_Receive_IT>
    }
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200005ac 	.word	0x200005ac
 8002d40:	20000238 	.word	0x20000238

08002d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 8002d4a:	b081      	sub	sp, #4
 8002d4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d4e:	f000 fedb 	bl	8003b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d52:	f000 f95b 	bl	800300c <SystemClock_Config>
  FATFS fs;
  FIL fil;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d56:	f7ff faa7 	bl	80022a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d5a:	f000 fd77 	bl	800384c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002d5e:	f7ff fcc1 	bl	80026e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002d62:	f000 fa69 	bl	8003238 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8002d66:	f000 fda1 	bl	80038ac <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002d6a:	f005 fca7 	bl	80086bc <MX_FATFS_Init>
  MX_RTC_Init();
 8002d6e:	f000 fa1f 	bl	80031b0 <MX_RTC_Init>
  MX_TIM6_Init();
 8002d72:	f000 fc87 	bl	8003684 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002d76:	f000 fcbb 	bl	80036f0 <MX_TIM16_Init>
  MX_TIM1_Init();
 8002d7a:	f000 fc2f 	bl	80035dc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002d7e:	f000 fd35 	bl	80037ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  hx711_t loadcell = {0};
 8002d82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d86:	3b0c      	subs	r3, #12
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	6053      	str	r3, [r2, #4]
 8002d90:	6093      	str	r3, [r2, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
 8002d94:	6113      	str	r3, [r2, #16]
 8002d96:	6153      	str	r3, [r2, #20]
  uint32_t rpm;
  float weight;
  hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_CLK_Pin, HX711_DAT_GPIO_Port, HX711_DAT_Pin);
 8002d98:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002d9c:	380c      	subs	r0, #12
 8002d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <main+0x290>)
 8002da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002daa:	498a      	ldr	r1, [pc, #552]	; (8002fd4 <main+0x290>)
 8002dac:	f7ff fb78 	bl	80024a0 <hx711_init>
  //hx711_coef_set(&loadcell, 354.5); // read after calibration
  //hx711_tare(&loadcell, 10);
  loadcell.coef = 1;
 8002db0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002db4:	3b0c      	subs	r3, #12
 8002db6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dba:	611a      	str	r2, [r3, #16]
  loadcell.offset = 0;
 8002dbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dc0:	3b0c      	subs	r3, #12
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim16);
 8002dc6:	4884      	ldr	r0, [pc, #528]	; (8002fd8 <main+0x294>)
 8002dc8:	f004 f85e 	bl	8006e88 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2101      	movs	r1, #1
 8002dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd4:	f001 fa48 	bl	8004268 <HAL_GPIO_WritePin>

  float temperature;
  DS18B20_Init(DS18B20_Resolution_12bits);
 8002dd8:	200c      	movs	r0, #12
 8002dda:	f7fe fd4f 	bl	800187c <DS18B20_Init>
  char uart_buf[32];

  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8002dde:	2201      	movs	r2, #1
 8002de0:	497e      	ldr	r1, [pc, #504]	; (8002fdc <main+0x298>)
 8002de2:	487f      	ldr	r0, [pc, #508]	; (8002fe0 <main+0x29c>)
 8002de4:	f004 fd7c 	bl	80078e0 <HAL_UART_Receive_IT>

    HD44780_Init(2);
 8002de8:	2002      	movs	r0, #2
 8002dea:	f7ff fcff 	bl	80027ec <HD44780_Init>
    HD44780_Clear();
 8002dee:	f7ff fd81 	bl	80028f4 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8002df2:	2100      	movs	r1, #0
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7ff fd93 	bl	8002920 <HD44780_SetCursor>
    HD44780_PrintStr("HELLO");
 8002dfa:	487a      	ldr	r0, [pc, #488]	; (8002fe4 <main+0x2a0>)
 8002dfc:	f7ff fe00 	bl	8002a00 <HD44780_PrintStr>
    HD44780_SetCursor(10,1);
 8002e00:	2101      	movs	r1, #1
 8002e02:	200a      	movs	r0, #10
 8002e04:	f7ff fd8c 	bl	8002920 <HD44780_SetCursor>
    HD44780_PrintStr("WORLD");
 8002e08:	4877      	ldr	r0, [pc, #476]	; (8002fe8 <main+0x2a4>)
 8002e0a:	f7ff fdf9 	bl	8002a00 <HD44780_PrintStr>
    HAL_Delay(2000);
 8002e0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e12:	f000 fef5 	bl	8003c00 <HAL_Delay>

      HAL_Delay(500);
 8002e16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e1a:	f000 fef1 	bl	8003c00 <HAL_Delay>
      f_mount(&fs, "", 0);
 8002e1e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002e22:	f103 0318 	add.w	r3, r3, #24
 8002e26:	3b04      	subs	r3, #4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4970      	ldr	r1, [pc, #448]	; (8002fec <main+0x2a8>)
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f007 fe8d 	bl	800ab4c <f_mount>
      f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002e32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e36:	3b34      	subs	r3, #52	; 0x34
 8002e38:	2213      	movs	r2, #19
 8002e3a:	496d      	ldr	r1, [pc, #436]	; (8002ff0 <main+0x2ac>)
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f007 fecb 	bl	800abd8 <f_open>
      f_lseek(&fil, fil.fptr);
 8002e42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e46:	3b34      	subs	r3, #52	; 0x34
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e4e:	3b34      	subs	r3, #52	; 0x34
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f008 fac8 	bl	800b3e8 <f_lseek>
      f_puts("Hello \n", &fil);
 8002e58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e5c:	3b34      	subs	r3, #52	; 0x34
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4864      	ldr	r0, [pc, #400]	; (8002ff4 <main+0x2b0>)
 8002e62:	f008 fd5d 	bl	800b920 <f_puts>
      f_close(&fil);
 8002e66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e6a:	3b34      	subs	r3, #52	; 0x34
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f008 fa91 	bl	800b394 <f_close>
  {
	  /*if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_SET);
	  else
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);*/
	  rpm = measure_RPM();
 8002e72:	f000 f94f 	bl	8003114 <measure_RPM>
 8002e76:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002e7a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002e7e:	6018      	str	r0, [r3, #0]
	  if(rpm > 0) printf("RPM value: %lu\n", rpm);
 8002e80:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002e84:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <main+0x15a>
 8002e8e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002e92:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	4857      	ldr	r0, [pc, #348]	; (8002ff8 <main+0x2b4>)
 8002e9a:	f009 fb15 	bl	800c4c8 <iprintf>
	  weight = hx711_weight(&loadcell, 1);
 8002e9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ea2:	3b0c      	subs	r3, #12
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fbc8 	bl	800263c <hx711_weight>
 8002eac:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002eb0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002eb4:	ed83 0a00 	vstr	s0, [r3]
	  printf("Weight value : %f\n", weight);
 8002eb8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002ebc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	f7fd fb41 	bl	8000548 <__aeabi_f2d>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460c      	mov	r4, r1
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4623      	mov	r3, r4
 8002ece:	484b      	ldr	r0, [pc, #300]	; (8002ffc <main+0x2b8>)
 8002ed0:	f009 fafa 	bl	800c4c8 <iprintf>

	  	  	DS18B20_ReadAll();
 8002ed4:	f7fe fc38 	bl	8001748 <DS18B20_ReadAll>
	    	DS18B20_StartAll();
 8002ed8:	f7fe fab6 	bl	8001448 <DS18B20_StartAll>
	    	uint8_t ROM_tmp[8];
	    	uint8_t i;


	  for(i = 0; i < DS18B20_Quantity(); i++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002ee2:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8002ee6:	7013      	strb	r3, [r2, #0]
 8002ee8:	e054      	b.n	8002f94 <main+0x250>
	    	{
	    		if(DS18B20_GetTemperature(i, &temperature))
 8002eea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002eee:	3b10      	subs	r3, #16
 8002ef0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002ef4:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8002ef8:	7812      	ldrb	r2, [r2, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f7fe fc9b 	bl	8001838 <DS18B20_GetTemperature>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d03a      	beq.n	8002f7e <main+0x23a>
	    		{
	    			DS18B20_GetROM(i, ROM_tmp);
 8002f08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f0c:	3b38      	subs	r3, #56	; 0x38
 8002f0e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002f12:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f7fe fc54 	bl	80017c8 <DS18B20_GetROM>
	    					sprintf(uart_buf, "Temperature: %.2f\r\n", temperature);
 8002f20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f24:	3b10      	subs	r3, #16
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fb0d 	bl	8000548 <__aeabi_f2d>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002f36:	3830      	subs	r0, #48	; 0x30
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	4930      	ldr	r1, [pc, #192]	; (8003000 <main+0x2bc>)
 8002f3e:	f009 fadb 	bl	800c4f8 <siprintf>
	    			        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8002f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f46:	3b30      	subs	r3, #48	; 0x30
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd f941 	bl	80001d0 <strlen>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f56:	3930      	subs	r1, #48	; 0x30
 8002f58:	2364      	movs	r3, #100	; 0x64
 8002f5a:	482a      	ldr	r0, [pc, #168]	; (8003004 <main+0x2c0>)
 8002f5c:	f004 fc2c 	bl	80077b8 <HAL_UART_Transmit>
	    			        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8002f60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f64:	3b30      	subs	r3, #48	; 0x30
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd f932 	bl	80001d0 <strlen>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f74:	3930      	subs	r1, #48	; 0x30
 8002f76:	2364      	movs	r3, #100	; 0x64
 8002f78:	4819      	ldr	r0, [pc, #100]	; (8002fe0 <main+0x29c>)
 8002f7a:	f004 fc1d 	bl	80077b8 <HAL_UART_Transmit>
	  for(i = 0; i < DS18B20_Quantity(); i++)
 8002f7e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002f82:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002f8e:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8002f92:	7013      	strb	r3, [r2, #0]
 8002f94:	f7fe fc44 	bl	8001820 <DS18B20_Quantity>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002fa0:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d39f      	bcc.n	8002eea <main+0x1a6>

	    		}
	    	}

	  if(RX_BUFFER[0] == '1')
 8002faa:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <main+0x298>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b31      	cmp	r3, #49	; 0x31
 8002fb0:	d105      	bne.n	8002fbe <main+0x27a>
	  	          {
		  	  	  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, 1);
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4814      	ldr	r0, [pc, #80]	; (8003008 <main+0x2c4>)
 8002fb8:	f001 f956 	bl	8004268 <HAL_GPIO_WritePin>
 8002fbc:	e759      	b.n	8002e72 <main+0x12e>
	  	          }
	  	          else if(RX_BUFFER[0] == '0')
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <main+0x298>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b30      	cmp	r3, #48	; 0x30
 8002fc4:	f47f af55 	bne.w	8002e72 <main+0x12e>
	  	          {

	  	        	HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2101      	movs	r1, #1
 8002fcc:	480e      	ldr	r0, [pc, #56]	; (8003008 <main+0x2c4>)
 8002fce:	f001 f94b 	bl	8004268 <HAL_GPIO_WritePin>
  {
 8002fd2:	e74e      	b.n	8002e72 <main+0x12e>
 8002fd4:	48000800 	.word	0x48000800
 8002fd8:	200007cc 	.word	0x200007cc
 8002fdc:	20000238 	.word	0x20000238
 8002fe0:	200005ac 	.word	0x200005ac
 8002fe4:	0800e5f8 	.word	0x0800e5f8
 8002fe8:	0800e600 	.word	0x0800e600
 8002fec:	0800e608 	.word	0x0800e608
 8002ff0:	0800e60c 	.word	0x0800e60c
 8002ff4:	0800e618 	.word	0x0800e618
 8002ff8:	0800e620 	.word	0x0800e620
 8002ffc:	0800e630 	.word	0x0800e630
 8003000:	0800e644 	.word	0x0800e644
 8003004:	2000062c 	.word	0x2000062c
 8003008:	48000400 	.word	0x48000400

0800300c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0b8      	sub	sp, #224	; 0xe0
 8003010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003012:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003016:	2244      	movs	r2, #68	; 0x44
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f008 fdf0 	bl	800bc00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003020:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003030:	463b      	mov	r3, r7
 8003032:	2288      	movs	r2, #136	; 0x88
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f008 fde2 	bl	800bc00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800303c:	230a      	movs	r3, #10
 800303e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800304a:	2310      	movs	r3, #16
 800304c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003050:	2301      	movs	r3, #1
 8003052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003056:	2302      	movs	r3, #2
 8003058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800305c:	2302      	movs	r3, #2
 800305e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003068:	230a      	movs	r3, #10
 800306a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800306e:	2307      	movs	r3, #7
 8003070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003074:	2302      	movs	r3, #2
 8003076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800307a:	2302      	movs	r3, #2
 800307c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003080:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003084:	4618      	mov	r0, r3
 8003086:	f001 fd13 	bl	8004ab0 <HAL_RCC_OscConfig>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003090:	f000 f886 	bl	80031a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003094:	230f      	movs	r3, #15
 8003096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800309a:	2303      	movs	r3, #3
 800309c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80030b6:	2104      	movs	r1, #4
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 f8df 	bl	800527c <HAL_RCC_ClockConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80030c4:	f000 f86c 	bl	80031a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <SystemClock_Config+0x104>)
 80030ca:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030cc:	2300      	movs	r3, #0
 80030ce:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030d0:	2300      	movs	r3, #0
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80030d4:	2300      	movs	r3, #0
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030d8:	2300      	movs	r3, #0
 80030da:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e4:	463b      	mov	r3, r7
 80030e6:	4618      	mov	r0, r3
 80030e8:	f002 facc 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80030f2:	f000 f855 	bl	80031a0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80030f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030fa:	f001 fc83 	bl	8004a04 <HAL_PWREx_ControlVoltageScaling>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003104:	f000 f84c 	bl	80031a0 <Error_Handler>
  }
}
 8003108:	bf00      	nop
 800310a:	37e0      	adds	r7, #224	; 0xe0
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	00020047 	.word	0x00020047

08003114 <measure_RPM>:

/* USER CODE BEGIN 4 */
uint32_t measure_RPM(){
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
	uint32_t delta1 = capturedBuffer[0];
 800311a:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <measure_RPM+0x80>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
	uint32_t delta2 = capturedBuffer[1];
 8003120:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <measure_RPM+0x80>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]
	if (delta1 > 0 && delta2 > 0) {
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d02c      	beq.n	8003186 <measure_RPM+0x72>
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d029      	beq.n	8003186 <measure_RPM+0x72>
		uint32_t delta = delta1 + delta2;
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
		float frequency = 1.0f / (delta / 2.0f / 10000.0f ); // Calculate frequency in Hz
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003144:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800314c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003198 <measure_RPM+0x84>
 8003150:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800315c:	edc7 7a02 	vstr	s15, [r7, #8]
		uint32_t rpm = frequency * 60.0f; // Calculate RPM
 8003160:	edd7 7a02 	vldr	s15, [r7, #8]
 8003164:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800319c <measure_RPM+0x88>
 8003168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800316c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003170:	ee17 3a90 	vmov	r3, s15
 8003174:	607b      	str	r3, [r7, #4]
		capturedBuffer[0] = 0;
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <measure_RPM+0x80>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
		capturedBuffer[1] = 0;
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <measure_RPM+0x80>)
 800317e:	2200      	movs	r2, #0
 8003180:	605a      	str	r2, [r3, #4]
		return rpm;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	e000      	b.n	8003188 <measure_RPM+0x74>
	}
	else return 0;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	20000228 	.word	0x20000228
 8003198:	461c4000 	.word	0x461c4000
 800319c:	42700000 	.word	0x42700000

080031a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <MX_RTC_Init+0x48>)
 80031b6:	4a11      	ldr	r2, [pc, #68]	; (80031fc <MX_RTC_Init+0x4c>)
 80031b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031ba:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <MX_RTC_Init+0x48>)
 80031bc:	2200      	movs	r2, #0
 80031be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <MX_RTC_Init+0x48>)
 80031c2:	227f      	movs	r2, #127	; 0x7f
 80031c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <MX_RTC_Init+0x48>)
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <MX_RTC_Init+0x48>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <MX_RTC_Init+0x48>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <MX_RTC_Init+0x48>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <MX_RTC_Init+0x48>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031e4:	4804      	ldr	r0, [pc, #16]	; (80031f8 <MX_RTC_Init+0x48>)
 80031e6:	f002 fefd 	bl	8005fe4 <HAL_RTC_Init>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80031f0:	f7ff ffd6 	bl	80031a0 <Error_Handler>
  }

}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200006ac 	.word	0x200006ac
 80031fc:	40002800 	.word	0x40002800

08003200 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_RTC_MspInit+0x30>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d107      	bne.n	8003222 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_RTC_MspInit+0x34>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_RTC_MspInit+0x34>)
 800321a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40002800 	.word	0x40002800
 8003234:	40021000 	.word	0x40021000

08003238 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800323c:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <MX_SPI1_Init+0x74>)
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <MX_SPI1_Init+0x78>)
 8003240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <MX_SPI1_Init+0x74>)
 8003244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <MX_SPI1_Init+0x74>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <MX_SPI1_Init+0x74>)
 8003252:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003256:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <MX_SPI1_Init+0x74>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <MX_SPI1_Init+0x74>)
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <MX_SPI1_Init+0x74>)
 8003266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <MX_SPI1_Init+0x74>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <MX_SPI1_Init+0x74>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <MX_SPI1_Init+0x74>)
 800327a:	2200      	movs	r2, #0
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <MX_SPI1_Init+0x74>)
 8003280:	2200      	movs	r2, #0
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <MX_SPI1_Init+0x74>)
 8003286:	2207      	movs	r2, #7
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <MX_SPI1_Init+0x74>)
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <MX_SPI1_Init+0x74>)
 8003292:	2208      	movs	r2, #8
 8003294:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <MX_SPI1_Init+0x74>)
 8003298:	f002 ffb6 	bl	8006208 <HAL_SPI_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032a2:	f7ff ff7d 	bl	80031a0 <Error_Handler>
  }

}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200006d0 	.word	0x200006d0
 80032b0:	40013000 	.word	0x40013000

080032b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <HAL_SPI_MspInit+0x7c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d128      	bne.n	8003328 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_SPI_MspInit+0x80>)
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_SPI_MspInit+0x80>)
 80032dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e0:	6613      	str	r3, [r2, #96]	; 0x60
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_SPI_MspInit+0x80>)
 80032e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_SPI_MspInit+0x80>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	4a10      	ldr	r2, [pc, #64]	; (8003334 <HAL_SPI_MspInit+0x80>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_SPI_MspInit+0x80>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003306:	23e0      	movs	r3, #224	; 0xe0
 8003308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003312:	2303      	movs	r3, #3
 8003314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003316:	2305      	movs	r3, #5
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331a:	f107 0314 	add.w	r3, r7, #20
 800331e:	4619      	mov	r1, r3
 8003320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003324:	f000 fde0 	bl	8003ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003328:	bf00      	nop
 800332a:	3728      	adds	r7, #40	; 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40013000 	.word	0x40013000
 8003334:	40021000 	.word	0x40021000

08003338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_MspInit+0x44>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_MspInit+0x44>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6613      	str	r3, [r2, #96]	; 0x60
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_MspInit+0x44>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_MspInit+0x44>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_MspInit+0x44>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_MspInit+0x44>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000

08003380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003392:	e7fe      	b.n	8003392 <HardFault_Handler+0x4>

08003394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <MemManage_Handler+0x4>

0800339a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <BusFault_Handler+0x4>

080033a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <UsageFault_Handler+0x4>

080033a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <SysTick_Handler+0x34>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <SysTick_Handler+0x18>
		Timer1--;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <SysTick_Handler+0x34>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <SysTick_Handler+0x34>)
 80033e6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <SysTick_Handler+0x38>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <SysTick_Handler+0x2c>
		Timer2--;
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <SysTick_Handler+0x38>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <SysTick_Handler+0x38>)
 80033fa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033fc:	f000 fbe0 	bl	8003bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200004d6 	.word	0x200004d6
 8003408:	200004d4 	.word	0x200004d4

0800340c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003410:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003414:	f000 ff40 	bl	8004298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003420:	4803      	ldr	r0, [pc, #12]	; (8003430 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003422:	f003 fda1 	bl	8006f68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003426:	4803      	ldr	r0, [pc, #12]	; (8003434 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003428:	f003 fd9e 	bl	8006f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800342c:	bf00      	nop
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000780 	.word	0x20000780
 8003434:	200007cc 	.word	0x200007cc

08003438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <USART1_IRQHandler+0x10>)
 800343e:	f004 faf1 	bl	8007a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200005ac 	.word	0x200005ac

0800344c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <USART2_IRQHandler+0x10>)
 8003452:	f004 fae7 	bl	8007a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000062c 	.word	0x2000062c

08003460 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e00a      	b.n	8003488 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003472:	f3af 8000 	nop.w
 8003476:	4601      	mov	r1, r0
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	60ba      	str	r2, [r7, #8]
 800347e:	b2ca      	uxtb	r2, r1
 8003480:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	dbf0      	blt.n	8003472 <_read+0x12>
	}

return len;
 8003490:	687b      	ldr	r3, [r7, #4]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_close>:
	}
	return len;
}

int _close(int file)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
	return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034c2:	605a      	str	r2, [r3, #4]
	return 0;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <_isatty>:

int _isatty(int file)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
	return 1;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
	return 0;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <_sbrk+0x5c>)
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <_sbrk+0x60>)
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <_sbrk+0x64>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <_sbrk+0x64>)
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <_sbrk+0x68>)
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <_sbrk+0x64>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	429a      	cmp	r2, r3
 8003532:	d207      	bcs.n	8003544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003534:	f008 fb3a 	bl	800bbac <__errno>
 8003538:	4602      	mov	r2, r0
 800353a:	230c      	movs	r3, #12
 800353c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800353e:	f04f 33ff 	mov.w	r3, #4294967295
 8003542:	e009      	b.n	8003558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_sbrk+0x64>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <_sbrk+0x64>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	4a05      	ldr	r2, [pc, #20]	; (8003568 <_sbrk+0x64>)
 8003554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20018000 	.word	0x20018000
 8003564:	00000400 	.word	0x00000400
 8003568:	2000023c 	.word	0x2000023c
 800356c:	20002890 	.word	0x20002890

08003570 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <SystemInit+0x64>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <SystemInit+0x64>)
 800357c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <SystemInit+0x68>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <SystemInit+0x68>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <SystemInit+0x68>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <SystemInit+0x68>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <SystemInit+0x68>)
 800359c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80035a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80035a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <SystemInit+0x68>)
 80035a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <SystemInit+0x68>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <SystemInit+0x68>)
 80035b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <SystemInit+0x68>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <SystemInit+0x64>)
 80035c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035c6:	609a      	str	r2, [r3, #8]
#endif
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00
 80035d8:	40021000 	.word	0x40021000

080035dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <MX_TIM1_Init+0xa0>)
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <MX_TIM1_Init+0xa4>)
 80035fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <MX_TIM1_Init+0xa0>)
 8003602:	224f      	movs	r2, #79	; 0x4f
 8003604:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <MX_TIM1_Init+0xa0>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <MX_TIM1_Init+0xa0>)
 800360e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003612:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <MX_TIM1_Init+0xa0>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800361a:	4b18      	ldr	r3, [pc, #96]	; (800367c <MX_TIM1_Init+0xa0>)
 800361c:	2200      	movs	r2, #0
 800361e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <MX_TIM1_Init+0xa0>)
 8003622:	2200      	movs	r2, #0
 8003624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003626:	4815      	ldr	r0, [pc, #84]	; (800367c <MX_TIM1_Init+0xa0>)
 8003628:	f003 fb6e 	bl	8006d08 <HAL_TIM_Base_Init>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003632:	f7ff fdb5 	bl	80031a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800363a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800363c:	f107 0310 	add.w	r3, r7, #16
 8003640:	4619      	mov	r1, r3
 8003642:	480e      	ldr	r0, [pc, #56]	; (800367c <MX_TIM1_Init+0xa0>)
 8003644:	f003 fdaf 	bl	80071a6 <HAL_TIM_ConfigClockSource>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800364e:	f7ff fda7 	bl	80031a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4806      	ldr	r0, [pc, #24]	; (800367c <MX_TIM1_Init+0xa0>)
 8003664:	f003 ffb4 	bl	80075d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800366e:	f7ff fd97 	bl	80031a0 <Error_Handler>
  }

}
 8003672:	bf00      	nop
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000780 	.word	0x20000780
 8003680:	40012c00 	.word	0x40012c00

08003684 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <MX_TIM6_Init+0x64>)
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <MX_TIM6_Init+0x68>)
 8003698:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <MX_TIM6_Init+0x64>)
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <MX_TIM6_Init+0x64>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <MX_TIM6_Init+0x64>)
 80036a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <MX_TIM6_Init+0x64>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80036b4:	480c      	ldr	r0, [pc, #48]	; (80036e8 <MX_TIM6_Init+0x64>)
 80036b6:	f003 fb27 	bl	8006d08 <HAL_TIM_Base_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80036c0:	f7ff fd6e 	bl	80031a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4805      	ldr	r0, [pc, #20]	; (80036e8 <MX_TIM6_Init+0x64>)
 80036d2:	f003 ff7d 	bl	80075d0 <HAL_TIMEx_MasterConfigSynchronization>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80036dc:	f7ff fd60 	bl	80031a0 <Error_Handler>
  }

}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000734 	.word	0x20000734
 80036ec:	40001000 	.word	0x40001000

080036f0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <MX_TIM16_Init+0x48>)
 80036f6:	4a11      	ldr	r2, [pc, #68]	; (800373c <MX_TIM16_Init+0x4c>)
 80036f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <MX_TIM16_Init+0x48>)
 80036fc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003700:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <MX_TIM16_Init+0x48>)
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <MX_TIM16_Init+0x48>)
 800370a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <MX_TIM16_Init+0x48>)
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <MX_TIM16_Init+0x48>)
 8003718:	2200      	movs	r2, #0
 800371a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <MX_TIM16_Init+0x48>)
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <MX_TIM16_Init+0x48>)
 8003724:	f003 faf0 	bl	8006d08 <HAL_TIM_Base_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800372e:	f7ff fd37 	bl	80031a0 <Error_Handler>
  }

}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200007cc 	.word	0x200007cc
 800373c:	40014400 	.word	0x40014400

08003740 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <HAL_TIM_Base_MspInit+0x9c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d114      	bne.n	800377c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003752:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 8003754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003756:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 8003758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800375c:	6613      	str	r3, [r2, #96]	; 0x60
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	2019      	movs	r0, #25
 8003770:	f000 fb43 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003774:	2019      	movs	r0, #25
 8003776:	f000 fb5c 	bl	8003e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800377a:	e02a      	b.n	80037d2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_TIM_Base_MspInit+0xa4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10c      	bne.n	80037a0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 800378c:	f043 0310 	orr.w	r3, r3, #16
 8003790:	6593      	str	r3, [r2, #88]	; 0x58
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
}
 800379e:	e018      	b.n	80037d2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <HAL_TIM_Base_MspInit+0xa8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d113      	bne.n	80037d2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 80037ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ae:	4a0c      	ldr	r2, [pc, #48]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b4:	6613      	str	r3, [r2, #96]	; 0x60
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <HAL_TIM_Base_MspInit+0xa0>)
 80037b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80037c2:	2200      	movs	r2, #0
 80037c4:	2100      	movs	r1, #0
 80037c6:	2019      	movs	r0, #25
 80037c8:	f000 fb17 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80037cc:	2019      	movs	r0, #25
 80037ce:	f000 fb30 	bl	8003e32 <HAL_NVIC_EnableIRQ>
}
 80037d2:	bf00      	nop
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40001000 	.word	0x40001000
 80037e8:	40014400 	.word	0x40014400

080037ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <MX_USART1_UART_Init+0x58>)
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <MX_USART1_UART_Init+0x5c>)
 80037f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <MX_USART1_UART_Init+0x58>)
 80037f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <MX_USART1_UART_Init+0x58>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <MX_USART1_UART_Init+0x58>)
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <MX_USART1_UART_Init+0x58>)
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <MX_USART1_UART_Init+0x58>)
 8003812:	220c      	movs	r2, #12
 8003814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <MX_USART1_UART_Init+0x58>)
 8003818:	2200      	movs	r2, #0
 800381a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <MX_USART1_UART_Init+0x58>)
 800381e:	2200      	movs	r2, #0
 8003820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <MX_USART1_UART_Init+0x58>)
 8003824:	2200      	movs	r2, #0
 8003826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <MX_USART1_UART_Init+0x58>)
 800382a:	2200      	movs	r2, #0
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_USART1_UART_Init+0x58>)
 8003830:	f003 ff74 	bl	800771c <HAL_UART_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800383a:	f7ff fcb1 	bl	80031a0 <Error_Handler>
  }

}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200005ac 	.word	0x200005ac
 8003848:	40013800 	.word	0x40013800

0800384c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <MX_USART2_UART_Init+0x5c>)
 8003854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 8003858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800385c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 8003872:	220c      	movs	r2, #12
 8003874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 800388a:	2200      	movs	r2, #0
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <MX_USART2_UART_Init+0x58>)
 8003890:	f003 ff44 	bl	800771c <HAL_UART_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800389a:	f7ff fc81 	bl	80031a0 <Error_Handler>
  }

}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	2000062c 	.word	0x2000062c
 80038a8:	40004400 	.word	0x40004400

080038ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038b2:	4a15      	ldr	r2, [pc, #84]	; (8003908 <MX_USART3_UART_Init+0x5c>)
 80038b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80038bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038d2:	220c      	movs	r2, #12
 80038d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038dc:	4b09      	ldr	r3, [pc, #36]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038ee:	4805      	ldr	r0, [pc, #20]	; (8003904 <MX_USART3_UART_Init+0x58>)
 80038f0:	f003 ff14 	bl	800771c <HAL_UART_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038fa:	f7ff fc51 	bl	80031a0 <Error_Handler>
  }

}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2000052c 	.word	0x2000052c
 8003908:	40004800 	.word	0x40004800

0800390c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08e      	sub	sp, #56	; 0x38
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a5c      	ldr	r2, [pc, #368]	; (8003a9c <HAL_UART_MspInit+0x190>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d14e      	bne.n	80039cc <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800392e:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003932:	4a5b      	ldr	r2, [pc, #364]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003938:	6613      	str	r3, [r2, #96]	; 0x60
 800393a:	4b59      	ldr	r3, [pc, #356]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 800393c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	4b56      	ldr	r3, [pc, #344]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	4a55      	ldr	r2, [pc, #340]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003952:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395e:	4b50      	ldr	r3, [pc, #320]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4a4f      	ldr	r2, [pc, #316]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396a:	4b4d      	ldr	r3, [pc, #308]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003988:	2307      	movs	r3, #7
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003990:	4619      	mov	r1, r3
 8003992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003996:	f000 faa7 	bl	8003ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800399a:	2340      	movs	r3, #64	; 0x40
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a6:	2303      	movs	r3, #3
 80039a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039aa:	2307      	movs	r3, #7
 80039ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b2:	4619      	mov	r1, r3
 80039b4:	483b      	ldr	r0, [pc, #236]	; (8003aa4 <HAL_UART_MspInit+0x198>)
 80039b6:	f000 fa97 	bl	8003ee8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	2025      	movs	r0, #37	; 0x25
 80039c0:	f000 fa1b 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039c4:	2025      	movs	r0, #37	; 0x25
 80039c6:	f000 fa34 	bl	8003e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80039ca:	e063      	b.n	8003a94 <HAL_UART_MspInit+0x188>
  else if(uartHandle->Instance==USART2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a35      	ldr	r2, [pc, #212]	; (8003aa8 <HAL_UART_MspInit+0x19c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d131      	bne.n	8003a3a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039d6:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	4a31      	ldr	r2, [pc, #196]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	6593      	str	r3, [r2, #88]	; 0x58
 80039e2:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 8003a06:	230c      	movs	r3, #12
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a12:	2303      	movs	r3, #3
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a16:	2307      	movs	r3, #7
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a24:	f000 fa60 	bl	8003ee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	2026      	movs	r0, #38	; 0x26
 8003a2e:	f000 f9e4 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a32:	2026      	movs	r0, #38	; 0x26
 8003a34:	f000 f9fd 	bl	8003e32 <HAL_NVIC_EnableIRQ>
}
 8003a38:	e02c      	b.n	8003a94 <HAL_UART_MspInit+0x188>
  else if(uartHandle->Instance==USART3)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HAL_UART_MspInit+0x1a0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d127      	bne.n	8003a94 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	4a15      	ldr	r2, [pc, #84]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a60:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a68:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_UART_MspInit+0x194>)
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC_05_TX_Pin|HC_05_RX_Pin;
 8003a74:	2330      	movs	r3, #48	; 0x30
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a84:	2307      	movs	r3, #7
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4808      	ldr	r0, [pc, #32]	; (8003ab0 <HAL_UART_MspInit+0x1a4>)
 8003a90:	f000 fa2a 	bl	8003ee8 <HAL_GPIO_Init>
}
 8003a94:	bf00      	nop
 8003a96:	3738      	adds	r7, #56	; 0x38
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	48000400 	.word	0x48000400
 8003aa8:	40004400 	.word	0x40004400
 8003aac:	40004800 	.word	0x40004800
 8003ab0:	48000800 	.word	0x48000800

08003ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ab8:	f7ff fd5a 	bl	8003570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003abc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003abe:	e003      	b.n	8003ac8 <LoopCopyDataInit>

08003ac0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ac2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ac4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ac6:	3104      	adds	r1, #4

08003ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ac8:	480a      	ldr	r0, [pc, #40]	; (8003af4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003acc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ace:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ad0:	d3f6      	bcc.n	8003ac0 <CopyDataInit>
	ldr	r2, =_sbss
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ad4:	e002      	b.n	8003adc <LoopFillZerobss>

08003ad6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ad6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ad8:	f842 3b04 	str.w	r3, [r2], #4

08003adc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <LoopForever+0x16>)
	cmp	r2, r3
 8003ade:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ae0:	d3f9      	bcc.n	8003ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ae2:	f008 f869 	bl	800bbb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ae6:	f7ff f92d 	bl	8002d44 <main>

08003aea <LoopForever>:

LoopForever:
    b LoopForever
 8003aea:	e7fe      	b.n	8003aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003aec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003af0:	0800edf8 	.word	0x0800edf8
	ldr	r0, =_sdata
 8003af4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003af8:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8003afc:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 8003b00:	20002890 	.word	0x20002890

08003b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b04:	e7fe      	b.n	8003b04 <ADC1_2_IRQHandler>
	...

08003b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_Init+0x3c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <HAL_Init+0x3c>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b1e:	2003      	movs	r0, #3
 8003b20:	f000 f960 	bl	8003de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b24:	2000      	movs	r0, #0
 8003b26:	f000 f80f 	bl	8003b48 <HAL_InitTick>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	71fb      	strb	r3, [r7, #7]
 8003b34:	e001      	b.n	8003b3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b36:	f7ff fbff 	bl	8003338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40022000 	.word	0x40022000

08003b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_InitTick+0x6c>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d023      	beq.n	8003ba4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <HAL_InitTick+0x70>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <HAL_InitTick+0x6c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	4619      	mov	r1, r3
 8003b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f96b 	bl	8003e4e <HAL_SYSTICK_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b0f      	cmp	r3, #15
 8003b82:	d809      	bhi.n	8003b98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b84:	2200      	movs	r2, #0
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	f000 f935 	bl	8003dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b90:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <HAL_InitTick+0x74>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e007      	b.n	8003ba8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e004      	b.n	8003ba8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e001      	b.n	8003ba8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000001c 	.word	0x2000001c
 8003bb8:	20000014 	.word	0x20000014
 8003bbc:	20000018 	.word	0x20000018

08003bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_IncTick+0x20>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_IncTick+0x24>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_IncTick+0x24>)
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	2000001c 	.word	0x2000001c
 8003be4:	20000818 	.word	0x20000818

08003be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return uwTick;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <HAL_GetTick+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000818 	.word	0x20000818

08003c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff ffee 	bl	8003be8 <HAL_GetTick>
 8003c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d005      	beq.n	8003c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_Delay+0x40>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c26:	bf00      	nop
 8003c28:	f7ff ffde 	bl	8003be8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d8f7      	bhi.n	8003c28 <HAL_Delay+0x28>
  {
  }
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	2000001c 	.word	0x2000001c

08003c44 <__NVIC_SetPriorityGrouping>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <__NVIC_SetPriorityGrouping+0x44>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c60:	4013      	ands	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c76:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <__NVIC_SetPriorityGrouping+0x44>)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	60d3      	str	r3, [r2, #12]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <__NVIC_GetPriorityGrouping>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	f003 0307 	and.w	r3, r3, #7
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <__NVIC_EnableIRQ>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	db0b      	blt.n	8003cd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	4907      	ldr	r1, [pc, #28]	; (8003ce0 <__NVIC_EnableIRQ+0x38>)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2001      	movs	r0, #1
 8003cca:	fa00 f202 	lsl.w	r2, r0, r2
 8003cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	e000e100 	.word	0xe000e100

08003ce4 <__NVIC_SetPriority>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	6039      	str	r1, [r7, #0]
 8003cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	db0a      	blt.n	8003d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	490c      	ldr	r1, [pc, #48]	; (8003d30 <__NVIC_SetPriority+0x4c>)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	0112      	lsls	r2, r2, #4
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	440b      	add	r3, r1
 8003d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d0c:	e00a      	b.n	8003d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4908      	ldr	r1, [pc, #32]	; (8003d34 <__NVIC_SetPriority+0x50>)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	3b04      	subs	r3, #4
 8003d1c:	0112      	lsls	r2, r2, #4
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	440b      	add	r3, r1
 8003d22:	761a      	strb	r2, [r3, #24]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	e000e100 	.word	0xe000e100
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <NVIC_EncodePriority>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b089      	sub	sp, #36	; 0x24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f1c3 0307 	rsb	r3, r3, #7
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf28      	it	cs
 8003d56:	2304      	movcs	r3, #4
 8003d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d902      	bls.n	8003d68 <NVIC_EncodePriority+0x30>
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3b03      	subs	r3, #3
 8003d66:	e000      	b.n	8003d6a <NVIC_EncodePriority+0x32>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d80:	f04f 31ff 	mov.w	r1, #4294967295
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	43d9      	mvns	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	4313      	orrs	r3, r2
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3724      	adds	r7, #36	; 0x24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <SysTick_Config>:
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db0:	d301      	bcc.n	8003db6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003db2:	2301      	movs	r3, #1
 8003db4:	e00f      	b.n	8003dd6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <SysTick_Config+0x40>)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dbe:	210f      	movs	r1, #15
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	f7ff ff8e 	bl	8003ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <SysTick_Config+0x40>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <SysTick_Config+0x40>)
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	e000e010 	.word	0xe000e010

08003de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff29 	bl	8003c44 <__NVIC_SetPriorityGrouping>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4603      	mov	r3, r0
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e0c:	f7ff ff3e 	bl	8003c8c <__NVIC_GetPriorityGrouping>
 8003e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	f7ff ff8e 	bl	8003d38 <NVIC_EncodePriority>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff5d 	bl	8003ce4 <__NVIC_SetPriority>
}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	4603      	mov	r3, r0
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff31 	bl	8003ca8 <__NVIC_EnableIRQ>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ffa2 	bl	8003da0 <SysTick_Config>
 8003e5c:	4603      	mov	r3, r0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d005      	beq.n	8003e8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e029      	b.n	8003ede <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 020e 	bic.w	r2, r2, #14
 8003e98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f003 021c 	and.w	r2, r3, #28
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
    }
  }
  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ef6:	e17f      	b.n	80041f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	2101      	movs	r1, #1
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	4013      	ands	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8171 	beq.w	80041f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d00b      	beq.n	8003f30 <HAL_GPIO_Init+0x48>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d007      	beq.n	8003f30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f24:	2b11      	cmp	r3, #17
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b12      	cmp	r3, #18
 8003f2e:	d130      	bne.n	8003f92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f66:	2201      	movs	r2, #1
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4013      	ands	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 0201 	and.w	r2, r3, #1
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d118      	bne.n	8003fd0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	08db      	lsrs	r3, r3, #3
 8003fba:	f003 0201 	and.w	r2, r3, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d003      	beq.n	8004010 <HAL_GPIO_Init+0x128>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b12      	cmp	r3, #18
 800400e:	d123      	bne.n	8004058 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	08da      	lsrs	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3208      	adds	r2, #8
 8004018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	220f      	movs	r2, #15
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	08da      	lsrs	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3208      	adds	r2, #8
 8004052:	6939      	ldr	r1, [r7, #16]
 8004054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	2203      	movs	r2, #3
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0203 	and.w	r2, r3, #3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80ac 	beq.w	80041f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800409a:	4b5e      	ldr	r3, [pc, #376]	; (8004214 <HAL_GPIO_Init+0x32c>)
 800409c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409e:	4a5d      	ldr	r2, [pc, #372]	; (8004214 <HAL_GPIO_Init+0x32c>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6613      	str	r3, [r2, #96]	; 0x60
 80040a6:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <HAL_GPIO_Init+0x32c>)
 80040a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040b2:	4a59      	ldr	r2, [pc, #356]	; (8004218 <HAL_GPIO_Init+0x330>)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040dc:	d025      	beq.n	800412a <HAL_GPIO_Init+0x242>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a4e      	ldr	r2, [pc, #312]	; (800421c <HAL_GPIO_Init+0x334>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01f      	beq.n	8004126 <HAL_GPIO_Init+0x23e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a4d      	ldr	r2, [pc, #308]	; (8004220 <HAL_GPIO_Init+0x338>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d019      	beq.n	8004122 <HAL_GPIO_Init+0x23a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a4c      	ldr	r2, [pc, #304]	; (8004224 <HAL_GPIO_Init+0x33c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <HAL_GPIO_Init+0x236>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a4b      	ldr	r2, [pc, #300]	; (8004228 <HAL_GPIO_Init+0x340>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00d      	beq.n	800411a <HAL_GPIO_Init+0x232>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a4a      	ldr	r2, [pc, #296]	; (800422c <HAL_GPIO_Init+0x344>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <HAL_GPIO_Init+0x22e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a49      	ldr	r2, [pc, #292]	; (8004230 <HAL_GPIO_Init+0x348>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_GPIO_Init+0x22a>
 800410e:	2306      	movs	r3, #6
 8004110:	e00c      	b.n	800412c <HAL_GPIO_Init+0x244>
 8004112:	2307      	movs	r3, #7
 8004114:	e00a      	b.n	800412c <HAL_GPIO_Init+0x244>
 8004116:	2305      	movs	r3, #5
 8004118:	e008      	b.n	800412c <HAL_GPIO_Init+0x244>
 800411a:	2304      	movs	r3, #4
 800411c:	e006      	b.n	800412c <HAL_GPIO_Init+0x244>
 800411e:	2303      	movs	r3, #3
 8004120:	e004      	b.n	800412c <HAL_GPIO_Init+0x244>
 8004122:	2302      	movs	r3, #2
 8004124:	e002      	b.n	800412c <HAL_GPIO_Init+0x244>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_GPIO_Init+0x244>
 800412a:	2300      	movs	r3, #0
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	f002 0203 	and.w	r2, r2, #3
 8004132:	0092      	lsls	r2, r2, #2
 8004134:	4093      	lsls	r3, r2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800413c:	4936      	ldr	r1, [pc, #216]	; (8004218 <HAL_GPIO_Init+0x330>)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	089b      	lsrs	r3, r3, #2
 8004142:	3302      	adds	r3, #2
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800414a:	4b3a      	ldr	r3, [pc, #232]	; (8004234 <HAL_GPIO_Init+0x34c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800416e:	4a31      	ldr	r2, [pc, #196]	; (8004234 <HAL_GPIO_Init+0x34c>)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004174:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <HAL_GPIO_Init+0x34c>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <HAL_GPIO_Init+0x34c>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800419e:	4b25      	ldr	r3, [pc, #148]	; (8004234 <HAL_GPIO_Init+0x34c>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4013      	ands	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041c2:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <HAL_GPIO_Init+0x34c>)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <HAL_GPIO_Init+0x34c>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ec:	4a11      	ldr	r2, [pc, #68]	; (8004234 <HAL_GPIO_Init+0x34c>)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3301      	adds	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	f47f ae78 	bne.w	8003ef8 <HAL_GPIO_Init+0x10>
  }
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40021000 	.word	0x40021000
 8004218:	40010000 	.word	0x40010000
 800421c:	48000400 	.word	0x48000400
 8004220:	48000800 	.word	0x48000800
 8004224:	48000c00 	.word	0x48000c00
 8004228:	48001000 	.word	0x48001000
 800422c:	48001400 	.word	0x48001400
 8004230:	48001800 	.word	0x48001800
 8004234:	40010400 	.word	0x40010400

08004238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	887b      	ldrh	r3, [r7, #2]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
 8004254:	e001      	b.n	800425a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
 8004274:	4613      	mov	r3, r2
 8004276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004284:	e002      	b.n	800428c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004286:	887a      	ldrh	r2, [r7, #2]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe fcd2 	bl	8002c60 <HAL_GPIO_EXTI_Callback>
  }
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40010400 	.word	0x40010400

080042c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e081      	b.n	80043de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fe fa38 	bl	8002764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	; 0x24
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004318:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004328:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d107      	bne.n	8004342 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	e006      	b.n	8004350 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800434e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d104      	bne.n	8004362 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004360:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004374:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004384:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	ea42 0103 	orr.w	r1, r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	021a      	lsls	r2, r3, #8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69d9      	ldr	r1, [r3, #28]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1a      	ldr	r2, [r3, #32]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	461a      	mov	r2, r3
 80043f4:	460b      	mov	r3, r1
 80043f6:	817b      	strh	r3, [r7, #10]
 80043f8:	4613      	mov	r3, r2
 80043fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	f040 80da 	bne.w	80045be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_I2C_Master_Transmit+0x30>
 8004414:	2302      	movs	r3, #2
 8004416:	e0d3      	b.n	80045c0 <HAL_I2C_Master_Transmit+0x1d8>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004420:	f7ff fbe2 	bl	8003be8 <HAL_GetTick>
 8004424:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2319      	movs	r3, #25
 800442c:	2201      	movs	r2, #1
 800442e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8f0 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e0be      	b.n	80045c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2221      	movs	r2, #33	; 0x21
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2210      	movs	r2, #16
 800444e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	893a      	ldrh	r2, [r7, #8]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	2bff      	cmp	r3, #255	; 0xff
 8004472:	d90e      	bls.n	8004492 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	22ff      	movs	r2, #255	; 0xff
 8004478:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	b2da      	uxtb	r2, r3
 8004480:	8979      	ldrh	r1, [r7, #10]
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f9e6 	bl	800485c <I2C_TransferConfig>
 8004490:	e06c      	b.n	800456c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	8979      	ldrh	r1, [r7, #10]
 80044a4:	4b48      	ldr	r3, [pc, #288]	; (80045c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f9d5 	bl	800485c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80044b2:	e05b      	b.n	800456c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	6a39      	ldr	r1, [r7, #32]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f8ed 	bl	8004698 <I2C_WaitOnTXISFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e07b      	b.n	80045c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d034      	beq.n	800456c <HAL_I2C_Master_Transmit+0x184>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d130      	bne.n	800456c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	2200      	movs	r2, #0
 8004512:	2180      	movs	r1, #128	; 0x80
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f87f 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e04d      	b.n	80045c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2bff      	cmp	r3, #255	; 0xff
 800452c:	d90e      	bls.n	800454c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	22ff      	movs	r2, #255	; 0xff
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	b2da      	uxtb	r2, r3
 800453a:	8979      	ldrh	r1, [r7, #10]
 800453c:	2300      	movs	r3, #0
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f989 	bl	800485c <I2C_TransferConfig>
 800454a:	e00f      	b.n	800456c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	b2da      	uxtb	r2, r3
 800455c:	8979      	ldrh	r1, [r7, #10]
 800455e:	2300      	movs	r3, #0
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f978 	bl	800485c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d19e      	bne.n	80044b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	6a39      	ldr	r1, [r7, #32]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f8cc 	bl	8004718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e01a      	b.n	80045c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2220      	movs	r2, #32
 8004590:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_I2C_Master_Transmit+0x1e4>)
 800459e:	400b      	ands	r3, r1
 80045a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80045be:	2302      	movs	r3, #2
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	80002000 	.word	0x80002000
 80045cc:	fe00e800 	.word	0xfe00e800

080045d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d103      	bne.n	80045ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d007      	beq.n	800460c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	619a      	str	r2, [r3, #24]
  }
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004628:	e022      	b.n	8004670 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d01e      	beq.n	8004670 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7ff fad9 	bl	8003be8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d113      	bne.n	8004670 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	f043 0220 	orr.w	r2, r3, #32
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e00f      	b.n	8004690 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4013      	ands	r3, r2
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	429a      	cmp	r2, r3
 800468c:	d0cd      	beq.n	800462a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046a4:	e02c      	b.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f870 	bl	8004790 <I2C_IsAcknowledgeFailed>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e02a      	b.n	8004710 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d01e      	beq.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7ff fa91 	bl	8003be8 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d113      	bne.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	f043 0220 	orr.w	r2, r3, #32
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d1cb      	bne.n	80046a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004724:	e028      	b.n	8004778 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f830 	bl	8004790 <I2C_IsAcknowledgeFailed>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e026      	b.n	8004788 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7ff fa55 	bl	8003be8 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d113      	bne.n	8004778 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e007      	b.n	8004788 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b20      	cmp	r3, #32
 8004784:	d1cf      	bne.n	8004726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d151      	bne.n	800484e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047aa:	e022      	b.n	80047f2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d01e      	beq.n	80047f2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7ff fa18 	bl	8003be8 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <I2C_IsAcknowledgeFailed+0x3a>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e02e      	b.n	8004850 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d1d5      	bne.n	80047ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2210      	movs	r2, #16
 8004806:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2220      	movs	r2, #32
 800480e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff fedd 	bl	80045d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <I2C_IsAcknowledgeFailed+0xc8>)
 8004822:	400b      	ands	r3, r1
 8004824:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	fe00e800 	.word	0xfe00e800

0800485c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	4613      	mov	r3, r2
 800486c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	0d5b      	lsrs	r3, r3, #21
 8004878:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <I2C_TransferConfig+0x58>)
 800487e:	430b      	orrs	r3, r1
 8004880:	43db      	mvns	r3, r3
 8004882:	ea02 0103 	and.w	r1, r2, r3
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800488c:	7a7b      	ldrb	r3, [r7, #9]
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	431a      	orrs	r2, r3
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	03ff63ff 	.word	0x03ff63ff

080048b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d138      	bne.n	8004940 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048d8:	2302      	movs	r3, #2
 80048da:	e032      	b.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2224      	movs	r2, #36	; 0x24
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800490a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e000      	b.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004940:	2302      	movs	r3, #2
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b20      	cmp	r3, #32
 8004962:	d139      	bne.n	80049d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800496e:	2302      	movs	r3, #2
 8004970:	e033      	b.n	80049da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2224      	movs	r2, #36	; 0x24
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <HAL_PWREx_GetVoltageRange+0x18>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40007000 	.word	0x40007000

08004a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a12:	d130      	bne.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a14:	4b23      	ldr	r3, [pc, #140]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a20:	d038      	beq.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a22:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a32:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2232      	movs	r2, #50	; 0x32
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0c9b      	lsrs	r3, r3, #18
 8004a44:	3301      	adds	r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a48:	e002      	b.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a50:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5c:	d102      	bne.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f2      	bne.n	8004a4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d110      	bne.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00f      	b.n	8004a96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	d007      	beq.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a84:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a8c:	4a05      	ldr	r2, [pc, #20]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	20000014 	.word	0x20000014
 8004aac:	431bde83 	.word	0x431bde83

08004ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e3d4      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac2:	4ba1      	ldr	r3, [pc, #644]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004acc:	4b9e      	ldr	r3, [pc, #632]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80e4 	beq.w	8004cac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <HAL_RCC_OscConfig+0x4a>
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b0c      	cmp	r3, #12
 8004aee:	f040 808b 	bne.w	8004c08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	f040 8087 	bne.w	8004c08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004afa:	4b93      	ldr	r3, [pc, #588]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_RCC_OscConfig+0x62>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e3ac      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	4b8c      	ldr	r3, [pc, #560]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <HAL_RCC_OscConfig+0x7c>
 8004b22:	4b89      	ldr	r3, [pc, #548]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2a:	e005      	b.n	8004b38 <HAL_RCC_OscConfig+0x88>
 8004b2c:	4b86      	ldr	r3, [pc, #536]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d223      	bcs.n	8004b84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fd3f 	bl	80055c4 <RCC_SetFlashLatencyFromMSIRange>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e38d      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b50:	4b7d      	ldr	r3, [pc, #500]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7c      	ldr	r2, [pc, #496]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b56:	f043 0308 	orr.w	r3, r3, #8
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b7a      	ldr	r3, [pc, #488]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	4977      	ldr	r1, [pc, #476]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	4972      	ldr	r1, [pc, #456]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
 8004b82:	e025      	b.n	8004bd0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b84:	4b70      	ldr	r3, [pc, #448]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6f      	ldr	r2, [pc, #444]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b8a:	f043 0308 	orr.w	r3, r3, #8
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b6d      	ldr	r3, [pc, #436]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	496a      	ldr	r1, [pc, #424]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba2:	4b69      	ldr	r3, [pc, #420]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	4965      	ldr	r1, [pc, #404]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fcff 	bl	80055c4 <RCC_SetFlashLatencyFromMSIRange>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e34d      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bd0:	f000 fc36 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8004bd4:	4601      	mov	r1, r0
 8004bd6:	4b5c      	ldr	r3, [pc, #368]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	4a5a      	ldr	r2, [pc, #360]	; (8004d4c <HAL_RCC_OscConfig+0x29c>)
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa21 f303 	lsr.w	r3, r1, r3
 8004bec:	4a58      	ldr	r2, [pc, #352]	; (8004d50 <HAL_RCC_OscConfig+0x2a0>)
 8004bee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bf0:	4b58      	ldr	r3, [pc, #352]	; (8004d54 <HAL_RCC_OscConfig+0x2a4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe ffa7 	bl	8003b48 <HAL_InitTick>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d052      	beq.n	8004caa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	e331      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d032      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c10:	4b4d      	ldr	r3, [pc, #308]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a4c      	ldr	r2, [pc, #304]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c1c:	f7fe ffe4 	bl	8003be8 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c24:	f7fe ffe0 	bl	8003be8 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e31a      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c36:	4b44      	ldr	r3, [pc, #272]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c42:	4b41      	ldr	r3, [pc, #260]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a40      	ldr	r2, [pc, #256]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c48:	f043 0308 	orr.w	r3, r3, #8
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b3e      	ldr	r3, [pc, #248]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	493b      	ldr	r1, [pc, #236]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c60:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	4936      	ldr	r1, [pc, #216]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]
 8004c74:	e01a      	b.n	8004cac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a33      	ldr	r2, [pc, #204]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c82:	f7fe ffb1 	bl	8003be8 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c8a:	f7fe ffad 	bl	8003be8 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e2e7      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x1da>
 8004ca8:	e000      	b.n	8004cac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004caa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d074      	beq.n	8004da2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d005      	beq.n	8004cca <HAL_RCC_OscConfig+0x21a>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d10e      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d10b      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cca:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d064      	beq.n	8004da0 <HAL_RCC_OscConfig+0x2f0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d160      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e2c4      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x24a>
 8004cec:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e01d      	b.n	8004d36 <HAL_RCC_OscConfig+0x286>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d02:	d10c      	bne.n	8004d1e <HAL_RCC_OscConfig+0x26e>
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	e00b      	b.n	8004d36 <HAL_RCC_OscConfig+0x286>
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01c      	beq.n	8004d78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fe ff53 	bl	8003be8 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d44:	e011      	b.n	8004d6a <HAL_RCC_OscConfig+0x2ba>
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	0800e6a0 	.word	0x0800e6a0
 8004d50:	20000014 	.word	0x20000014
 8004d54:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d58:	f7fe ff46 	bl	8003be8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e280      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d6a:	4baf      	ldr	r3, [pc, #700]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x2a8>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fe ff36 	bl	8003be8 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fe ff32 	bl	8003be8 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	; 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e26c      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d92:	4ba5      	ldr	r3, [pc, #660]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x2d0>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d060      	beq.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x310>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d119      	bne.n	8004dee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d116      	bne.n	8004dee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc0:	4b99      	ldr	r3, [pc, #612]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x328>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e249      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd8:	4b93      	ldr	r3, [pc, #588]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	061b      	lsls	r3, r3, #24
 8004de6:	4990      	ldr	r1, [pc, #576]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dec:	e040      	b.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d023      	beq.n	8004e3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df6:	4b8c      	ldr	r3, [pc, #560]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a8b      	ldr	r2, [pc, #556]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fe fef1 	bl	8003be8 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fe feed 	bl	8003be8 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e227      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e1c:	4b82      	ldr	r3, [pc, #520]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b7f      	ldr	r3, [pc, #508]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	497c      	ldr	r1, [pc, #496]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
 8004e3c:	e018      	b.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b7a      	ldr	r3, [pc, #488]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a79      	ldr	r2, [pc, #484]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4a:	f7fe fecd 	bl	8003be8 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e52:	f7fe fec9 	bl	8003be8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e203      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e64:	4b70      	ldr	r3, [pc, #448]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d03c      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e84:	4b68      	ldr	r3, [pc, #416]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8a:	4a67      	ldr	r2, [pc, #412]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fe fea8 	bl	8003be8 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fe fea4 	bl	8003be8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1de      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eae:	4b5e      	ldr	r3, [pc, #376]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0ef      	beq.n	8004e9c <HAL_RCC_OscConfig+0x3ec>
 8004ebc:	e01b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ebe:	4b5a      	ldr	r3, [pc, #360]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec4:	4a58      	ldr	r2, [pc, #352]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fe fe8b 	bl	8003be8 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed6:	f7fe fe87 	bl	8003be8 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e1c1      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee8:	4b4f      	ldr	r3, [pc, #316]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ef      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80a6 	beq.w	8005050 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f04:	2300      	movs	r3, #0
 8004f06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f08:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f14:	4b44      	ldr	r3, [pc, #272]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	4a43      	ldr	r2, [pc, #268]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f20:	4b41      	ldr	r3, [pc, #260]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_RCC_OscConfig+0x57c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d118      	bne.n	8004f6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f3c:	4b3b      	ldr	r3, [pc, #236]	; (800502c <HAL_RCC_OscConfig+0x57c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3a      	ldr	r2, [pc, #232]	; (800502c <HAL_RCC_OscConfig+0x57c>)
 8004f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f48:	f7fe fe4e 	bl	8003be8 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f50:	f7fe fe4a 	bl	8003be8 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e184      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f62:	4b32      	ldr	r3, [pc, #200]	; (800502c <HAL_RCC_OscConfig+0x57c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d108      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4d8>
 8004f76:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f86:	e024      	b.n	8004fd2 <HAL_RCC_OscConfig+0x522>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	d110      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x502>
 8004f90:	4b25      	ldr	r3, [pc, #148]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	4a24      	ldr	r2, [pc, #144]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f98:	f043 0304 	orr.w	r3, r3, #4
 8004f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa0:	4b21      	ldr	r3, [pc, #132]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fb0:	e00f      	b.n	8004fd2 <HAL_RCC_OscConfig+0x522>
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	4a1b      	ldr	r2, [pc, #108]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc2:	4b19      	ldr	r3, [pc, #100]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	4a17      	ldr	r2, [pc, #92]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fca:	f023 0304 	bic.w	r3, r3, #4
 8004fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7fe fe05 	bl	8003be8 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7fe fe01 	bl	8003be8 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e139      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0ed      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x532>
 8005006:	e01a      	b.n	800503e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fe fdee 	bl	8003be8 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800500e:	e00f      	b.n	8005030 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f7fe fdea 	bl	8003be8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	; 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d906      	bls.n	8005030 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e122      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000
 800502c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005030:	4b90      	ldr	r3, [pc, #576]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e8      	bne.n	8005010 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800503e:	7ffb      	ldrb	r3, [r7, #31]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d105      	bne.n	8005050 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005044:	4b8b      	ldr	r3, [pc, #556]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	4a8a      	ldr	r2, [pc, #552]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 800504a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8108 	beq.w	800526a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	2b02      	cmp	r3, #2
 8005060:	f040 80d0 	bne.w	8005204 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005064:	4b83      	ldr	r3, [pc, #524]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f003 0203 	and.w	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d130      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	3b01      	subs	r3, #1
 8005084:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d127      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005096:	429a      	cmp	r2, r3
 8005098:	d11f      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050a4:	2a07      	cmp	r2, #7
 80050a6:	bf14      	ite	ne
 80050a8:	2201      	movne	r2, #1
 80050aa:	2200      	moveq	r2, #0
 80050ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d113      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	3b01      	subs	r3, #1
 80050c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d109      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	3b01      	subs	r3, #1
 80050d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d06e      	beq.n	80051b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	d069      	beq.n	80051b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050e0:	4b64      	ldr	r3, [pc, #400]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050ec:	4b61      	ldr	r3, [pc, #388]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0b7      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050fc:	4b5d      	ldr	r3, [pc, #372]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a5c      	ldr	r2, [pc, #368]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005108:	f7fe fd6e 	bl	8003be8 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7fe fd6a 	bl	8003be8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e0a4      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005122:	4b54      	ldr	r3, [pc, #336]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512e:	4b51      	ldr	r3, [pc, #324]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	4b51      	ldr	r3, [pc, #324]	; (8005278 <HAL_RCC_OscConfig+0x7c8>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800513e:	3a01      	subs	r2, #1
 8005140:	0112      	lsls	r2, r2, #4
 8005142:	4311      	orrs	r1, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005148:	0212      	lsls	r2, r2, #8
 800514a:	4311      	orrs	r1, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005150:	0852      	lsrs	r2, r2, #1
 8005152:	3a01      	subs	r2, #1
 8005154:	0552      	lsls	r2, r2, #21
 8005156:	4311      	orrs	r1, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800515c:	0852      	lsrs	r2, r2, #1
 800515e:	3a01      	subs	r2, #1
 8005160:	0652      	lsls	r2, r2, #25
 8005162:	4311      	orrs	r1, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005168:	0912      	lsrs	r2, r2, #4
 800516a:	0452      	lsls	r2, r2, #17
 800516c:	430a      	orrs	r2, r1
 800516e:	4941      	ldr	r1, [pc, #260]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005174:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3e      	ldr	r2, [pc, #248]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 800517a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005180:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a3b      	ldr	r2, [pc, #236]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800518a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800518c:	f7fe fd2c 	bl	8003be8 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005194:	f7fe fd28 	bl	8003be8 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e062      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a6:	4b33      	ldr	r3, [pc, #204]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051b2:	e05a      	b.n	800526a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e059      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b8:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d152      	bne.n	800526a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051c4:	4b2b      	ldr	r3, [pc, #172]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2a      	ldr	r2, [pc, #168]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051d0:	4b28      	ldr	r3, [pc, #160]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051dc:	f7fe fd04 	bl	8003be8 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fe fd00 	bl	8003be8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e03a      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f6:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x734>
 8005202:	e032      	b.n	800526a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d02d      	beq.n	8005266 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520a:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a19      	ldr	r2, [pc, #100]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005214:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005216:	4b17      	ldr	r3, [pc, #92]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4a13      	ldr	r2, [pc, #76]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005228:	f023 0303 	bic.w	r3, r3, #3
 800522c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005234:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fe fcd3 	bl	8003be8 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005246:	f7fe fccf 	bl	8003be8 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e009      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_OscConfig+0x796>
 8005264:	e001      	b.n	800526a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40021000 	.word	0x40021000
 8005278:	f99d808c 	.word	0xf99d808c

0800527c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0c8      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005290:	4b66      	ldr	r3, [pc, #408]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d910      	bls.n	80052c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b63      	ldr	r3, [pc, #396]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 0207 	bic.w	r2, r3, #7
 80052a6:	4961      	ldr	r1, [pc, #388]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b5f      	ldr	r3, [pc, #380]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0b0      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d04c      	beq.n	8005366 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d4:	4b56      	ldr	r3, [pc, #344]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d121      	bne.n	8005324 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e09e      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ec:	4b50      	ldr	r3, [pc, #320]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d115      	bne.n	8005324 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e092      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005304:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e086      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005314:	4b46      	ldr	r3, [pc, #280]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e07e      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005324:	4b42      	ldr	r3, [pc, #264]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 0203 	bic.w	r2, r3, #3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	493f      	ldr	r1, [pc, #252]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005336:	f7fe fc57 	bl	8003be8 <HAL_GetTick>
 800533a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533c:	e00a      	b.n	8005354 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533e:	f7fe fc53 	bl	8003be8 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	; 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e066      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005354:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 020c 	and.w	r2, r3, #12
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	429a      	cmp	r2, r3
 8005364:	d1eb      	bne.n	800533e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005372:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	492c      	ldr	r1, [pc, #176]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005384:	4b29      	ldr	r3, [pc, #164]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d210      	bcs.n	80053b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b26      	ldr	r3, [pc, #152]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 0207 	bic.w	r2, r3, #7
 800539a:	4924      	ldr	r1, [pc, #144]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b22      	ldr	r3, [pc, #136]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e036      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c0:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4918      	ldr	r1, [pc, #96]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4910      	ldr	r1, [pc, #64]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053f2:	f000 f825 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80053f6:	4601      	mov	r1, r0
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 8005404:	5cd3      	ldrb	r3, [r2, r3]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	fa21 f303 	lsr.w	r3, r1, r3
 800540e:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005412:	4b0a      	ldr	r3, [pc, #40]	; (800543c <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fb96 	bl	8003b48 <HAL_InitTick>
 800541c:	4603      	mov	r3, r0
 800541e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005420:	7afb      	ldrb	r3, [r7, #11]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40022000 	.word	0x40022000
 8005430:	40021000 	.word	0x40021000
 8005434:	0800e6a0 	.word	0x0800e6a0
 8005438:	20000014 	.word	0x20000014
 800543c:	20000018 	.word	0x20000018

08005440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005458:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x34>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b0c      	cmp	r3, #12
 800546c:	d121      	bne.n	80054b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d11e      	bne.n	80054b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005474:	4b33      	ldr	r3, [pc, #204]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005480:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 8005482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e005      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800549c:	4a2a      	ldr	r2, [pc, #168]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10d      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054b0:	e00a      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d102      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b8:	4b24      	ldr	r3, [pc, #144]	; (800554c <HAL_RCC_GetSysClockFreq+0x10c>)
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e004      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054c4:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCC_GetSysClockFreq+0x110>)
 80054c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d133      	bne.n	8005536 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054ce:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d002      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0xa4>
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d003      	beq.n	80054ea <HAL_RCC_GetSysClockFreq+0xaa>
 80054e2:	e005      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_RCC_GetSysClockFreq+0x10c>)
 80054e6:	617b      	str	r3, [r7, #20]
      break;
 80054e8:	e005      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_RCC_GetSysClockFreq+0x110>)
 80054ec:	617b      	str	r3, [r7, #20]
      break;
 80054ee:	e002      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	617b      	str	r3, [r7, #20]
      break;
 80054f4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	3301      	adds	r3, #1
 8005502:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	0a1b      	lsrs	r3, r3, #8
 800550a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	fb02 f203 	mul.w	r2, r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCC_GetSysClockFreq+0x104>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	0e5b      	lsrs	r3, r3, #25
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	3301      	adds	r3, #1
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005536:	69bb      	ldr	r3, [r7, #24]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3724      	adds	r7, #36	; 0x24
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40021000 	.word	0x40021000
 8005548:	0800e6b8 	.word	0x0800e6b8
 800554c:	00f42400 	.word	0x00f42400
 8005550:	007a1200 	.word	0x007a1200

08005554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000014 	.word	0x20000014

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005570:	f7ff fff0 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005574:	4601      	mov	r1, r0
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4a04      	ldr	r2, [pc, #16]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005582:	5cd3      	ldrb	r3, [r2, r3]
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	fa21 f303 	lsr.w	r3, r1, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40021000 	.word	0x40021000
 8005594:	0800e6b0 	.word	0x0800e6b0

08005598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800559c:	f7ff ffda 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 80055a0:	4601      	mov	r1, r0
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	0adb      	lsrs	r3, r3, #11
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	4a04      	ldr	r2, [pc, #16]	; (80055c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40021000 	.word	0x40021000
 80055c0:	0800e6b0 	.word	0x0800e6b0

080055c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055d0:	4b2a      	ldr	r3, [pc, #168]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055dc:	f7ff fa04 	bl	80049e8 <HAL_PWREx_GetVoltageRange>
 80055e0:	6178      	str	r0, [r7, #20]
 80055e2:	e014      	b.n	800560e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055e4:	4b25      	ldr	r3, [pc, #148]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e8:	4a24      	ldr	r2, [pc, #144]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6593      	str	r3, [r2, #88]	; 0x58
 80055f0:	4b22      	ldr	r3, [pc, #136]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055fc:	f7ff f9f4 	bl	80049e8 <HAL_PWREx_GetVoltageRange>
 8005600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005602:	4b1e      	ldr	r3, [pc, #120]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	4a1d      	ldr	r2, [pc, #116]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005614:	d10b      	bne.n	800562e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d919      	bls.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2ba0      	cmp	r3, #160	; 0xa0
 8005620:	d902      	bls.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005622:	2302      	movs	r3, #2
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e013      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005628:	2301      	movs	r3, #1
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e010      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d902      	bls.n	800563a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005634:	2303      	movs	r3, #3
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e00a      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d102      	bne.n	8005646 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005640:	2302      	movs	r3, #2
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	e004      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b70      	cmp	r3, #112	; 0x70
 800564a:	d101      	bne.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800564c:	2301      	movs	r3, #1
 800564e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 0207 	bic.w	r2, r3, #7
 8005658:	4909      	ldr	r1, [pc, #36]	; (8005680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	d001      	beq.n	8005672 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000
 8005680:	40022000 	.word	0x40022000

08005684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800568c:	2300      	movs	r3, #0
 800568e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005690:	2300      	movs	r3, #0
 8005692:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569c:	2b00      	cmp	r3, #0
 800569e:	d03f      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a8:	d01c      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80056aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ae:	d802      	bhi.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00e      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80056b4:	e01f      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80056b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ba:	d003      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80056bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056c0:	d01c      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80056c2:	e018      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056c4:	4b85      	ldr	r3, [pc, #532]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4a84      	ldr	r2, [pc, #528]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056d0:	e015      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3304      	adds	r3, #4
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fab9 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056e2:	e00c      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3320      	adds	r3, #32
 80056e8:	2100      	movs	r1, #0
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fba0 	bl	8005e30 <RCCEx_PLLSAI2_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	74fb      	strb	r3, [r7, #19]
      break;
 80056fa:	e000      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80056fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005704:	4b75      	ldr	r3, [pc, #468]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005712:	4972      	ldr	r1, [pc, #456]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800571a:	e001      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d03f      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005734:	d01c      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800573a:	d802      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005740:	e01f      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005746:	d003      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005748:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800574c:	d01c      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800574e:	e018      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005750:	4b62      	ldr	r3, [pc, #392]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a61      	ldr	r2, [pc, #388]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800575c:	e015      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fa73 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800576e:	e00c      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3320      	adds	r3, #32
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fb5a 	bl	8005e30 <RCCEx_PLLSAI2_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	74fb      	strb	r3, [r7, #19]
      break;
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005790:	4b52      	ldr	r3, [pc, #328]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579e:	494f      	ldr	r1, [pc, #316]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057a6:	e001      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80a0 	beq.w	80058fa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ba:	2300      	movs	r3, #0
 80057bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d4:	4b41      	ldr	r3, [pc, #260]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	4a40      	ldr	r2, [pc, #256]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057de:	6593      	str	r3, [r2, #88]	; 0x58
 80057e0:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ec:	2301      	movs	r3, #1
 80057ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f0:	4b3b      	ldr	r3, [pc, #236]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a3a      	ldr	r2, [pc, #232]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057fc:	f7fe f9f4 	bl	8003be8 <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005802:	e009      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005804:	f7fe f9f0 	bl	8003be8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d902      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	74fb      	strb	r3, [r7, #19]
        break;
 8005816:	e005      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005818:	4b31      	ldr	r3, [pc, #196]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ef      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d15c      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005834:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01f      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	d019      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005848:	4b24      	ldr	r3, [pc, #144]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005854:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	4a20      	ldr	r2, [pc, #128]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800586c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d016      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fe f9af 	bl	8003be8 <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588c:	e00b      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fe f9ab 	bl	8003be8 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d902      	bls.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	74fb      	strb	r3, [r7, #19]
            break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ec      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ca:	4904      	ldr	r1, [pc, #16]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058d2:	e009      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058d4:	7cfb      	ldrb	r3, [r7, #19]
 80058d6:	74bb      	strb	r3, [r7, #18]
 80058d8:	e006      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e8:	7c7b      	ldrb	r3, [r7, #17]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d105      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ee:	4b9e      	ldr	r3, [pc, #632]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	4a9d      	ldr	r2, [pc, #628]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005906:	4b98      	ldr	r3, [pc, #608]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f023 0203 	bic.w	r2, r3, #3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	4994      	ldr	r1, [pc, #592]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005928:	4b8f      	ldr	r3, [pc, #572]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592e:	f023 020c 	bic.w	r2, r3, #12
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	498c      	ldr	r1, [pc, #560]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800594a:	4b87      	ldr	r3, [pc, #540]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	4983      	ldr	r1, [pc, #524]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800596c:	4b7e      	ldr	r3, [pc, #504]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597a:	497b      	ldr	r1, [pc, #492]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800598e:	4b76      	ldr	r3, [pc, #472]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599c:	4972      	ldr	r1, [pc, #456]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059b0:	4b6d      	ldr	r3, [pc, #436]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	496a      	ldr	r1, [pc, #424]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059d2:	4b65      	ldr	r3, [pc, #404]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e0:	4961      	ldr	r1, [pc, #388]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059f4:	4b5c      	ldr	r3, [pc, #368]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a02:	4959      	ldr	r1, [pc, #356]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a16:	4b54      	ldr	r3, [pc, #336]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	4950      	ldr	r1, [pc, #320]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a38:	4b4b      	ldr	r3, [pc, #300]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	4948      	ldr	r1, [pc, #288]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a5a:	4b43      	ldr	r3, [pc, #268]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a68:	493f      	ldr	r1, [pc, #252]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d028      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a7c:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8a:	4937      	ldr	r1, [pc, #220]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a9c:	4b32      	ldr	r3, [pc, #200]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a31      	ldr	r2, [pc, #196]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aa6:	60d3      	str	r3, [r2, #12]
 8005aa8:	e011      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab2:	d10c      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	2101      	movs	r1, #1
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f8c8 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d028      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ada:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	491f      	ldr	r1, [pc, #124]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af8:	d106      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b04:	60d3      	str	r3, [r2, #12]
 8005b06:	e011      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b10:	d10c      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3304      	adds	r3, #4
 8005b16:	2101      	movs	r1, #1
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 f899 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b22:	7cfb      	ldrb	r3, [r7, #19]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005b28:	7cfb      	ldrb	r3, [r7, #19]
 8005b2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d02b      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b46:	4908      	ldr	r1, [pc, #32]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b56:	d109      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a02      	ldr	r2, [pc, #8]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b62:	60d3      	str	r3, [r2, #12]
 8005b64:	e014      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005b66:	bf00      	nop
 8005b68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 f867 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02f      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005baa:	4928      	ldr	r1, [pc, #160]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bba:	d10d      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f844 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d014      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	74bb      	strb	r3, [r7, #18]
 8005bd6:	e011      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3320      	adds	r3, #32
 8005be6:	2102      	movs	r1, #2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f921 	bl	8005e30 <RCCEx_PLLSAI2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bf2:	7cfb      	ldrb	r3, [r7, #19]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c16:	490d      	ldr	r1, [pc, #52]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c2a:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c3a:	4904      	ldr	r1, [pc, #16]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c42:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40021000 	.word	0x40021000

08005c50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c5e:	4b73      	ldr	r3, [pc, #460]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d018      	beq.n	8005c9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c6a:	4b70      	ldr	r3, [pc, #448]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0203 	and.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d10d      	bne.n	8005c96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c82:	4b6a      	ldr	r3, [pc, #424]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
       ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d044      	beq.n	8005d20 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
 8005c9a:	e041      	b.n	8005d20 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d00c      	beq.n	8005cbe <RCCEx_PLLSAI1_Config+0x6e>
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d013      	beq.n	8005cd0 <RCCEx_PLLSAI1_Config+0x80>
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d120      	bne.n	8005cee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cac:	4b5f      	ldr	r3, [pc, #380]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11d      	bne.n	8005cf4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cbc:	e01a      	b.n	8005cf4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cbe:	4b5b      	ldr	r3, [pc, #364]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d116      	bne.n	8005cf8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cce:	e013      	b.n	8005cf8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cd0:	4b56      	ldr	r3, [pc, #344]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10f      	bne.n	8005cfc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cdc:	4b53      	ldr	r3, [pc, #332]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cec:	e006      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf2:	e004      	b.n	8005cfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005cfc:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10d      	bne.n	8005d20 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d04:	4b49      	ldr	r3, [pc, #292]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	4944      	ldr	r1, [pc, #272]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d17d      	bne.n	8005e22 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d26:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a40      	ldr	r2, [pc, #256]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d32:	f7fd ff59 	bl	8003be8 <HAL_GetTick>
 8005d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d38:	e009      	b.n	8005d4e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d3a:	f7fd ff55 	bl	8003be8 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d902      	bls.n	8005d4e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	73fb      	strb	r3, [r7, #15]
        break;
 8005d4c:	e005      	b.n	8005d5a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d4e:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ef      	bne.n	8005d3a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d160      	bne.n	8005e22 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d111      	bne.n	8005d8a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d66:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6892      	ldr	r2, [r2, #8]
 8005d76:	0211      	lsls	r1, r2, #8
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68d2      	ldr	r2, [r2, #12]
 8005d7c:	0912      	lsrs	r2, r2, #4
 8005d7e:	0452      	lsls	r2, r2, #17
 8005d80:	430a      	orrs	r2, r1
 8005d82:	492a      	ldr	r1, [pc, #168]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	610b      	str	r3, [r1, #16]
 8005d88:	e027      	b.n	8005dda <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d112      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d90:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6892      	ldr	r2, [r2, #8]
 8005da0:	0211      	lsls	r1, r2, #8
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6912      	ldr	r2, [r2, #16]
 8005da6:	0852      	lsrs	r2, r2, #1
 8005da8:	3a01      	subs	r2, #1
 8005daa:	0552      	lsls	r2, r2, #21
 8005dac:	430a      	orrs	r2, r1
 8005dae:	491f      	ldr	r1, [pc, #124]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	610b      	str	r3, [r1, #16]
 8005db4:	e011      	b.n	8005dda <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db6:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6892      	ldr	r2, [r2, #8]
 8005dc6:	0211      	lsls	r1, r2, #8
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6952      	ldr	r2, [r2, #20]
 8005dcc:	0852      	lsrs	r2, r2, #1
 8005dce:	3a01      	subs	r2, #1
 8005dd0:	0652      	lsls	r2, r2, #25
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	4915      	ldr	r1, [pc, #84]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a13      	ldr	r2, [pc, #76]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005de4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de6:	f7fd feff 	bl	8003be8 <HAL_GetTick>
 8005dea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dec:	e009      	b.n	8005e02 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dee:	f7fd fefb 	bl	8003be8 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d902      	bls.n	8005e02 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	73fb      	strb	r3, [r7, #15]
          break;
 8005e00:	e005      	b.n	8005e0e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e02:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0ef      	beq.n	8005dee <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	4903      	ldr	r1, [pc, #12]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40021000 	.word	0x40021000

08005e30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e3e:	4b68      	ldr	r3, [pc, #416]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d018      	beq.n	8005e7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e4a:	4b65      	ldr	r3, [pc, #404]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0203 	and.w	r2, r3, #3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d10d      	bne.n	8005e76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e62:	4b5f      	ldr	r3, [pc, #380]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	091b      	lsrs	r3, r3, #4
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
       ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d044      	beq.n	8005f00 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	73fb      	strb	r3, [r7, #15]
 8005e7a:	e041      	b.n	8005f00 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d00c      	beq.n	8005e9e <RCCEx_PLLSAI2_Config+0x6e>
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d013      	beq.n	8005eb0 <RCCEx_PLLSAI2_Config+0x80>
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d120      	bne.n	8005ece <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e8c:	4b54      	ldr	r3, [pc, #336]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11d      	bne.n	8005ed4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e9c:	e01a      	b.n	8005ed4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e9e:	4b50      	ldr	r3, [pc, #320]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d116      	bne.n	8005ed8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eae:	e013      	b.n	8005ed8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005eb0:	4b4b      	ldr	r3, [pc, #300]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10f      	bne.n	8005edc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ebc:	4b48      	ldr	r3, [pc, #288]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ecc:	e006      	b.n	8005edc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed2:	e004      	b.n	8005ede <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005ed4:	bf00      	nop
 8005ed6:	e002      	b.n	8005ede <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005ed8:	bf00      	nop
 8005eda:	e000      	b.n	8005ede <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005edc:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10d      	bne.n	8005f00 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ee4:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	4939      	ldr	r1, [pc, #228]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d167      	bne.n	8005fd6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f06:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a35      	ldr	r2, [pc, #212]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f12:	f7fd fe69 	bl	8003be8 <HAL_GetTick>
 8005f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f18:	e009      	b.n	8005f2e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f1a:	f7fd fe65 	bl	8003be8 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d902      	bls.n	8005f2e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	73fb      	strb	r3, [r7, #15]
        break;
 8005f2c:	e005      	b.n	8005f3a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f2e:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ef      	bne.n	8005f1a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d14a      	bne.n	8005fd6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d111      	bne.n	8005f6a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f46:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6892      	ldr	r2, [r2, #8]
 8005f56:	0211      	lsls	r1, r2, #8
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68d2      	ldr	r2, [r2, #12]
 8005f5c:	0912      	lsrs	r2, r2, #4
 8005f5e:	0452      	lsls	r2, r2, #17
 8005f60:	430a      	orrs	r2, r1
 8005f62:	491f      	ldr	r1, [pc, #124]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	614b      	str	r3, [r1, #20]
 8005f68:	e011      	b.n	8005f8e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6892      	ldr	r2, [r2, #8]
 8005f7a:	0211      	lsls	r1, r2, #8
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6912      	ldr	r2, [r2, #16]
 8005f80:	0852      	lsrs	r2, r2, #1
 8005f82:	3a01      	subs	r2, #1
 8005f84:	0652      	lsls	r2, r2, #25
 8005f86:	430a      	orrs	r2, r1
 8005f88:	4915      	ldr	r1, [pc, #84]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9a:	f7fd fe25 	bl	8003be8 <HAL_GetTick>
 8005f9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fa0:	e009      	b.n	8005fb6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fa2:	f7fd fe21 	bl	8003be8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d902      	bls.n	8005fb6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	73fb      	strb	r3, [r7, #15]
          break;
 8005fb4:	e005      	b.n	8005fc2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0ef      	beq.n	8005fa2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	4903      	ldr	r1, [pc, #12]	; (8005fe0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40021000 	.word	0x40021000

08005fe4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d06c      	beq.n	80060d0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fd f8f8 	bl	8003200 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	22ca      	movs	r2, #202	; 0xca
 800601e:	625a      	str	r2, [r3, #36]	; 0x24
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2253      	movs	r2, #83	; 0x53
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f87c 	bl	8006126 <RTC_EnterInitMode>
 800602e:	4603      	mov	r3, r0
 8006030:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d14b      	bne.n	80060d0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800604a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6899      	ldr	r1, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6919      	ldr	r1, [r3, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	041a      	lsls	r2, r3, #16
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f87f 	bl	800618c <RTC_ExitInitMode>
 800608e:	4603      	mov	r3, r0
 8006090:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d11b      	bne.n	80060d0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0203 	bic.w	r2, r2, #3
 80060a6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	22ff      	movs	r2, #255	; 0xff
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060f0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80060f2:	f7fd fd79 	bl	8003be8 <HAL_GetTick>
 80060f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060f8:	e009      	b.n	800610e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060fa:	f7fd fd75 	bl	8003be8 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006108:	d901      	bls.n	800610e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e007      	b.n	800611e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ee      	beq.n	80060fa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d120      	bne.n	8006182 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f04f 32ff 	mov.w	r2, #4294967295
 8006148:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800614a:	f7fd fd4d 	bl	8003be8 <HAL_GetTick>
 800614e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006150:	e00d      	b.n	800616e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006152:	f7fd fd49 	bl	8003be8 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006160:	d905      	bls.n	800616e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2203      	movs	r2, #3
 800616a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <RTC_EnterInitMode+0x5c>
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b03      	cmp	r3, #3
 8006180:	d1e7      	bne.n	8006152 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006198:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <RTC_ExitInitMode+0x78>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	4a19      	ldr	r2, [pc, #100]	; (8006204 <RTC_ExitInitMode+0x78>)
 800619e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80061a4:	4b17      	ldr	r3, [pc, #92]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10c      	bne.n	80061ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff ff92 	bl	80060da <HAL_RTC_WaitForSynchro>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01e      	beq.n	80061fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2203      	movs	r2, #3
 80061c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	73fb      	strb	r3, [r7, #15]
 80061c8:	e017      	b.n	80061fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061ca:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061d0:	f023 0320 	bic.w	r3, r3, #32
 80061d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff ff7f 	bl	80060da <HAL_RTC_WaitForSynchro>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2203      	movs	r2, #3
 80061e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	4a04      	ldr	r2, [pc, #16]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40002800 	.word	0x40002800

08006208 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e095      	b.n	8006346 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d108      	bne.n	8006234 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800622a:	d009      	beq.n	8006240 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	61da      	str	r2, [r3, #28]
 8006232:	e005      	b.n	8006240 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fd f82a 	bl	80032b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006276:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006280:	d902      	bls.n	8006288 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e002      	b.n	800628e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800628c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006296:	d007      	beq.n	80062a8 <HAL_SPI_Init+0xa0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	ea42 0103 	orr.w	r1, r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	f003 0204 	and.w	r2, r3, #4
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006324:	ea42 0103 	orr.w	r1, r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b088      	sub	sp, #32
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_SPI_Transmit+0x22>
 800636c:	2302      	movs	r3, #2
 800636e:	e158      	b.n	8006622 <HAL_SPI_Transmit+0x2d4>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006378:	f7fd fc36 	bl	8003be8 <HAL_GetTick>
 800637c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d002      	beq.n	8006394 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800638e:	2302      	movs	r3, #2
 8006390:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006392:	e13d      	b.n	8006610 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_Transmit+0x52>
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d102      	bne.n	80063a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063a4:	e134      	b.n	8006610 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2203      	movs	r2, #3
 80063aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	88fa      	ldrh	r2, [r7, #6]
 80063be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f0:	d10f      	bne.n	8006412 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006400:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006410:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d007      	beq.n	8006430 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800642e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006438:	d94b      	bls.n	80064d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_SPI_Transmit+0xfa>
 8006442:	8afb      	ldrh	r3, [r7, #22]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d13e      	bne.n	80064c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	881a      	ldrh	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	1c9a      	adds	r2, r3, #2
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800646c:	e02b      	b.n	80064c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d112      	bne.n	80064a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	881a      	ldrh	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648c:	1c9a      	adds	r2, r3, #2
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064a0:	e011      	b.n	80064c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064a2:	f7fd fba1 	bl	8003be8 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d803      	bhi.n	80064ba <HAL_SPI_Transmit+0x16c>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d102      	bne.n	80064c0 <HAL_SPI_Transmit+0x172>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d102      	bne.n	80064c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064c4:	e0a4      	b.n	8006610 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ce      	bne.n	800646e <HAL_SPI_Transmit+0x120>
 80064d0:	e07c      	b.n	80065cc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_Transmit+0x192>
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d170      	bne.n	80065c2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d912      	bls.n	8006510 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	881a      	ldrh	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	1c9a      	adds	r2, r3, #2
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b02      	subs	r3, #2
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800650e:	e058      	b.n	80065c2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006536:	e044      	b.n	80065c2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b02      	cmp	r3, #2
 8006544:	d12b      	bne.n	800659e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	d912      	bls.n	8006576 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	1c9a      	adds	r2, r3, #2
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b02      	subs	r3, #2
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006574:	e025      	b.n	80065c2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	330c      	adds	r3, #12
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800659c:	e011      	b.n	80065c2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800659e:	f7fd fb23 	bl	8003be8 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d803      	bhi.n	80065b6 <HAL_SPI_Transmit+0x268>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d102      	bne.n	80065bc <HAL_SPI_Transmit+0x26e>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065c0:	e026      	b.n	8006610 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1b5      	bne.n	8006538 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fb53 	bl	8006c7c <SPI_EndRxTxTransaction>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e000      	b.n	8006610 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800660e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006620:	7ffb      	ldrb	r3, [r7, #31]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b08a      	sub	sp, #40	; 0x28
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006638:	2301      	movs	r3, #1
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_SPI_TransmitReceive+0x26>
 800664c:	2302      	movs	r3, #2
 800664e:	e1fb      	b.n	8006a48 <HAL_SPI_TransmitReceive+0x41e>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006658:	f7fd fac6 	bl	8003be8 <HAL_GetTick>
 800665c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006664:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800666c:	887b      	ldrh	r3, [r7, #2]
 800666e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006674:	7efb      	ldrb	r3, [r7, #27]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d00e      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x6e>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006680:	d106      	bne.n	8006690 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d102      	bne.n	8006690 <HAL_SPI_TransmitReceive+0x66>
 800668a:	7efb      	ldrb	r3, [r7, #27]
 800668c:	2b04      	cmp	r3, #4
 800668e:	d003      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006690:	2302      	movs	r3, #2
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006696:	e1cd      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_SPI_TransmitReceive+0x80>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_SPI_TransmitReceive+0x80>
 80066a4:	887b      	ldrh	r3, [r7, #2]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80066b0:	e1c0      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d003      	beq.n	80066c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2205      	movs	r2, #5
 80066c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	887a      	ldrh	r2, [r7, #2]
 80066d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	887a      	ldrh	r2, [r7, #2]
 80066de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	887a      	ldrh	r2, [r7, #2]
 80066ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	887a      	ldrh	r2, [r7, #2]
 80066f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006708:	d802      	bhi.n	8006710 <HAL_SPI_TransmitReceive+0xe6>
 800670a:	8a3b      	ldrh	r3, [r7, #16]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d908      	bls.n	8006722 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800671e:	605a      	str	r2, [r3, #4]
 8006720:	e007      	b.n	8006732 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006730:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d007      	beq.n	8006750 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006758:	d97c      	bls.n	8006854 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_SPI_TransmitReceive+0x13e>
 8006762:	8a7b      	ldrh	r3, [r7, #18]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d169      	bne.n	800683c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	881a      	ldrh	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	1c9a      	adds	r2, r3, #2
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800678c:	e056      	b.n	800683c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d11b      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x1aa>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d016      	beq.n	80067d4 <HAL_SPI_TransmitReceive+0x1aa>
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d113      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	881a      	ldrh	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	1c9a      	adds	r2, r3, #2
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d11c      	bne.n	800681c <HAL_SPI_TransmitReceive+0x1f2>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	b292      	uxth	r2, r2
 80067fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	1c9a      	adds	r2, r3, #2
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006818:	2301      	movs	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800681c:	f7fd f9e4 	bl	8003be8 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006828:	429a      	cmp	r2, r3
 800682a:	d807      	bhi.n	800683c <HAL_SPI_TransmitReceive+0x212>
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d003      	beq.n	800683c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800683a:	e0fb      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1a3      	bne.n	800678e <HAL_SPI_TransmitReceive+0x164>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d19d      	bne.n	800678e <HAL_SPI_TransmitReceive+0x164>
 8006852:	e0df      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_SPI_TransmitReceive+0x23a>
 800685c:	8a7b      	ldrh	r3, [r7, #18]
 800685e:	2b01      	cmp	r3, #1
 8006860:	f040 80cb 	bne.w	80069fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b01      	cmp	r3, #1
 800686c:	d912      	bls.n	8006894 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	881a      	ldrh	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	1c9a      	adds	r2, r3, #2
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b02      	subs	r3, #2
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006892:	e0b2      	b.n	80069fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	330c      	adds	r3, #12
 800689e:	7812      	ldrb	r2, [r2, #0]
 80068a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ba:	e09e      	b.n	80069fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d134      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x30a>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d02f      	beq.n	8006934 <HAL_SPI_TransmitReceive+0x30a>
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d12c      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d912      	bls.n	800690a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	881a      	ldrh	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	1c9a      	adds	r2, r3, #2
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b02      	subs	r3, #2
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006908:	e012      	b.n	8006930 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	330c      	adds	r3, #12
 8006914:	7812      	ldrb	r2, [r2, #0]
 8006916:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b01      	cmp	r3, #1
 8006940:	d148      	bne.n	80069d4 <HAL_SPI_TransmitReceive+0x3aa>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d042      	beq.n	80069d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b01      	cmp	r3, #1
 8006958:	d923      	bls.n	80069a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	b292      	uxth	r2, r2
 8006966:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	1c9a      	adds	r2, r3, #2
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b02      	subs	r3, #2
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d81f      	bhi.n	80069d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	e016      	b.n	80069d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f103 020c 	add.w	r2, r3, #12
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069d0:	2301      	movs	r3, #1
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069d4:	f7fd f908 	bl	8003be8 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d803      	bhi.n	80069ec <HAL_SPI_TransmitReceive+0x3c2>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x3c8>
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80069f8:	e01c      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f47f af5b 	bne.w	80068bc <HAL_SPI_TransmitReceive+0x292>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f47f af54 	bne.w	80068bc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f92f 	bl	8006c7c <SPI_EndRxTxTransaction>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d006      	beq.n	8006a32 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	661a      	str	r2, [r3, #96]	; 0x60
 8006a30:	e000      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3728      	adds	r7, #40	; 0x28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a60:	f7fd f8c2 	bl	8003be8 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	1a9b      	subs	r3, r3, r2
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a70:	f7fd f8ba 	bl	8003be8 <HAL_GetTick>
 8006a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a76:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	015b      	lsls	r3, r3, #5
 8006a7c:	0d1b      	lsrs	r3, r3, #20
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	fb02 f303 	mul.w	r3, r2, r3
 8006a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a86:	e054      	b.n	8006b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	d050      	beq.n	8006b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a90:	f7fd f8aa 	bl	8003be8 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d902      	bls.n	8006aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d13d      	bne.n	8006b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006abe:	d111      	bne.n	8006ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac8:	d004      	beq.n	8006ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad2:	d107      	bne.n	8006ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aec:	d10f      	bne.n	8006b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e017      	b.n	8006b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	bf0c      	ite	eq
 8006b42:	2301      	moveq	r3, #1
 8006b44:	2300      	movne	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d19b      	bne.n	8006a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3720      	adds	r7, #32
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000014 	.word	0x20000014

08006b60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b6e:	f7fd f83b 	bl	8003be8 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b7e:	f7fd f833 	bl	8003be8 <HAL_GetTick>
 8006b82:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b84:	4b3c      	ldr	r3, [pc, #240]	; (8006c78 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00da      	lsls	r2, r3, #3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	0d1b      	lsrs	r3, r3, #20
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	fb02 f303 	mul.w	r3, r2, r3
 8006b9a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b9c:	e05f      	b.n	8006c5e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ba4:	d106      	bne.n	8006bb4 <SPI_WaitFifoStateUntilTimeout+0x54>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d050      	beq.n	8006c5e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bbc:	f7fd f814 	bl	8003be8 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d902      	bls.n	8006bd2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d13d      	bne.n	8006c4e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006be0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bea:	d111      	bne.n	8006c10 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf4:	d004      	beq.n	8006c00 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bfe:	d107      	bne.n	8006c10 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c18:	d10f      	bne.n	8006c3a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e010      	b.n	8006c70 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4013      	ands	r3, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d197      	bne.n	8006b9e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3720      	adds	r7, #32
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000014 	.word	0x20000014

08006c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f7ff ff63 	bl	8006b60 <SPI_WaitFifoStateUntilTimeout>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca4:	f043 0220 	orr.w	r2, r3, #32
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e027      	b.n	8006d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2180      	movs	r1, #128	; 0x80
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fec8 	bl	8006a50 <SPI_WaitFlagStateUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cca:	f043 0220 	orr.w	r2, r3, #32
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e014      	b.n	8006d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff ff3c 	bl	8006b60 <SPI_WaitFifoStateUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf2:	f043 0220 	orr.w	r2, r3, #32
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e000      	b.n	8006d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e049      	b.n	8006dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fc fd06 	bl	8003740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f000 fb0e 	bl	8007368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d001      	beq.n	8006dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e047      	b.n	8006e60 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <HAL_TIM_Base_Start+0xb4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01d      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d018      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1f      	ldr	r2, [pc, #124]	; (8006e70 <HAL_TIM_Base_Start+0xb8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <HAL_TIM_Base_Start+0xbc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1c      	ldr	r2, [pc, #112]	; (8006e78 <HAL_TIM_Base_Start+0xc0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <HAL_TIM_Base_Start+0xc4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a19      	ldr	r2, [pc, #100]	; (8006e80 <HAL_TIM_Base_Start+0xc8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d115      	bne.n	8006e4a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <HAL_TIM_Base_Start+0xcc>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b06      	cmp	r3, #6
 8006e2e:	d015      	beq.n	8006e5c <HAL_TIM_Base_Start+0xa4>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e36:	d011      	beq.n	8006e5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e48:	e008      	b.n	8006e5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e000      	b.n	8006e5e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40000c00 	.word	0x40000c00
 8006e7c:	40013400 	.word	0x40013400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	00010007 	.word	0x00010007

08006e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d001      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e04f      	b.n	8006f40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <HAL_TIM_Base_Start_IT+0xc4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01d      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0x76>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eca:	d018      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0x76>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d013      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0x76>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <HAL_TIM_Base_Start_IT+0xcc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00e      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0x76>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1c      	ldr	r2, [pc, #112]	; (8006f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d009      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0x76>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0x76>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d115      	bne.n	8006f2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f06:	4013      	ands	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b06      	cmp	r3, #6
 8006f0e:	d015      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0xb4>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f16:	d011      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f28:	e008      	b.n	8006f3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 0201 	orr.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	e000      	b.n	8006f3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	40012c00 	.word	0x40012c00
 8006f50:	40000400 	.word	0x40000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	40000c00 	.word	0x40000c00
 8006f5c:	40013400 	.word	0x40013400
 8006f60:	40014000 	.word	0x40014000
 8006f64:	00010007 	.word	0x00010007

08006f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d122      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d11b      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0202 	mvn.w	r2, #2
 8006f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f9be 	bl	800732c <HAL_TIM_IC_CaptureCallback>
 8006fb0:	e005      	b.n	8006fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9b0 	bl	8007318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f9c1 	bl	8007340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d122      	bne.n	8007018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d11b      	bne.n	8007018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0204 	mvn.w	r2, #4
 8006fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f994 	bl	800732c <HAL_TIM_IC_CaptureCallback>
 8007004:	e005      	b.n	8007012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f986 	bl	8007318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f997 	bl	8007340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b08      	cmp	r3, #8
 8007024:	d122      	bne.n	800706c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b08      	cmp	r3, #8
 8007032:	d11b      	bne.n	800706c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0208 	mvn.w	r2, #8
 800703c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2204      	movs	r2, #4
 8007042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f96a 	bl	800732c <HAL_TIM_IC_CaptureCallback>
 8007058:	e005      	b.n	8007066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f95c 	bl	8007318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f96d 	bl	8007340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b10      	cmp	r3, #16
 8007078:	d122      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b10      	cmp	r3, #16
 8007086:	d11b      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0210 	mvn.w	r2, #16
 8007090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2208      	movs	r2, #8
 8007096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f940 	bl	800732c <HAL_TIM_IC_CaptureCallback>
 80070ac:	e005      	b.n	80070ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f932 	bl	8007318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f943 	bl	8007340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d10e      	bne.n	80070ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d107      	bne.n	80070ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0201 	mvn.w	r2, #1
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fb fdfa 	bl	8002ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d10e      	bne.n	8007118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007104:	2b80      	cmp	r3, #128	; 0x80
 8007106:	d107      	bne.n	8007118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 faee 	bl	80076f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007126:	d10e      	bne.n	8007146 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b80      	cmp	r3, #128	; 0x80
 8007134:	d107      	bne.n	8007146 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800713e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fae1 	bl	8007708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d10e      	bne.n	8007172 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d107      	bne.n	8007172 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800716a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8f1 	bl	8007354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b20      	cmp	r3, #32
 800717e:	d10e      	bne.n	800719e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b20      	cmp	r3, #32
 800718c:	d107      	bne.n	800719e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f06f 0220 	mvn.w	r2, #32
 8007196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 faa1 	bl	80076e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_TIM_ConfigClockSource+0x18>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e0a8      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x16a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d067      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0x124>
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d80b      	bhi.n	8007216 <HAL_TIM_ConfigClockSource+0x70>
 80071fe:	2b10      	cmp	r3, #16
 8007200:	d073      	beq.n	80072ea <HAL_TIM_ConfigClockSource+0x144>
 8007202:	2b10      	cmp	r3, #16
 8007204:	d802      	bhi.n	800720c <HAL_TIM_ConfigClockSource+0x66>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d06f      	beq.n	80072ea <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800720a:	e078      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800720c:	2b20      	cmp	r3, #32
 800720e:	d06c      	beq.n	80072ea <HAL_TIM_ConfigClockSource+0x144>
 8007210:	2b30      	cmp	r3, #48	; 0x30
 8007212:	d06a      	beq.n	80072ea <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007214:	e073      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007216:	2b70      	cmp	r3, #112	; 0x70
 8007218:	d00d      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x90>
 800721a:	2b70      	cmp	r3, #112	; 0x70
 800721c:	d804      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x82>
 800721e:	2b50      	cmp	r3, #80	; 0x50
 8007220:	d033      	beq.n	800728a <HAL_TIM_ConfigClockSource+0xe4>
 8007222:	2b60      	cmp	r3, #96	; 0x60
 8007224:	d041      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007226:	e06a      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722c:	d066      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0x156>
 800722e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007232:	d017      	beq.n	8007264 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007234:	e063      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6899      	ldr	r1, [r3, #8]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f000 f9a3 	bl	8007590 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007258:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	609a      	str	r2, [r3, #8]
      break;
 8007262:	e04c      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	6899      	ldr	r1, [r3, #8]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f000 f98c 	bl	8007590 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007286:	609a      	str	r2, [r3, #8]
      break;
 8007288:	e039      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6859      	ldr	r1, [r3, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	461a      	mov	r2, r3
 8007298:	f000 f900 	bl	800749c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2150      	movs	r1, #80	; 0x50
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f959 	bl	800755a <TIM_ITRx_SetConfig>
      break;
 80072a8:	e029      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6859      	ldr	r1, [r3, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f000 f91f 	bl	80074fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2160      	movs	r1, #96	; 0x60
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f949 	bl	800755a <TIM_ITRx_SetConfig>
      break;
 80072c8:	e019      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6859      	ldr	r1, [r3, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f000 f8e0 	bl	800749c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f939 	bl	800755a <TIM_ITRx_SetConfig>
      break;
 80072e8:	e009      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f000 f930 	bl	800755a <TIM_ITRx_SetConfig>
        break;
 80072fa:	e000      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x158>
      break;
 80072fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a40      	ldr	r2, [pc, #256]	; (800747c <TIM_Base_SetConfig+0x114>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <TIM_Base_SetConfig+0x40>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007386:	d00f      	beq.n	80073a8 <TIM_Base_SetConfig+0x40>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a3d      	ldr	r2, [pc, #244]	; (8007480 <TIM_Base_SetConfig+0x118>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00b      	beq.n	80073a8 <TIM_Base_SetConfig+0x40>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a3c      	ldr	r2, [pc, #240]	; (8007484 <TIM_Base_SetConfig+0x11c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d007      	beq.n	80073a8 <TIM_Base_SetConfig+0x40>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a3b      	ldr	r2, [pc, #236]	; (8007488 <TIM_Base_SetConfig+0x120>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_Base_SetConfig+0x40>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a3a      	ldr	r2, [pc, #232]	; (800748c <TIM_Base_SetConfig+0x124>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d108      	bne.n	80073ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a2f      	ldr	r2, [pc, #188]	; (800747c <TIM_Base_SetConfig+0x114>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01f      	beq.n	8007402 <TIM_Base_SetConfig+0x9a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c8:	d01b      	beq.n	8007402 <TIM_Base_SetConfig+0x9a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a2c      	ldr	r2, [pc, #176]	; (8007480 <TIM_Base_SetConfig+0x118>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d017      	beq.n	8007402 <TIM_Base_SetConfig+0x9a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a2b      	ldr	r2, [pc, #172]	; (8007484 <TIM_Base_SetConfig+0x11c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d013      	beq.n	8007402 <TIM_Base_SetConfig+0x9a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <TIM_Base_SetConfig+0x120>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00f      	beq.n	8007402 <TIM_Base_SetConfig+0x9a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a29      	ldr	r2, [pc, #164]	; (800748c <TIM_Base_SetConfig+0x124>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00b      	beq.n	8007402 <TIM_Base_SetConfig+0x9a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a28      	ldr	r2, [pc, #160]	; (8007490 <TIM_Base_SetConfig+0x128>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d007      	beq.n	8007402 <TIM_Base_SetConfig+0x9a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a27      	ldr	r2, [pc, #156]	; (8007494 <TIM_Base_SetConfig+0x12c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <TIM_Base_SetConfig+0x9a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a26      	ldr	r2, [pc, #152]	; (8007498 <TIM_Base_SetConfig+0x130>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d108      	bne.n	8007414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	4313      	orrs	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a10      	ldr	r2, [pc, #64]	; (800747c <TIM_Base_SetConfig+0x114>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00f      	beq.n	8007460 <TIM_Base_SetConfig+0xf8>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a12      	ldr	r2, [pc, #72]	; (800748c <TIM_Base_SetConfig+0x124>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00b      	beq.n	8007460 <TIM_Base_SetConfig+0xf8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a11      	ldr	r2, [pc, #68]	; (8007490 <TIM_Base_SetConfig+0x128>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d007      	beq.n	8007460 <TIM_Base_SetConfig+0xf8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a10      	ldr	r2, [pc, #64]	; (8007494 <TIM_Base_SetConfig+0x12c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_Base_SetConfig+0xf8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a0f      	ldr	r2, [pc, #60]	; (8007498 <TIM_Base_SetConfig+0x130>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d103      	bne.n	8007468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	615a      	str	r2, [r3, #20]
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800
 8007488:	40000c00 	.word	0x40000c00
 800748c:	40013400 	.word	0x40013400
 8007490:	40014000 	.word	0x40014000
 8007494:	40014400 	.word	0x40014400
 8007498:	40014800 	.word	0x40014800

0800749c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f023 0201 	bic.w	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f023 030a 	bic.w	r3, r3, #10
 80074d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b087      	sub	sp, #28
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f023 0210 	bic.w	r2, r3, #16
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	031b      	lsls	r3, r3, #12
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4313      	orrs	r3, r2
 8007540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	f043 0307 	orr.w	r3, r3, #7
 800757c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	609a      	str	r2, [r3, #8]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	021a      	lsls	r2, r3, #8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	609a      	str	r2, [r3, #8]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d101      	bne.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e068      	b.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a2e      	ldr	r2, [pc, #184]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2d      	ldr	r2, [pc, #180]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d108      	bne.n	800762e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007622:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007634:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d01d      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765a:	d018      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d013      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00e      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d009      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a13      	ldr	r2, [pc, #76]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d004      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a14      	ldr	r2, [pc, #80]	; (80076dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d10c      	bne.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4313      	orrs	r3, r2
 800769e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40012c00 	.word	0x40012c00
 80076cc:	40013400 	.word	0x40013400
 80076d0:	40000400 	.word	0x40000400
 80076d4:	40000800 	.word	0x40000800
 80076d8:	40000c00 	.word	0x40000c00
 80076dc:	40014000 	.word	0x40014000

080076e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e040      	b.n	80077b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fc f8e4 	bl	800390c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2224      	movs	r2, #36	; 0x24
 8007748:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fabe 	bl	8007cdc <UART_SetConfig>
 8007760:	4603      	mov	r3, r0
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e022      	b.n	80077b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fd3c 	bl	80081f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fdc3 	bl	8008334 <UART_CheckIdleState>
 80077ae:	4603      	mov	r3, r0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af02      	add	r7, sp, #8
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	4613      	mov	r3, r2
 80077c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	f040 8081 	bne.w	80078d4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <HAL_UART_Transmit+0x26>
 80077d8:	88fb      	ldrh	r3, [r7, #6]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e079      	b.n	80078d6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Transmit+0x38>
 80077ec:	2302      	movs	r3, #2
 80077ee:	e072      	b.n	80078d6 <HAL_UART_Transmit+0x11e>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2221      	movs	r2, #33	; 0x21
 8007802:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007804:	f7fc f9f0 	bl	8003be8 <HAL_GetTick>
 8007808:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	88fa      	ldrh	r2, [r7, #6]
 800780e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007822:	d108      	bne.n	8007836 <HAL_UART_Transmit+0x7e>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d104      	bne.n	8007836 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	e003      	b.n	800783e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007846:	e02d      	b.n	80078a4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2200      	movs	r2, #0
 8007850:	2180      	movs	r1, #128	; 0x80
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fdb3 	bl	80083be <UART_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e039      	b.n	80078d6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10b      	bne.n	8007880 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007874:	b292      	uxth	r2, r2
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	3302      	adds	r3, #2
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	e008      	b.n	8007892 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	b292      	uxth	r2, r2
 800788a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	3301      	adds	r3, #1
 8007890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1cb      	bne.n	8007848 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2200      	movs	r2, #0
 80078b8:	2140      	movs	r1, #64	; 0x40
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fd7f 	bl	80083be <UART_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e005      	b.n	80078d6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2220      	movs	r2, #32
 80078ce:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e000      	b.n	80078d6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80078d4:	2302      	movs	r3, #2
  }
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	f040 808a 	bne.w	8007a0c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_UART_Receive_IT+0x24>
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e082      	b.n	8007a0e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_UART_Receive_IT+0x36>
 8007912:	2302      	movs	r3, #2
 8007914:	e07b      	b.n	8007a0e <HAL_UART_Receive_IT+0x12e>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007942:	d10e      	bne.n	8007962 <HAL_UART_Receive_IT+0x82>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <HAL_UART_Receive_IT+0x78>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007956:	e02d      	b.n	80079b4 <HAL_UART_Receive_IT+0xd4>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	22ff      	movs	r2, #255	; 0xff
 800795c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007960:	e028      	b.n	80079b4 <HAL_UART_Receive_IT+0xd4>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10d      	bne.n	8007986 <HAL_UART_Receive_IT+0xa6>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <HAL_UART_Receive_IT+0x9c>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	22ff      	movs	r2, #255	; 0xff
 8007976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800797a:	e01b      	b.n	80079b4 <HAL_UART_Receive_IT+0xd4>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	227f      	movs	r2, #127	; 0x7f
 8007980:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007984:	e016      	b.n	80079b4 <HAL_UART_Receive_IT+0xd4>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800798e:	d10d      	bne.n	80079ac <HAL_UART_Receive_IT+0xcc>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <HAL_UART_Receive_IT+0xc2>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	227f      	movs	r2, #127	; 0x7f
 800799c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079a0:	e008      	b.n	80079b4 <HAL_UART_Receive_IT+0xd4>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	223f      	movs	r2, #63	; 0x3f
 80079a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079aa:	e003      	b.n	80079b4 <HAL_UART_Receive_IT+0xd4>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2222      	movs	r2, #34	; 0x22
 80079be:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d8:	d107      	bne.n	80079ea <HAL_UART_Receive_IT+0x10a>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4a0d      	ldr	r2, [pc, #52]	; (8007a1c <HAL_UART_Receive_IT+0x13c>)
 80079e6:	661a      	str	r2, [r3, #96]	; 0x60
 80079e8:	e002      	b.n	80079f0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a0c      	ldr	r2, [pc, #48]	; (8007a20 <HAL_UART_Receive_IT+0x140>)
 80079ee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007a06:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e000      	b.n	8007a0e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007a0c:	2302      	movs	r3, #2
  }
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	080085fd 	.word	0x080085fd
 8007a20:	08008553 	.word	0x08008553

08007a24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d113      	bne.n	8007a7c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00e      	beq.n	8007a7c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d009      	beq.n	8007a7c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8114 	beq.w	8007c9a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
      }
      return;
 8007a7a:	e10e      	b.n	8007c9a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 80d6 	beq.w	8007c30 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	4b86      	ldr	r3, [pc, #536]	; (8007cac <HAL_UART_IRQHandler+0x288>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80cb 	beq.w	8007c30 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00e      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x9e>
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d009      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aba:	f043 0201 	orr.w	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <HAL_UART_IRQHandler+0xc6>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2202      	movs	r2, #2
 8007adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae2:	f043 0204 	orr.w	r2, r3, #4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00e      	beq.n	8007b12 <HAL_UART_IRQHandler+0xee>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2204      	movs	r2, #4
 8007b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b0a:	f043 0202 	orr.w	r2, r3, #2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d013      	beq.n	8007b44 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d104      	bne.n	8007b30 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d009      	beq.n	8007b44 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2208      	movs	r2, #8
 8007b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3c:	f043 0208 	orr.w	r2, r3, #8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00f      	beq.n	8007b6e <HAL_UART_IRQHandler+0x14a>
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b66:	f043 0220 	orr.w	r2, r3, #32
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8093 	beq.w	8007c9e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00c      	beq.n	8007b9c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d004      	beq.n	8007bba <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d031      	beq.n	8007c1e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fc7a 	bl	80084b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bca:	2b40      	cmp	r3, #64	; 0x40
 8007bcc:	d123      	bne.n	8007c16 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bdc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d013      	beq.n	8007c0e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bea:	4a31      	ldr	r2, [pc, #196]	; (8007cb0 <HAL_UART_IRQHandler+0x28c>)
 8007bec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fc f937 	bl	8003e66 <HAL_DMA_Abort_IT>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d016      	beq.n	8007c2c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	e00e      	b.n	8007c2c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f85a 	bl	8007cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	e00a      	b.n	8007c2c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f856 	bl	8007cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c1c:	e006      	b.n	8007c2c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f852 	bl	8007cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007c2a:	e038      	b.n	8007c9e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	bf00      	nop
    return;
 8007c2e:	e036      	b.n	8007c9e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00d      	beq.n	8007c56 <HAL_UART_IRQHandler+0x232>
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d008      	beq.n	8007c56 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fd29 	bl	80086a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c54:	e026      	b.n	8007ca4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00d      	beq.n	8007c7c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
    }
    return;
 8007c7a:	e012      	b.n	8007ca2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00e      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x280>
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d009      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fc45 	bl	8008520 <UART_EndTransmit_IT>
    return;
 8007c96:	bf00      	nop
 8007c98:	e004      	b.n	8007ca4 <HAL_UART_IRQHandler+0x280>
      return;
 8007c9a:	bf00      	nop
 8007c9c:	e002      	b.n	8007ca4 <HAL_UART_IRQHandler+0x280>
    return;
 8007c9e:	bf00      	nop
 8007ca0:	e000      	b.n	8007ca4 <HAL_UART_IRQHandler+0x280>
    return;
 8007ca2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ca4:	3720      	adds	r7, #32
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	04000120 	.word	0x04000120
 8007cb0:	080084f5 	.word	0x080084f5

08007cb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cdc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007ce0:	b088      	sub	sp, #32
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	4bac      	ldr	r3, [pc, #688]	; (8007fbc <UART_SetConfig+0x2e0>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	69f9      	ldr	r1, [r7, #28]
 8007d12:	430b      	orrs	r3, r1
 8007d14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4aa2      	ldr	r2, [pc, #648]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d004      	beq.n	8007d46 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a99      	ldr	r2, [pc, #612]	; (8007fc4 <UART_SetConfig+0x2e8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d121      	bne.n	8007da8 <UART_SetConfig+0xcc>
 8007d64:	4b98      	ldr	r3, [pc, #608]	; (8007fc8 <UART_SetConfig+0x2ec>)
 8007d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d816      	bhi.n	8007da0 <UART_SetConfig+0xc4>
 8007d72:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <UART_SetConfig+0x9c>)
 8007d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d95 	.word	0x08007d95
 8007d80:	08007d8f 	.word	0x08007d8f
 8007d84:	08007d9b 	.word	0x08007d9b
 8007d88:	2301      	movs	r3, #1
 8007d8a:	76fb      	strb	r3, [r7, #27]
 8007d8c:	e0e8      	b.n	8007f60 <UART_SetConfig+0x284>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	76fb      	strb	r3, [r7, #27]
 8007d92:	e0e5      	b.n	8007f60 <UART_SetConfig+0x284>
 8007d94:	2304      	movs	r3, #4
 8007d96:	76fb      	strb	r3, [r7, #27]
 8007d98:	e0e2      	b.n	8007f60 <UART_SetConfig+0x284>
 8007d9a:	2308      	movs	r3, #8
 8007d9c:	76fb      	strb	r3, [r7, #27]
 8007d9e:	e0df      	b.n	8007f60 <UART_SetConfig+0x284>
 8007da0:	2310      	movs	r3, #16
 8007da2:	76fb      	strb	r3, [r7, #27]
 8007da4:	bf00      	nop
 8007da6:	e0db      	b.n	8007f60 <UART_SetConfig+0x284>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a87      	ldr	r2, [pc, #540]	; (8007fcc <UART_SetConfig+0x2f0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d134      	bne.n	8007e1c <UART_SetConfig+0x140>
 8007db2:	4b85      	ldr	r3, [pc, #532]	; (8007fc8 <UART_SetConfig+0x2ec>)
 8007db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db8:	f003 030c 	and.w	r3, r3, #12
 8007dbc:	2b0c      	cmp	r3, #12
 8007dbe:	d829      	bhi.n	8007e14 <UART_SetConfig+0x138>
 8007dc0:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <UART_SetConfig+0xec>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007dfd 	.word	0x08007dfd
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007e15 	.word	0x08007e15
 8007dd4:	08007e15 	.word	0x08007e15
 8007dd8:	08007e09 	.word	0x08007e09
 8007ddc:	08007e15 	.word	0x08007e15
 8007de0:	08007e15 	.word	0x08007e15
 8007de4:	08007e15 	.word	0x08007e15
 8007de8:	08007e03 	.word	0x08007e03
 8007dec:	08007e15 	.word	0x08007e15
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e15 	.word	0x08007e15
 8007df8:	08007e0f 	.word	0x08007e0f
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	76fb      	strb	r3, [r7, #27]
 8007e00:	e0ae      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e02:	2302      	movs	r3, #2
 8007e04:	76fb      	strb	r3, [r7, #27]
 8007e06:	e0ab      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	76fb      	strb	r3, [r7, #27]
 8007e0c:	e0a8      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e0e:	2308      	movs	r3, #8
 8007e10:	76fb      	strb	r3, [r7, #27]
 8007e12:	e0a5      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e14:	2310      	movs	r3, #16
 8007e16:	76fb      	strb	r3, [r7, #27]
 8007e18:	bf00      	nop
 8007e1a:	e0a1      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a6b      	ldr	r2, [pc, #428]	; (8007fd0 <UART_SetConfig+0x2f4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d120      	bne.n	8007e68 <UART_SetConfig+0x18c>
 8007e26:	4b68      	ldr	r3, [pc, #416]	; (8007fc8 <UART_SetConfig+0x2ec>)
 8007e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d00f      	beq.n	8007e54 <UART_SetConfig+0x178>
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d802      	bhi.n	8007e3e <UART_SetConfig+0x162>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <UART_SetConfig+0x16c>
 8007e3c:	e010      	b.n	8007e60 <UART_SetConfig+0x184>
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	d005      	beq.n	8007e4e <UART_SetConfig+0x172>
 8007e42:	2b30      	cmp	r3, #48	; 0x30
 8007e44:	d009      	beq.n	8007e5a <UART_SetConfig+0x17e>
 8007e46:	e00b      	b.n	8007e60 <UART_SetConfig+0x184>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	76fb      	strb	r3, [r7, #27]
 8007e4c:	e088      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	76fb      	strb	r3, [r7, #27]
 8007e52:	e085      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e54:	2304      	movs	r3, #4
 8007e56:	76fb      	strb	r3, [r7, #27]
 8007e58:	e082      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	76fb      	strb	r3, [r7, #27]
 8007e5e:	e07f      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e60:	2310      	movs	r3, #16
 8007e62:	76fb      	strb	r3, [r7, #27]
 8007e64:	bf00      	nop
 8007e66:	e07b      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a59      	ldr	r2, [pc, #356]	; (8007fd4 <UART_SetConfig+0x2f8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d120      	bne.n	8007eb4 <UART_SetConfig+0x1d8>
 8007e72:	4b55      	ldr	r3, [pc, #340]	; (8007fc8 <UART_SetConfig+0x2ec>)
 8007e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e7c:	2b40      	cmp	r3, #64	; 0x40
 8007e7e:	d00f      	beq.n	8007ea0 <UART_SetConfig+0x1c4>
 8007e80:	2b40      	cmp	r3, #64	; 0x40
 8007e82:	d802      	bhi.n	8007e8a <UART_SetConfig+0x1ae>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <UART_SetConfig+0x1b8>
 8007e88:	e010      	b.n	8007eac <UART_SetConfig+0x1d0>
 8007e8a:	2b80      	cmp	r3, #128	; 0x80
 8007e8c:	d005      	beq.n	8007e9a <UART_SetConfig+0x1be>
 8007e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e90:	d009      	beq.n	8007ea6 <UART_SetConfig+0x1ca>
 8007e92:	e00b      	b.n	8007eac <UART_SetConfig+0x1d0>
 8007e94:	2300      	movs	r3, #0
 8007e96:	76fb      	strb	r3, [r7, #27]
 8007e98:	e062      	b.n	8007f60 <UART_SetConfig+0x284>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	76fb      	strb	r3, [r7, #27]
 8007e9e:	e05f      	b.n	8007f60 <UART_SetConfig+0x284>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	76fb      	strb	r3, [r7, #27]
 8007ea4:	e05c      	b.n	8007f60 <UART_SetConfig+0x284>
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	76fb      	strb	r3, [r7, #27]
 8007eaa:	e059      	b.n	8007f60 <UART_SetConfig+0x284>
 8007eac:	2310      	movs	r3, #16
 8007eae:	76fb      	strb	r3, [r7, #27]
 8007eb0:	bf00      	nop
 8007eb2:	e055      	b.n	8007f60 <UART_SetConfig+0x284>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a47      	ldr	r2, [pc, #284]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d124      	bne.n	8007f08 <UART_SetConfig+0x22c>
 8007ebe:	4b42      	ldr	r3, [pc, #264]	; (8007fc8 <UART_SetConfig+0x2ec>)
 8007ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ecc:	d012      	beq.n	8007ef4 <UART_SetConfig+0x218>
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed2:	d802      	bhi.n	8007eda <UART_SetConfig+0x1fe>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d007      	beq.n	8007ee8 <UART_SetConfig+0x20c>
 8007ed8:	e012      	b.n	8007f00 <UART_SetConfig+0x224>
 8007eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ede:	d006      	beq.n	8007eee <UART_SetConfig+0x212>
 8007ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee4:	d009      	beq.n	8007efa <UART_SetConfig+0x21e>
 8007ee6:	e00b      	b.n	8007f00 <UART_SetConfig+0x224>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	76fb      	strb	r3, [r7, #27]
 8007eec:	e038      	b.n	8007f60 <UART_SetConfig+0x284>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	76fb      	strb	r3, [r7, #27]
 8007ef2:	e035      	b.n	8007f60 <UART_SetConfig+0x284>
 8007ef4:	2304      	movs	r3, #4
 8007ef6:	76fb      	strb	r3, [r7, #27]
 8007ef8:	e032      	b.n	8007f60 <UART_SetConfig+0x284>
 8007efa:	2308      	movs	r3, #8
 8007efc:	76fb      	strb	r3, [r7, #27]
 8007efe:	e02f      	b.n	8007f60 <UART_SetConfig+0x284>
 8007f00:	2310      	movs	r3, #16
 8007f02:	76fb      	strb	r3, [r7, #27]
 8007f04:	bf00      	nop
 8007f06:	e02b      	b.n	8007f60 <UART_SetConfig+0x284>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a2c      	ldr	r2, [pc, #176]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d124      	bne.n	8007f5c <UART_SetConfig+0x280>
 8007f12:	4b2d      	ldr	r3, [pc, #180]	; (8007fc8 <UART_SetConfig+0x2ec>)
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f20:	d012      	beq.n	8007f48 <UART_SetConfig+0x26c>
 8007f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f26:	d802      	bhi.n	8007f2e <UART_SetConfig+0x252>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <UART_SetConfig+0x260>
 8007f2c:	e012      	b.n	8007f54 <UART_SetConfig+0x278>
 8007f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f32:	d006      	beq.n	8007f42 <UART_SetConfig+0x266>
 8007f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f38:	d009      	beq.n	8007f4e <UART_SetConfig+0x272>
 8007f3a:	e00b      	b.n	8007f54 <UART_SetConfig+0x278>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	76fb      	strb	r3, [r7, #27]
 8007f40:	e00e      	b.n	8007f60 <UART_SetConfig+0x284>
 8007f42:	2302      	movs	r3, #2
 8007f44:	76fb      	strb	r3, [r7, #27]
 8007f46:	e00b      	b.n	8007f60 <UART_SetConfig+0x284>
 8007f48:	2304      	movs	r3, #4
 8007f4a:	76fb      	strb	r3, [r7, #27]
 8007f4c:	e008      	b.n	8007f60 <UART_SetConfig+0x284>
 8007f4e:	2308      	movs	r3, #8
 8007f50:	76fb      	strb	r3, [r7, #27]
 8007f52:	e005      	b.n	8007f60 <UART_SetConfig+0x284>
 8007f54:	2310      	movs	r3, #16
 8007f56:	76fb      	strb	r3, [r7, #27]
 8007f58:	bf00      	nop
 8007f5a:	e001      	b.n	8007f60 <UART_SetConfig+0x284>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a16      	ldr	r2, [pc, #88]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	f040 8087 	bne.w	800807a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f6c:	7efb      	ldrb	r3, [r7, #27]
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d836      	bhi.n	8007fe0 <UART_SetConfig+0x304>
 8007f72:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <UART_SetConfig+0x29c>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007fe1 	.word	0x08007fe1
 8007f80:	08007fa5 	.word	0x08007fa5
 8007f84:	08007fe1 	.word	0x08007fe1
 8007f88:	08007fab 	.word	0x08007fab
 8007f8c:	08007fe1 	.word	0x08007fe1
 8007f90:	08007fe1 	.word	0x08007fe1
 8007f94:	08007fe1 	.word	0x08007fe1
 8007f98:	08007fb3 	.word	0x08007fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f9c:	f7fd fae6 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8007fa0:	6178      	str	r0, [r7, #20]
        break;
 8007fa2:	e022      	b.n	8007fea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa4:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <UART_SetConfig+0x300>)
 8007fa6:	617b      	str	r3, [r7, #20]
        break;
 8007fa8:	e01f      	b.n	8007fea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007faa:	f7fd fa49 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8007fae:	6178      	str	r0, [r7, #20]
        break;
 8007fb0:	e01b      	b.n	8007fea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb6:	617b      	str	r3, [r7, #20]
        break;
 8007fb8:	e017      	b.n	8007fea <UART_SetConfig+0x30e>
 8007fba:	bf00      	nop
 8007fbc:	efff69f3 	.word	0xefff69f3
 8007fc0:	40008000 	.word	0x40008000
 8007fc4:	40013800 	.word	0x40013800
 8007fc8:	40021000 	.word	0x40021000
 8007fcc:	40004400 	.word	0x40004400
 8007fd0:	40004800 	.word	0x40004800
 8007fd4:	40004c00 	.word	0x40004c00
 8007fd8:	40005000 	.word	0x40005000
 8007fdc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	76bb      	strb	r3, [r7, #26]
        break;
 8007fe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 80f1 	beq.w	80081d4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	4413      	add	r3, r2
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d305      	bcc.n	800800e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	429a      	cmp	r2, r3
 800800c:	d902      	bls.n	8008014 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	76bb      	strb	r3, [r7, #26]
 8008012:	e0df      	b.n	80081d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	4619      	mov	r1, r3
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	f04f 0300 	mov.w	r3, #0
 8008020:	f04f 0400 	mov.w	r4, #0
 8008024:	0214      	lsls	r4, r2, #8
 8008026:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800802a:	020b      	lsls	r3, r1, #8
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6852      	ldr	r2, [r2, #4]
 8008030:	0852      	lsrs	r2, r2, #1
 8008032:	4611      	mov	r1, r2
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	eb13 0b01 	adds.w	fp, r3, r1
 800803c:	eb44 0c02 	adc.w	ip, r4, r2
 8008040:	4658      	mov	r0, fp
 8008042:	4661      	mov	r1, ip
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f04f 0400 	mov.w	r4, #0
 800804c:	461a      	mov	r2, r3
 800804e:	4623      	mov	r3, r4
 8008050:	f7f8 fdfa 	bl	8000c48 <__aeabi_uldivmod>
 8008054:	4603      	mov	r3, r0
 8008056:	460c      	mov	r4, r1
 8008058:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008060:	d308      	bcc.n	8008074 <UART_SetConfig+0x398>
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008068:	d204      	bcs.n	8008074 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	e0af      	b.n	80081d4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	76bb      	strb	r3, [r7, #26]
 8008078:	e0ac      	b.n	80081d4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008082:	d15b      	bne.n	800813c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008084:	7efb      	ldrb	r3, [r7, #27]
 8008086:	2b08      	cmp	r3, #8
 8008088:	d827      	bhi.n	80080da <UART_SetConfig+0x3fe>
 800808a:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <UART_SetConfig+0x3b4>)
 800808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008090:	080080b5 	.word	0x080080b5
 8008094:	080080bd 	.word	0x080080bd
 8008098:	080080c5 	.word	0x080080c5
 800809c:	080080db 	.word	0x080080db
 80080a0:	080080cb 	.word	0x080080cb
 80080a4:	080080db 	.word	0x080080db
 80080a8:	080080db 	.word	0x080080db
 80080ac:	080080db 	.word	0x080080db
 80080b0:	080080d3 	.word	0x080080d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b4:	f7fd fa5a 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 80080b8:	6178      	str	r0, [r7, #20]
        break;
 80080ba:	e013      	b.n	80080e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080bc:	f7fd fa6c 	bl	8005598 <HAL_RCC_GetPCLK2Freq>
 80080c0:	6178      	str	r0, [r7, #20]
        break;
 80080c2:	e00f      	b.n	80080e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080c4:	4b49      	ldr	r3, [pc, #292]	; (80081ec <UART_SetConfig+0x510>)
 80080c6:	617b      	str	r3, [r7, #20]
        break;
 80080c8:	e00c      	b.n	80080e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ca:	f7fd f9b9 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80080ce:	6178      	str	r0, [r7, #20]
        break;
 80080d0:	e008      	b.n	80080e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d6:	617b      	str	r3, [r7, #20]
        break;
 80080d8:	e004      	b.n	80080e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	76bb      	strb	r3, [r7, #26]
        break;
 80080e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d074      	beq.n	80081d4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	005a      	lsls	r2, r3, #1
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	085b      	lsrs	r3, r3, #1
 80080f4:	441a      	add	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fe:	b29b      	uxth	r3, r3
 8008100:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b0f      	cmp	r3, #15
 8008106:	d916      	bls.n	8008136 <UART_SetConfig+0x45a>
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800810e:	d212      	bcs.n	8008136 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f023 030f 	bic.w	r3, r3, #15
 8008118:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	b29b      	uxth	r3, r3
 8008120:	f003 0307 	and.w	r3, r3, #7
 8008124:	b29a      	uxth	r2, r3
 8008126:	89fb      	ldrh	r3, [r7, #14]
 8008128:	4313      	orrs	r3, r2
 800812a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	89fa      	ldrh	r2, [r7, #14]
 8008132:	60da      	str	r2, [r3, #12]
 8008134:	e04e      	b.n	80081d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	76bb      	strb	r3, [r7, #26]
 800813a:	e04b      	b.n	80081d4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800813c:	7efb      	ldrb	r3, [r7, #27]
 800813e:	2b08      	cmp	r3, #8
 8008140:	d827      	bhi.n	8008192 <UART_SetConfig+0x4b6>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <UART_SetConfig+0x46c>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	0800816d 	.word	0x0800816d
 800814c:	08008175 	.word	0x08008175
 8008150:	0800817d 	.word	0x0800817d
 8008154:	08008193 	.word	0x08008193
 8008158:	08008183 	.word	0x08008183
 800815c:	08008193 	.word	0x08008193
 8008160:	08008193 	.word	0x08008193
 8008164:	08008193 	.word	0x08008193
 8008168:	0800818b 	.word	0x0800818b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800816c:	f7fd f9fe 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8008170:	6178      	str	r0, [r7, #20]
        break;
 8008172:	e013      	b.n	800819c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008174:	f7fd fa10 	bl	8005598 <HAL_RCC_GetPCLK2Freq>
 8008178:	6178      	str	r0, [r7, #20]
        break;
 800817a:	e00f      	b.n	800819c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800817c:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <UART_SetConfig+0x510>)
 800817e:	617b      	str	r3, [r7, #20]
        break;
 8008180:	e00c      	b.n	800819c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008182:	f7fd f95d 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8008186:	6178      	str	r0, [r7, #20]
        break;
 8008188:	e008      	b.n	800819c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818e:	617b      	str	r3, [r7, #20]
        break;
 8008190:	e004      	b.n	800819c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	76bb      	strb	r3, [r7, #26]
        break;
 800819a:	bf00      	nop
    }

    if (pclk != 0U)
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d018      	beq.n	80081d4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	085a      	lsrs	r2, r3, #1
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	441a      	add	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2b0f      	cmp	r3, #15
 80081bc:	d908      	bls.n	80081d0 <UART_SetConfig+0x4f4>
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c4:	d204      	bcs.n	80081d0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	e001      	b.n	80081d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80081e0:	7ebb      	ldrb	r3, [r7, #26]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80081ec:	00f42400 	.word	0x00f42400

080081f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	f003 0302 	and.w	r3, r3, #2
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00a      	beq.n	800825e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00a      	beq.n	80082a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01a      	beq.n	8008306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ee:	d10a      	bne.n	8008306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	605a      	str	r2, [r3, #4]
  }
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af02      	add	r7, sp, #8
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008342:	f7fb fc51 	bl	8003be8 <HAL_GetTick>
 8008346:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0308 	and.w	r3, r3, #8
 8008352:	2b08      	cmp	r3, #8
 8008354:	d10e      	bne.n	8008374 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008356:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f82a 	bl	80083be <UART_WaitOnFlagUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e020      	b.n	80083b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b04      	cmp	r3, #4
 8008380:	d10e      	bne.n	80083a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008382:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f814 	bl	80083be <UART_WaitOnFlagUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e00a      	b.n	80083b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	4613      	mov	r3, r2
 80083cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ce:	e05d      	b.n	800848c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d6:	d059      	beq.n	800848c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083d8:	f7fb fc06 	bl	8003be8 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d302      	bcc.n	80083ee <UART_WaitOnFlagUntilTimeout+0x30>
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d11b      	bne.n	8008426 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 0201 	bic.w	r2, r2, #1
 800840c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2220      	movs	r2, #32
 8008412:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e042      	b.n	80084ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b00      	cmp	r3, #0
 8008432:	d02b      	beq.n	800848c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800843e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008442:	d123      	bne.n	800848c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800844c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800845c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0201 	bic.w	r2, r2, #1
 800846c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2220      	movs	r2, #32
 8008472:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2220      	movs	r2, #32
 8008478:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2220      	movs	r2, #32
 800847e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e00f      	b.n	80084ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	69da      	ldr	r2, [r3, #28]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	4013      	ands	r3, r2
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	429a      	cmp	r2, r3
 800849a:	bf0c      	ite	eq
 800849c:	2301      	moveq	r3, #1
 800849e:	2300      	movne	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	461a      	mov	r2, r3
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d092      	beq.n	80083d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0201 	bic.w	r2, r2, #1
 80084da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fbd8 	bl	8007cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008518:	bf00      	nop
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008536:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2220      	movs	r2, #32
 800853c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff fbb5 	bl	8007cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008560:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008566:	2b22      	cmp	r3, #34	; 0x22
 8008568:	d13a      	bne.n	80085e0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008570:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008572:	89bb      	ldrh	r3, [r7, #12]
 8008574:	b2d9      	uxtb	r1, r3
 8008576:	89fb      	ldrh	r3, [r7, #14]
 8008578:	b2da      	uxtb	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857e:	400a      	ands	r2, r1
 8008580:	b2d2      	uxtb	r2, r2
 8008582:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008594:	b29b      	uxth	r3, r3
 8008596:	3b01      	subs	r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d123      	bne.n	80085f4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085ba:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7fa fb9b 	bl	8002d14 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085de:	e009      	b.n	80085f4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	8b1b      	ldrh	r3, [r3, #24]
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0208 	orr.w	r2, r2, #8
 80085f0:	b292      	uxth	r2, r2
 80085f2:	831a      	strh	r2, [r3, #24]
}
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800860a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008610:	2b22      	cmp	r3, #34	; 0x22
 8008612:	d13a      	bne.n	800868a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800861a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008620:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008622:	89ba      	ldrh	r2, [r7, #12]
 8008624:	89fb      	ldrh	r3, [r7, #14]
 8008626:	4013      	ands	r3, r2
 8008628:	b29a      	uxth	r2, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008632:	1c9a      	adds	r2, r3, #2
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800863e:	b29b      	uxth	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d123      	bne.n	800869e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008664:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0201 	bic.w	r2, r2, #1
 8008674:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7fa fb46 	bl	8002d14 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008688:	e009      	b.n	800869e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	8b1b      	ldrh	r3, [r3, #24]
 8008690:	b29a      	uxth	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0208 	orr.w	r2, r2, #8
 800869a:	b292      	uxth	r2, r2
 800869c:	831a      	strh	r2, [r3, #24]
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
	...

080086bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80086c0:	4904      	ldr	r1, [pc, #16]	; (80086d4 <MX_FATFS_Init+0x18>)
 80086c2:	4805      	ldr	r0, [pc, #20]	; (80086d8 <MX_FATFS_Init+0x1c>)
 80086c4:	f003 f99c 	bl	800ba00 <FATFS_LinkDriver>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	4b03      	ldr	r3, [pc, #12]	; (80086dc <MX_FATFS_Init+0x20>)
 80086ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80086d0:	bf00      	nop
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000081c 	.word	0x2000081c
 80086d8:	20000020 	.word	0x20000020
 80086dc:	20000820 	.word	0x20000820

080086e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80086e0:	b480      	push	{r7}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80086e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7f9 fabf 	bl	8001c80 <SD_disk_initialize>
 8008702:	4603      	mov	r3, r0
 8008704:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	4603      	mov	r3, r0
 8008716:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status(pdrv);
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	4618      	mov	r0, r3
 800871c:	f7f9 fb96 	bl	8001e4c <SD_disk_status>
 8008720:	4603      	mov	r3, r0
 8008722:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800873c:	7bf8      	ldrb	r0, [r7, #15]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	68b9      	ldr	r1, [r7, #8]
 8008744:	f7f9 fb98 	bl	8001e78 <SD_disk_read>
 8008748:	4603      	mov	r3, r0
 800874a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8008764:	7bf8      	ldrb	r0, [r7, #15]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	f7f9 fbee 	bl	8001f4c <SD_disk_write>
 8008770:	4603      	mov	r3, r0
 8008772:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	603a      	str	r2, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
 8008788:	460b      	mov	r3, r1
 800878a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	79b9      	ldrb	r1, [r7, #6]
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	4618      	mov	r0, r3
 8008798:	f7f9 fc5c 	bl	8002054 <SD_disk_ioctl>
 800879c:	4603      	mov	r3, r0
 800879e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	4a08      	ldr	r2, [pc, #32]	; (80087d8 <disk_status+0x30>)
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	79fa      	ldrb	r2, [r7, #7]
 80087c0:	4905      	ldr	r1, [pc, #20]	; (80087d8 <disk_status+0x30>)
 80087c2:	440a      	add	r2, r1
 80087c4:	7a12      	ldrb	r2, [r2, #8]
 80087c6:	4610      	mov	r0, r2
 80087c8:	4798      	blx	r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000468 	.word	0x20000468

080087dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	4a0d      	ldr	r2, [pc, #52]	; (8008824 <disk_initialize+0x48>)
 80087ee:	5cd3      	ldrb	r3, [r2, r3]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d111      	bne.n	8008818 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	4a0b      	ldr	r2, [pc, #44]	; (8008824 <disk_initialize+0x48>)
 80087f8:	2101      	movs	r1, #1
 80087fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	4a09      	ldr	r2, [pc, #36]	; (8008824 <disk_initialize+0x48>)
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	79fa      	ldrb	r2, [r7, #7]
 800880a:	4906      	ldr	r1, [pc, #24]	; (8008824 <disk_initialize+0x48>)
 800880c:	440a      	add	r2, r1
 800880e:	7a12      	ldrb	r2, [r2, #8]
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008818:	7bfb      	ldrb	r3, [r7, #15]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000468 	.word	0x20000468

08008828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008828:	b590      	push	{r4, r7, lr}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <disk_read+0x3c>)
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	689c      	ldr	r4, [r3, #8]
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	4a07      	ldr	r2, [pc, #28]	; (8008864 <disk_read+0x3c>)
 8008848:	4413      	add	r3, r2
 800884a:	7a18      	ldrb	r0, [r3, #8]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	47a0      	blx	r4
 8008854:	4603      	mov	r3, r0
 8008856:	75fb      	strb	r3, [r7, #23]
  return res;
 8008858:	7dfb      	ldrb	r3, [r7, #23]
}
 800885a:	4618      	mov	r0, r3
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	bd90      	pop	{r4, r7, pc}
 8008862:	bf00      	nop
 8008864:	20000468 	.word	0x20000468

08008868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	607a      	str	r2, [r7, #4]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4a0a      	ldr	r2, [pc, #40]	; (80088a4 <disk_write+0x3c>)
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	68dc      	ldr	r4, [r3, #12]
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4a07      	ldr	r2, [pc, #28]	; (80088a4 <disk_write+0x3c>)
 8008888:	4413      	add	r3, r2
 800888a:	7a18      	ldrb	r0, [r3, #8]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	47a0      	blx	r4
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]
  return res;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
}
 800889a:	4618      	mov	r0, r3
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd90      	pop	{r4, r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000468 	.word	0x20000468

080088a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	603a      	str	r2, [r7, #0]
 80088b2:	71fb      	strb	r3, [r7, #7]
 80088b4:	460b      	mov	r3, r1
 80088b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <disk_ioctl+0x38>)
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	79fa      	ldrb	r2, [r7, #7]
 80088c6:	4906      	ldr	r1, [pc, #24]	; (80088e0 <disk_ioctl+0x38>)
 80088c8:	440a      	add	r2, r1
 80088ca:	7a10      	ldrb	r0, [r2, #8]
 80088cc:	79b9      	ldrb	r1, [r7, #6]
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000468 	.word	0x20000468

080088e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3301      	adds	r3, #1
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80088f4:	89fb      	ldrh	r3, [r7, #14]
 80088f6:	021b      	lsls	r3, r3, #8
 80088f8:	b21a      	sxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	b21b      	sxth	r3, r3
 8008900:	4313      	orrs	r3, r2
 8008902:	b21b      	sxth	r3, r3
 8008904:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008906:	89fb      	ldrh	r3, [r7, #14]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3303      	adds	r3, #3
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	3202      	adds	r2, #2
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	3201      	adds	r2, #1
 800893a:	7812      	ldrb	r2, [r2, #0]
 800893c:	4313      	orrs	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
	return rv;
 800894c:	68fb      	ldr	r3, [r7, #12]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	460b      	mov	r3, r1
 8008964:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	887a      	ldrh	r2, [r7, #2]
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
 8008972:	887b      	ldrh	r3, [r7, #2]
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	887a      	ldrh	r2, [r7, #2]
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	701a      	strb	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	701a      	strb	r2, [r3, #0]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	0a1b      	lsrs	r3, r3, #8
 80089aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	b2d2      	uxtb	r2, r2
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	701a      	strb	r2, [r3, #0]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	607a      	str	r2, [r7, #4]
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	701a      	strb	r2, [r3, #0]
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00d      	beq.n	8008a1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	1c53      	adds	r3, r2, #1
 8008a06:	613b      	str	r3, [r7, #16]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	1c59      	adds	r1, r3, #1
 8008a0c:	6179      	str	r1, [r7, #20]
 8008a0e:	7812      	ldrb	r2, [r2, #0]
 8008a10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f1      	bne.n	8008a02 <mem_cpy+0x1a>
	}
}
 8008a1e:	bf00      	nop
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008a2a:	b480      	push	{r7}
 8008a2c:	b087      	sub	sp, #28
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	617a      	str	r2, [r7, #20]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	b2d2      	uxtb	r2, r2
 8008a44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	607b      	str	r3, [r7, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f3      	bne.n	8008a3a <mem_set+0x10>
}
 8008a52:	bf00      	nop
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008a5e:	b480      	push	{r7}
 8008a60:	b089      	sub	sp, #36	; 0x24
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	61fa      	str	r2, [r7, #28]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	61ba      	str	r2, [r7, #24]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	1acb      	subs	r3, r1, r3
 8008a8a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	607b      	str	r3, [r7, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <mem_cmp+0x40>
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0eb      	beq.n	8008a76 <mem_cmp+0x18>

	return r;
 8008a9e:	697b      	ldr	r3, [r7, #20]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3724      	adds	r7, #36	; 0x24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ab6:	e002      	b.n	8008abe <chk_chr+0x12>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3301      	adds	r3, #1
 8008abc:	607b      	str	r3, [r7, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <chk_chr+0x26>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d1f2      	bne.n	8008ab8 <chk_chr+0xc>
	return *str;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008aee:	2300      	movs	r3, #0
 8008af0:	60bb      	str	r3, [r7, #8]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	e029      	b.n	8008b4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008af8:	4a27      	ldr	r2, [pc, #156]	; (8008b98 <chk_lock+0xb4>)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	011b      	lsls	r3, r3, #4
 8008afe:	4413      	add	r3, r2
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01d      	beq.n	8008b42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b06:	4a24      	ldr	r2, [pc, #144]	; (8008b98 <chk_lock+0xb4>)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	4413      	add	r3, r2
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d116      	bne.n	8008b46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008b18:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <chk_lock+0xb4>)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	4413      	add	r3, r2
 8008b20:	3304      	adds	r3, #4
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d10c      	bne.n	8008b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b2c:	4a1a      	ldr	r2, [pc, #104]	; (8008b98 <chk_lock+0xb4>)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	4413      	add	r3, r2
 8008b34:	3308      	adds	r3, #8
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d102      	bne.n	8008b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b40:	e007      	b.n	8008b52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008b42:	2301      	movs	r3, #1
 8008b44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d9d2      	bls.n	8008af8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d109      	bne.n	8008b6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d102      	bne.n	8008b64 <chk_lock+0x80>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d101      	bne.n	8008b68 <chk_lock+0x84>
 8008b64:	2300      	movs	r3, #0
 8008b66:	e010      	b.n	8008b8a <chk_lock+0xa6>
 8008b68:	2312      	movs	r3, #18
 8008b6a:	e00e      	b.n	8008b8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d108      	bne.n	8008b84 <chk_lock+0xa0>
 8008b72:	4a09      	ldr	r2, [pc, #36]	; (8008b98 <chk_lock+0xb4>)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	4413      	add	r3, r2
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b82:	d101      	bne.n	8008b88 <chk_lock+0xa4>
 8008b84:	2310      	movs	r3, #16
 8008b86:	e000      	b.n	8008b8a <chk_lock+0xa6>
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	20000248 	.word	0x20000248

08008b9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	607b      	str	r3, [r7, #4]
 8008ba6:	e002      	b.n	8008bae <enq_lock+0x12>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3301      	adds	r3, #1
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d806      	bhi.n	8008bc2 <enq_lock+0x26>
 8008bb4:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <enq_lock+0x40>)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	011b      	lsls	r3, r3, #4
 8008bba:	4413      	add	r3, r2
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f2      	bne.n	8008ba8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	bf14      	ite	ne
 8008bc8:	2301      	movne	r3, #1
 8008bca:	2300      	moveq	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20000248 	.word	0x20000248

08008be0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	e01f      	b.n	8008c30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008bf0:	4a41      	ldr	r2, [pc, #260]	; (8008cf8 <inc_lock+0x118>)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	4413      	add	r3, r2
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d113      	bne.n	8008c2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008c02:	4a3d      	ldr	r2, [pc, #244]	; (8008cf8 <inc_lock+0x118>)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	4413      	add	r3, r2
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d109      	bne.n	8008c2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008c16:	4a38      	ldr	r2, [pc, #224]	; (8008cf8 <inc_lock+0x118>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3308      	adds	r3, #8
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d006      	beq.n	8008c38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d9dc      	bls.n	8008bf0 <inc_lock+0x10>
 8008c36:	e000      	b.n	8008c3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008c38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d132      	bne.n	8008ca6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e002      	b.n	8008c4c <inc_lock+0x6c>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d806      	bhi.n	8008c60 <inc_lock+0x80>
 8008c52:	4a29      	ldr	r2, [pc, #164]	; (8008cf8 <inc_lock+0x118>)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	4413      	add	r3, r2
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1f2      	bne.n	8008c46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d101      	bne.n	8008c6a <inc_lock+0x8a>
 8008c66:	2300      	movs	r3, #0
 8008c68:	e040      	b.n	8008cec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4922      	ldr	r1, [pc, #136]	; (8008cf8 <inc_lock+0x118>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	440b      	add	r3, r1
 8008c76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	491e      	ldr	r1, [pc, #120]	; (8008cf8 <inc_lock+0x118>)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	440b      	add	r3, r1
 8008c84:	3304      	adds	r3, #4
 8008c86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	695a      	ldr	r2, [r3, #20]
 8008c8c:	491a      	ldr	r1, [pc, #104]	; (8008cf8 <inc_lock+0x118>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	440b      	add	r3, r1
 8008c94:	3308      	adds	r3, #8
 8008c96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008c98:	4a17      	ldr	r2, [pc, #92]	; (8008cf8 <inc_lock+0x118>)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	4413      	add	r3, r2
 8008ca0:	330c      	adds	r3, #12
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d009      	beq.n	8008cc0 <inc_lock+0xe0>
 8008cac:	4a12      	ldr	r2, [pc, #72]	; (8008cf8 <inc_lock+0x118>)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	011b      	lsls	r3, r3, #4
 8008cb2:	4413      	add	r3, r2
 8008cb4:	330c      	adds	r3, #12
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <inc_lock+0xe0>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e015      	b.n	8008cec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d108      	bne.n	8008cd8 <inc_lock+0xf8>
 8008cc6:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <inc_lock+0x118>)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	4413      	add	r3, r2
 8008cce:	330c      	adds	r3, #12
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	e001      	b.n	8008cdc <inc_lock+0xfc>
 8008cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cdc:	4906      	ldr	r1, [pc, #24]	; (8008cf8 <inc_lock+0x118>)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	440b      	add	r3, r1
 8008ce4:	330c      	adds	r3, #12
 8008ce6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	20000248 	.word	0x20000248

08008cfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	607b      	str	r3, [r7, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d825      	bhi.n	8008d5c <dec_lock+0x60>
		n = Files[i].ctr;
 8008d10:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <dec_lock+0x74>)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	4413      	add	r3, r2
 8008d18:	330c      	adds	r3, #12
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008d1e:	89fb      	ldrh	r3, [r7, #14]
 8008d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d24:	d101      	bne.n	8008d2a <dec_lock+0x2e>
 8008d26:	2300      	movs	r3, #0
 8008d28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008d2a:	89fb      	ldrh	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <dec_lock+0x3a>
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008d36:	4a0e      	ldr	r2, [pc, #56]	; (8008d70 <dec_lock+0x74>)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	4413      	add	r3, r2
 8008d3e:	330c      	adds	r3, #12
 8008d40:	89fa      	ldrh	r2, [r7, #14]
 8008d42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008d44:	89fb      	ldrh	r3, [r7, #14]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <dec_lock+0x5a>
 8008d4a:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <dec_lock+0x74>)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	4413      	add	r3, r2
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	737b      	strb	r3, [r7, #13]
 8008d5a:	e001      	b.n	8008d60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008d60:	7b7b      	ldrb	r3, [r7, #13]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20000248 	.word	0x20000248

08008d74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e010      	b.n	8008da4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d82:	4a0d      	ldr	r2, [pc, #52]	; (8008db8 <clear_lock+0x44>)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	011b      	lsls	r3, r3, #4
 8008d88:	4413      	add	r3, r2
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d105      	bne.n	8008d9e <clear_lock+0x2a>
 8008d92:	4a09      	ldr	r2, [pc, #36]	; (8008db8 <clear_lock+0x44>)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	011b      	lsls	r3, r3, #4
 8008d98:	4413      	add	r3, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3301      	adds	r3, #1
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d9eb      	bls.n	8008d82 <clear_lock+0xe>
	}
}
 8008daa:	bf00      	nop
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	20000248 	.word	0x20000248

08008dbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	78db      	ldrb	r3, [r3, #3]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d034      	beq.n	8008e3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7858      	ldrb	r0, [r3, #1]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008de0:	2301      	movs	r3, #1
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	f7ff fd40 	bl	8008868 <disk_write>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	73fb      	strb	r3, [r7, #15]
 8008df2:	e022      	b.n	8008e3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	1ad2      	subs	r2, r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d217      	bcs.n	8008e3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	789b      	ldrb	r3, [r3, #2]
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	e010      	b.n	8008e34 <sync_window+0x78>
					wsect += fs->fsize;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4413      	add	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7858      	ldrb	r0, [r3, #1]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e26:	2301      	movs	r3, #1
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	f7ff fd1d 	bl	8008868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d8eb      	bhi.n	8008e12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d01b      	beq.n	8008e94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ffad 	bl	8008dbc <sync_window>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d113      	bne.n	8008e94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7858      	ldrb	r0, [r3, #1]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e76:	2301      	movs	r3, #1
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	f7ff fcd5 	bl	8008828 <disk_read>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008e84:	f04f 33ff 	mov.w	r3, #4294967295
 8008e88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff ff87 	bl	8008dbc <sync_window>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d159      	bne.n	8008f6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d149      	bne.n	8008f54 <sync_fs+0xb4>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	791b      	ldrb	r3, [r3, #4]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d145      	bne.n	8008f54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	899b      	ldrh	r3, [r3, #12]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	f7ff fda8 	bl	8008a2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3338      	adds	r3, #56	; 0x38
 8008ede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ee2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fd37 	bl	800895a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3338      	adds	r3, #56	; 0x38
 8008ef0:	4921      	ldr	r1, [pc, #132]	; (8008f78 <sync_fs+0xd8>)
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff fd4c 	bl	8008990 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3338      	adds	r3, #56	; 0x38
 8008efc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008f00:	491e      	ldr	r1, [pc, #120]	; (8008f7c <sync_fs+0xdc>)
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff fd44 	bl	8008990 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3338      	adds	r3, #56	; 0x38
 8008f0c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f7ff fd3a 	bl	8008990 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3338      	adds	r3, #56	; 0x38
 8008f20:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7ff fd30 	bl	8008990 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	7858      	ldrb	r0, [r3, #1]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f7ff fc8d 	bl	8008868 <disk_write>
			fs->fsi_flag = 0;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	785b      	ldrb	r3, [r3, #1]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fca3 	bl	80088a8 <disk_ioctl>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <sync_fs+0xcc>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	41615252 	.word	0x41615252
 8008f7c:	61417272 	.word	0x61417272

08008f80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	3b02      	subs	r3, #2
 8008f8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	3b02      	subs	r3, #2
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d301      	bcc.n	8008fa0 <clust2sect+0x20>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e008      	b.n	8008fb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	895b      	ldrh	r3, [r3, #10]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	fb03 f202 	mul.w	r2, r3, r2
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	4413      	add	r3, r2
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b086      	sub	sp, #24
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d904      	bls.n	8008fde <get_fat+0x20>
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d302      	bcc.n	8008fe4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008fde:	2301      	movs	r3, #1
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	e0b7      	b.n	8009154 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d05a      	beq.n	80090a8 <get_fat+0xea>
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d07d      	beq.n	80090f2 <get_fat+0x134>
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	f040 80a2 	bne.w	8009140 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	085b      	lsrs	r3, r3, #1
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	4413      	add	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	899b      	ldrh	r3, [r3, #12]
 8009012:	4619      	mov	r1, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	fbb3 f3f1 	udiv	r3, r3, r1
 800901a:	4413      	add	r3, r2
 800901c:	4619      	mov	r1, r3
 800901e:	6938      	ldr	r0, [r7, #16]
 8009020:	f7ff ff10 	bl	8008e44 <move_window>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	f040 808d 	bne.w	8009146 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	60fa      	str	r2, [r7, #12]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	8992      	ldrh	r2, [r2, #12]
 8009036:	fbb3 f1f2 	udiv	r1, r3, r2
 800903a:	fb02 f201 	mul.w	r2, r2, r1
 800903e:	1a9b      	subs	r3, r3, r2
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4413      	add	r3, r2
 8009044:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009048:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	899b      	ldrh	r3, [r3, #12]
 8009052:	4619      	mov	r1, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	fbb3 f3f1 	udiv	r3, r3, r1
 800905a:	4413      	add	r3, r2
 800905c:	4619      	mov	r1, r3
 800905e:	6938      	ldr	r0, [r7, #16]
 8009060:	f7ff fef0 	bl	8008e44 <move_window>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d16f      	bne.n	800914a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	899b      	ldrh	r3, [r3, #12]
 800906e:	461a      	mov	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	fbb3 f1f2 	udiv	r1, r3, r2
 8009076:	fb02 f201 	mul.w	r2, r2, r1
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4413      	add	r3, r2
 8009080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009084:	021b      	lsls	r3, r3, #8
 8009086:	461a      	mov	r2, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	4313      	orrs	r3, r2
 800908c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <get_fat+0xe0>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	091b      	lsrs	r3, r3, #4
 800909c:	e002      	b.n	80090a4 <get_fat+0xe6>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090a4:	617b      	str	r3, [r7, #20]
			break;
 80090a6:	e055      	b.n	8009154 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	899b      	ldrh	r3, [r3, #12]
 80090b0:	085b      	lsrs	r3, r3, #1
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	4619      	mov	r1, r3
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80090bc:	4413      	add	r3, r2
 80090be:	4619      	mov	r1, r3
 80090c0:	6938      	ldr	r0, [r7, #16]
 80090c2:	f7ff febf 	bl	8008e44 <move_window>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d140      	bne.n	800914e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	8992      	ldrh	r2, [r2, #12]
 80090da:	fbb3 f0f2 	udiv	r0, r3, r2
 80090de:	fb02 f200 	mul.w	r2, r2, r0
 80090e2:	1a9b      	subs	r3, r3, r2
 80090e4:	440b      	add	r3, r1
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff fbfc 	bl	80088e4 <ld_word>
 80090ec:	4603      	mov	r3, r0
 80090ee:	617b      	str	r3, [r7, #20]
			break;
 80090f0:	e030      	b.n	8009154 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	899b      	ldrh	r3, [r3, #12]
 80090fa:	089b      	lsrs	r3, r3, #2
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	4619      	mov	r1, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	fbb3 f3f1 	udiv	r3, r3, r1
 8009106:	4413      	add	r3, r2
 8009108:	4619      	mov	r1, r3
 800910a:	6938      	ldr	r0, [r7, #16]
 800910c:	f7ff fe9a 	bl	8008e44 <move_window>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d11d      	bne.n	8009152 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	8992      	ldrh	r2, [r2, #12]
 8009124:	fbb3 f0f2 	udiv	r0, r3, r2
 8009128:	fb02 f200 	mul.w	r2, r2, r0
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	440b      	add	r3, r1
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff fbef 	bl	8008914 <ld_dword>
 8009136:	4603      	mov	r3, r0
 8009138:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800913c:	617b      	str	r3, [r7, #20]
			break;
 800913e:	e009      	b.n	8009154 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009140:	2301      	movs	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e006      	b.n	8009154 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009146:	bf00      	nop
 8009148:	e004      	b.n	8009154 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800914a:	bf00      	nop
 800914c:	e002      	b.n	8009154 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009152:	bf00      	nop
		}
	}

	return val;
 8009154:	697b      	ldr	r3, [r7, #20]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800915e:	b590      	push	{r4, r7, lr}
 8009160:	b089      	sub	sp, #36	; 0x24
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800916a:	2302      	movs	r3, #2
 800916c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b01      	cmp	r3, #1
 8009172:	f240 8106 	bls.w	8009382 <put_fat+0x224>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	429a      	cmp	r2, r3
 800917e:	f080 8100 	bcs.w	8009382 <put_fat+0x224>
		switch (fs->fs_type) {
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b02      	cmp	r3, #2
 8009188:	f000 8088 	beq.w	800929c <put_fat+0x13e>
 800918c:	2b03      	cmp	r3, #3
 800918e:	f000 80b0 	beq.w	80092f2 <put_fat+0x194>
 8009192:	2b01      	cmp	r3, #1
 8009194:	f040 80f5 	bne.w	8009382 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	61bb      	str	r3, [r7, #24]
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	4413      	add	r3, r2
 80091a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	899b      	ldrh	r3, [r3, #12]
 80091ae:	4619      	mov	r1, r3
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80091b6:	4413      	add	r3, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f7ff fe42 	bl	8008e44 <move_window>
 80091c0:	4603      	mov	r3, r0
 80091c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091c4:	7ffb      	ldrb	r3, [r7, #31]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f040 80d4 	bne.w	8009374 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	61ba      	str	r2, [r7, #24]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	8992      	ldrh	r2, [r2, #12]
 80091dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80091e0:	fb02 f200 	mul.w	r2, r2, r0
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	440b      	add	r3, r1
 80091e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00d      	beq.n	8009210 <put_fat+0xb2>
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	b25b      	sxtb	r3, r3
 80091fa:	f003 030f 	and.w	r3, r3, #15
 80091fe:	b25a      	sxtb	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	b25b      	sxtb	r3, r3
 8009208:	4313      	orrs	r3, r2
 800920a:	b25b      	sxtb	r3, r3
 800920c:	b2db      	uxtb	r3, r3
 800920e:	e001      	b.n	8009214 <put_fat+0xb6>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2201      	movs	r2, #1
 800921c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	899b      	ldrh	r3, [r3, #12]
 8009226:	4619      	mov	r1, r3
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	fbb3 f3f1 	udiv	r3, r3, r1
 800922e:	4413      	add	r3, r2
 8009230:	4619      	mov	r1, r3
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff fe06 	bl	8008e44 <move_window>
 8009238:	4603      	mov	r3, r0
 800923a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800923c:	7ffb      	ldrb	r3, [r7, #31]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f040 809a 	bne.w	8009378 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	899b      	ldrh	r3, [r3, #12]
 800924e:	461a      	mov	r2, r3
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	fbb3 f0f2 	udiv	r0, r3, r2
 8009256:	fb02 f200 	mul.w	r2, r2, r0
 800925a:	1a9b      	subs	r3, r3, r2
 800925c:	440b      	add	r3, r1
 800925e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <put_fat+0x114>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	091b      	lsrs	r3, r3, #4
 800926e:	b2db      	uxtb	r3, r3
 8009270:	e00e      	b.n	8009290 <put_fat+0x132>
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	b25b      	sxtb	r3, r3
 8009278:	f023 030f 	bic.w	r3, r3, #15
 800927c:	b25a      	sxtb	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	b25b      	sxtb	r3, r3
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	b25b      	sxtb	r3, r3
 800928a:	4313      	orrs	r3, r2
 800928c:	b25b      	sxtb	r3, r3
 800928e:	b2db      	uxtb	r3, r3
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	70da      	strb	r2, [r3, #3]
			break;
 800929a:	e072      	b.n	8009382 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	899b      	ldrh	r3, [r3, #12]
 80092a4:	085b      	lsrs	r3, r3, #1
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	4619      	mov	r1, r3
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80092b0:	4413      	add	r3, r2
 80092b2:	4619      	mov	r1, r3
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff fdc5 	bl	8008e44 <move_window>
 80092ba:	4603      	mov	r3, r0
 80092bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092be:	7ffb      	ldrb	r3, [r7, #31]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d15b      	bne.n	800937c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	8992      	ldrh	r2, [r2, #12]
 80092d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80092d6:	fb02 f200 	mul.w	r2, r2, r0
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	440b      	add	r3, r1
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	b292      	uxth	r2, r2
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff fb38 	bl	800895a <st_word>
			fs->wflag = 1;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	70da      	strb	r2, [r3, #3]
			break;
 80092f0:	e047      	b.n	8009382 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	899b      	ldrh	r3, [r3, #12]
 80092fa:	089b      	lsrs	r3, r3, #2
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	4619      	mov	r1, r3
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	fbb3 f3f1 	udiv	r3, r3, r1
 8009306:	4413      	add	r3, r2
 8009308:	4619      	mov	r1, r3
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f7ff fd9a 	bl	8008e44 <move_window>
 8009310:	4603      	mov	r3, r0
 8009312:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009314:	7ffb      	ldrb	r3, [r7, #31]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d132      	bne.n	8009380 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	8992      	ldrh	r2, [r2, #12]
 800932e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009332:	fb02 f200 	mul.w	r2, r2, r0
 8009336:	1a9b      	subs	r3, r3, r2
 8009338:	440b      	add	r3, r1
 800933a:	4618      	mov	r0, r3
 800933c:	f7ff faea 	bl	8008914 <ld_dword>
 8009340:	4603      	mov	r3, r0
 8009342:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009346:	4323      	orrs	r3, r4
 8009348:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	8992      	ldrh	r2, [r2, #12]
 8009358:	fbb3 f0f2 	udiv	r0, r3, r2
 800935c:	fb02 f200 	mul.w	r2, r2, r0
 8009360:	1a9b      	subs	r3, r3, r2
 8009362:	440b      	add	r3, r1
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff fb12 	bl	8008990 <st_dword>
			fs->wflag = 1;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	70da      	strb	r2, [r3, #3]
			break;
 8009372:	e006      	b.n	8009382 <put_fat+0x224>
			if (res != FR_OK) break;
 8009374:	bf00      	nop
 8009376:	e004      	b.n	8009382 <put_fat+0x224>
			if (res != FR_OK) break;
 8009378:	bf00      	nop
 800937a:	e002      	b.n	8009382 <put_fat+0x224>
			if (res != FR_OK) break;
 800937c:	bf00      	nop
 800937e:	e000      	b.n	8009382 <put_fat+0x224>
			if (res != FR_OK) break;
 8009380:	bf00      	nop
		}
	}
	return res;
 8009382:	7ffb      	ldrb	r3, [r7, #31]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3724      	adds	r7, #36	; 0x24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd90      	pop	{r4, r7, pc}

0800938c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d904      	bls.n	80093b2 <remove_chain+0x26>
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d301      	bcc.n	80093b6 <remove_chain+0x2a>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e04b      	b.n	800944e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00c      	beq.n	80093d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80093bc:	f04f 32ff 	mov.w	r2, #4294967295
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	69b8      	ldr	r0, [r7, #24]
 80093c4:	f7ff fecb 	bl	800915e <put_fat>
 80093c8:	4603      	mov	r3, r0
 80093ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80093cc:	7ffb      	ldrb	r3, [r7, #31]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <remove_chain+0x4a>
 80093d2:	7ffb      	ldrb	r3, [r7, #31]
 80093d4:	e03b      	b.n	800944e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7ff fdf0 	bl	8008fbe <get_fat>
 80093de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d031      	beq.n	800944a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d101      	bne.n	80093f0 <remove_chain+0x64>
 80093ec:	2302      	movs	r3, #2
 80093ee:	e02e      	b.n	800944e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f6:	d101      	bne.n	80093fc <remove_chain+0x70>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e028      	b.n	800944e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80093fc:	2200      	movs	r2, #0
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	69b8      	ldr	r0, [r7, #24]
 8009402:	f7ff feac 	bl	800915e <put_fat>
 8009406:	4603      	mov	r3, r0
 8009408:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800940a:	7ffb      	ldrb	r3, [r7, #31]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <remove_chain+0x88>
 8009410:	7ffb      	ldrb	r3, [r7, #31]
 8009412:	e01c      	b.n	800944e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	699a      	ldr	r2, [r3, #24]
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	3b02      	subs	r3, #2
 800941e:	429a      	cmp	r2, r3
 8009420:	d20b      	bcs.n	800943a <remove_chain+0xae>
			fs->free_clst++;
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	791b      	ldrb	r3, [r3, #4]
 8009430:	f043 0301 	orr.w	r3, r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	429a      	cmp	r2, r3
 8009446:	d3c6      	bcc.n	80093d6 <remove_chain+0x4a>
 8009448:	e000      	b.n	800944c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800944a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3720      	adds	r7, #32
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b088      	sub	sp, #32
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10d      	bne.n	8009488 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d004      	beq.n	8009482 <create_chain+0x2c>
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	429a      	cmp	r2, r3
 8009480:	d31b      	bcc.n	80094ba <create_chain+0x64>
 8009482:	2301      	movs	r3, #1
 8009484:	61bb      	str	r3, [r7, #24]
 8009486:	e018      	b.n	80094ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff fd97 	bl	8008fbe <get_fat>
 8009490:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d801      	bhi.n	800949c <create_chain+0x46>
 8009498:	2301      	movs	r3, #1
 800949a:	e070      	b.n	800957e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a2:	d101      	bne.n	80094a8 <create_chain+0x52>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	e06a      	b.n	800957e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d201      	bcs.n	80094b6 <create_chain+0x60>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	e063      	b.n	800957e <create_chain+0x128>
		scl = clst;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	3301      	adds	r3, #1
 80094c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d307      	bcc.n	80094de <create_chain+0x88>
				ncl = 2;
 80094ce:	2302      	movs	r3, #2
 80094d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d901      	bls.n	80094de <create_chain+0x88>
 80094da:	2300      	movs	r3, #0
 80094dc:	e04f      	b.n	800957e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80094de:	69f9      	ldr	r1, [r7, #28]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff fd6c 	bl	8008fbe <get_fat>
 80094e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00e      	beq.n	800950c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d003      	beq.n	80094fc <create_chain+0xa6>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fa:	d101      	bne.n	8009500 <create_chain+0xaa>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	e03e      	b.n	800957e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009500:	69fa      	ldr	r2, [r7, #28]
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	d1da      	bne.n	80094be <create_chain+0x68>
 8009508:	2300      	movs	r3, #0
 800950a:	e038      	b.n	800957e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800950c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	69f9      	ldr	r1, [r7, #28]
 8009514:	6938      	ldr	r0, [r7, #16]
 8009516:	f7ff fe22 	bl	800915e <put_fat>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d109      	bne.n	8009538 <create_chain+0xe2>
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d006      	beq.n	8009538 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800952a:	69fa      	ldr	r2, [r7, #28]
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6938      	ldr	r0, [r7, #16]
 8009530:	f7ff fe15 	bl	800915e <put_fat>
 8009534:	4603      	mov	r3, r0
 8009536:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d116      	bne.n	800956c <create_chain+0x116>
		fs->last_clst = ncl;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	699a      	ldr	r2, [r3, #24]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	3b02      	subs	r3, #2
 800954e:	429a      	cmp	r2, r3
 8009550:	d804      	bhi.n	800955c <create_chain+0x106>
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	1e5a      	subs	r2, r3, #1
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	791b      	ldrb	r3, [r3, #4]
 8009560:	f043 0301 	orr.w	r3, r3, #1
 8009564:	b2da      	uxtb	r2, r3
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	711a      	strb	r2, [r3, #4]
 800956a:	e007      	b.n	800957c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d102      	bne.n	8009578 <create_chain+0x122>
 8009572:	f04f 33ff 	mov.w	r3, #4294967295
 8009576:	e000      	b.n	800957a <create_chain+0x124>
 8009578:	2301      	movs	r3, #1
 800957a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800957c:	69fb      	ldr	r3, [r7, #28]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3720      	adds	r7, #32
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009586:	b480      	push	{r7}
 8009588:	b087      	sub	sp, #28
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	3304      	adds	r3, #4
 800959c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	899b      	ldrh	r3, [r3, #12]
 80095a2:	461a      	mov	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	8952      	ldrh	r2, [r2, #10]
 80095ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80095b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	613a      	str	r2, [r7, #16]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <clmt_clust+0x42>
 80095c4:	2300      	movs	r3, #0
 80095c6:	e010      	b.n	80095ea <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d307      	bcc.n	80095e0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	3304      	adds	r3, #4
 80095dc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80095de:	e7e9      	b.n	80095b4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80095e0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	4413      	add	r3, r2
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b086      	sub	sp, #24
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800960c:	d204      	bcs.n	8009618 <dir_sdi+0x22>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f003 031f 	and.w	r3, r3, #31
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009618:	2302      	movs	r3, #2
 800961a:	e071      	b.n	8009700 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <dir_sdi+0x46>
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d902      	bls.n	800963c <dir_sdi+0x46>
		clst = fs->dirbase;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10c      	bne.n	800965c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	095b      	lsrs	r3, r3, #5
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	8912      	ldrh	r2, [r2, #8]
 800964a:	4293      	cmp	r3, r2
 800964c:	d301      	bcc.n	8009652 <dir_sdi+0x5c>
 800964e:	2302      	movs	r3, #2
 8009650:	e056      	b.n	8009700 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	61da      	str	r2, [r3, #28]
 800965a:	e02d      	b.n	80096b8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	895b      	ldrh	r3, [r3, #10]
 8009660:	461a      	mov	r2, r3
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	899b      	ldrh	r3, [r3, #12]
 8009666:	fb03 f302 	mul.w	r3, r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800966c:	e019      	b.n	80096a2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6979      	ldr	r1, [r7, #20]
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff fca3 	bl	8008fbe <get_fat>
 8009678:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d101      	bne.n	8009686 <dir_sdi+0x90>
 8009682:	2301      	movs	r3, #1
 8009684:	e03c      	b.n	8009700 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d904      	bls.n	8009696 <dir_sdi+0xa0>
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	429a      	cmp	r2, r3
 8009694:	d301      	bcc.n	800969a <dir_sdi+0xa4>
 8009696:	2302      	movs	r3, #2
 8009698:	e032      	b.n	8009700 <dir_sdi+0x10a>
			ofs -= csz;
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d2e1      	bcs.n	800966e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80096aa:	6979      	ldr	r1, [r7, #20]
 80096ac:	6938      	ldr	r0, [r7, #16]
 80096ae:	f7ff fc67 	bl	8008f80 <clust2sect>
 80096b2:	4602      	mov	r2, r0
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <dir_sdi+0xd4>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e01a      	b.n	8009700 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69da      	ldr	r2, [r3, #28]
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	899b      	ldrh	r3, [r3, #12]
 80096d2:	4619      	mov	r1, r3
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80096da:	441a      	add	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	899b      	ldrh	r3, [r3, #12]
 80096ea:	461a      	mov	r2, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80096f2:	fb02 f200 	mul.w	r2, r2, r0
 80096f6:	1a9b      	subs	r3, r3, r2
 80096f8:	18ca      	adds	r2, r1, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3718      	adds	r7, #24
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	3320      	adds	r3, #32
 800971e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <dir_next+0x28>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800972e:	d301      	bcc.n	8009734 <dir_next+0x2c>
 8009730:	2304      	movs	r3, #4
 8009732:	e0bb      	b.n	80098ac <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	899b      	ldrh	r3, [r3, #12]
 8009738:	461a      	mov	r2, r3
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009740:	fb02 f201 	mul.w	r2, r2, r1
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	2b00      	cmp	r3, #0
 8009748:	f040 809d 	bne.w	8009886 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10b      	bne.n	8009776 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	095b      	lsrs	r3, r3, #5
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	8912      	ldrh	r2, [r2, #8]
 8009766:	4293      	cmp	r3, r2
 8009768:	f0c0 808d 	bcc.w	8009886 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	61da      	str	r2, [r3, #28]
 8009772:	2304      	movs	r3, #4
 8009774:	e09a      	b.n	80098ac <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	899b      	ldrh	r3, [r3, #12]
 800977a:	461a      	mov	r2, r3
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	8952      	ldrh	r2, [r2, #10]
 8009786:	3a01      	subs	r2, #1
 8009788:	4013      	ands	r3, r2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d17b      	bne.n	8009886 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f7ff fc11 	bl	8008fbe <get_fat>
 800979c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d801      	bhi.n	80097a8 <dir_next+0xa0>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e081      	b.n	80098ac <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ae:	d101      	bne.n	80097b4 <dir_next+0xac>
 80097b0:	2301      	movs	r3, #1
 80097b2:	e07b      	b.n	80098ac <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d359      	bcc.n	8009872 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	61da      	str	r2, [r3, #28]
 80097ca:	2304      	movs	r3, #4
 80097cc:	e06e      	b.n	80098ac <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f7ff fe3d 	bl	8009456 <create_chain>
 80097dc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <dir_next+0xe0>
 80097e4:	2307      	movs	r3, #7
 80097e6:	e061      	b.n	80098ac <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d101      	bne.n	80097f2 <dir_next+0xea>
 80097ee:	2302      	movs	r3, #2
 80097f0:	e05c      	b.n	80098ac <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f8:	d101      	bne.n	80097fe <dir_next+0xf6>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e056      	b.n	80098ac <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff fadc 	bl	8008dbc <sync_window>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <dir_next+0x106>
 800980a:	2301      	movs	r3, #1
 800980c:	e04e      	b.n	80098ac <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	899b      	ldrh	r3, [r3, #12]
 8009818:	461a      	mov	r2, r3
 800981a:	2100      	movs	r1, #0
 800981c:	f7ff f905 	bl	8008a2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009820:	2300      	movs	r3, #0
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	6979      	ldr	r1, [r7, #20]
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f7ff fbaa 	bl	8008f80 <clust2sect>
 800982c:	4602      	mov	r2, r0
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	635a      	str	r2, [r3, #52]	; 0x34
 8009832:	e012      	b.n	800985a <dir_next+0x152>
						fs->wflag = 1;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f7ff fabe 	bl	8008dbc <sync_window>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <dir_next+0x142>
 8009846:	2301      	movs	r3, #1
 8009848:	e030      	b.n	80098ac <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	3301      	adds	r3, #1
 800984e:	613b      	str	r3, [r7, #16]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	635a      	str	r2, [r3, #52]	; 0x34
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	895b      	ldrh	r3, [r3, #10]
 800985e:	461a      	mov	r2, r3
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	4293      	cmp	r3, r2
 8009864:	d3e6      	bcc.n	8009834 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	1ad2      	subs	r2, r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009878:	6979      	ldr	r1, [r7, #20]
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fb80 	bl	8008f80 <clust2sect>
 8009880:	4602      	mov	r2, r0
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	899b      	ldrh	r3, [r3, #12]
 8009896:	461a      	mov	r2, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	fbb3 f0f2 	udiv	r0, r3, r2
 800989e:	fb02 f200 	mul.w	r2, r2, r0
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	18ca      	adds	r2, r1, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80098c4:	2100      	movs	r1, #0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff fe95 	bl	80095f6 <dir_sdi>
 80098cc:	4603      	mov	r3, r0
 80098ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d12b      	bne.n	800992e <dir_alloc+0x7a>
		n = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	4619      	mov	r1, r3
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff faaf 	bl	8008e44 <move_window>
 80098e6:	4603      	mov	r3, r0
 80098e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11d      	bne.n	800992c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2be5      	cmp	r3, #229	; 0xe5
 80098f8:	d004      	beq.n	8009904 <dir_alloc+0x50>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d107      	bne.n	8009914 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	3301      	adds	r3, #1
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	429a      	cmp	r2, r3
 8009910:	d102      	bne.n	8009918 <dir_alloc+0x64>
 8009912:	e00c      	b.n	800992e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009914:	2300      	movs	r3, #0
 8009916:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009918:	2101      	movs	r1, #1
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7ff fef4 	bl	8009708 <dir_next>
 8009920:	4603      	mov	r3, r0
 8009922:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0d7      	beq.n	80098da <dir_alloc+0x26>
 800992a:	e000      	b.n	800992e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800992c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800992e:	7dfb      	ldrb	r3, [r7, #23]
 8009930:	2b04      	cmp	r3, #4
 8009932:	d101      	bne.n	8009938 <dir_alloc+0x84>
 8009934:	2307      	movs	r3, #7
 8009936:	75fb      	strb	r3, [r7, #23]
	return res;
 8009938:	7dfb      	ldrb	r3, [r7, #23]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	331a      	adds	r3, #26
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe ffc7 	bl	80088e4 <ld_word>
 8009956:	4603      	mov	r3, r0
 8009958:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b03      	cmp	r3, #3
 8009960:	d109      	bne.n	8009976 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	3314      	adds	r3, #20
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe ffbc 	bl	80088e4 <ld_word>
 800996c:	4603      	mov	r3, r0
 800996e:	041b      	lsls	r3, r3, #16
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	4313      	orrs	r3, r2
 8009974:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009976:	68fb      	ldr	r3, [r7, #12]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	331a      	adds	r3, #26
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	b292      	uxth	r2, r2
 8009994:	4611      	mov	r1, r2
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe ffdf 	bl	800895a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d109      	bne.n	80099b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f103 0214 	add.w	r2, r3, #20
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	0c1b      	lsrs	r3, r3, #16
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4619      	mov	r1, r3
 80099b2:	4610      	mov	r0, r2
 80099b4:	f7fe ffd1 	bl	800895a <st_word>
	}
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80099c0:	b590      	push	{r4, r7, lr}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	331a      	adds	r3, #26
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe ff88 	bl	80088e4 <ld_word>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <cmp_lfn+0x1e>
 80099da:	2300      	movs	r3, #0
 80099dc:	e059      	b.n	8009a92 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099e6:	1e5a      	subs	r2, r3, #1
 80099e8:	4613      	mov	r3, r2
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80099f4:	2301      	movs	r3, #1
 80099f6:	81fb      	strh	r3, [r7, #14]
 80099f8:	2300      	movs	r3, #0
 80099fa:	613b      	str	r3, [r7, #16]
 80099fc:	e033      	b.n	8009a66 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80099fe:	4a27      	ldr	r2, [pc, #156]	; (8009a9c <cmp_lfn+0xdc>)
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	4413      	add	r3, r2
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe ff69 	bl	80088e4 <ld_word>
 8009a12:	4603      	mov	r3, r0
 8009a14:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009a16:	89fb      	ldrh	r3, [r7, #14]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01a      	beq.n	8009a52 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	2bfe      	cmp	r3, #254	; 0xfe
 8009a20:	d812      	bhi.n	8009a48 <cmp_lfn+0x88>
 8009a22:	89bb      	ldrh	r3, [r7, #12]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f002 f837 	bl	800ba98 <ff_wtoupper>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461c      	mov	r4, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	617a      	str	r2, [r7, #20]
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	4413      	add	r3, r2
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f002 f82b 	bl	800ba98 <ff_wtoupper>
 8009a42:	4603      	mov	r3, r0
 8009a44:	429c      	cmp	r4, r3
 8009a46:	d001      	beq.n	8009a4c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e022      	b.n	8009a92 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009a4c:	89bb      	ldrh	r3, [r7, #12]
 8009a4e:	81fb      	strh	r3, [r7, #14]
 8009a50:	e006      	b.n	8009a60 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009a52:	89bb      	ldrh	r3, [r7, #12]
 8009a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d001      	beq.n	8009a60 <cmp_lfn+0xa0>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e018      	b.n	8009a92 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	3301      	adds	r3, #1
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b0c      	cmp	r3, #12
 8009a6a:	d9c8      	bls.n	80099fe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00b      	beq.n	8009a90 <cmp_lfn+0xd0>
 8009a78:	89fb      	ldrh	r3, [r7, #14]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d008      	beq.n	8009a90 <cmp_lfn+0xd0>
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <cmp_lfn+0xd0>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e000      	b.n	8009a92 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009a90:	2301      	movs	r3, #1
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	371c      	adds	r7, #28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd90      	pop	{r4, r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0800e768 	.word	0x0800e768

08009aa0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4611      	mov	r1, r2
 8009aac:	461a      	mov	r2, r3
 8009aae:	460b      	mov	r3, r1
 8009ab0:	71fb      	strb	r3, [r7, #7]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	330d      	adds	r3, #13
 8009aba:	79ba      	ldrb	r2, [r7, #6]
 8009abc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	330b      	adds	r3, #11
 8009ac2:	220f      	movs	r2, #15
 8009ac4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	330c      	adds	r3, #12
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	331a      	adds	r3, #26
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fe ff40 	bl	800895a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	1e5a      	subs	r2, r3, #1
 8009ade:	4613      	mov	r3, r2
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	82fb      	strh	r3, [r7, #22]
 8009aee:	2300      	movs	r3, #0
 8009af0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009af2:	8afb      	ldrh	r3, [r7, #22]
 8009af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d007      	beq.n	8009b0c <put_lfn+0x6c>
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	61fa      	str	r2, [r7, #28]
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4413      	add	r3, r2
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009b0c:	4a17      	ldr	r2, [pc, #92]	; (8009b6c <put_lfn+0xcc>)
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	4413      	add	r3, r2
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	4413      	add	r3, r2
 8009b1a:	8afa      	ldrh	r2, [r7, #22]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe ff1b 	bl	800895a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009b24:	8afb      	ldrh	r3, [r7, #22]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d102      	bne.n	8009b30 <put_lfn+0x90>
 8009b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b2e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	3301      	adds	r3, #1
 8009b34:	61bb      	str	r3, [r7, #24]
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	2b0c      	cmp	r3, #12
 8009b3a:	d9da      	bls.n	8009af2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009b3c:	8afb      	ldrh	r3, [r7, #22]
 8009b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d006      	beq.n	8009b54 <put_lfn+0xb4>
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d103      	bne.n	8009b5c <put_lfn+0xbc>
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	79fa      	ldrb	r2, [r7, #7]
 8009b60:	701a      	strb	r2, [r3, #0]
}
 8009b62:	bf00      	nop
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0800e768 	.word	0x0800e768

08009b70 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08c      	sub	sp, #48	; 0x30
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009b7e:	220b      	movs	r2, #11
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f7fe ff30 	bl	80089e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d92b      	bls.n	8009be6 <gen_numname+0x76>
		sr = seq;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009b92:	e022      	b.n	8009bda <gen_numname+0x6a>
			wc = *lfn++;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	1c9a      	adds	r2, r3, #2
 8009b98:	607a      	str	r2, [r7, #4]
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba2:	e017      	b.n	8009bd4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	005a      	lsls	r2, r3, #1
 8009ba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	4413      	add	r3, r2
 8009bb0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009bb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bb4:	085b      	lsrs	r3, r3, #1
 8009bb6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <gen_numname+0x5e>
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009bc8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009bcc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	2b0f      	cmp	r3, #15
 8009bd8:	d9e4      	bls.n	8009ba4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1d8      	bne.n	8009b94 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009be6:	2307      	movs	r3, #7
 8009be8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	f003 030f 	and.w	r3, r3, #15
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	3330      	adds	r3, #48	; 0x30
 8009bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bfe:	2b39      	cmp	r3, #57	; 0x39
 8009c00:	d904      	bls.n	8009c0c <gen_numname+0x9c>
 8009c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c06:	3307      	adds	r3, #7
 8009c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0e:	1e5a      	subs	r2, r3, #1
 8009c10:	62ba      	str	r2, [r7, #40]	; 0x28
 8009c12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009c16:	4413      	add	r3, r2
 8009c18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009c1c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	091b      	lsrs	r3, r3, #4
 8009c24:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1de      	bne.n	8009bea <gen_numname+0x7a>
	ns[i] = '~';
 8009c2c:	f107 0214 	add.w	r2, r7, #20
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	4413      	add	r3, r2
 8009c34:	227e      	movs	r2, #126	; 0x7e
 8009c36:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009c38:	2300      	movs	r3, #0
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3c:	e002      	b.n	8009c44 <gen_numname+0xd4>
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	3301      	adds	r3, #1
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
 8009c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d205      	bcs.n	8009c58 <gen_numname+0xe8>
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	4413      	add	r3, r2
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b20      	cmp	r3, #32
 8009c56:	d1f2      	bne.n	8009c3e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	2b07      	cmp	r3, #7
 8009c5c:	d808      	bhi.n	8009c70 <gen_numname+0x100>
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	62ba      	str	r2, [r7, #40]	; 0x28
 8009c64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009c68:	4413      	add	r3, r2
 8009c6a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009c6e:	e000      	b.n	8009c72 <gen_numname+0x102>
 8009c70:	2120      	movs	r1, #32
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	627a      	str	r2, [r7, #36]	; 0x24
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	460a      	mov	r2, r1
 8009c7e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	2b07      	cmp	r3, #7
 8009c84:	d9e8      	bls.n	8009c58 <gen_numname+0xe8>
}
 8009c86:	bf00      	nop
 8009c88:	3730      	adds	r7, #48	; 0x30
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b085      	sub	sp, #20
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009c9a:	230b      	movs	r3, #11
 8009c9c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	0852      	lsrs	r2, r2, #1
 8009ca4:	01db      	lsls	r3, r3, #7
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	1c59      	adds	r1, r3, #1
 8009cae:	6079      	str	r1, [r7, #4]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	60bb      	str	r3, [r7, #8]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1ed      	bne.n	8009c9e <sum_sfn+0x10>
	return sum;
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009cde:	2100      	movs	r1, #0
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff fc88 	bl	80095f6 <dir_sdi>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <dir_find+0x24>
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	e0a9      	b.n	8009e48 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009cf4:	23ff      	movs	r3, #255	; 0xff
 8009cf6:	753b      	strb	r3, [r7, #20]
 8009cf8:	7d3b      	ldrb	r3, [r7, #20]
 8009cfa:	757b      	strb	r3, [r7, #21]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6938      	ldr	r0, [r7, #16]
 8009d0c:	f7ff f89a 	bl	8008e44 <move_window>
 8009d10:	4603      	mov	r3, r0
 8009d12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f040 8090 	bne.w	8009e3c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d24:	7dbb      	ldrb	r3, [r7, #22]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d102      	bne.n	8009d30 <dir_find+0x60>
 8009d2a:	2304      	movs	r3, #4
 8009d2c:	75fb      	strb	r3, [r7, #23]
 8009d2e:	e08a      	b.n	8009e46 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	330b      	adds	r3, #11
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d3c:	73fb      	strb	r3, [r7, #15]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	7bfa      	ldrb	r2, [r7, #15]
 8009d42:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009d44:	7dbb      	ldrb	r3, [r7, #22]
 8009d46:	2be5      	cmp	r3, #229	; 0xe5
 8009d48:	d007      	beq.n	8009d5a <dir_find+0x8a>
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	f003 0308 	and.w	r3, r3, #8
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <dir_find+0x98>
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	2b0f      	cmp	r3, #15
 8009d58:	d006      	beq.n	8009d68 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d5a:	23ff      	movs	r3, #255	; 0xff
 8009d5c:	757b      	strb	r3, [r7, #21]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f04f 32ff 	mov.w	r2, #4294967295
 8009d64:	631a      	str	r2, [r3, #48]	; 0x30
 8009d66:	e05e      	b.n	8009e26 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2b0f      	cmp	r3, #15
 8009d6c:	d136      	bne.n	8009ddc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d154      	bne.n	8009e26 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009d7c:	7dbb      	ldrb	r3, [r7, #22]
 8009d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00d      	beq.n	8009da2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	7b5b      	ldrb	r3, [r3, #13]
 8009d8c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009d8e:	7dbb      	ldrb	r3, [r7, #22]
 8009d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d94:	75bb      	strb	r3, [r7, #22]
 8009d96:	7dbb      	ldrb	r3, [r7, #22]
 8009d98:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	695a      	ldr	r2, [r3, #20]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009da2:	7dba      	ldrb	r2, [r7, #22]
 8009da4:	7d7b      	ldrb	r3, [r7, #21]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d115      	bne.n	8009dd6 <dir_find+0x106>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	330d      	adds	r3, #13
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	7d3a      	ldrb	r2, [r7, #20]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d10e      	bne.n	8009dd6 <dir_find+0x106>
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	f7ff fdfc 	bl	80099c0 <cmp_lfn>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <dir_find+0x106>
 8009dce:	7d7b      	ldrb	r3, [r7, #21]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	e000      	b.n	8009dd8 <dir_find+0x108>
 8009dd6:	23ff      	movs	r3, #255	; 0xff
 8009dd8:	757b      	strb	r3, [r7, #21]
 8009dda:	e024      	b.n	8009e26 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009ddc:	7d7b      	ldrb	r3, [r7, #21]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d109      	bne.n	8009df6 <dir_find+0x126>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7ff ff51 	bl	8009c8e <sum_sfn>
 8009dec:	4603      	mov	r3, r0
 8009dee:	461a      	mov	r2, r3
 8009df0:	7d3b      	ldrb	r3, [r7, #20]
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d024      	beq.n	8009e40 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <dir_find+0x14a>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a18      	ldr	r0, [r3, #32]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3324      	adds	r3, #36	; 0x24
 8009e0c:	220b      	movs	r2, #11
 8009e0e:	4619      	mov	r1, r3
 8009e10:	f7fe fe25 	bl	8008a5e <mem_cmp>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d014      	beq.n	8009e44 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009e1a:	23ff      	movs	r3, #255	; 0xff
 8009e1c:	757b      	strb	r3, [r7, #21]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e26:	2100      	movs	r1, #0
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff fc6d 	bl	8009708 <dir_next>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f43f af65 	beq.w	8009d04 <dir_find+0x34>
 8009e3a:	e004      	b.n	8009e46 <dir_find+0x176>
		if (res != FR_OK) break;
 8009e3c:	bf00      	nop
 8009e3e:	e002      	b.n	8009e46 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009e40:	bf00      	nop
 8009e42:	e000      	b.n	8009e46 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009e44:	bf00      	nop

	return res;
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3718      	adds	r7, #24
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b08c      	sub	sp, #48	; 0x30
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e64:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <dir_register+0x20>
 8009e6c:	2306      	movs	r3, #6
 8009e6e:	e0e0      	b.n	800a032 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009e70:	2300      	movs	r3, #0
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
 8009e74:	e002      	b.n	8009e7c <dir_register+0x2c>
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	3301      	adds	r3, #1
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	691a      	ldr	r2, [r3, #16]
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	4413      	add	r3, r2
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1f4      	bne.n	8009e76 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009e92:	f107 030c 	add.w	r3, r7, #12
 8009e96:	220c      	movs	r2, #12
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fda5 	bl	80089e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d032      	beq.n	8009f0e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2240      	movs	r2, #64	; 0x40
 8009eac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eb4:	e016      	b.n	8009ee4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	f107 010c 	add.w	r1, r7, #12
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	f7ff fe53 	bl	8009b70 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7ff ff00 	bl	8009cd0 <dir_find>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	2b63      	cmp	r3, #99	; 0x63
 8009ee8:	d9e5      	bls.n	8009eb6 <dir_register+0x66>
 8009eea:	e000      	b.n	8009eee <dir_register+0x9e>
			if (res != FR_OK) break;
 8009eec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	2b64      	cmp	r3, #100	; 0x64
 8009ef2:	d101      	bne.n	8009ef8 <dir_register+0xa8>
 8009ef4:	2307      	movs	r3, #7
 8009ef6:	e09c      	b.n	800a032 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d002      	beq.n	8009f06 <dir_register+0xb6>
 8009f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f04:	e095      	b.n	800a032 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009f06:	7dfa      	ldrb	r2, [r7, #23]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d007      	beq.n	8009f28 <dir_register+0xd8>
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	330c      	adds	r3, #12
 8009f1c:	4a47      	ldr	r2, [pc, #284]	; (800a03c <dir_register+0x1ec>)
 8009f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f22:	089b      	lsrs	r3, r3, #2
 8009f24:	3301      	adds	r3, #1
 8009f26:	e000      	b.n	8009f2a <dir_register+0xda>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009f2c:	6a39      	ldr	r1, [r7, #32]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff fcc0 	bl	80098b4 <dir_alloc>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009f3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d148      	bne.n	8009fd4 <dir_register+0x184>
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	623b      	str	r3, [r7, #32]
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d042      	beq.n	8009fd4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	695a      	ldr	r2, [r3, #20]
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	015b      	lsls	r3, r3, #5
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff fb4b 	bl	80095f6 <dir_sdi>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d132      	bne.n	8009fd4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	3324      	adds	r3, #36	; 0x24
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fe8b 	bl	8009c8e <sum_sfn>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	4619      	mov	r1, r3
 8009f82:	69f8      	ldr	r0, [r7, #28]
 8009f84:	f7fe ff5e 	bl	8008e44 <move_window>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d11d      	bne.n	8009fd2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	6918      	ldr	r0, [r3, #16]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a19      	ldr	r1, [r3, #32]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	7efb      	ldrb	r3, [r7, #27]
 8009fa4:	f7ff fd7c 	bl	8009aa0 <put_lfn>
				fs->wflag = 1;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	2201      	movs	r2, #1
 8009fac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009fae:	2100      	movs	r1, #0
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff fba9 	bl	8009708 <dir_next>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d107      	bne.n	8009fd4 <dir_register+0x184>
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	623b      	str	r3, [r7, #32]
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1d5      	bne.n	8009f7c <dir_register+0x12c>
 8009fd0:	e000      	b.n	8009fd4 <dir_register+0x184>
				if (res != FR_OK) break;
 8009fd2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d128      	bne.n	800a02e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	69f8      	ldr	r0, [r7, #28]
 8009fe4:	f7fe ff2e 	bl	8008e44 <move_window>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d11b      	bne.n	800a02e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fd13 	bl	8008a2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a18      	ldr	r0, [r3, #32]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3324      	adds	r3, #36	; 0x24
 800a00c:	220b      	movs	r2, #11
 800a00e:	4619      	mov	r1, r3
 800a010:	f7fe fcea 	bl	80089e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	330c      	adds	r3, #12
 800a020:	f002 0218 	and.w	r2, r2, #24
 800a024:	b2d2      	uxtb	r2, r2
 800a026:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	2201      	movs	r2, #1
 800a02c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a02e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a032:	4618      	mov	r0, r3
 800a034:	3730      	adds	r7, #48	; 0x30
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	4ec4ec4f 	.word	0x4ec4ec4f

0800a040 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08a      	sub	sp, #40	; 0x28
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	613b      	str	r3, [r7, #16]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	61ba      	str	r2, [r7, #24]
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	4413      	add	r3, r2
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a06e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a070:	2b1f      	cmp	r3, #31
 800a072:	d940      	bls.n	800a0f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a076:	2b2f      	cmp	r3, #47	; 0x2f
 800a078:	d006      	beq.n	800a088 <create_name+0x48>
 800a07a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a07c:	2b5c      	cmp	r3, #92	; 0x5c
 800a07e:	d110      	bne.n	800a0a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a080:	e002      	b.n	800a088 <create_name+0x48>
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	3301      	adds	r3, #1
 800a086:	61bb      	str	r3, [r7, #24]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	4413      	add	r3, r2
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b2f      	cmp	r3, #47	; 0x2f
 800a092:	d0f6      	beq.n	800a082 <create_name+0x42>
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	4413      	add	r3, r2
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b5c      	cmp	r3, #92	; 0x5c
 800a09e:	d0f0      	beq.n	800a082 <create_name+0x42>
			break;
 800a0a0:	e02a      	b.n	800a0f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2bfe      	cmp	r3, #254	; 0xfe
 800a0a6:	d901      	bls.n	800a0ac <create_name+0x6c>
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	e177      	b.n	800a39c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a0b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 fcb2 	bl	800ba20 <ff_convert>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a0c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <create_name+0x8a>
 800a0c6:	2306      	movs	r3, #6
 800a0c8:	e168      	b.n	800a39c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a0ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0cc:	2b7f      	cmp	r3, #127	; 0x7f
 800a0ce:	d809      	bhi.n	800a0e4 <create_name+0xa4>
 800a0d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	48b3      	ldr	r0, [pc, #716]	; (800a3a4 <create_name+0x364>)
 800a0d6:	f7fe fce9 	bl	8008aac <chk_chr>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <create_name+0xa4>
 800a0e0:	2306      	movs	r3, #6
 800a0e2:	e15b      	b.n	800a39c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	617a      	str	r2, [r7, #20]
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a0f4:	e7b4      	b.n	800a060 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a0f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	441a      	add	r2, r3
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a104:	2b1f      	cmp	r3, #31
 800a106:	d801      	bhi.n	800a10c <create_name+0xcc>
 800a108:	2304      	movs	r3, #4
 800a10a:	e000      	b.n	800a10e <create_name+0xce>
 800a10c:	2300      	movs	r3, #0
 800a10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a112:	e011      	b.n	800a138 <create_name+0xf8>
		w = lfn[di - 1];
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a11a:	3b01      	subs	r3, #1
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	4413      	add	r3, r2
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a128:	2b20      	cmp	r3, #32
 800a12a:	d002      	beq.n	800a132 <create_name+0xf2>
 800a12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a12e:	2b2e      	cmp	r3, #46	; 0x2e
 800a130:	d106      	bne.n	800a140 <create_name+0x100>
		di--;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	3b01      	subs	r3, #1
 800a136:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1ea      	bne.n	800a114 <create_name+0xd4>
 800a13e:	e000      	b.n	800a142 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a140:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	4413      	add	r3, r2
 800a14a:	2200      	movs	r2, #0
 800a14c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <create_name+0x118>
 800a154:	2306      	movs	r3, #6
 800a156:	e121      	b.n	800a39c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3324      	adds	r3, #36	; 0x24
 800a15c:	220b      	movs	r2, #11
 800a15e:	2120      	movs	r1, #32
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe fc62 	bl	8008a2a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a166:	2300      	movs	r3, #0
 800a168:	61bb      	str	r3, [r7, #24]
 800a16a:	e002      	b.n	800a172 <create_name+0x132>
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	3301      	adds	r3, #1
 800a170:	61bb      	str	r3, [r7, #24]
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	d0f5      	beq.n	800a16c <create_name+0x12c>
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	2b2e      	cmp	r3, #46	; 0x2e
 800a18c:	d0ee      	beq.n	800a16c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d009      	beq.n	800a1a8 <create_name+0x168>
 800a194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a198:	f043 0303 	orr.w	r3, r3, #3
 800a19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a1a0:	e002      	b.n	800a1a8 <create_name+0x168>
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d009      	beq.n	800a1c2 <create_name+0x182>
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	2b2e      	cmp	r3, #46	; 0x2e
 800a1c0:	d1ef      	bne.n	800a1a2 <create_name+0x162>

	i = b = 0; ni = 8;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	623b      	str	r3, [r7, #32]
 800a1cc:	2308      	movs	r3, #8
 800a1ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	61ba      	str	r2, [r7, #24]
 800a1d6:	005b      	lsls	r3, r3, #1
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a1e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 8090 	beq.w	800a308 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a1e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1ea:	2b20      	cmp	r3, #32
 800a1ec:	d006      	beq.n	800a1fc <create_name+0x1bc>
 800a1ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a1f2:	d10a      	bne.n	800a20a <create_name+0x1ca>
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d006      	beq.n	800a20a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a200:	f043 0303 	orr.w	r3, r3, #3
 800a204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a208:	e07d      	b.n	800a306 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a20a:	6a3a      	ldr	r2, [r7, #32]
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d203      	bcs.n	800a21a <create_name+0x1da>
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	429a      	cmp	r2, r3
 800a218:	d123      	bne.n	800a262 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	2b0b      	cmp	r3, #11
 800a21e:	d106      	bne.n	800a22e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a224:	f043 0303 	orr.w	r3, r3, #3
 800a228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a22c:	e06f      	b.n	800a30e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	429a      	cmp	r2, r3
 800a234:	d005      	beq.n	800a242 <create_name+0x202>
 800a236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a23a:	f043 0303 	orr.w	r3, r3, #3
 800a23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	429a      	cmp	r2, r3
 800a248:	d860      	bhi.n	800a30c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	61bb      	str	r3, [r7, #24]
 800a24e:	2308      	movs	r3, #8
 800a250:	623b      	str	r3, [r7, #32]
 800a252:	230b      	movs	r3, #11
 800a254:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a260:	e051      	b.n	800a306 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a264:	2b7f      	cmp	r3, #127	; 0x7f
 800a266:	d914      	bls.n	800a292 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a26a:	2100      	movs	r1, #0
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 fbd7 	bl	800ba20 <ff_convert>
 800a272:	4603      	mov	r3, r0
 800a274:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d004      	beq.n	800a286 <create_name+0x246>
 800a27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a27e:	3b80      	subs	r3, #128	; 0x80
 800a280:	4a49      	ldr	r2, [pc, #292]	; (800a3a8 <create_name+0x368>)
 800a282:	5cd3      	ldrb	r3, [r2, r3]
 800a284:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a28a:	f043 0302 	orr.w	r3, r3, #2
 800a28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <create_name+0x268>
 800a298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a29a:	4619      	mov	r1, r3
 800a29c:	4843      	ldr	r0, [pc, #268]	; (800a3ac <create_name+0x36c>)
 800a29e:	f7fe fc05 	bl	8008aac <chk_chr>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d008      	beq.n	800a2ba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a2a8:	235f      	movs	r3, #95	; 0x5f
 800a2aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b0:	f043 0303 	orr.w	r3, r3, #3
 800a2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2b8:	e01b      	b.n	800a2f2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a2ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2bc:	2b40      	cmp	r3, #64	; 0x40
 800a2be:	d909      	bls.n	800a2d4 <create_name+0x294>
 800a2c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2c2:	2b5a      	cmp	r3, #90	; 0x5a
 800a2c4:	d806      	bhi.n	800a2d4 <create_name+0x294>
					b |= 2;
 800a2c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2ca:	f043 0302 	orr.w	r3, r3, #2
 800a2ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a2d2:	e00e      	b.n	800a2f2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a2d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2d6:	2b60      	cmp	r3, #96	; 0x60
 800a2d8:	d90b      	bls.n	800a2f2 <create_name+0x2b2>
 800a2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2dc:	2b7a      	cmp	r3, #122	; 0x7a
 800a2de:	d808      	bhi.n	800a2f2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a2e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2e4:	f043 0301 	orr.w	r3, r3, #1
 800a2e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2ee:	3b20      	subs	r3, #32
 800a2f0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	623a      	str	r2, [r7, #32]
 800a2f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a2fa:	b2d1      	uxtb	r1, r2
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	4413      	add	r3, r2
 800a300:	460a      	mov	r2, r1
 800a302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a306:	e763      	b.n	800a1d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a308:	bf00      	nop
 800a30a:	e000      	b.n	800a30e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a30c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a314:	2be5      	cmp	r3, #229	; 0xe5
 800a316:	d103      	bne.n	800a320 <create_name+0x2e0>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2205      	movs	r2, #5
 800a31c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	2b08      	cmp	r3, #8
 800a324:	d104      	bne.n	800a330 <create_name+0x2f0>
 800a326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a330:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a334:	f003 030c 	and.w	r3, r3, #12
 800a338:	2b0c      	cmp	r3, #12
 800a33a:	d005      	beq.n	800a348 <create_name+0x308>
 800a33c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	2b03      	cmp	r3, #3
 800a346:	d105      	bne.n	800a354 <create_name+0x314>
 800a348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a34c:	f043 0302 	orr.w	r3, r3, #2
 800a350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d117      	bne.n	800a390 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a360:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a364:	f003 0303 	and.w	r3, r3, #3
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d105      	bne.n	800a378 <create_name+0x338>
 800a36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a370:	f043 0310 	orr.w	r3, r3, #16
 800a374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a37c:	f003 030c 	and.w	r3, r3, #12
 800a380:	2b04      	cmp	r3, #4
 800a382:	d105      	bne.n	800a390 <create_name+0x350>
 800a384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a388:	f043 0308 	orr.w	r3, r3, #8
 800a38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a396:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a39a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3728      	adds	r7, #40	; 0x28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	0800e658 	.word	0x0800e658
 800a3a8:	0800e6e8 	.word	0x0800e6e8
 800a3ac:	0800e664 	.word	0x0800e664

0800a3b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a3c4:	e002      	b.n	800a3cc <follow_path+0x1c>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b2f      	cmp	r3, #47	; 0x2f
 800a3d2:	d0f8      	beq.n	800a3c6 <follow_path+0x16>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b5c      	cmp	r3, #92	; 0x5c
 800a3da:	d0f4      	beq.n	800a3c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b1f      	cmp	r3, #31
 800a3e8:	d80a      	bhi.n	800a400 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2280      	movs	r2, #128	; 0x80
 800a3ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff f8fe 	bl	80095f6 <dir_sdi>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]
 800a3fe:	e048      	b.n	800a492 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a400:	463b      	mov	r3, r7
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff fe1b 	bl	800a040 <create_name>
 800a40a:	4603      	mov	r3, r0
 800a40c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d139      	bne.n	800a488 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff fc5b 	bl	8009cd0 <dir_find>
 800a41a:	4603      	mov	r3, r0
 800a41c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a424:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00a      	beq.n	800a442 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d12c      	bne.n	800a48c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a432:	7afb      	ldrb	r3, [r7, #11]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d127      	bne.n	800a48c <follow_path+0xdc>
 800a43c:	2305      	movs	r3, #5
 800a43e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a440:	e024      	b.n	800a48c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a442:	7afb      	ldrb	r3, [r7, #11]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d121      	bne.n	800a490 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	799b      	ldrb	r3, [r3, #6]
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a458:	2305      	movs	r3, #5
 800a45a:	75fb      	strb	r3, [r7, #23]
 800a45c:	e019      	b.n	800a492 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	8992      	ldrh	r2, [r2, #12]
 800a46c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a470:	fb02 f200 	mul.w	r2, r2, r0
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	440b      	add	r3, r1
 800a478:	4619      	mov	r1, r3
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fa61 	bl	8009942 <ld_clust>
 800a480:	4602      	mov	r2, r0
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a486:	e7bb      	b.n	800a400 <follow_path+0x50>
			if (res != FR_OK) break;
 800a488:	bf00      	nop
 800a48a:	e002      	b.n	800a492 <follow_path+0xe2>
				break;
 800a48c:	bf00      	nop
 800a48e:	e000      	b.n	800a492 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a490:	bf00      	nop
			}
		}
	}

	return res;
 800a492:	7dfb      	ldrb	r3, [r7, #23]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d031      	beq.n	800a516 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	e002      	b.n	800a4c0 <get_ldnumber+0x24>
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	2b1f      	cmp	r3, #31
 800a4c6:	d903      	bls.n	800a4d0 <get_ldnumber+0x34>
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	2b3a      	cmp	r3, #58	; 0x3a
 800a4ce:	d1f4      	bne.n	800a4ba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b3a      	cmp	r3, #58	; 0x3a
 800a4d6:	d11c      	bne.n	800a512 <get_ldnumber+0x76>
			tp = *path;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	60fa      	str	r2, [r7, #12]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	3b30      	subs	r3, #48	; 0x30
 800a4e8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b09      	cmp	r3, #9
 800a4ee:	d80e      	bhi.n	800a50e <get_ldnumber+0x72>
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d10a      	bne.n	800a50e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d107      	bne.n	800a50e <get_ldnumber+0x72>
					vol = (int)i;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	3301      	adds	r3, #1
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	e002      	b.n	800a518 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a512:	2300      	movs	r3, #0
 800a514:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a516:	693b      	ldr	r3, [r7, #16]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	371c      	adds	r7, #28
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	70da      	strb	r2, [r3, #3]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f04f 32ff 	mov.w	r2, #4294967295
 800a53a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7fe fc80 	bl	8008e44 <move_window>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <check_fs+0x2a>
 800a54a:	2304      	movs	r3, #4
 800a54c:	e038      	b.n	800a5c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3338      	adds	r3, #56	; 0x38
 800a552:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe f9c4 	bl	80088e4 <ld_word>
 800a55c:	4603      	mov	r3, r0
 800a55e:	461a      	mov	r2, r3
 800a560:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a564:	429a      	cmp	r2, r3
 800a566:	d001      	beq.n	800a56c <check_fs+0x48>
 800a568:	2303      	movs	r3, #3
 800a56a:	e029      	b.n	800a5c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a572:	2be9      	cmp	r3, #233	; 0xe9
 800a574:	d009      	beq.n	800a58a <check_fs+0x66>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a57c:	2beb      	cmp	r3, #235	; 0xeb
 800a57e:	d11e      	bne.n	800a5be <check_fs+0x9a>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a586:	2b90      	cmp	r3, #144	; 0x90
 800a588:	d119      	bne.n	800a5be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3338      	adds	r3, #56	; 0x38
 800a58e:	3336      	adds	r3, #54	; 0x36
 800a590:	4618      	mov	r0, r3
 800a592:	f7fe f9bf 	bl	8008914 <ld_dword>
 800a596:	4603      	mov	r3, r0
 800a598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a59c:	4a0a      	ldr	r2, [pc, #40]	; (800a5c8 <check_fs+0xa4>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d101      	bne.n	800a5a6 <check_fs+0x82>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e00c      	b.n	800a5c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3338      	adds	r3, #56	; 0x38
 800a5aa:	3352      	adds	r3, #82	; 0x52
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe f9b1 	bl	8008914 <ld_dword>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <check_fs+0xa8>)
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d101      	bne.n	800a5be <check_fs+0x9a>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	e000      	b.n	800a5c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a5be:	2302      	movs	r3, #2
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	00544146 	.word	0x00544146
 800a5cc:	33544146 	.word	0x33544146

0800a5d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b096      	sub	sp, #88	; 0x58
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f7ff ff59 	bl	800a49c <get_ldnumber>
 800a5ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	da01      	bge.n	800a5f6 <find_volume+0x26>
 800a5f2:	230b      	movs	r3, #11
 800a5f4:	e268      	b.n	800aac8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a5f6:	4ab0      	ldr	r2, [pc, #704]	; (800a8b8 <find_volume+0x2e8>)
 800a5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <find_volume+0x3a>
 800a606:	230c      	movs	r3, #12
 800a608:	e25e      	b.n	800aac8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a60e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	f023 0301 	bic.w	r3, r3, #1
 800a616:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01a      	beq.n	800a656 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe f8bf 	bl	80087a8 <disk_status>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10c      	bne.n	800a656 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d007      	beq.n	800a652 <find_volume+0x82>
 800a642:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a64e:	230a      	movs	r3, #10
 800a650:	e23a      	b.n	800aac8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a652:	2300      	movs	r3, #0
 800a654:	e238      	b.n	800aac8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	785b      	ldrb	r3, [r3, #1]
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe f8b7 	bl	80087dc <disk_initialize>
 800a66e:	4603      	mov	r3, r0
 800a670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a680:	2303      	movs	r3, #3
 800a682:	e221      	b.n	800aac8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d007      	beq.n	800a69a <find_volume+0xca>
 800a68a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a68e:	f003 0304 	and.w	r3, r3, #4
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a696:	230a      	movs	r3, #10
 800a698:	e216      	b.n	800aac8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	7858      	ldrb	r0, [r3, #1]
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	330c      	adds	r3, #12
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	2102      	movs	r1, #2
 800a6a6:	f7fe f8ff 	bl	80088a8 <disk_ioctl>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <find_volume+0xe4>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e209      	b.n	800aac8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	899b      	ldrh	r3, [r3, #12]
 800a6b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6bc:	d80d      	bhi.n	800a6da <find_volume+0x10a>
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	899b      	ldrh	r3, [r3, #12]
 800a6c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6c6:	d308      	bcc.n	800a6da <find_volume+0x10a>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	899b      	ldrh	r3, [r3, #12]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	899b      	ldrh	r3, [r3, #12]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <find_volume+0x10e>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e1f4      	b.n	800aac8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a6e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6e6:	f7ff ff1d 	bl	800a524 <check_fs>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d14b      	bne.n	800a790 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	643b      	str	r3, [r7, #64]	; 0x40
 800a6fc:	e01f      	b.n	800a73e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a70c:	4413      	add	r3, r2
 800a70e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	3304      	adds	r3, #4
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d006      	beq.n	800a728 <find_volume+0x158>
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	3308      	adds	r3, #8
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe f8f8 	bl	8008914 <ld_dword>
 800a724:	4602      	mov	r2, r0
 800a726:	e000      	b.n	800a72a <find_volume+0x15a>
 800a728:	2200      	movs	r2, #0
 800a72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a732:	440b      	add	r3, r1
 800a734:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a73a:	3301      	adds	r3, #1
 800a73c:	643b      	str	r3, [r7, #64]	; 0x40
 800a73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a740:	2b03      	cmp	r3, #3
 800a742:	d9dc      	bls.n	800a6fe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a744:	2300      	movs	r3, #0
 800a746:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d002      	beq.n	800a754 <find_volume+0x184>
 800a74e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a750:	3b01      	subs	r3, #1
 800a752:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a75c:	4413      	add	r3, r2
 800a75e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a762:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a766:	2b00      	cmp	r3, #0
 800a768:	d005      	beq.n	800a776 <find_volume+0x1a6>
 800a76a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a76c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a76e:	f7ff fed9 	bl	800a524 <check_fs>
 800a772:	4603      	mov	r3, r0
 800a774:	e000      	b.n	800a778 <find_volume+0x1a8>
 800a776:	2303      	movs	r3, #3
 800a778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a77c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a780:	2b01      	cmp	r3, #1
 800a782:	d905      	bls.n	800a790 <find_volume+0x1c0>
 800a784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a786:	3301      	adds	r3, #1
 800a788:	643b      	str	r3, [r7, #64]	; 0x40
 800a78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d9e1      	bls.n	800a754 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a794:	2b04      	cmp	r3, #4
 800a796:	d101      	bne.n	800a79c <find_volume+0x1cc>
 800a798:	2301      	movs	r3, #1
 800a79a:	e195      	b.n	800aac8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a79c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d901      	bls.n	800a7a8 <find_volume+0x1d8>
 800a7a4:	230d      	movs	r3, #13
 800a7a6:	e18f      	b.n	800aac8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	3338      	adds	r3, #56	; 0x38
 800a7ac:	330b      	adds	r3, #11
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe f898 	bl	80088e4 <ld_word>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	899b      	ldrh	r3, [r3, #12]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d001      	beq.n	800a7c4 <find_volume+0x1f4>
 800a7c0:	230d      	movs	r3, #13
 800a7c2:	e181      	b.n	800aac8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	3338      	adds	r3, #56	; 0x38
 800a7c8:	3316      	adds	r3, #22
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe f88a 	bl	80088e4 <ld_word>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d106      	bne.n	800a7e8 <find_volume+0x218>
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	3338      	adds	r3, #56	; 0x38
 800a7de:	3324      	adds	r3, #36	; 0x24
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe f897 	bl	8008914 <ld_dword>
 800a7e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	789b      	ldrb	r3, [r3, #2]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d005      	beq.n	800a80c <find_volume+0x23c>
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	789b      	ldrb	r3, [r3, #2]
 800a804:	2b02      	cmp	r3, #2
 800a806:	d001      	beq.n	800a80c <find_volume+0x23c>
 800a808:	230d      	movs	r3, #13
 800a80a:	e15d      	b.n	800aac8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	789b      	ldrb	r3, [r3, #2]
 800a810:	461a      	mov	r2, r3
 800a812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a814:	fb02 f303 	mul.w	r3, r2, r3
 800a818:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a820:	b29a      	uxth	r2, r3
 800a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a824:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a828:	895b      	ldrh	r3, [r3, #10]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d008      	beq.n	800a840 <find_volume+0x270>
 800a82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a830:	895b      	ldrh	r3, [r3, #10]
 800a832:	461a      	mov	r2, r3
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	895b      	ldrh	r3, [r3, #10]
 800a838:	3b01      	subs	r3, #1
 800a83a:	4013      	ands	r3, r2
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <find_volume+0x274>
 800a840:	230d      	movs	r3, #13
 800a842:	e141      	b.n	800aac8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	3338      	adds	r3, #56	; 0x38
 800a848:	3311      	adds	r3, #17
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe f84a 	bl	80088e4 <ld_word>
 800a850:	4603      	mov	r3, r0
 800a852:	461a      	mov	r2, r3
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	891b      	ldrh	r3, [r3, #8]
 800a85c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a85e:	8992      	ldrh	r2, [r2, #12]
 800a860:	0952      	lsrs	r2, r2, #5
 800a862:	b292      	uxth	r2, r2
 800a864:	fbb3 f1f2 	udiv	r1, r3, r2
 800a868:	fb02 f201 	mul.w	r2, r2, r1
 800a86c:	1a9b      	subs	r3, r3, r2
 800a86e:	b29b      	uxth	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <find_volume+0x2a8>
 800a874:	230d      	movs	r3, #13
 800a876:	e127      	b.n	800aac8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	3338      	adds	r3, #56	; 0x38
 800a87c:	3313      	adds	r3, #19
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe f830 	bl	80088e4 <ld_word>
 800a884:	4603      	mov	r3, r0
 800a886:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d106      	bne.n	800a89c <find_volume+0x2cc>
 800a88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a890:	3338      	adds	r3, #56	; 0x38
 800a892:	3320      	adds	r3, #32
 800a894:	4618      	mov	r0, r3
 800a896:	f7fe f83d 	bl	8008914 <ld_dword>
 800a89a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	3338      	adds	r3, #56	; 0x38
 800a8a0:	330e      	adds	r3, #14
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe f81e 	bl	80088e4 <ld_word>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a8ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d104      	bne.n	800a8bc <find_volume+0x2ec>
 800a8b2:	230d      	movs	r3, #13
 800a8b4:	e108      	b.n	800aac8 <find_volume+0x4f8>
 800a8b6:	bf00      	nop
 800a8b8:	20000240 	.word	0x20000240

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a8bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c0:	4413      	add	r3, r2
 800a8c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8c4:	8911      	ldrh	r1, [r2, #8]
 800a8c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8c8:	8992      	ldrh	r2, [r2, #12]
 800a8ca:	0952      	lsrs	r2, r2, #5
 800a8cc:	b292      	uxth	r2, r2
 800a8ce:	fbb1 f2f2 	udiv	r2, r1, r2
 800a8d2:	b292      	uxth	r2, r2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a8d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d201      	bcs.n	800a8e4 <find_volume+0x314>
 800a8e0:	230d      	movs	r3, #13
 800a8e2:	e0f1      	b.n	800aac8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a8e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ec:	8952      	ldrh	r2, [r2, #10]
 800a8ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <find_volume+0x32e>
 800a8fa:	230d      	movs	r3, #13
 800a8fc:	e0e4      	b.n	800aac8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a8fe:	2303      	movs	r3, #3
 800a900:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d802      	bhi.n	800a914 <find_volume+0x344>
 800a90e:	2302      	movs	r3, #2
 800a910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d802      	bhi.n	800a924 <find_volume+0x354>
 800a91e:	2301      	movs	r3, #1
 800a920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	1c9a      	adds	r2, r3, #2
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a930:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a932:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a936:	441a      	add	r2, r3
 800a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a93c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	441a      	add	r2, r3
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a946:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d11e      	bne.n	800a98c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	3338      	adds	r3, #56	; 0x38
 800a952:	332a      	adds	r3, #42	; 0x2a
 800a954:	4618      	mov	r0, r3
 800a956:	f7fd ffc5 	bl	80088e4 <ld_word>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <find_volume+0x394>
 800a960:	230d      	movs	r3, #13
 800a962:	e0b1      	b.n	800aac8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	891b      	ldrh	r3, [r3, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <find_volume+0x3a0>
 800a96c:	230d      	movs	r3, #13
 800a96e:	e0ab      	b.n	800aac8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	3338      	adds	r3, #56	; 0x38
 800a974:	332c      	adds	r3, #44	; 0x2c
 800a976:	4618      	mov	r0, r3
 800a978:	f7fd ffcc 	bl	8008914 <ld_dword>
 800a97c:	4602      	mov	r2, r0
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	69db      	ldr	r3, [r3, #28]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	647b      	str	r3, [r7, #68]	; 0x44
 800a98a:	e01f      	b.n	800a9cc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98e:	891b      	ldrh	r3, [r3, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <find_volume+0x3c8>
 800a994:	230d      	movs	r3, #13
 800a996:	e097      	b.n	800aac8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a99e:	441a      	add	r2, r3
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a9a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d103      	bne.n	800a9b4 <find_volume+0x3e4>
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	e00a      	b.n	800a9ca <find_volume+0x3fa>
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	69da      	ldr	r2, [r3, #28]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	4413      	add	r3, r2
 800a9be:	085a      	lsrs	r2, r3, #1
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a9ca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ce:	6a1a      	ldr	r2, [r3, #32]
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	899b      	ldrh	r3, [r3, #12]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9d8:	440b      	add	r3, r1
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9de:	8989      	ldrh	r1, [r1, #12]
 800a9e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d201      	bcs.n	800a9ec <find_volume+0x41c>
 800a9e8:	230d      	movs	r3, #13
 800a9ea:	e06d      	b.n	800aac8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f2:	619a      	str	r2, [r3, #24]
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	699a      	ldr	r2, [r3, #24]
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	2280      	movs	r2, #128	; 0x80
 800aa00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800aa02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d149      	bne.n	800aa9e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0c:	3338      	adds	r3, #56	; 0x38
 800aa0e:	3330      	adds	r3, #48	; 0x30
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fd ff67 	bl	80088e4 <ld_word>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d140      	bne.n	800aa9e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aa1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa1e:	3301      	adds	r3, #1
 800aa20:	4619      	mov	r1, r3
 800aa22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa24:	f7fe fa0e 	bl	8008e44 <move_window>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d137      	bne.n	800aa9e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	2200      	movs	r2, #0
 800aa32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	3338      	adds	r3, #56	; 0x38
 800aa38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fd ff51 	bl	80088e4 <ld_word>
 800aa42:	4603      	mov	r3, r0
 800aa44:	461a      	mov	r2, r3
 800aa46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d127      	bne.n	800aa9e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	3338      	adds	r3, #56	; 0x38
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fd ff5e 	bl	8008914 <ld_dword>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	4b1d      	ldr	r3, [pc, #116]	; (800aad0 <find_volume+0x500>)
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d11e      	bne.n	800aa9e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	3338      	adds	r3, #56	; 0x38
 800aa64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fd ff53 	bl	8008914 <ld_dword>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b18      	ldr	r3, [pc, #96]	; (800aad4 <find_volume+0x504>)
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d113      	bne.n	800aa9e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa78:	3338      	adds	r3, #56	; 0x38
 800aa7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fd ff48 	bl	8008914 <ld_dword>
 800aa84:	4602      	mov	r2, r0
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8c:	3338      	adds	r3, #56	; 0x38
 800aa8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fd ff3e 	bl	8008914 <ld_dword>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aaa4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <find_volume+0x508>)
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <find_volume+0x508>)
 800aab0:	801a      	strh	r2, [r3, #0]
 800aab2:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <find_volume+0x508>)
 800aab4:	881a      	ldrh	r2, [r3, #0]
 800aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	4a07      	ldr	r2, [pc, #28]	; (800aadc <find_volume+0x50c>)
 800aabe:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aac0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aac2:	f7fe f957 	bl	8008d74 <clear_lock>
#endif
	return FR_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3758      	adds	r7, #88	; 0x58
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	41615252 	.word	0x41615252
 800aad4:	61417272 	.word	0x61417272
 800aad8:	20000244 	.word	0x20000244
 800aadc:	20000268 	.word	0x20000268

0800aae0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aaea:	2309      	movs	r3, #9
 800aaec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d01c      	beq.n	800ab2e <validate+0x4e>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d018      	beq.n	800ab2e <validate+0x4e>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d013      	beq.n	800ab2e <validate+0x4e>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	889a      	ldrh	r2, [r3, #4]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	88db      	ldrh	r3, [r3, #6]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d10c      	bne.n	800ab2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	785b      	ldrb	r3, [r3, #1]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fd fe44 	bl	80087a8 <disk_status>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <validate+0x4e>
			res = FR_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d102      	bne.n	800ab3a <validate+0x5a>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	e000      	b.n	800ab3c <validate+0x5c>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	6013      	str	r3, [r2, #0]
	return res;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	4613      	mov	r3, r2
 800ab58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab5e:	f107 0310 	add.w	r3, r7, #16
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7ff fc9a 	bl	800a49c <get_ldnumber>
 800ab68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da01      	bge.n	800ab74 <f_mount+0x28>
 800ab70:	230b      	movs	r3, #11
 800ab72:	e02b      	b.n	800abcc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab74:	4a17      	ldr	r2, [pc, #92]	; (800abd4 <f_mount+0x88>)
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d005      	beq.n	800ab90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab84:	69b8      	ldr	r0, [r7, #24]
 800ab86:	f7fe f8f5 	bl	8008d74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	490d      	ldr	r1, [pc, #52]	; (800abd4 <f_mount+0x88>)
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <f_mount+0x66>
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d001      	beq.n	800abb6 <f_mount+0x6a>
 800abb2:	2300      	movs	r3, #0
 800abb4:	e00a      	b.n	800abcc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800abb6:	f107 010c 	add.w	r1, r7, #12
 800abba:	f107 0308 	add.w	r3, r7, #8
 800abbe:	2200      	movs	r2, #0
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fd05 	bl	800a5d0 <find_volume>
 800abc6:	4603      	mov	r3, r0
 800abc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800abca:	7dfb      	ldrb	r3, [r7, #23]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3720      	adds	r7, #32
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	20000240 	.word	0x20000240

0800abd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b09a      	sub	sp, #104	; 0x68
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	4613      	mov	r3, r2
 800abe4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <f_open+0x18>
 800abec:	2309      	movs	r3, #9
 800abee:	e1bb      	b.n	800af68 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800abf0:	79fb      	ldrb	r3, [r7, #7]
 800abf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800abf8:	79fa      	ldrb	r2, [r7, #7]
 800abfa:	f107 0114 	add.w	r1, r7, #20
 800abfe:	f107 0308 	add.w	r3, r7, #8
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff fce4 	bl	800a5d0 <find_volume>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ac0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f040 819f 	bne.w	800af56 <f_open+0x37e>
		dj.obj.fs = fs;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	f107 0318 	add.w	r3, r7, #24
 800ac22:	4611      	mov	r1, r2
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff fbc3 	bl	800a3b0 <follow_path>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ac30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d11a      	bne.n	800ac6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ac38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac3c:	b25b      	sxtb	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	da03      	bge.n	800ac4a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ac42:	2306      	movs	r3, #6
 800ac44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ac48:	e011      	b.n	800ac6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	f023 0301 	bic.w	r3, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	bf14      	ite	ne
 800ac54:	2301      	movne	r3, #1
 800ac56:	2300      	moveq	r3, #0
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	f107 0318 	add.w	r3, r7, #24
 800ac60:	4611      	mov	r1, r2
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fd ff3e 	bl	8008ae4 <chk_lock>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac6e:	79fb      	ldrb	r3, [r7, #7]
 800ac70:	f003 031c 	and.w	r3, r3, #28
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d07f      	beq.n	800ad78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ac78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d017      	beq.n	800acb0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ac80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d10e      	bne.n	800aca6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac88:	f7fd ff88 	bl	8008b9c <enq_lock>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d006      	beq.n	800aca0 <f_open+0xc8>
 800ac92:	f107 0318 	add.w	r3, r7, #24
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff f8da 	bl	8009e50 <dir_register>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	e000      	b.n	800aca2 <f_open+0xca>
 800aca0:	2312      	movs	r3, #18
 800aca2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	f043 0308 	orr.w	r3, r3, #8
 800acac:	71fb      	strb	r3, [r7, #7]
 800acae:	e010      	b.n	800acd2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800acb0:	7fbb      	ldrb	r3, [r7, #30]
 800acb2:	f003 0311 	and.w	r3, r3, #17
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <f_open+0xea>
					res = FR_DENIED;
 800acba:	2307      	movs	r3, #7
 800acbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800acc0:	e007      	b.n	800acd2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <f_open+0xfa>
 800accc:	2308      	movs	r3, #8
 800acce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800acd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d168      	bne.n	800adac <f_open+0x1d4>
 800acda:	79fb      	ldrb	r3, [r7, #7]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d063      	beq.n	800adac <f_open+0x1d4>
				dw = GET_FATTIME();
 800ace4:	f7fd fcfc 	bl	80086e0 <get_fattime>
 800ace8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	330e      	adds	r3, #14
 800acee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fd fe4d 	bl	8008990 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	3316      	adds	r3, #22
 800acfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fd fe47 	bl	8008990 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	330b      	adds	r3, #11
 800ad06:	2220      	movs	r2, #32
 800ad08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad0e:	4611      	mov	r1, r2
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fe16 	bl	8009942 <ld_clust>
 800ad16:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fe2e 	bl	8009980 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	331c      	adds	r3, #28
 800ad28:	2100      	movs	r1, #0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fd fe30 	bl	8008990 <st_dword>
					fs->wflag = 1;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2201      	movs	r2, #1
 800ad34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ad36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d037      	beq.n	800adac <f_open+0x1d4>
						dw = fs->winsect;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad40:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ad42:	f107 0318 	add.w	r3, r7, #24
 800ad46:	2200      	movs	r2, #0
 800ad48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe fb1e 	bl	800938c <remove_chain>
 800ad50:	4603      	mov	r3, r0
 800ad52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ad56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d126      	bne.n	800adac <f_open+0x1d4>
							res = move_window(fs, dw);
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe f86e 	bl	8008e44 <move_window>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad72:	3a01      	subs	r2, #1
 800ad74:	615a      	str	r2, [r3, #20]
 800ad76:	e019      	b.n	800adac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ad78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d115      	bne.n	800adac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ad80:	7fbb      	ldrb	r3, [r7, #30]
 800ad82:	f003 0310 	and.w	r3, r3, #16
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ad8a:	2304      	movs	r3, #4
 800ad8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ad90:	e00c      	b.n	800adac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d007      	beq.n	800adac <f_open+0x1d4>
 800ad9c:	7fbb      	ldrb	r3, [r7, #30]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <f_open+0x1d4>
						res = FR_DENIED;
 800ada6:	2307      	movs	r3, #7
 800ada8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800adac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d128      	bne.n	800ae06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	f003 0308 	and.w	r3, r3, #8
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d003      	beq.n	800adc6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800adce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	f023 0301 	bic.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	bf14      	ite	ne
 800adde:	2301      	movne	r3, #1
 800ade0:	2300      	moveq	r3, #0
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	461a      	mov	r2, r3
 800ade6:	f107 0318 	add.w	r3, r7, #24
 800adea:	4611      	mov	r1, r2
 800adec:	4618      	mov	r0, r3
 800adee:	f7fd fef7 	bl	8008be0 <inc_lock>
 800adf2:	4602      	mov	r2, r0
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <f_open+0x22e>
 800ae00:	2302      	movs	r3, #2
 800ae02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ae06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f040 80a3 	bne.w	800af56 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fd93 	bl	8009942 <ld_clust>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	331c      	adds	r3, #28
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fd fd74 	bl	8008914 <ld_dword>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	88da      	ldrh	r2, [r3, #6]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	79fa      	ldrb	r2, [r7, #7]
 800ae4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3330      	adds	r3, #48	; 0x30
 800ae62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae66:	2100      	movs	r1, #0
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fd fdde 	bl	8008a2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	f003 0320 	and.w	r3, r3, #32
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d06e      	beq.n	800af56 <f_open+0x37e>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d06a      	beq.n	800af56 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	68da      	ldr	r2, [r3, #12]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	895b      	ldrh	r3, [r3, #10]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	899b      	ldrh	r3, [r3, #12]
 800ae92:	fb03 f302 	mul.w	r3, r3, r2
 800ae96:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aea4:	e016      	b.n	800aed4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe f887 	bl	8008fbe <get_fat>
 800aeb0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800aeb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d802      	bhi.n	800aebe <f_open+0x2e6>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec4:	d102      	bne.n	800aecc <f_open+0x2f4>
 800aec6:	2301      	movs	r3, #1
 800aec8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aed4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d103      	bne.n	800aee4 <f_open+0x30c>
 800aedc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d8e0      	bhi.n	800aea6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aee8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aeea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d131      	bne.n	800af56 <f_open+0x37e>
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	899b      	ldrh	r3, [r3, #12]
 800aef6:	461a      	mov	r2, r3
 800aef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aefa:	fbb3 f1f2 	udiv	r1, r3, r2
 800aefe:	fb02 f201 	mul.w	r2, r2, r1
 800af02:	1a9b      	subs	r3, r3, r2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d026      	beq.n	800af56 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe f837 	bl	8008f80 <clust2sect>
 800af12:	64f8      	str	r0, [r7, #76]	; 0x4c
 800af14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af16:	2b00      	cmp	r3, #0
 800af18:	d103      	bne.n	800af22 <f_open+0x34a>
						res = FR_INT_ERR;
 800af1a:	2302      	movs	r3, #2
 800af1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800af20:	e019      	b.n	800af56 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	899b      	ldrh	r3, [r3, #12]
 800af26:	461a      	mov	r2, r3
 800af28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800af2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af30:	441a      	add	r2, r3
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	7858      	ldrb	r0, [r3, #1]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a1a      	ldr	r2, [r3, #32]
 800af44:	2301      	movs	r3, #1
 800af46:	f7fd fc6f 	bl	8008828 <disk_read>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <f_open+0x37e>
 800af50:	2301      	movs	r3, #1
 800af52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800af56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <f_open+0x38c>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800af64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3768      	adds	r7, #104	; 0x68
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08c      	sub	sp, #48	; 0x30
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f107 0210 	add.w	r2, r7, #16
 800af8e:	4611      	mov	r1, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff fda5 	bl	800aae0 <validate>
 800af96:	4603      	mov	r3, r0
 800af98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800af9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d107      	bne.n	800afb4 <f_write+0x44>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	7d5b      	ldrb	r3, [r3, #21]
 800afa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800afac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <f_write+0x4a>
 800afb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afb8:	e16a      	b.n	800b290 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	7d1b      	ldrb	r3, [r3, #20]
 800afbe:	f003 0302 	and.w	r3, r3, #2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <f_write+0x5a>
 800afc6:	2307      	movs	r3, #7
 800afc8:	e162      	b.n	800b290 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	699a      	ldr	r2, [r3, #24]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	441a      	add	r2, r3
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	f080 814c 	bcs.w	800b274 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	43db      	mvns	r3, r3
 800afe2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800afe4:	e146      	b.n	800b274 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	8992      	ldrh	r2, [r2, #12]
 800afee:	fbb3 f1f2 	udiv	r1, r3, r2
 800aff2:	fb02 f201 	mul.w	r2, r2, r1
 800aff6:	1a9b      	subs	r3, r3, r2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f040 80f1 	bne.w	800b1e0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	8992      	ldrh	r2, [r2, #12]
 800b006:	fbb3 f3f2 	udiv	r3, r3, r2
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	8952      	ldrh	r2, [r2, #10]
 800b00e:	3a01      	subs	r2, #1
 800b010:	4013      	ands	r3, r2
 800b012:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d143      	bne.n	800b0a2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10c      	bne.n	800b03c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d11a      	bne.n	800b064 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2100      	movs	r1, #0
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe fa0f 	bl	8009456 <create_chain>
 800b038:	62b8      	str	r0, [r7, #40]	; 0x28
 800b03a:	e013      	b.n	800b064 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	4619      	mov	r1, r3
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7fe fa9b 	bl	8009586 <clmt_clust>
 800b050:	62b8      	str	r0, [r7, #40]	; 0x28
 800b052:	e007      	b.n	800b064 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	4619      	mov	r1, r3
 800b05c:	4610      	mov	r0, r2
 800b05e:	f7fe f9fa 	bl	8009456 <create_chain>
 800b062:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 8109 	beq.w	800b27e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d104      	bne.n	800b07c <f_write+0x10c>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2202      	movs	r2, #2
 800b076:	755a      	strb	r2, [r3, #21]
 800b078:	2302      	movs	r3, #2
 800b07a:	e109      	b.n	800b290 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d104      	bne.n	800b08e <f_write+0x11e>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2201      	movs	r2, #1
 800b088:	755a      	strb	r2, [r3, #21]
 800b08a:	2301      	movs	r3, #1
 800b08c:	e100      	b.n	800b290 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b092:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d102      	bne.n	800b0a2 <f_write+0x132>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	7d1b      	ldrb	r3, [r3, #20]
 800b0a6:	b25b      	sxtb	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	da18      	bge.n	800b0de <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	7858      	ldrb	r0, [r3, #1]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1a      	ldr	r2, [r3, #32]
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	f7fd fbd4 	bl	8008868 <disk_write>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <f_write+0x160>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	755a      	strb	r2, [r3, #21]
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e0df      	b.n	800b290 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	7d1b      	ldrb	r3, [r3, #20]
 800b0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	f7fd ff4a 	bl	8008f80 <clust2sect>
 800b0ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d104      	bne.n	800b0fe <f_write+0x18e>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	755a      	strb	r2, [r3, #21]
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e0c8      	b.n	800b290 <f_write+0x320>
			sect += csect;
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	4413      	add	r3, r2
 800b104:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	899b      	ldrh	r3, [r3, #12]
 800b10a:	461a      	mov	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b112:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d043      	beq.n	800b1a2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	4413      	add	r3, r2
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	8952      	ldrh	r2, [r2, #10]
 800b124:	4293      	cmp	r3, r2
 800b126:	d905      	bls.n	800b134 <f_write+0x1c4>
					cc = fs->csize - csect;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	895b      	ldrh	r3, [r3, #10]
 800b12c:	461a      	mov	r2, r3
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	7858      	ldrb	r0, [r3, #1]
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	69f9      	ldr	r1, [r7, #28]
 800b13e:	f7fd fb93 	bl	8008868 <disk_write>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d004      	beq.n	800b152 <f_write+0x1e2>
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2201      	movs	r2, #1
 800b14c:	755a      	strb	r2, [r3, #21]
 800b14e:	2301      	movs	r3, #1
 800b150:	e09e      	b.n	800b290 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6a1a      	ldr	r2, [r3, #32]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	6a3a      	ldr	r2, [r7, #32]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d918      	bls.n	800b192 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6a1a      	ldr	r2, [r3, #32]
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	8992      	ldrh	r2, [r2, #12]
 800b172:	fb02 f303 	mul.w	r3, r2, r3
 800b176:	69fa      	ldr	r2, [r7, #28]
 800b178:	18d1      	adds	r1, r2, r3
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	899b      	ldrh	r3, [r3, #12]
 800b17e:	461a      	mov	r2, r3
 800b180:	f7fd fc32 	bl	80089e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	7d1b      	ldrb	r3, [r3, #20]
 800b188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b18c:	b2da      	uxtb	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	899b      	ldrh	r3, [r3, #12]
 800b196:	461a      	mov	r2, r3
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	fb02 f303 	mul.w	r3, r2, r3
 800b19e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b1a0:	e04b      	b.n	800b23a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d016      	beq.n	800b1da <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	699a      	ldr	r2, [r3, #24]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d210      	bcs.n	800b1da <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	7858      	ldrb	r0, [r3, #1]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	f7fd fb2f 	bl	8008828 <disk_read>
 800b1ca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d004      	beq.n	800b1da <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	755a      	strb	r2, [r3, #21]
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e05a      	b.n	800b290 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	697a      	ldr	r2, [r7, #20]
 800b1de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	899b      	ldrh	r3, [r3, #12]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	8992      	ldrh	r2, [r2, #12]
 800b1ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1f2:	fb02 f201 	mul.w	r2, r2, r1
 800b1f6:	1a9b      	subs	r3, r3, r2
 800b1f8:	1ac3      	subs	r3, r0, r3
 800b1fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	429a      	cmp	r2, r3
 800b202:	d901      	bls.n	800b208 <f_write+0x298>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	8992      	ldrh	r2, [r2, #12]
 800b216:	fbb3 f0f2 	udiv	r0, r3, r2
 800b21a:	fb02 f200 	mul.w	r2, r2, r0
 800b21e:	1a9b      	subs	r3, r3, r2
 800b220:	440b      	add	r3, r1
 800b222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b224:	69f9      	ldr	r1, [r7, #28]
 800b226:	4618      	mov	r0, r3
 800b228:	f7fd fbde 	bl	80089e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	7d1b      	ldrb	r3, [r3, #20]
 800b230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b234:	b2da      	uxtb	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b23a:	69fa      	ldr	r2, [r7, #28]
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	4413      	add	r3, r2
 800b240:	61fb      	str	r3, [r7, #28]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	699a      	ldr	r2, [r3, #24]
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	441a      	add	r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	619a      	str	r2, [r3, #24]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	429a      	cmp	r2, r3
 800b258:	bf38      	it	cc
 800b25a:	461a      	movcc	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	60da      	str	r2, [r3, #12]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	441a      	add	r2, r3
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f47f aeb5 	bne.w	800afe6 <f_write+0x76>
 800b27c:	e000      	b.n	800b280 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b27e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	7d1b      	ldrb	r3, [r3, #20]
 800b284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3730      	adds	r7, #48	; 0x30
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f107 0208 	add.w	r2, r7, #8
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7ff fc19 	bl	800aae0 <validate>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d168      	bne.n	800b38a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	7d1b      	ldrb	r3, [r3, #20]
 800b2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d062      	beq.n	800b38a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7d1b      	ldrb	r3, [r3, #20]
 800b2c8:	b25b      	sxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	da15      	bge.n	800b2fa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	7858      	ldrb	r0, [r3, #1]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a1a      	ldr	r2, [r3, #32]
 800b2dc:	2301      	movs	r3, #1
 800b2de:	f7fd fac3 	bl	8008868 <disk_write>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <f_sync+0x54>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e04f      	b.n	800b38c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	7d1b      	ldrb	r3, [r3, #20]
 800b2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b2fa:	f7fd f9f1 	bl	80086e0 <get_fattime>
 800b2fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	4619      	mov	r1, r3
 800b308:	4610      	mov	r0, r2
 800b30a:	f7fd fd9b 	bl	8008e44 <move_window>
 800b30e:	4603      	mov	r3, r0
 800b310:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d138      	bne.n	800b38a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	330b      	adds	r3, #11
 800b322:	781a      	ldrb	r2, [r3, #0]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	330b      	adds	r3, #11
 800b328:	f042 0220 	orr.w	r2, r2, #32
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6818      	ldr	r0, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	461a      	mov	r2, r3
 800b33a:	68f9      	ldr	r1, [r7, #12]
 800b33c:	f7fe fb20 	bl	8009980 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f103 021c 	add.w	r2, r3, #28
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	4619      	mov	r1, r3
 800b34c:	4610      	mov	r0, r2
 800b34e:	f7fd fb1f 	bl	8008990 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3316      	adds	r3, #22
 800b356:	6939      	ldr	r1, [r7, #16]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fd fb19 	bl	8008990 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3312      	adds	r3, #18
 800b362:	2100      	movs	r1, #0
 800b364:	4618      	mov	r0, r3
 800b366:	f7fd faf8 	bl	800895a <st_word>
					fs->wflag = 1;
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2201      	movs	r2, #1
 800b36e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	4618      	mov	r0, r3
 800b374:	f7fd fd94 	bl	8008ea0 <sync_fs>
 800b378:	4603      	mov	r3, r0
 800b37a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	7d1b      	ldrb	r3, [r3, #20]
 800b380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b384:	b2da      	uxtb	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7ff ff7b 	bl	800b298 <f_sync>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d118      	bne.n	800b3de <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f107 0208 	add.w	r2, r7, #8
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff fb93 	bl	800aae0 <validate>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10c      	bne.n	800b3de <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fd fc97 	bl	8008cfc <dec_lock>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d102      	bne.n	800b3de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b090      	sub	sp, #64	; 0x40
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f107 0208 	add.w	r2, r7, #8
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7ff fb70 	bl	800aae0 <validate>
 800b400:	4603      	mov	r3, r0
 800b402:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b406:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d103      	bne.n	800b416 <f_lseek+0x2e>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	7d5b      	ldrb	r3, [r3, #21]
 800b412:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b416:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d002      	beq.n	800b424 <f_lseek+0x3c>
 800b41e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b422:	e201      	b.n	800b828 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 80d9 	beq.w	800b5e0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b434:	d15a      	bne.n	800b4ec <f_lseek+0x104>
			tbl = fp->cltbl;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	1d1a      	adds	r2, r3, #4
 800b440:	627a      	str	r2, [r7, #36]	; 0x24
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	617b      	str	r3, [r7, #20]
 800b446:	2302      	movs	r3, #2
 800b448:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	2b00      	cmp	r3, #0
 800b454:	d03a      	beq.n	800b4cc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	613b      	str	r3, [r7, #16]
 800b45a:	2300      	movs	r3, #0
 800b45c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	3302      	adds	r3, #2
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46a:	3301      	adds	r3, #1
 800b46c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b472:	4618      	mov	r0, r3
 800b474:	f7fd fda3 	bl	8008fbe <get_fat>
 800b478:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d804      	bhi.n	800b48a <f_lseek+0xa2>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2202      	movs	r2, #2
 800b484:	755a      	strb	r2, [r3, #21]
 800b486:	2302      	movs	r3, #2
 800b488:	e1ce      	b.n	800b828 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b490:	d104      	bne.n	800b49c <f_lseek+0xb4>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	755a      	strb	r2, [r3, #21]
 800b498:	2301      	movs	r3, #1
 800b49a:	e1c5      	b.n	800b828 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d0de      	beq.n	800b464 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b4a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d809      	bhi.n	800b4c2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	1d1a      	adds	r2, r3, #4
 800b4b2:	627a      	str	r2, [r7, #36]	; 0x24
 800b4b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	1d1a      	adds	r2, r3, #4
 800b4bc:	627a      	str	r2, [r7, #36]	; 0x24
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d3c4      	bcc.n	800b456 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b4d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d803      	bhi.n	800b4e4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	e19f      	b.n	800b824 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b4e4:	2311      	movs	r3, #17
 800b4e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b4ea:	e19b      	b.n	800b824 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d902      	bls.n	800b4fc <f_lseek+0x114>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 818d 	beq.w	800b824 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7fe f838 	bl	8009586 <clmt_clust>
 800b516:	4602      	mov	r2, r0
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	69db      	ldr	r3, [r3, #28]
 800b522:	4619      	mov	r1, r3
 800b524:	4610      	mov	r0, r2
 800b526:	f7fd fd2b 	bl	8008f80 <clust2sect>
 800b52a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d104      	bne.n	800b53c <f_lseek+0x154>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2202      	movs	r2, #2
 800b536:	755a      	strb	r2, [r3, #21]
 800b538:	2302      	movs	r3, #2
 800b53a:	e175      	b.n	800b828 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	3b01      	subs	r3, #1
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	8992      	ldrh	r2, [r2, #12]
 800b544:	fbb3 f3f2 	udiv	r3, r3, r2
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	8952      	ldrh	r2, [r2, #10]
 800b54c:	3a01      	subs	r2, #1
 800b54e:	4013      	ands	r3, r2
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	4413      	add	r3, r2
 800b554:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	8992      	ldrh	r2, [r2, #12]
 800b55e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b562:	fb02 f201 	mul.w	r2, r2, r1
 800b566:	1a9b      	subs	r3, r3, r2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 815b 	beq.w	800b824 <f_lseek+0x43c>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	69ba      	ldr	r2, [r7, #24]
 800b574:	429a      	cmp	r2, r3
 800b576:	f000 8155 	beq.w	800b824 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	7d1b      	ldrb	r3, [r3, #20]
 800b57e:	b25b      	sxtb	r3, r3
 800b580:	2b00      	cmp	r3, #0
 800b582:	da18      	bge.n	800b5b6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	7858      	ldrb	r0, [r3, #1]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1a      	ldr	r2, [r3, #32]
 800b592:	2301      	movs	r3, #1
 800b594:	f7fd f968 	bl	8008868 <disk_write>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d004      	beq.n	800b5a8 <f_lseek+0x1c0>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	755a      	strb	r2, [r3, #21]
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e13f      	b.n	800b828 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	7d1b      	ldrb	r3, [r3, #20]
 800b5ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	7858      	ldrb	r0, [r3, #1]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	f7fd f930 	bl	8008828 <disk_read>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d004      	beq.n	800b5d8 <f_lseek+0x1f0>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	755a      	strb	r2, [r3, #21]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e127      	b.n	800b828 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	621a      	str	r2, [r3, #32]
 800b5de:	e121      	b.n	800b824 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d908      	bls.n	800b5fc <f_lseek+0x214>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7d1b      	ldrb	r3, [r3, #20]
 800b5ee:	f003 0302 	and.w	r3, r3, #2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d102      	bne.n	800b5fc <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	637b      	str	r3, [r7, #52]	; 0x34
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b60a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f000 80b5 	beq.w	800b77e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	895b      	ldrh	r3, [r3, #10]
 800b618:	461a      	mov	r2, r3
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	899b      	ldrh	r3, [r3, #12]
 800b61e:	fb03 f302 	mul.w	r3, r3, r2
 800b622:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d01b      	beq.n	800b662 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	1e5a      	subs	r2, r3, #1
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	fbb2 f2f3 	udiv	r2, r2, r3
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	1e59      	subs	r1, r3, #1
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b63e:	429a      	cmp	r2, r3
 800b640:	d30f      	bcc.n	800b662 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	1e5a      	subs	r2, r3, #1
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	425b      	negs	r3, r3
 800b64a:	401a      	ands	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	683a      	ldr	r2, [r7, #0]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b660:	e022      	b.n	800b6a8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d119      	bne.n	800b6a2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2100      	movs	r1, #0
 800b672:	4618      	mov	r0, r3
 800b674:	f7fd feef 	bl	8009456 <create_chain>
 800b678:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d104      	bne.n	800b68a <f_lseek+0x2a2>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2202      	movs	r2, #2
 800b684:	755a      	strb	r2, [r3, #21]
 800b686:	2302      	movs	r3, #2
 800b688:	e0ce      	b.n	800b828 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b690:	d104      	bne.n	800b69c <f_lseek+0x2b4>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	755a      	strb	r2, [r3, #21]
 800b698:	2301      	movs	r3, #1
 800b69a:	e0c5      	b.n	800b828 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d067      	beq.n	800b77e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b6ae:	e03a      	b.n	800b726 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	603b      	str	r3, [r7, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	699a      	ldr	r2, [r3, #24]
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	441a      	add	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	7d1b      	ldrb	r3, [r3, #20]
 800b6c8:	f003 0302 	and.w	r3, r3, #2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00b      	beq.n	800b6e8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fd febe 	bl	8009456 <create_chain>
 800b6da:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d108      	bne.n	800b6f4 <f_lseek+0x30c>
							ofs = 0; break;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	603b      	str	r3, [r7, #0]
 800b6e6:	e022      	b.n	800b72e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fd fc66 	bl	8008fbe <get_fat>
 800b6f2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fa:	d104      	bne.n	800b706 <f_lseek+0x31e>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	755a      	strb	r2, [r3, #21]
 800b702:	2301      	movs	r3, #1
 800b704:	e090      	b.n	800b828 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d904      	bls.n	800b716 <f_lseek+0x32e>
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b712:	429a      	cmp	r2, r3
 800b714:	d304      	bcc.n	800b720 <f_lseek+0x338>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2202      	movs	r2, #2
 800b71a:	755a      	strb	r2, [r3, #21]
 800b71c:	2302      	movs	r3, #2
 800b71e:	e083      	b.n	800b828 <f_lseek+0x440>
					fp->clust = clst;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b724:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d8c0      	bhi.n	800b6b0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	699a      	ldr	r2, [r3, #24]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	441a      	add	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	899b      	ldrh	r3, [r3, #12]
 800b73e:	461a      	mov	r2, r3
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	fbb3 f1f2 	udiv	r1, r3, r2
 800b746:	fb02 f201 	mul.w	r2, r2, r1
 800b74a:	1a9b      	subs	r3, r3, r2
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d016      	beq.n	800b77e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b754:	4618      	mov	r0, r3
 800b756:	f7fd fc13 	bl	8008f80 <clust2sect>
 800b75a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d104      	bne.n	800b76c <f_lseek+0x384>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2202      	movs	r2, #2
 800b766:	755a      	strb	r2, [r3, #21]
 800b768:	2302      	movs	r3, #2
 800b76a:	e05d      	b.n	800b828 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	899b      	ldrh	r3, [r3, #12]
 800b770:	461a      	mov	r2, r3
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	fbb3 f3f2 	udiv	r3, r3, r2
 800b778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b77a:	4413      	add	r3, r2
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	699a      	ldr	r2, [r3, #24]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	429a      	cmp	r2, r3
 800b788:	d90a      	bls.n	800b7a0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7d1b      	ldrb	r3, [r3, #20]
 800b796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	8992      	ldrh	r2, [r2, #12]
 800b7a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7ac:	fb02 f201 	mul.w	r2, r2, r1
 800b7b0:	1a9b      	subs	r3, r3, r2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d036      	beq.n	800b824 <f_lseek+0x43c>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a1b      	ldr	r3, [r3, #32]
 800b7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d031      	beq.n	800b824 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	7d1b      	ldrb	r3, [r3, #20]
 800b7c4:	b25b      	sxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	da18      	bge.n	800b7fc <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	7858      	ldrb	r0, [r3, #1]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a1a      	ldr	r2, [r3, #32]
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f7fd f845 	bl	8008868 <disk_write>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d004      	beq.n	800b7ee <f_lseek+0x406>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	755a      	strb	r2, [r3, #21]
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e01c      	b.n	800b828 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	7d1b      	ldrb	r3, [r3, #20]
 800b7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	7858      	ldrb	r0, [r3, #1]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b806:	2301      	movs	r3, #1
 800b808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b80a:	f7fd f80d 	bl	8008828 <disk_read>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d004      	beq.n	800b81e <f_lseek+0x436>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	755a      	strb	r2, [r3, #21]
 800b81a:	2301      	movs	r3, #1
 800b81c:	e004      	b.n	800b828 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b822:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b824:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3740      	adds	r7, #64	; 0x40
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b83c:	78fb      	ldrb	r3, [r7, #3]
 800b83e:	2b0a      	cmp	r3, #10
 800b840:	d103      	bne.n	800b84a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b842:	210d      	movs	r1, #13
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff fff3 	bl	800b830 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	db25      	blt.n	800b8a2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	60fa      	str	r2, [r7, #12]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	4413      	add	r3, r2
 800b860:	78fa      	ldrb	r2, [r7, #3]
 800b862:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2b3c      	cmp	r3, #60	; 0x3c
 800b868:	dd12      	ble.n	800b890 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6818      	ldr	r0, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f103 010c 	add.w	r1, r3, #12
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	f107 0308 	add.w	r3, r7, #8
 800b87a:	f7ff fb79 	bl	800af70 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	429a      	cmp	r2, r3
 800b884:	d101      	bne.n	800b88a <putc_bfd+0x5a>
 800b886:	2300      	movs	r3, #0
 800b888:	e001      	b.n	800b88e <putc_bfd+0x5e>
 800b88a:	f04f 33ff 	mov.w	r3, #4294967295
 800b88e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	609a      	str	r2, [r3, #8]
 800b8a0:	e000      	b.n	800b8a4 <putc_bfd+0x74>
	if (i < 0) return;
 800b8a2:	bf00      	nop
}
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	db17      	blt.n	800b8ea <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f103 010c 	add.w	r1, r3, #12
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	f107 030c 	add.w	r3, r7, #12
 800b8ce:	f7ff fb4f 	bl	800af70 <f_write>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d108      	bne.n	800b8ea <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d102      	bne.n	800b8ea <putc_flush+0x40>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	e001      	b.n	800b8ee <putc_flush+0x44>
	return EOF;
 800b8ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b083      	sub	sp, #12
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	605a      	str	r2, [r3, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	609a      	str	r2, [r3, #8]
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b096      	sub	sp, #88	; 0x58
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800b92a:	f107 030c 	add.w	r3, r7, #12
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff ffe0 	bl	800b8f6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800b936:	e009      	b.n	800b94c <f_puts+0x2c>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	1c5a      	adds	r2, r3, #1
 800b93c:	607a      	str	r2, [r7, #4]
 800b93e:	781a      	ldrb	r2, [r3, #0]
 800b940:	f107 030c 	add.w	r3, r7, #12
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff ff72 	bl	800b830 <putc_bfd>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1f1      	bne.n	800b938 <f_puts+0x18>
	return putc_flush(&pb);
 800b954:	f107 030c 	add.w	r3, r7, #12
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff ffa6 	bl	800b8aa <putc_flush>
 800b95e:	4603      	mov	r3, r0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3758      	adds	r7, #88	; 0x58
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b968:	b480      	push	{r7}
 800b96a:	b087      	sub	sp, #28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	4613      	mov	r3, r2
 800b974:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b976:	2301      	movs	r3, #1
 800b978:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b97e:	4b1f      	ldr	r3, [pc, #124]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b980:	7a5b      	ldrb	r3, [r3, #9]
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b00      	cmp	r3, #0
 800b986:	d131      	bne.n	800b9ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b988:	4b1c      	ldr	r3, [pc, #112]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b98a:	7a5b      	ldrb	r3, [r3, #9]
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	461a      	mov	r2, r3
 800b990:	4b1a      	ldr	r3, [pc, #104]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b992:	2100      	movs	r1, #0
 800b994:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b996:	4b19      	ldr	r3, [pc, #100]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b998:	7a5b      	ldrb	r3, [r3, #9]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	4a17      	ldr	r2, [pc, #92]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4413      	add	r3, r2
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9a6:	4b15      	ldr	r3, [pc, #84]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b9a8:	7a5b      	ldrb	r3, [r3, #9]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b9b0:	4413      	add	r3, r2
 800b9b2:	79fa      	ldrb	r2, [r7, #7]
 800b9b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9b6:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b9b8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	b2d1      	uxtb	r1, r2
 800b9c0:	4a0e      	ldr	r2, [pc, #56]	; (800b9fc <FATFS_LinkDriverEx+0x94>)
 800b9c2:	7251      	strb	r1, [r2, #9]
 800b9c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9c6:	7dbb      	ldrb	r3, [r7, #22]
 800b9c8:	3330      	adds	r3, #48	; 0x30
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	223a      	movs	r2, #58	; 0x3a
 800b9d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	3302      	adds	r3, #2
 800b9dc:	222f      	movs	r2, #47	; 0x2f
 800b9de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	3303      	adds	r3, #3
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	371c      	adds	r7, #28
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	20000468 	.word	0x20000468

0800ba00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	6839      	ldr	r1, [r7, #0]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff ffaa 	bl	800b968 <FATFS_LinkDriverEx>
 800ba14:	4603      	mov	r3, r0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	4603      	mov	r3, r0
 800ba28:	6039      	str	r1, [r7, #0]
 800ba2a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ba2c:	88fb      	ldrh	r3, [r7, #6]
 800ba2e:	2b7f      	cmp	r3, #127	; 0x7f
 800ba30:	d802      	bhi.n	800ba38 <ff_convert+0x18>
		c = chr;
 800ba32:	88fb      	ldrh	r3, [r7, #6]
 800ba34:	81fb      	strh	r3, [r7, #14]
 800ba36:	e025      	b.n	800ba84 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00b      	beq.n	800ba56 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ba3e:	88fb      	ldrh	r3, [r7, #6]
 800ba40:	2bff      	cmp	r3, #255	; 0xff
 800ba42:	d805      	bhi.n	800ba50 <ff_convert+0x30>
 800ba44:	88fb      	ldrh	r3, [r7, #6]
 800ba46:	3b80      	subs	r3, #128	; 0x80
 800ba48:	4a12      	ldr	r2, [pc, #72]	; (800ba94 <ff_convert+0x74>)
 800ba4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba4e:	e000      	b.n	800ba52 <ff_convert+0x32>
 800ba50:	2300      	movs	r3, #0
 800ba52:	81fb      	strh	r3, [r7, #14]
 800ba54:	e016      	b.n	800ba84 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ba56:	2300      	movs	r3, #0
 800ba58:	81fb      	strh	r3, [r7, #14]
 800ba5a:	e009      	b.n	800ba70 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ba5c:	89fb      	ldrh	r3, [r7, #14]
 800ba5e:	4a0d      	ldr	r2, [pc, #52]	; (800ba94 <ff_convert+0x74>)
 800ba60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba64:	88fa      	ldrh	r2, [r7, #6]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d006      	beq.n	800ba78 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ba6a:	89fb      	ldrh	r3, [r7, #14]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	81fb      	strh	r3, [r7, #14]
 800ba70:	89fb      	ldrh	r3, [r7, #14]
 800ba72:	2b7f      	cmp	r3, #127	; 0x7f
 800ba74:	d9f2      	bls.n	800ba5c <ff_convert+0x3c>
 800ba76:	e000      	b.n	800ba7a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ba78:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ba7a:	89fb      	ldrh	r3, [r7, #14]
 800ba7c:	3380      	adds	r3, #128	; 0x80
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ba84:	89fb      	ldrh	r3, [r7, #14]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	0800e778 	.word	0x0800e778

0800ba98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b087      	sub	sp, #28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800baa2:	88fb      	ldrh	r3, [r7, #6]
 800baa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baa8:	d201      	bcs.n	800baae <ff_wtoupper+0x16>
 800baaa:	4b3e      	ldr	r3, [pc, #248]	; (800bba4 <ff_wtoupper+0x10c>)
 800baac:	e000      	b.n	800bab0 <ff_wtoupper+0x18>
 800baae:	4b3e      	ldr	r3, [pc, #248]	; (800bba8 <ff_wtoupper+0x110>)
 800bab0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	1c9a      	adds	r2, r3, #2
 800bab6:	617a      	str	r2, [r7, #20]
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800babc:	8a7b      	ldrh	r3, [r7, #18]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d068      	beq.n	800bb94 <ff_wtoupper+0xfc>
 800bac2:	88fa      	ldrh	r2, [r7, #6]
 800bac4:	8a7b      	ldrh	r3, [r7, #18]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d364      	bcc.n	800bb94 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	1c9a      	adds	r2, r3, #2
 800bace:	617a      	str	r2, [r7, #20]
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	823b      	strh	r3, [r7, #16]
 800bad4:	8a3b      	ldrh	r3, [r7, #16]
 800bad6:	0a1b      	lsrs	r3, r3, #8
 800bad8:	81fb      	strh	r3, [r7, #14]
 800bada:	8a3b      	ldrh	r3, [r7, #16]
 800badc:	b2db      	uxtb	r3, r3
 800bade:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bae0:	88fa      	ldrh	r2, [r7, #6]
 800bae2:	8a79      	ldrh	r1, [r7, #18]
 800bae4:	8a3b      	ldrh	r3, [r7, #16]
 800bae6:	440b      	add	r3, r1
 800bae8:	429a      	cmp	r2, r3
 800baea:	da49      	bge.n	800bb80 <ff_wtoupper+0xe8>
			switch (cmd) {
 800baec:	89fb      	ldrh	r3, [r7, #14]
 800baee:	2b08      	cmp	r3, #8
 800baf0:	d84f      	bhi.n	800bb92 <ff_wtoupper+0xfa>
 800baf2:	a201      	add	r2, pc, #4	; (adr r2, 800baf8 <ff_wtoupper+0x60>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb1d 	.word	0x0800bb1d
 800bafc:	0800bb2f 	.word	0x0800bb2f
 800bb00:	0800bb45 	.word	0x0800bb45
 800bb04:	0800bb4d 	.word	0x0800bb4d
 800bb08:	0800bb55 	.word	0x0800bb55
 800bb0c:	0800bb5d 	.word	0x0800bb5d
 800bb10:	0800bb65 	.word	0x0800bb65
 800bb14:	0800bb6d 	.word	0x0800bb6d
 800bb18:	0800bb75 	.word	0x0800bb75
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bb1c:	88fa      	ldrh	r2, [r7, #6]
 800bb1e:	8a7b      	ldrh	r3, [r7, #18]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	4413      	add	r3, r2
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	80fb      	strh	r3, [r7, #6]
 800bb2c:	e027      	b.n	800bb7e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bb2e:	88fa      	ldrh	r2, [r7, #6]
 800bb30:	8a7b      	ldrh	r3, [r7, #18]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	88fa      	ldrh	r2, [r7, #6]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	80fb      	strh	r3, [r7, #6]
 800bb42:	e01c      	b.n	800bb7e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bb44:	88fb      	ldrh	r3, [r7, #6]
 800bb46:	3b10      	subs	r3, #16
 800bb48:	80fb      	strh	r3, [r7, #6]
 800bb4a:	e018      	b.n	800bb7e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bb4c:	88fb      	ldrh	r3, [r7, #6]
 800bb4e:	3b20      	subs	r3, #32
 800bb50:	80fb      	strh	r3, [r7, #6]
 800bb52:	e014      	b.n	800bb7e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bb54:	88fb      	ldrh	r3, [r7, #6]
 800bb56:	3b30      	subs	r3, #48	; 0x30
 800bb58:	80fb      	strh	r3, [r7, #6]
 800bb5a:	e010      	b.n	800bb7e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bb5c:	88fb      	ldrh	r3, [r7, #6]
 800bb5e:	3b1a      	subs	r3, #26
 800bb60:	80fb      	strh	r3, [r7, #6]
 800bb62:	e00c      	b.n	800bb7e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bb64:	88fb      	ldrh	r3, [r7, #6]
 800bb66:	3308      	adds	r3, #8
 800bb68:	80fb      	strh	r3, [r7, #6]
 800bb6a:	e008      	b.n	800bb7e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bb6c:	88fb      	ldrh	r3, [r7, #6]
 800bb6e:	3b50      	subs	r3, #80	; 0x50
 800bb70:	80fb      	strh	r3, [r7, #6]
 800bb72:	e004      	b.n	800bb7e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bb74:	88fb      	ldrh	r3, [r7, #6]
 800bb76:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bb7a:	80fb      	strh	r3, [r7, #6]
 800bb7c:	bf00      	nop
			}
			break;
 800bb7e:	e008      	b.n	800bb92 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bb80:	89fb      	ldrh	r3, [r7, #14]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d195      	bne.n	800bab2 <ff_wtoupper+0x1a>
 800bb86:	8a3b      	ldrh	r3, [r7, #16]
 800bb88:	005b      	lsls	r3, r3, #1
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bb90:	e78f      	b.n	800bab2 <ff_wtoupper+0x1a>
			break;
 800bb92:	bf00      	nop
	}

	return chr;
 800bb94:	88fb      	ldrh	r3, [r7, #6]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	0800e878 	.word	0x0800e878
 800bba8:	0800ea6c 	.word	0x0800ea6c

0800bbac <__errno>:
 800bbac:	4b01      	ldr	r3, [pc, #4]	; (800bbb4 <__errno+0x8>)
 800bbae:	6818      	ldr	r0, [r3, #0]
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20000034 	.word	0x20000034

0800bbb8 <__libc_init_array>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	4e0d      	ldr	r6, [pc, #52]	; (800bbf0 <__libc_init_array+0x38>)
 800bbbc:	4c0d      	ldr	r4, [pc, #52]	; (800bbf4 <__libc_init_array+0x3c>)
 800bbbe:	1ba4      	subs	r4, r4, r6
 800bbc0:	10a4      	asrs	r4, r4, #2
 800bbc2:	2500      	movs	r5, #0
 800bbc4:	42a5      	cmp	r5, r4
 800bbc6:	d109      	bne.n	800bbdc <__libc_init_array+0x24>
 800bbc8:	4e0b      	ldr	r6, [pc, #44]	; (800bbf8 <__libc_init_array+0x40>)
 800bbca:	4c0c      	ldr	r4, [pc, #48]	; (800bbfc <__libc_init_array+0x44>)
 800bbcc:	f002 fd00 	bl	800e5d0 <_init>
 800bbd0:	1ba4      	subs	r4, r4, r6
 800bbd2:	10a4      	asrs	r4, r4, #2
 800bbd4:	2500      	movs	r5, #0
 800bbd6:	42a5      	cmp	r5, r4
 800bbd8:	d105      	bne.n	800bbe6 <__libc_init_array+0x2e>
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbe0:	4798      	blx	r3
 800bbe2:	3501      	adds	r5, #1
 800bbe4:	e7ee      	b.n	800bbc4 <__libc_init_array+0xc>
 800bbe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbea:	4798      	blx	r3
 800bbec:	3501      	adds	r5, #1
 800bbee:	e7f2      	b.n	800bbd6 <__libc_init_array+0x1e>
 800bbf0:	0800edf0 	.word	0x0800edf0
 800bbf4:	0800edf0 	.word	0x0800edf0
 800bbf8:	0800edf0 	.word	0x0800edf0
 800bbfc:	0800edf4 	.word	0x0800edf4

0800bc00 <memset>:
 800bc00:	4402      	add	r2, r0
 800bc02:	4603      	mov	r3, r0
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d100      	bne.n	800bc0a <memset+0xa>
 800bc08:	4770      	bx	lr
 800bc0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc0e:	e7f9      	b.n	800bc04 <memset+0x4>

0800bc10 <__cvt>:
 800bc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc14:	ec55 4b10 	vmov	r4, r5, d0
 800bc18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bc1a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc1e:	2d00      	cmp	r5, #0
 800bc20:	460e      	mov	r6, r1
 800bc22:	4691      	mov	r9, r2
 800bc24:	4619      	mov	r1, r3
 800bc26:	bfb8      	it	lt
 800bc28:	4622      	movlt	r2, r4
 800bc2a:	462b      	mov	r3, r5
 800bc2c:	f027 0720 	bic.w	r7, r7, #32
 800bc30:	bfbb      	ittet	lt
 800bc32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc36:	461d      	movlt	r5, r3
 800bc38:	2300      	movge	r3, #0
 800bc3a:	232d      	movlt	r3, #45	; 0x2d
 800bc3c:	bfb8      	it	lt
 800bc3e:	4614      	movlt	r4, r2
 800bc40:	2f46      	cmp	r7, #70	; 0x46
 800bc42:	700b      	strb	r3, [r1, #0]
 800bc44:	d004      	beq.n	800bc50 <__cvt+0x40>
 800bc46:	2f45      	cmp	r7, #69	; 0x45
 800bc48:	d100      	bne.n	800bc4c <__cvt+0x3c>
 800bc4a:	3601      	adds	r6, #1
 800bc4c:	2102      	movs	r1, #2
 800bc4e:	e000      	b.n	800bc52 <__cvt+0x42>
 800bc50:	2103      	movs	r1, #3
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	ab02      	add	r3, sp, #8
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	4653      	mov	r3, sl
 800bc5e:	ec45 4b10 	vmov	d0, r4, r5
 800bc62:	f000 fcf5 	bl	800c650 <_dtoa_r>
 800bc66:	2f47      	cmp	r7, #71	; 0x47
 800bc68:	4680      	mov	r8, r0
 800bc6a:	d102      	bne.n	800bc72 <__cvt+0x62>
 800bc6c:	f019 0f01 	tst.w	r9, #1
 800bc70:	d026      	beq.n	800bcc0 <__cvt+0xb0>
 800bc72:	2f46      	cmp	r7, #70	; 0x46
 800bc74:	eb08 0906 	add.w	r9, r8, r6
 800bc78:	d111      	bne.n	800bc9e <__cvt+0x8e>
 800bc7a:	f898 3000 	ldrb.w	r3, [r8]
 800bc7e:	2b30      	cmp	r3, #48	; 0x30
 800bc80:	d10a      	bne.n	800bc98 <__cvt+0x88>
 800bc82:	2200      	movs	r2, #0
 800bc84:	2300      	movs	r3, #0
 800bc86:	4620      	mov	r0, r4
 800bc88:	4629      	mov	r1, r5
 800bc8a:	f7f4 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc8e:	b918      	cbnz	r0, 800bc98 <__cvt+0x88>
 800bc90:	f1c6 0601 	rsb	r6, r6, #1
 800bc94:	f8ca 6000 	str.w	r6, [sl]
 800bc98:	f8da 3000 	ldr.w	r3, [sl]
 800bc9c:	4499      	add	r9, r3
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2300      	movs	r3, #0
 800bca2:	4620      	mov	r0, r4
 800bca4:	4629      	mov	r1, r5
 800bca6:	f7f4 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcaa:	b938      	cbnz	r0, 800bcbc <__cvt+0xac>
 800bcac:	2230      	movs	r2, #48	; 0x30
 800bcae:	9b03      	ldr	r3, [sp, #12]
 800bcb0:	454b      	cmp	r3, r9
 800bcb2:	d205      	bcs.n	800bcc0 <__cvt+0xb0>
 800bcb4:	1c59      	adds	r1, r3, #1
 800bcb6:	9103      	str	r1, [sp, #12]
 800bcb8:	701a      	strb	r2, [r3, #0]
 800bcba:	e7f8      	b.n	800bcae <__cvt+0x9e>
 800bcbc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcc4:	eba3 0308 	sub.w	r3, r3, r8
 800bcc8:	4640      	mov	r0, r8
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	b004      	add	sp, #16
 800bcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bcd2 <__exponent>:
 800bcd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcd4:	2900      	cmp	r1, #0
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	bfba      	itte	lt
 800bcda:	4249      	neglt	r1, r1
 800bcdc:	232d      	movlt	r3, #45	; 0x2d
 800bcde:	232b      	movge	r3, #43	; 0x2b
 800bce0:	2909      	cmp	r1, #9
 800bce2:	f804 2b02 	strb.w	r2, [r4], #2
 800bce6:	7043      	strb	r3, [r0, #1]
 800bce8:	dd20      	ble.n	800bd2c <__exponent+0x5a>
 800bcea:	f10d 0307 	add.w	r3, sp, #7
 800bcee:	461f      	mov	r7, r3
 800bcf0:	260a      	movs	r6, #10
 800bcf2:	fb91 f5f6 	sdiv	r5, r1, r6
 800bcf6:	fb06 1115 	mls	r1, r6, r5, r1
 800bcfa:	3130      	adds	r1, #48	; 0x30
 800bcfc:	2d09      	cmp	r5, #9
 800bcfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd02:	f103 32ff 	add.w	r2, r3, #4294967295
 800bd06:	4629      	mov	r1, r5
 800bd08:	dc09      	bgt.n	800bd1e <__exponent+0x4c>
 800bd0a:	3130      	adds	r1, #48	; 0x30
 800bd0c:	3b02      	subs	r3, #2
 800bd0e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bd12:	42bb      	cmp	r3, r7
 800bd14:	4622      	mov	r2, r4
 800bd16:	d304      	bcc.n	800bd22 <__exponent+0x50>
 800bd18:	1a10      	subs	r0, r2, r0
 800bd1a:	b003      	add	sp, #12
 800bd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd1e:	4613      	mov	r3, r2
 800bd20:	e7e7      	b.n	800bcf2 <__exponent+0x20>
 800bd22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd26:	f804 2b01 	strb.w	r2, [r4], #1
 800bd2a:	e7f2      	b.n	800bd12 <__exponent+0x40>
 800bd2c:	2330      	movs	r3, #48	; 0x30
 800bd2e:	4419      	add	r1, r3
 800bd30:	7083      	strb	r3, [r0, #2]
 800bd32:	1d02      	adds	r2, r0, #4
 800bd34:	70c1      	strb	r1, [r0, #3]
 800bd36:	e7ef      	b.n	800bd18 <__exponent+0x46>

0800bd38 <_printf_float>:
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	b08d      	sub	sp, #52	; 0x34
 800bd3e:	460c      	mov	r4, r1
 800bd40:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bd44:	4616      	mov	r6, r2
 800bd46:	461f      	mov	r7, r3
 800bd48:	4605      	mov	r5, r0
 800bd4a:	f001 fb03 	bl	800d354 <_localeconv_r>
 800bd4e:	6803      	ldr	r3, [r0, #0]
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7f4 fa3c 	bl	80001d0 <strlen>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd5c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd60:	9005      	str	r0, [sp, #20]
 800bd62:	3307      	adds	r3, #7
 800bd64:	f023 0307 	bic.w	r3, r3, #7
 800bd68:	f103 0208 	add.w	r2, r3, #8
 800bd6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bd70:	f8d4 b000 	ldr.w	fp, [r4]
 800bd74:	f8c8 2000 	str.w	r2, [r8]
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd80:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd88:	9307      	str	r3, [sp, #28]
 800bd8a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd92:	4ba7      	ldr	r3, [pc, #668]	; (800c030 <_printf_float+0x2f8>)
 800bd94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd98:	f7f4 fec8 	bl	8000b2c <__aeabi_dcmpun>
 800bd9c:	bb70      	cbnz	r0, 800bdfc <_printf_float+0xc4>
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bda2:	4ba3      	ldr	r3, [pc, #652]	; (800c030 <_printf_float+0x2f8>)
 800bda4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bda8:	f7f4 fea2 	bl	8000af0 <__aeabi_dcmple>
 800bdac:	bb30      	cbnz	r0, 800bdfc <_printf_float+0xc4>
 800bdae:	2200      	movs	r2, #0
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	4640      	mov	r0, r8
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	f7f4 fe91 	bl	8000adc <__aeabi_dcmplt>
 800bdba:	b110      	cbz	r0, 800bdc2 <_printf_float+0x8a>
 800bdbc:	232d      	movs	r3, #45	; 0x2d
 800bdbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdc2:	4a9c      	ldr	r2, [pc, #624]	; (800c034 <_printf_float+0x2fc>)
 800bdc4:	4b9c      	ldr	r3, [pc, #624]	; (800c038 <_printf_float+0x300>)
 800bdc6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bdca:	bf8c      	ite	hi
 800bdcc:	4690      	movhi	r8, r2
 800bdce:	4698      	movls	r8, r3
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	f02b 0204 	bic.w	r2, fp, #4
 800bdd6:	6123      	str	r3, [r4, #16]
 800bdd8:	6022      	str	r2, [r4, #0]
 800bdda:	f04f 0900 	mov.w	r9, #0
 800bdde:	9700      	str	r7, [sp, #0]
 800bde0:	4633      	mov	r3, r6
 800bde2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bde4:	4621      	mov	r1, r4
 800bde6:	4628      	mov	r0, r5
 800bde8:	f000 f9e6 	bl	800c1b8 <_printf_common>
 800bdec:	3001      	adds	r0, #1
 800bdee:	f040 808d 	bne.w	800bf0c <_printf_float+0x1d4>
 800bdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf6:	b00d      	add	sp, #52	; 0x34
 800bdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfc:	4642      	mov	r2, r8
 800bdfe:	464b      	mov	r3, r9
 800be00:	4640      	mov	r0, r8
 800be02:	4649      	mov	r1, r9
 800be04:	f7f4 fe92 	bl	8000b2c <__aeabi_dcmpun>
 800be08:	b110      	cbz	r0, 800be10 <_printf_float+0xd8>
 800be0a:	4a8c      	ldr	r2, [pc, #560]	; (800c03c <_printf_float+0x304>)
 800be0c:	4b8c      	ldr	r3, [pc, #560]	; (800c040 <_printf_float+0x308>)
 800be0e:	e7da      	b.n	800bdc6 <_printf_float+0x8e>
 800be10:	6861      	ldr	r1, [r4, #4]
 800be12:	1c4b      	adds	r3, r1, #1
 800be14:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800be18:	a80a      	add	r0, sp, #40	; 0x28
 800be1a:	d13e      	bne.n	800be9a <_printf_float+0x162>
 800be1c:	2306      	movs	r3, #6
 800be1e:	6063      	str	r3, [r4, #4]
 800be20:	2300      	movs	r3, #0
 800be22:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800be26:	ab09      	add	r3, sp, #36	; 0x24
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	ec49 8b10 	vmov	d0, r8, r9
 800be2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be32:	6022      	str	r2, [r4, #0]
 800be34:	f8cd a004 	str.w	sl, [sp, #4]
 800be38:	6861      	ldr	r1, [r4, #4]
 800be3a:	4628      	mov	r0, r5
 800be3c:	f7ff fee8 	bl	800bc10 <__cvt>
 800be40:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800be44:	2b47      	cmp	r3, #71	; 0x47
 800be46:	4680      	mov	r8, r0
 800be48:	d109      	bne.n	800be5e <_printf_float+0x126>
 800be4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be4c:	1cd8      	adds	r0, r3, #3
 800be4e:	db02      	blt.n	800be56 <_printf_float+0x11e>
 800be50:	6862      	ldr	r2, [r4, #4]
 800be52:	4293      	cmp	r3, r2
 800be54:	dd47      	ble.n	800bee6 <_printf_float+0x1ae>
 800be56:	f1aa 0a02 	sub.w	sl, sl, #2
 800be5a:	fa5f fa8a 	uxtb.w	sl, sl
 800be5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800be62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be64:	d824      	bhi.n	800beb0 <_printf_float+0x178>
 800be66:	3901      	subs	r1, #1
 800be68:	4652      	mov	r2, sl
 800be6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be6e:	9109      	str	r1, [sp, #36]	; 0x24
 800be70:	f7ff ff2f 	bl	800bcd2 <__exponent>
 800be74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be76:	1813      	adds	r3, r2, r0
 800be78:	2a01      	cmp	r2, #1
 800be7a:	4681      	mov	r9, r0
 800be7c:	6123      	str	r3, [r4, #16]
 800be7e:	dc02      	bgt.n	800be86 <_printf_float+0x14e>
 800be80:	6822      	ldr	r2, [r4, #0]
 800be82:	07d1      	lsls	r1, r2, #31
 800be84:	d501      	bpl.n	800be8a <_printf_float+0x152>
 800be86:	3301      	adds	r3, #1
 800be88:	6123      	str	r3, [r4, #16]
 800be8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0a5      	beq.n	800bdde <_printf_float+0xa6>
 800be92:	232d      	movs	r3, #45	; 0x2d
 800be94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be98:	e7a1      	b.n	800bdde <_printf_float+0xa6>
 800be9a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800be9e:	f000 8177 	beq.w	800c190 <_printf_float+0x458>
 800bea2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bea6:	d1bb      	bne.n	800be20 <_printf_float+0xe8>
 800bea8:	2900      	cmp	r1, #0
 800beaa:	d1b9      	bne.n	800be20 <_printf_float+0xe8>
 800beac:	2301      	movs	r3, #1
 800beae:	e7b6      	b.n	800be1e <_printf_float+0xe6>
 800beb0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800beb4:	d119      	bne.n	800beea <_printf_float+0x1b2>
 800beb6:	2900      	cmp	r1, #0
 800beb8:	6863      	ldr	r3, [r4, #4]
 800beba:	dd0c      	ble.n	800bed6 <_printf_float+0x19e>
 800bebc:	6121      	str	r1, [r4, #16]
 800bebe:	b913      	cbnz	r3, 800bec6 <_printf_float+0x18e>
 800bec0:	6822      	ldr	r2, [r4, #0]
 800bec2:	07d2      	lsls	r2, r2, #31
 800bec4:	d502      	bpl.n	800becc <_printf_float+0x194>
 800bec6:	3301      	adds	r3, #1
 800bec8:	440b      	add	r3, r1
 800beca:	6123      	str	r3, [r4, #16]
 800becc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bece:	65a3      	str	r3, [r4, #88]	; 0x58
 800bed0:	f04f 0900 	mov.w	r9, #0
 800bed4:	e7d9      	b.n	800be8a <_printf_float+0x152>
 800bed6:	b913      	cbnz	r3, 800bede <_printf_float+0x1a6>
 800bed8:	6822      	ldr	r2, [r4, #0]
 800beda:	07d0      	lsls	r0, r2, #31
 800bedc:	d501      	bpl.n	800bee2 <_printf_float+0x1aa>
 800bede:	3302      	adds	r3, #2
 800bee0:	e7f3      	b.n	800beca <_printf_float+0x192>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e7f1      	b.n	800beca <_printf_float+0x192>
 800bee6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800beea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800beee:	4293      	cmp	r3, r2
 800bef0:	db05      	blt.n	800befe <_printf_float+0x1c6>
 800bef2:	6822      	ldr	r2, [r4, #0]
 800bef4:	6123      	str	r3, [r4, #16]
 800bef6:	07d1      	lsls	r1, r2, #31
 800bef8:	d5e8      	bpl.n	800becc <_printf_float+0x194>
 800befa:	3301      	adds	r3, #1
 800befc:	e7e5      	b.n	800beca <_printf_float+0x192>
 800befe:	2b00      	cmp	r3, #0
 800bf00:	bfd4      	ite	le
 800bf02:	f1c3 0302 	rsble	r3, r3, #2
 800bf06:	2301      	movgt	r3, #1
 800bf08:	4413      	add	r3, r2
 800bf0a:	e7de      	b.n	800beca <_printf_float+0x192>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	055a      	lsls	r2, r3, #21
 800bf10:	d407      	bmi.n	800bf22 <_printf_float+0x1ea>
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	4642      	mov	r2, r8
 800bf16:	4631      	mov	r1, r6
 800bf18:	4628      	mov	r0, r5
 800bf1a:	47b8      	blx	r7
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	d12b      	bne.n	800bf78 <_printf_float+0x240>
 800bf20:	e767      	b.n	800bdf2 <_printf_float+0xba>
 800bf22:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bf26:	f240 80dc 	bls.w	800c0e2 <_printf_float+0x3aa>
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf32:	f7f4 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d033      	beq.n	800bfa2 <_printf_float+0x26a>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	4a41      	ldr	r2, [pc, #260]	; (800c044 <_printf_float+0x30c>)
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b8      	blx	r7
 800bf44:	3001      	adds	r0, #1
 800bf46:	f43f af54 	beq.w	800bdf2 <_printf_float+0xba>
 800bf4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	db02      	blt.n	800bf58 <_printf_float+0x220>
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	07d8      	lsls	r0, r3, #31
 800bf56:	d50f      	bpl.n	800bf78 <_printf_float+0x240>
 800bf58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf5c:	4631      	mov	r1, r6
 800bf5e:	4628      	mov	r0, r5
 800bf60:	47b8      	blx	r7
 800bf62:	3001      	adds	r0, #1
 800bf64:	f43f af45 	beq.w	800bdf2 <_printf_float+0xba>
 800bf68:	f04f 0800 	mov.w	r8, #0
 800bf6c:	f104 091a 	add.w	r9, r4, #26
 800bf70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf72:	3b01      	subs	r3, #1
 800bf74:	4543      	cmp	r3, r8
 800bf76:	dc09      	bgt.n	800bf8c <_printf_float+0x254>
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	079b      	lsls	r3, r3, #30
 800bf7c:	f100 8103 	bmi.w	800c186 <_printf_float+0x44e>
 800bf80:	68e0      	ldr	r0, [r4, #12]
 800bf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf84:	4298      	cmp	r0, r3
 800bf86:	bfb8      	it	lt
 800bf88:	4618      	movlt	r0, r3
 800bf8a:	e734      	b.n	800bdf6 <_printf_float+0xbe>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	464a      	mov	r2, r9
 800bf90:	4631      	mov	r1, r6
 800bf92:	4628      	mov	r0, r5
 800bf94:	47b8      	blx	r7
 800bf96:	3001      	adds	r0, #1
 800bf98:	f43f af2b 	beq.w	800bdf2 <_printf_float+0xba>
 800bf9c:	f108 0801 	add.w	r8, r8, #1
 800bfa0:	e7e6      	b.n	800bf70 <_printf_float+0x238>
 800bfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dc2b      	bgt.n	800c000 <_printf_float+0x2c8>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	4a26      	ldr	r2, [pc, #152]	; (800c044 <_printf_float+0x30c>)
 800bfac:	4631      	mov	r1, r6
 800bfae:	4628      	mov	r0, r5
 800bfb0:	47b8      	blx	r7
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	f43f af1d 	beq.w	800bdf2 <_printf_float+0xba>
 800bfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfba:	b923      	cbnz	r3, 800bfc6 <_printf_float+0x28e>
 800bfbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfbe:	b913      	cbnz	r3, 800bfc6 <_printf_float+0x28e>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	07d9      	lsls	r1, r3, #31
 800bfc4:	d5d8      	bpl.n	800bf78 <_printf_float+0x240>
 800bfc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4628      	mov	r0, r5
 800bfce:	47b8      	blx	r7
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	f43f af0e 	beq.w	800bdf2 <_printf_float+0xba>
 800bfd6:	f04f 0900 	mov.w	r9, #0
 800bfda:	f104 0a1a 	add.w	sl, r4, #26
 800bfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe0:	425b      	negs	r3, r3
 800bfe2:	454b      	cmp	r3, r9
 800bfe4:	dc01      	bgt.n	800bfea <_printf_float+0x2b2>
 800bfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe8:	e794      	b.n	800bf14 <_printf_float+0x1dc>
 800bfea:	2301      	movs	r3, #1
 800bfec:	4652      	mov	r2, sl
 800bfee:	4631      	mov	r1, r6
 800bff0:	4628      	mov	r0, r5
 800bff2:	47b8      	blx	r7
 800bff4:	3001      	adds	r0, #1
 800bff6:	f43f aefc 	beq.w	800bdf2 <_printf_float+0xba>
 800bffa:	f109 0901 	add.w	r9, r9, #1
 800bffe:	e7ee      	b.n	800bfde <_printf_float+0x2a6>
 800c000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c002:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c004:	429a      	cmp	r2, r3
 800c006:	bfa8      	it	ge
 800c008:	461a      	movge	r2, r3
 800c00a:	2a00      	cmp	r2, #0
 800c00c:	4691      	mov	r9, r2
 800c00e:	dd07      	ble.n	800c020 <_printf_float+0x2e8>
 800c010:	4613      	mov	r3, r2
 800c012:	4631      	mov	r1, r6
 800c014:	4642      	mov	r2, r8
 800c016:	4628      	mov	r0, r5
 800c018:	47b8      	blx	r7
 800c01a:	3001      	adds	r0, #1
 800c01c:	f43f aee9 	beq.w	800bdf2 <_printf_float+0xba>
 800c020:	f104 031a 	add.w	r3, r4, #26
 800c024:	f04f 0b00 	mov.w	fp, #0
 800c028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c02c:	9306      	str	r3, [sp, #24]
 800c02e:	e015      	b.n	800c05c <_printf_float+0x324>
 800c030:	7fefffff 	.word	0x7fefffff
 800c034:	0800eb30 	.word	0x0800eb30
 800c038:	0800eb2c 	.word	0x0800eb2c
 800c03c:	0800eb38 	.word	0x0800eb38
 800c040:	0800eb34 	.word	0x0800eb34
 800c044:	0800eb3c 	.word	0x0800eb3c
 800c048:	2301      	movs	r3, #1
 800c04a:	9a06      	ldr	r2, [sp, #24]
 800c04c:	4631      	mov	r1, r6
 800c04e:	4628      	mov	r0, r5
 800c050:	47b8      	blx	r7
 800c052:	3001      	adds	r0, #1
 800c054:	f43f aecd 	beq.w	800bdf2 <_printf_float+0xba>
 800c058:	f10b 0b01 	add.w	fp, fp, #1
 800c05c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c060:	ebaa 0309 	sub.w	r3, sl, r9
 800c064:	455b      	cmp	r3, fp
 800c066:	dcef      	bgt.n	800c048 <_printf_float+0x310>
 800c068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c06c:	429a      	cmp	r2, r3
 800c06e:	44d0      	add	r8, sl
 800c070:	db15      	blt.n	800c09e <_printf_float+0x366>
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	07da      	lsls	r2, r3, #31
 800c076:	d412      	bmi.n	800c09e <_printf_float+0x366>
 800c078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c07a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c07c:	eba3 020a 	sub.w	r2, r3, sl
 800c080:	eba3 0a01 	sub.w	sl, r3, r1
 800c084:	4592      	cmp	sl, r2
 800c086:	bfa8      	it	ge
 800c088:	4692      	movge	sl, r2
 800c08a:	f1ba 0f00 	cmp.w	sl, #0
 800c08e:	dc0e      	bgt.n	800c0ae <_printf_float+0x376>
 800c090:	f04f 0800 	mov.w	r8, #0
 800c094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c098:	f104 091a 	add.w	r9, r4, #26
 800c09c:	e019      	b.n	800c0d2 <_printf_float+0x39a>
 800c09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	47b8      	blx	r7
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	d1e5      	bne.n	800c078 <_printf_float+0x340>
 800c0ac:	e6a1      	b.n	800bdf2 <_printf_float+0xba>
 800c0ae:	4653      	mov	r3, sl
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	47b8      	blx	r7
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d1e9      	bne.n	800c090 <_printf_float+0x358>
 800c0bc:	e699      	b.n	800bdf2 <_printf_float+0xba>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	464a      	mov	r2, r9
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	47b8      	blx	r7
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	f43f ae92 	beq.w	800bdf2 <_printf_float+0xba>
 800c0ce:	f108 0801 	add.w	r8, r8, #1
 800c0d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0d6:	1a9b      	subs	r3, r3, r2
 800c0d8:	eba3 030a 	sub.w	r3, r3, sl
 800c0dc:	4543      	cmp	r3, r8
 800c0de:	dcee      	bgt.n	800c0be <_printf_float+0x386>
 800c0e0:	e74a      	b.n	800bf78 <_printf_float+0x240>
 800c0e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0e4:	2a01      	cmp	r2, #1
 800c0e6:	dc01      	bgt.n	800c0ec <_printf_float+0x3b4>
 800c0e8:	07db      	lsls	r3, r3, #31
 800c0ea:	d53a      	bpl.n	800c162 <_printf_float+0x42a>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	4642      	mov	r2, r8
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b8      	blx	r7
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f43f ae7b 	beq.w	800bdf2 <_printf_float+0xba>
 800c0fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c100:	4631      	mov	r1, r6
 800c102:	4628      	mov	r0, r5
 800c104:	47b8      	blx	r7
 800c106:	3001      	adds	r0, #1
 800c108:	f108 0801 	add.w	r8, r8, #1
 800c10c:	f43f ae71 	beq.w	800bdf2 <_printf_float+0xba>
 800c110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c112:	2200      	movs	r2, #0
 800c114:	f103 3aff 	add.w	sl, r3, #4294967295
 800c118:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c11c:	2300      	movs	r3, #0
 800c11e:	f7f4 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c122:	b9c8      	cbnz	r0, 800c158 <_printf_float+0x420>
 800c124:	4653      	mov	r3, sl
 800c126:	4642      	mov	r2, r8
 800c128:	4631      	mov	r1, r6
 800c12a:	4628      	mov	r0, r5
 800c12c:	47b8      	blx	r7
 800c12e:	3001      	adds	r0, #1
 800c130:	d10e      	bne.n	800c150 <_printf_float+0x418>
 800c132:	e65e      	b.n	800bdf2 <_printf_float+0xba>
 800c134:	2301      	movs	r3, #1
 800c136:	4652      	mov	r2, sl
 800c138:	4631      	mov	r1, r6
 800c13a:	4628      	mov	r0, r5
 800c13c:	47b8      	blx	r7
 800c13e:	3001      	adds	r0, #1
 800c140:	f43f ae57 	beq.w	800bdf2 <_printf_float+0xba>
 800c144:	f108 0801 	add.w	r8, r8, #1
 800c148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c14a:	3b01      	subs	r3, #1
 800c14c:	4543      	cmp	r3, r8
 800c14e:	dcf1      	bgt.n	800c134 <_printf_float+0x3fc>
 800c150:	464b      	mov	r3, r9
 800c152:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c156:	e6de      	b.n	800bf16 <_printf_float+0x1de>
 800c158:	f04f 0800 	mov.w	r8, #0
 800c15c:	f104 0a1a 	add.w	sl, r4, #26
 800c160:	e7f2      	b.n	800c148 <_printf_float+0x410>
 800c162:	2301      	movs	r3, #1
 800c164:	e7df      	b.n	800c126 <_printf_float+0x3ee>
 800c166:	2301      	movs	r3, #1
 800c168:	464a      	mov	r2, r9
 800c16a:	4631      	mov	r1, r6
 800c16c:	4628      	mov	r0, r5
 800c16e:	47b8      	blx	r7
 800c170:	3001      	adds	r0, #1
 800c172:	f43f ae3e 	beq.w	800bdf2 <_printf_float+0xba>
 800c176:	f108 0801 	add.w	r8, r8, #1
 800c17a:	68e3      	ldr	r3, [r4, #12]
 800c17c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c17e:	1a9b      	subs	r3, r3, r2
 800c180:	4543      	cmp	r3, r8
 800c182:	dcf0      	bgt.n	800c166 <_printf_float+0x42e>
 800c184:	e6fc      	b.n	800bf80 <_printf_float+0x248>
 800c186:	f04f 0800 	mov.w	r8, #0
 800c18a:	f104 0919 	add.w	r9, r4, #25
 800c18e:	e7f4      	b.n	800c17a <_printf_float+0x442>
 800c190:	2900      	cmp	r1, #0
 800c192:	f43f ae8b 	beq.w	800beac <_printf_float+0x174>
 800c196:	2300      	movs	r3, #0
 800c198:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c19c:	ab09      	add	r3, sp, #36	; 0x24
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	ec49 8b10 	vmov	d0, r8, r9
 800c1a4:	6022      	str	r2, [r4, #0]
 800c1a6:	f8cd a004 	str.w	sl, [sp, #4]
 800c1aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f7ff fd2e 	bl	800bc10 <__cvt>
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	e648      	b.n	800be4a <_printf_float+0x112>

0800c1b8 <_printf_common>:
 800c1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1bc:	4691      	mov	r9, r2
 800c1be:	461f      	mov	r7, r3
 800c1c0:	688a      	ldr	r2, [r1, #8]
 800c1c2:	690b      	ldr	r3, [r1, #16]
 800c1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	bfb8      	it	lt
 800c1cc:	4613      	movlt	r3, r2
 800c1ce:	f8c9 3000 	str.w	r3, [r9]
 800c1d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460c      	mov	r4, r1
 800c1da:	b112      	cbz	r2, 800c1e2 <_printf_common+0x2a>
 800c1dc:	3301      	adds	r3, #1
 800c1de:	f8c9 3000 	str.w	r3, [r9]
 800c1e2:	6823      	ldr	r3, [r4, #0]
 800c1e4:	0699      	lsls	r1, r3, #26
 800c1e6:	bf42      	ittt	mi
 800c1e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c1ec:	3302      	addmi	r3, #2
 800c1ee:	f8c9 3000 	strmi.w	r3, [r9]
 800c1f2:	6825      	ldr	r5, [r4, #0]
 800c1f4:	f015 0506 	ands.w	r5, r5, #6
 800c1f8:	d107      	bne.n	800c20a <_printf_common+0x52>
 800c1fa:	f104 0a19 	add.w	sl, r4, #25
 800c1fe:	68e3      	ldr	r3, [r4, #12]
 800c200:	f8d9 2000 	ldr.w	r2, [r9]
 800c204:	1a9b      	subs	r3, r3, r2
 800c206:	42ab      	cmp	r3, r5
 800c208:	dc28      	bgt.n	800c25c <_printf_common+0xa4>
 800c20a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c20e:	6822      	ldr	r2, [r4, #0]
 800c210:	3300      	adds	r3, #0
 800c212:	bf18      	it	ne
 800c214:	2301      	movne	r3, #1
 800c216:	0692      	lsls	r2, r2, #26
 800c218:	d42d      	bmi.n	800c276 <_printf_common+0xbe>
 800c21a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c21e:	4639      	mov	r1, r7
 800c220:	4630      	mov	r0, r6
 800c222:	47c0      	blx	r8
 800c224:	3001      	adds	r0, #1
 800c226:	d020      	beq.n	800c26a <_printf_common+0xb2>
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	68e5      	ldr	r5, [r4, #12]
 800c22c:	f8d9 2000 	ldr.w	r2, [r9]
 800c230:	f003 0306 	and.w	r3, r3, #6
 800c234:	2b04      	cmp	r3, #4
 800c236:	bf08      	it	eq
 800c238:	1aad      	subeq	r5, r5, r2
 800c23a:	68a3      	ldr	r3, [r4, #8]
 800c23c:	6922      	ldr	r2, [r4, #16]
 800c23e:	bf0c      	ite	eq
 800c240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c244:	2500      	movne	r5, #0
 800c246:	4293      	cmp	r3, r2
 800c248:	bfc4      	itt	gt
 800c24a:	1a9b      	subgt	r3, r3, r2
 800c24c:	18ed      	addgt	r5, r5, r3
 800c24e:	f04f 0900 	mov.w	r9, #0
 800c252:	341a      	adds	r4, #26
 800c254:	454d      	cmp	r5, r9
 800c256:	d11a      	bne.n	800c28e <_printf_common+0xd6>
 800c258:	2000      	movs	r0, #0
 800c25a:	e008      	b.n	800c26e <_printf_common+0xb6>
 800c25c:	2301      	movs	r3, #1
 800c25e:	4652      	mov	r2, sl
 800c260:	4639      	mov	r1, r7
 800c262:	4630      	mov	r0, r6
 800c264:	47c0      	blx	r8
 800c266:	3001      	adds	r0, #1
 800c268:	d103      	bne.n	800c272 <_printf_common+0xba>
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	3501      	adds	r5, #1
 800c274:	e7c3      	b.n	800c1fe <_printf_common+0x46>
 800c276:	18e1      	adds	r1, r4, r3
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	2030      	movs	r0, #48	; 0x30
 800c27c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c280:	4422      	add	r2, r4
 800c282:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c286:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c28a:	3302      	adds	r3, #2
 800c28c:	e7c5      	b.n	800c21a <_printf_common+0x62>
 800c28e:	2301      	movs	r3, #1
 800c290:	4622      	mov	r2, r4
 800c292:	4639      	mov	r1, r7
 800c294:	4630      	mov	r0, r6
 800c296:	47c0      	blx	r8
 800c298:	3001      	adds	r0, #1
 800c29a:	d0e6      	beq.n	800c26a <_printf_common+0xb2>
 800c29c:	f109 0901 	add.w	r9, r9, #1
 800c2a0:	e7d8      	b.n	800c254 <_printf_common+0x9c>
	...

0800c2a4 <_printf_i>:
 800c2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c2ac:	460c      	mov	r4, r1
 800c2ae:	7e09      	ldrb	r1, [r1, #24]
 800c2b0:	b085      	sub	sp, #20
 800c2b2:	296e      	cmp	r1, #110	; 0x6e
 800c2b4:	4617      	mov	r7, r2
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	4698      	mov	r8, r3
 800c2ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2bc:	f000 80b3 	beq.w	800c426 <_printf_i+0x182>
 800c2c0:	d822      	bhi.n	800c308 <_printf_i+0x64>
 800c2c2:	2963      	cmp	r1, #99	; 0x63
 800c2c4:	d036      	beq.n	800c334 <_printf_i+0x90>
 800c2c6:	d80a      	bhi.n	800c2de <_printf_i+0x3a>
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	f000 80b9 	beq.w	800c440 <_printf_i+0x19c>
 800c2ce:	2958      	cmp	r1, #88	; 0x58
 800c2d0:	f000 8083 	beq.w	800c3da <_printf_i+0x136>
 800c2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c2dc:	e032      	b.n	800c344 <_printf_i+0xa0>
 800c2de:	2964      	cmp	r1, #100	; 0x64
 800c2e0:	d001      	beq.n	800c2e6 <_printf_i+0x42>
 800c2e2:	2969      	cmp	r1, #105	; 0x69
 800c2e4:	d1f6      	bne.n	800c2d4 <_printf_i+0x30>
 800c2e6:	6820      	ldr	r0, [r4, #0]
 800c2e8:	6813      	ldr	r3, [r2, #0]
 800c2ea:	0605      	lsls	r5, r0, #24
 800c2ec:	f103 0104 	add.w	r1, r3, #4
 800c2f0:	d52a      	bpl.n	800c348 <_printf_i+0xa4>
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6011      	str	r1, [r2, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	da03      	bge.n	800c302 <_printf_i+0x5e>
 800c2fa:	222d      	movs	r2, #45	; 0x2d
 800c2fc:	425b      	negs	r3, r3
 800c2fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c302:	486f      	ldr	r0, [pc, #444]	; (800c4c0 <_printf_i+0x21c>)
 800c304:	220a      	movs	r2, #10
 800c306:	e039      	b.n	800c37c <_printf_i+0xd8>
 800c308:	2973      	cmp	r1, #115	; 0x73
 800c30a:	f000 809d 	beq.w	800c448 <_printf_i+0x1a4>
 800c30e:	d808      	bhi.n	800c322 <_printf_i+0x7e>
 800c310:	296f      	cmp	r1, #111	; 0x6f
 800c312:	d020      	beq.n	800c356 <_printf_i+0xb2>
 800c314:	2970      	cmp	r1, #112	; 0x70
 800c316:	d1dd      	bne.n	800c2d4 <_printf_i+0x30>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	f043 0320 	orr.w	r3, r3, #32
 800c31e:	6023      	str	r3, [r4, #0]
 800c320:	e003      	b.n	800c32a <_printf_i+0x86>
 800c322:	2975      	cmp	r1, #117	; 0x75
 800c324:	d017      	beq.n	800c356 <_printf_i+0xb2>
 800c326:	2978      	cmp	r1, #120	; 0x78
 800c328:	d1d4      	bne.n	800c2d4 <_printf_i+0x30>
 800c32a:	2378      	movs	r3, #120	; 0x78
 800c32c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c330:	4864      	ldr	r0, [pc, #400]	; (800c4c4 <_printf_i+0x220>)
 800c332:	e055      	b.n	800c3e0 <_printf_i+0x13c>
 800c334:	6813      	ldr	r3, [r2, #0]
 800c336:	1d19      	adds	r1, r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	6011      	str	r1, [r2, #0]
 800c33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c344:	2301      	movs	r3, #1
 800c346:	e08c      	b.n	800c462 <_printf_i+0x1be>
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	6011      	str	r1, [r2, #0]
 800c34c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c350:	bf18      	it	ne
 800c352:	b21b      	sxthne	r3, r3
 800c354:	e7cf      	b.n	800c2f6 <_printf_i+0x52>
 800c356:	6813      	ldr	r3, [r2, #0]
 800c358:	6825      	ldr	r5, [r4, #0]
 800c35a:	1d18      	adds	r0, r3, #4
 800c35c:	6010      	str	r0, [r2, #0]
 800c35e:	0628      	lsls	r0, r5, #24
 800c360:	d501      	bpl.n	800c366 <_printf_i+0xc2>
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	e002      	b.n	800c36c <_printf_i+0xc8>
 800c366:	0668      	lsls	r0, r5, #25
 800c368:	d5fb      	bpl.n	800c362 <_printf_i+0xbe>
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	4854      	ldr	r0, [pc, #336]	; (800c4c0 <_printf_i+0x21c>)
 800c36e:	296f      	cmp	r1, #111	; 0x6f
 800c370:	bf14      	ite	ne
 800c372:	220a      	movne	r2, #10
 800c374:	2208      	moveq	r2, #8
 800c376:	2100      	movs	r1, #0
 800c378:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c37c:	6865      	ldr	r5, [r4, #4]
 800c37e:	60a5      	str	r5, [r4, #8]
 800c380:	2d00      	cmp	r5, #0
 800c382:	f2c0 8095 	blt.w	800c4b0 <_printf_i+0x20c>
 800c386:	6821      	ldr	r1, [r4, #0]
 800c388:	f021 0104 	bic.w	r1, r1, #4
 800c38c:	6021      	str	r1, [r4, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d13d      	bne.n	800c40e <_printf_i+0x16a>
 800c392:	2d00      	cmp	r5, #0
 800c394:	f040 808e 	bne.w	800c4b4 <_printf_i+0x210>
 800c398:	4665      	mov	r5, ip
 800c39a:	2a08      	cmp	r2, #8
 800c39c:	d10b      	bne.n	800c3b6 <_printf_i+0x112>
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	07db      	lsls	r3, r3, #31
 800c3a2:	d508      	bpl.n	800c3b6 <_printf_i+0x112>
 800c3a4:	6923      	ldr	r3, [r4, #16]
 800c3a6:	6862      	ldr	r2, [r4, #4]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	bfde      	ittt	le
 800c3ac:	2330      	movle	r3, #48	; 0x30
 800c3ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3b6:	ebac 0305 	sub.w	r3, ip, r5
 800c3ba:	6123      	str	r3, [r4, #16]
 800c3bc:	f8cd 8000 	str.w	r8, [sp]
 800c3c0:	463b      	mov	r3, r7
 800c3c2:	aa03      	add	r2, sp, #12
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	f7ff fef6 	bl	800c1b8 <_printf_common>
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d14d      	bne.n	800c46c <_printf_i+0x1c8>
 800c3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d4:	b005      	add	sp, #20
 800c3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3da:	4839      	ldr	r0, [pc, #228]	; (800c4c0 <_printf_i+0x21c>)
 800c3dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c3e0:	6813      	ldr	r3, [r2, #0]
 800c3e2:	6821      	ldr	r1, [r4, #0]
 800c3e4:	1d1d      	adds	r5, r3, #4
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6015      	str	r5, [r2, #0]
 800c3ea:	060a      	lsls	r2, r1, #24
 800c3ec:	d50b      	bpl.n	800c406 <_printf_i+0x162>
 800c3ee:	07ca      	lsls	r2, r1, #31
 800c3f0:	bf44      	itt	mi
 800c3f2:	f041 0120 	orrmi.w	r1, r1, #32
 800c3f6:	6021      	strmi	r1, [r4, #0]
 800c3f8:	b91b      	cbnz	r3, 800c402 <_printf_i+0x15e>
 800c3fa:	6822      	ldr	r2, [r4, #0]
 800c3fc:	f022 0220 	bic.w	r2, r2, #32
 800c400:	6022      	str	r2, [r4, #0]
 800c402:	2210      	movs	r2, #16
 800c404:	e7b7      	b.n	800c376 <_printf_i+0xd2>
 800c406:	064d      	lsls	r5, r1, #25
 800c408:	bf48      	it	mi
 800c40a:	b29b      	uxthmi	r3, r3
 800c40c:	e7ef      	b.n	800c3ee <_printf_i+0x14a>
 800c40e:	4665      	mov	r5, ip
 800c410:	fbb3 f1f2 	udiv	r1, r3, r2
 800c414:	fb02 3311 	mls	r3, r2, r1, r3
 800c418:	5cc3      	ldrb	r3, [r0, r3]
 800c41a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c41e:	460b      	mov	r3, r1
 800c420:	2900      	cmp	r1, #0
 800c422:	d1f5      	bne.n	800c410 <_printf_i+0x16c>
 800c424:	e7b9      	b.n	800c39a <_printf_i+0xf6>
 800c426:	6813      	ldr	r3, [r2, #0]
 800c428:	6825      	ldr	r5, [r4, #0]
 800c42a:	6961      	ldr	r1, [r4, #20]
 800c42c:	1d18      	adds	r0, r3, #4
 800c42e:	6010      	str	r0, [r2, #0]
 800c430:	0628      	lsls	r0, r5, #24
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	d501      	bpl.n	800c43a <_printf_i+0x196>
 800c436:	6019      	str	r1, [r3, #0]
 800c438:	e002      	b.n	800c440 <_printf_i+0x19c>
 800c43a:	066a      	lsls	r2, r5, #25
 800c43c:	d5fb      	bpl.n	800c436 <_printf_i+0x192>
 800c43e:	8019      	strh	r1, [r3, #0]
 800c440:	2300      	movs	r3, #0
 800c442:	6123      	str	r3, [r4, #16]
 800c444:	4665      	mov	r5, ip
 800c446:	e7b9      	b.n	800c3bc <_printf_i+0x118>
 800c448:	6813      	ldr	r3, [r2, #0]
 800c44a:	1d19      	adds	r1, r3, #4
 800c44c:	6011      	str	r1, [r2, #0]
 800c44e:	681d      	ldr	r5, [r3, #0]
 800c450:	6862      	ldr	r2, [r4, #4]
 800c452:	2100      	movs	r1, #0
 800c454:	4628      	mov	r0, r5
 800c456:	f7f3 fec3 	bl	80001e0 <memchr>
 800c45a:	b108      	cbz	r0, 800c460 <_printf_i+0x1bc>
 800c45c:	1b40      	subs	r0, r0, r5
 800c45e:	6060      	str	r0, [r4, #4]
 800c460:	6863      	ldr	r3, [r4, #4]
 800c462:	6123      	str	r3, [r4, #16]
 800c464:	2300      	movs	r3, #0
 800c466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c46a:	e7a7      	b.n	800c3bc <_printf_i+0x118>
 800c46c:	6923      	ldr	r3, [r4, #16]
 800c46e:	462a      	mov	r2, r5
 800c470:	4639      	mov	r1, r7
 800c472:	4630      	mov	r0, r6
 800c474:	47c0      	blx	r8
 800c476:	3001      	adds	r0, #1
 800c478:	d0aa      	beq.n	800c3d0 <_printf_i+0x12c>
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	079b      	lsls	r3, r3, #30
 800c47e:	d413      	bmi.n	800c4a8 <_printf_i+0x204>
 800c480:	68e0      	ldr	r0, [r4, #12]
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	4298      	cmp	r0, r3
 800c486:	bfb8      	it	lt
 800c488:	4618      	movlt	r0, r3
 800c48a:	e7a3      	b.n	800c3d4 <_printf_i+0x130>
 800c48c:	2301      	movs	r3, #1
 800c48e:	464a      	mov	r2, r9
 800c490:	4639      	mov	r1, r7
 800c492:	4630      	mov	r0, r6
 800c494:	47c0      	blx	r8
 800c496:	3001      	adds	r0, #1
 800c498:	d09a      	beq.n	800c3d0 <_printf_i+0x12c>
 800c49a:	3501      	adds	r5, #1
 800c49c:	68e3      	ldr	r3, [r4, #12]
 800c49e:	9a03      	ldr	r2, [sp, #12]
 800c4a0:	1a9b      	subs	r3, r3, r2
 800c4a2:	42ab      	cmp	r3, r5
 800c4a4:	dcf2      	bgt.n	800c48c <_printf_i+0x1e8>
 800c4a6:	e7eb      	b.n	800c480 <_printf_i+0x1dc>
 800c4a8:	2500      	movs	r5, #0
 800c4aa:	f104 0919 	add.w	r9, r4, #25
 800c4ae:	e7f5      	b.n	800c49c <_printf_i+0x1f8>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1ac      	bne.n	800c40e <_printf_i+0x16a>
 800c4b4:	7803      	ldrb	r3, [r0, #0]
 800c4b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4be:	e76c      	b.n	800c39a <_printf_i+0xf6>
 800c4c0:	0800eb3e 	.word	0x0800eb3e
 800c4c4:	0800eb4f 	.word	0x0800eb4f

0800c4c8 <iprintf>:
 800c4c8:	b40f      	push	{r0, r1, r2, r3}
 800c4ca:	4b0a      	ldr	r3, [pc, #40]	; (800c4f4 <iprintf+0x2c>)
 800c4cc:	b513      	push	{r0, r1, r4, lr}
 800c4ce:	681c      	ldr	r4, [r3, #0]
 800c4d0:	b124      	cbz	r4, 800c4dc <iprintf+0x14>
 800c4d2:	69a3      	ldr	r3, [r4, #24]
 800c4d4:	b913      	cbnz	r3, 800c4dc <iprintf+0x14>
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f000 feb2 	bl	800d240 <__sinit>
 800c4dc:	ab05      	add	r3, sp, #20
 800c4de:	9a04      	ldr	r2, [sp, #16]
 800c4e0:	68a1      	ldr	r1, [r4, #8]
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f001 fc63 	bl	800ddb0 <_vfiprintf_r>
 800c4ea:	b002      	add	sp, #8
 800c4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f0:	b004      	add	sp, #16
 800c4f2:	4770      	bx	lr
 800c4f4:	20000034 	.word	0x20000034

0800c4f8 <siprintf>:
 800c4f8:	b40e      	push	{r1, r2, r3}
 800c4fa:	b500      	push	{lr}
 800c4fc:	b09c      	sub	sp, #112	; 0x70
 800c4fe:	ab1d      	add	r3, sp, #116	; 0x74
 800c500:	9002      	str	r0, [sp, #8]
 800c502:	9006      	str	r0, [sp, #24]
 800c504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c508:	4809      	ldr	r0, [pc, #36]	; (800c530 <siprintf+0x38>)
 800c50a:	9107      	str	r1, [sp, #28]
 800c50c:	9104      	str	r1, [sp, #16]
 800c50e:	4909      	ldr	r1, [pc, #36]	; (800c534 <siprintf+0x3c>)
 800c510:	f853 2b04 	ldr.w	r2, [r3], #4
 800c514:	9105      	str	r1, [sp, #20]
 800c516:	6800      	ldr	r0, [r0, #0]
 800c518:	9301      	str	r3, [sp, #4]
 800c51a:	a902      	add	r1, sp, #8
 800c51c:	f001 fb26 	bl	800db6c <_svfiprintf_r>
 800c520:	9b02      	ldr	r3, [sp, #8]
 800c522:	2200      	movs	r2, #0
 800c524:	701a      	strb	r2, [r3, #0]
 800c526:	b01c      	add	sp, #112	; 0x70
 800c528:	f85d eb04 	ldr.w	lr, [sp], #4
 800c52c:	b003      	add	sp, #12
 800c52e:	4770      	bx	lr
 800c530:	20000034 	.word	0x20000034
 800c534:	ffff0208 	.word	0xffff0208

0800c538 <quorem>:
 800c538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	6903      	ldr	r3, [r0, #16]
 800c53e:	690c      	ldr	r4, [r1, #16]
 800c540:	42a3      	cmp	r3, r4
 800c542:	4680      	mov	r8, r0
 800c544:	f2c0 8082 	blt.w	800c64c <quorem+0x114>
 800c548:	3c01      	subs	r4, #1
 800c54a:	f101 0714 	add.w	r7, r1, #20
 800c54e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c552:	f100 0614 	add.w	r6, r0, #20
 800c556:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c55a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c55e:	eb06 030c 	add.w	r3, r6, ip
 800c562:	3501      	adds	r5, #1
 800c564:	eb07 090c 	add.w	r9, r7, ip
 800c568:	9301      	str	r3, [sp, #4]
 800c56a:	fbb0 f5f5 	udiv	r5, r0, r5
 800c56e:	b395      	cbz	r5, 800c5d6 <quorem+0x9e>
 800c570:	f04f 0a00 	mov.w	sl, #0
 800c574:	4638      	mov	r0, r7
 800c576:	46b6      	mov	lr, r6
 800c578:	46d3      	mov	fp, sl
 800c57a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c57e:	b293      	uxth	r3, r2
 800c580:	fb05 a303 	mla	r3, r5, r3, sl
 800c584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c588:	b29b      	uxth	r3, r3
 800c58a:	ebab 0303 	sub.w	r3, fp, r3
 800c58e:	0c12      	lsrs	r2, r2, #16
 800c590:	f8de b000 	ldr.w	fp, [lr]
 800c594:	fb05 a202 	mla	r2, r5, r2, sl
 800c598:	fa13 f38b 	uxtah	r3, r3, fp
 800c59c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c5a0:	fa1f fb82 	uxth.w	fp, r2
 800c5a4:	f8de 2000 	ldr.w	r2, [lr]
 800c5a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5b6:	4581      	cmp	r9, r0
 800c5b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c5bc:	f84e 3b04 	str.w	r3, [lr], #4
 800c5c0:	d2db      	bcs.n	800c57a <quorem+0x42>
 800c5c2:	f856 300c 	ldr.w	r3, [r6, ip]
 800c5c6:	b933      	cbnz	r3, 800c5d6 <quorem+0x9e>
 800c5c8:	9b01      	ldr	r3, [sp, #4]
 800c5ca:	3b04      	subs	r3, #4
 800c5cc:	429e      	cmp	r6, r3
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	d330      	bcc.n	800c634 <quorem+0xfc>
 800c5d2:	f8c8 4010 	str.w	r4, [r8, #16]
 800c5d6:	4640      	mov	r0, r8
 800c5d8:	f001 f8f2 	bl	800d7c0 <__mcmp>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	db25      	blt.n	800c62c <quorem+0xf4>
 800c5e0:	3501      	adds	r5, #1
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f04f 0c00 	mov.w	ip, #0
 800c5e8:	f857 2b04 	ldr.w	r2, [r7], #4
 800c5ec:	f8d0 e000 	ldr.w	lr, [r0]
 800c5f0:	b293      	uxth	r3, r2
 800c5f2:	ebac 0303 	sub.w	r3, ip, r3
 800c5f6:	0c12      	lsrs	r2, r2, #16
 800c5f8:	fa13 f38e 	uxtah	r3, r3, lr
 800c5fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c604:	b29b      	uxth	r3, r3
 800c606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c60a:	45b9      	cmp	r9, r7
 800c60c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c610:	f840 3b04 	str.w	r3, [r0], #4
 800c614:	d2e8      	bcs.n	800c5e8 <quorem+0xb0>
 800c616:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c61a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c61e:	b92a      	cbnz	r2, 800c62c <quorem+0xf4>
 800c620:	3b04      	subs	r3, #4
 800c622:	429e      	cmp	r6, r3
 800c624:	461a      	mov	r2, r3
 800c626:	d30b      	bcc.n	800c640 <quorem+0x108>
 800c628:	f8c8 4010 	str.w	r4, [r8, #16]
 800c62c:	4628      	mov	r0, r5
 800c62e:	b003      	add	sp, #12
 800c630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c634:	6812      	ldr	r2, [r2, #0]
 800c636:	3b04      	subs	r3, #4
 800c638:	2a00      	cmp	r2, #0
 800c63a:	d1ca      	bne.n	800c5d2 <quorem+0x9a>
 800c63c:	3c01      	subs	r4, #1
 800c63e:	e7c5      	b.n	800c5cc <quorem+0x94>
 800c640:	6812      	ldr	r2, [r2, #0]
 800c642:	3b04      	subs	r3, #4
 800c644:	2a00      	cmp	r2, #0
 800c646:	d1ef      	bne.n	800c628 <quorem+0xf0>
 800c648:	3c01      	subs	r4, #1
 800c64a:	e7ea      	b.n	800c622 <quorem+0xea>
 800c64c:	2000      	movs	r0, #0
 800c64e:	e7ee      	b.n	800c62e <quorem+0xf6>

0800c650 <_dtoa_r>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	ec57 6b10 	vmov	r6, r7, d0
 800c658:	b097      	sub	sp, #92	; 0x5c
 800c65a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c65c:	9106      	str	r1, [sp, #24]
 800c65e:	4604      	mov	r4, r0
 800c660:	920b      	str	r2, [sp, #44]	; 0x2c
 800c662:	9312      	str	r3, [sp, #72]	; 0x48
 800c664:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c668:	e9cd 6700 	strd	r6, r7, [sp]
 800c66c:	b93d      	cbnz	r5, 800c67e <_dtoa_r+0x2e>
 800c66e:	2010      	movs	r0, #16
 800c670:	f000 fe7e 	bl	800d370 <malloc>
 800c674:	6260      	str	r0, [r4, #36]	; 0x24
 800c676:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c67a:	6005      	str	r5, [r0, #0]
 800c67c:	60c5      	str	r5, [r0, #12]
 800c67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c680:	6819      	ldr	r1, [r3, #0]
 800c682:	b151      	cbz	r1, 800c69a <_dtoa_r+0x4a>
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	604a      	str	r2, [r1, #4]
 800c688:	2301      	movs	r3, #1
 800c68a:	4093      	lsls	r3, r2
 800c68c:	608b      	str	r3, [r1, #8]
 800c68e:	4620      	mov	r0, r4
 800c690:	f000 feb5 	bl	800d3fe <_Bfree>
 800c694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	1e3b      	subs	r3, r7, #0
 800c69c:	bfbb      	ittet	lt
 800c69e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c6a2:	9301      	strlt	r3, [sp, #4]
 800c6a4:	2300      	movge	r3, #0
 800c6a6:	2201      	movlt	r2, #1
 800c6a8:	bfac      	ite	ge
 800c6aa:	f8c8 3000 	strge.w	r3, [r8]
 800c6ae:	f8c8 2000 	strlt.w	r2, [r8]
 800c6b2:	4baf      	ldr	r3, [pc, #700]	; (800c970 <_dtoa_r+0x320>)
 800c6b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c6b8:	ea33 0308 	bics.w	r3, r3, r8
 800c6bc:	d114      	bne.n	800c6e8 <_dtoa_r+0x98>
 800c6be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	9b00      	ldr	r3, [sp, #0]
 800c6c8:	b923      	cbnz	r3, 800c6d4 <_dtoa_r+0x84>
 800c6ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f000 8542 	beq.w	800d158 <_dtoa_r+0xb08>
 800c6d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c984 <_dtoa_r+0x334>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 8544 	beq.w	800d168 <_dtoa_r+0xb18>
 800c6e0:	f10b 0303 	add.w	r3, fp, #3
 800c6e4:	f000 bd3e 	b.w	800d164 <_dtoa_r+0xb14>
 800c6e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	f7f4 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6f8:	4681      	mov	r9, r0
 800c6fa:	b168      	cbz	r0, 800c718 <_dtoa_r+0xc8>
 800c6fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6fe:	2301      	movs	r3, #1
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 8524 	beq.w	800d152 <_dtoa_r+0xb02>
 800c70a:	4b9a      	ldr	r3, [pc, #616]	; (800c974 <_dtoa_r+0x324>)
 800c70c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c70e:	f103 3bff 	add.w	fp, r3, #4294967295
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	f000 bd28 	b.w	800d168 <_dtoa_r+0xb18>
 800c718:	aa14      	add	r2, sp, #80	; 0x50
 800c71a:	a915      	add	r1, sp, #84	; 0x54
 800c71c:	ec47 6b10 	vmov	d0, r6, r7
 800c720:	4620      	mov	r0, r4
 800c722:	f001 f8c4 	bl	800d8ae <__d2b>
 800c726:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c72a:	9004      	str	r0, [sp, #16]
 800c72c:	2d00      	cmp	r5, #0
 800c72e:	d07c      	beq.n	800c82a <_dtoa_r+0x1da>
 800c730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c734:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c738:	46b2      	mov	sl, r6
 800c73a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c73e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c742:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c746:	2200      	movs	r2, #0
 800c748:	4b8b      	ldr	r3, [pc, #556]	; (800c978 <_dtoa_r+0x328>)
 800c74a:	4650      	mov	r0, sl
 800c74c:	4659      	mov	r1, fp
 800c74e:	f7f3 fd9b 	bl	8000288 <__aeabi_dsub>
 800c752:	a381      	add	r3, pc, #516	; (adr r3, 800c958 <_dtoa_r+0x308>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 ff4e 	bl	80005f8 <__aeabi_dmul>
 800c75c:	a380      	add	r3, pc, #512	; (adr r3, 800c960 <_dtoa_r+0x310>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	f7f3 fd93 	bl	800028c <__adddf3>
 800c766:	4606      	mov	r6, r0
 800c768:	4628      	mov	r0, r5
 800c76a:	460f      	mov	r7, r1
 800c76c:	f7f3 feda 	bl	8000524 <__aeabi_i2d>
 800c770:	a37d      	add	r3, pc, #500	; (adr r3, 800c968 <_dtoa_r+0x318>)
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	f7f3 ff3f 	bl	80005f8 <__aeabi_dmul>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	4630      	mov	r0, r6
 800c780:	4639      	mov	r1, r7
 800c782:	f7f3 fd83 	bl	800028c <__adddf3>
 800c786:	4606      	mov	r6, r0
 800c788:	460f      	mov	r7, r1
 800c78a:	f7f4 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800c78e:	2200      	movs	r2, #0
 800c790:	4682      	mov	sl, r0
 800c792:	2300      	movs	r3, #0
 800c794:	4630      	mov	r0, r6
 800c796:	4639      	mov	r1, r7
 800c798:	f7f4 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800c79c:	b148      	cbz	r0, 800c7b2 <_dtoa_r+0x162>
 800c79e:	4650      	mov	r0, sl
 800c7a0:	f7f3 fec0 	bl	8000524 <__aeabi_i2d>
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	463b      	mov	r3, r7
 800c7a8:	f7f4 f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7ac:	b908      	cbnz	r0, 800c7b2 <_dtoa_r+0x162>
 800c7ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7b2:	f1ba 0f16 	cmp.w	sl, #22
 800c7b6:	d859      	bhi.n	800c86c <_dtoa_r+0x21c>
 800c7b8:	4970      	ldr	r1, [pc, #448]	; (800c97c <_dtoa_r+0x32c>)
 800c7ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7c6:	f7f4 f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d050      	beq.n	800c870 <_dtoa_r+0x220>
 800c7ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7d8:	1b5d      	subs	r5, r3, r5
 800c7da:	f1b5 0801 	subs.w	r8, r5, #1
 800c7de:	bf49      	itett	mi
 800c7e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800c7e4:	2300      	movpl	r3, #0
 800c7e6:	9305      	strmi	r3, [sp, #20]
 800c7e8:	f04f 0800 	movmi.w	r8, #0
 800c7ec:	bf58      	it	pl
 800c7ee:	9305      	strpl	r3, [sp, #20]
 800c7f0:	f1ba 0f00 	cmp.w	sl, #0
 800c7f4:	db3e      	blt.n	800c874 <_dtoa_r+0x224>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	44d0      	add	r8, sl
 800c7fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c7fe:	9307      	str	r3, [sp, #28]
 800c800:	9b06      	ldr	r3, [sp, #24]
 800c802:	2b09      	cmp	r3, #9
 800c804:	f200 8090 	bhi.w	800c928 <_dtoa_r+0x2d8>
 800c808:	2b05      	cmp	r3, #5
 800c80a:	bfc4      	itt	gt
 800c80c:	3b04      	subgt	r3, #4
 800c80e:	9306      	strgt	r3, [sp, #24]
 800c810:	9b06      	ldr	r3, [sp, #24]
 800c812:	f1a3 0302 	sub.w	r3, r3, #2
 800c816:	bfcc      	ite	gt
 800c818:	2500      	movgt	r5, #0
 800c81a:	2501      	movle	r5, #1
 800c81c:	2b03      	cmp	r3, #3
 800c81e:	f200 808f 	bhi.w	800c940 <_dtoa_r+0x2f0>
 800c822:	e8df f003 	tbb	[pc, r3]
 800c826:	7f7d      	.short	0x7f7d
 800c828:	7131      	.short	0x7131
 800c82a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c82e:	441d      	add	r5, r3
 800c830:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c834:	2820      	cmp	r0, #32
 800c836:	dd13      	ble.n	800c860 <_dtoa_r+0x210>
 800c838:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c83c:	9b00      	ldr	r3, [sp, #0]
 800c83e:	fa08 f800 	lsl.w	r8, r8, r0
 800c842:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c846:	fa23 f000 	lsr.w	r0, r3, r0
 800c84a:	ea48 0000 	orr.w	r0, r8, r0
 800c84e:	f7f3 fe59 	bl	8000504 <__aeabi_ui2d>
 800c852:	2301      	movs	r3, #1
 800c854:	4682      	mov	sl, r0
 800c856:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c85a:	3d01      	subs	r5, #1
 800c85c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c85e:	e772      	b.n	800c746 <_dtoa_r+0xf6>
 800c860:	9b00      	ldr	r3, [sp, #0]
 800c862:	f1c0 0020 	rsb	r0, r0, #32
 800c866:	fa03 f000 	lsl.w	r0, r3, r0
 800c86a:	e7f0      	b.n	800c84e <_dtoa_r+0x1fe>
 800c86c:	2301      	movs	r3, #1
 800c86e:	e7b1      	b.n	800c7d4 <_dtoa_r+0x184>
 800c870:	900f      	str	r0, [sp, #60]	; 0x3c
 800c872:	e7b0      	b.n	800c7d6 <_dtoa_r+0x186>
 800c874:	9b05      	ldr	r3, [sp, #20]
 800c876:	eba3 030a 	sub.w	r3, r3, sl
 800c87a:	9305      	str	r3, [sp, #20]
 800c87c:	f1ca 0300 	rsb	r3, sl, #0
 800c880:	9307      	str	r3, [sp, #28]
 800c882:	2300      	movs	r3, #0
 800c884:	930e      	str	r3, [sp, #56]	; 0x38
 800c886:	e7bb      	b.n	800c800 <_dtoa_r+0x1b0>
 800c888:	2301      	movs	r3, #1
 800c88a:	930a      	str	r3, [sp, #40]	; 0x28
 800c88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c88e:	2b00      	cmp	r3, #0
 800c890:	dd59      	ble.n	800c946 <_dtoa_r+0x2f6>
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	4699      	mov	r9, r3
 800c896:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c898:	2200      	movs	r2, #0
 800c89a:	6072      	str	r2, [r6, #4]
 800c89c:	2204      	movs	r2, #4
 800c89e:	f102 0014 	add.w	r0, r2, #20
 800c8a2:	4298      	cmp	r0, r3
 800c8a4:	6871      	ldr	r1, [r6, #4]
 800c8a6:	d953      	bls.n	800c950 <_dtoa_r+0x300>
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f000 fd74 	bl	800d396 <_Balloc>
 800c8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8b0:	6030      	str	r0, [r6, #0]
 800c8b2:	f1b9 0f0e 	cmp.w	r9, #14
 800c8b6:	f8d3 b000 	ldr.w	fp, [r3]
 800c8ba:	f200 80e6 	bhi.w	800ca8a <_dtoa_r+0x43a>
 800c8be:	2d00      	cmp	r5, #0
 800c8c0:	f000 80e3 	beq.w	800ca8a <_dtoa_r+0x43a>
 800c8c4:	ed9d 7b00 	vldr	d7, [sp]
 800c8c8:	f1ba 0f00 	cmp.w	sl, #0
 800c8cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c8d0:	dd74      	ble.n	800c9bc <_dtoa_r+0x36c>
 800c8d2:	4a2a      	ldr	r2, [pc, #168]	; (800c97c <_dtoa_r+0x32c>)
 800c8d4:	f00a 030f 	and.w	r3, sl, #15
 800c8d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c8dc:	ed93 7b00 	vldr	d7, [r3]
 800c8e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c8e4:	06f0      	lsls	r0, r6, #27
 800c8e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c8ea:	d565      	bpl.n	800c9b8 <_dtoa_r+0x368>
 800c8ec:	4b24      	ldr	r3, [pc, #144]	; (800c980 <_dtoa_r+0x330>)
 800c8ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c8f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8f6:	f7f3 ffa9 	bl	800084c <__aeabi_ddiv>
 800c8fa:	e9cd 0100 	strd	r0, r1, [sp]
 800c8fe:	f006 060f 	and.w	r6, r6, #15
 800c902:	2503      	movs	r5, #3
 800c904:	4f1e      	ldr	r7, [pc, #120]	; (800c980 <_dtoa_r+0x330>)
 800c906:	e04c      	b.n	800c9a2 <_dtoa_r+0x352>
 800c908:	2301      	movs	r3, #1
 800c90a:	930a      	str	r3, [sp, #40]	; 0x28
 800c90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c90e:	4453      	add	r3, sl
 800c910:	f103 0901 	add.w	r9, r3, #1
 800c914:	9302      	str	r3, [sp, #8]
 800c916:	464b      	mov	r3, r9
 800c918:	2b01      	cmp	r3, #1
 800c91a:	bfb8      	it	lt
 800c91c:	2301      	movlt	r3, #1
 800c91e:	e7ba      	b.n	800c896 <_dtoa_r+0x246>
 800c920:	2300      	movs	r3, #0
 800c922:	e7b2      	b.n	800c88a <_dtoa_r+0x23a>
 800c924:	2300      	movs	r3, #0
 800c926:	e7f0      	b.n	800c90a <_dtoa_r+0x2ba>
 800c928:	2501      	movs	r5, #1
 800c92a:	2300      	movs	r3, #0
 800c92c:	9306      	str	r3, [sp, #24]
 800c92e:	950a      	str	r5, [sp, #40]	; 0x28
 800c930:	f04f 33ff 	mov.w	r3, #4294967295
 800c934:	9302      	str	r3, [sp, #8]
 800c936:	4699      	mov	r9, r3
 800c938:	2200      	movs	r2, #0
 800c93a:	2312      	movs	r3, #18
 800c93c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c93e:	e7aa      	b.n	800c896 <_dtoa_r+0x246>
 800c940:	2301      	movs	r3, #1
 800c942:	930a      	str	r3, [sp, #40]	; 0x28
 800c944:	e7f4      	b.n	800c930 <_dtoa_r+0x2e0>
 800c946:	2301      	movs	r3, #1
 800c948:	9302      	str	r3, [sp, #8]
 800c94a:	4699      	mov	r9, r3
 800c94c:	461a      	mov	r2, r3
 800c94e:	e7f5      	b.n	800c93c <_dtoa_r+0x2ec>
 800c950:	3101      	adds	r1, #1
 800c952:	6071      	str	r1, [r6, #4]
 800c954:	0052      	lsls	r2, r2, #1
 800c956:	e7a2      	b.n	800c89e <_dtoa_r+0x24e>
 800c958:	636f4361 	.word	0x636f4361
 800c95c:	3fd287a7 	.word	0x3fd287a7
 800c960:	8b60c8b3 	.word	0x8b60c8b3
 800c964:	3fc68a28 	.word	0x3fc68a28
 800c968:	509f79fb 	.word	0x509f79fb
 800c96c:	3fd34413 	.word	0x3fd34413
 800c970:	7ff00000 	.word	0x7ff00000
 800c974:	0800eb3d 	.word	0x0800eb3d
 800c978:	3ff80000 	.word	0x3ff80000
 800c97c:	0800ebf8 	.word	0x0800ebf8
 800c980:	0800ebd0 	.word	0x0800ebd0
 800c984:	0800eb69 	.word	0x0800eb69
 800c988:	07f1      	lsls	r1, r6, #31
 800c98a:	d508      	bpl.n	800c99e <_dtoa_r+0x34e>
 800c98c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c990:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c994:	f7f3 fe30 	bl	80005f8 <__aeabi_dmul>
 800c998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c99c:	3501      	adds	r5, #1
 800c99e:	1076      	asrs	r6, r6, #1
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	d1f0      	bne.n	800c988 <_dtoa_r+0x338>
 800c9a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c9aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9ae:	f7f3 ff4d 	bl	800084c <__aeabi_ddiv>
 800c9b2:	e9cd 0100 	strd	r0, r1, [sp]
 800c9b6:	e01a      	b.n	800c9ee <_dtoa_r+0x39e>
 800c9b8:	2502      	movs	r5, #2
 800c9ba:	e7a3      	b.n	800c904 <_dtoa_r+0x2b4>
 800c9bc:	f000 80a0 	beq.w	800cb00 <_dtoa_r+0x4b0>
 800c9c0:	f1ca 0600 	rsb	r6, sl, #0
 800c9c4:	4b9f      	ldr	r3, [pc, #636]	; (800cc44 <_dtoa_r+0x5f4>)
 800c9c6:	4fa0      	ldr	r7, [pc, #640]	; (800cc48 <_dtoa_r+0x5f8>)
 800c9c8:	f006 020f 	and.w	r2, r6, #15
 800c9cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c9d8:	f7f3 fe0e 	bl	80005f8 <__aeabi_dmul>
 800c9dc:	e9cd 0100 	strd	r0, r1, [sp]
 800c9e0:	1136      	asrs	r6, r6, #4
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	2502      	movs	r5, #2
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	d17f      	bne.n	800caea <_dtoa_r+0x49a>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1e1      	bne.n	800c9b2 <_dtoa_r+0x362>
 800c9ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 8087 	beq.w	800cb04 <_dtoa_r+0x4b4>
 800c9f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	4b93      	ldr	r3, [pc, #588]	; (800cc4c <_dtoa_r+0x5fc>)
 800c9fe:	4630      	mov	r0, r6
 800ca00:	4639      	mov	r1, r7
 800ca02:	f7f4 f86b 	bl	8000adc <__aeabi_dcmplt>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d07c      	beq.n	800cb04 <_dtoa_r+0x4b4>
 800ca0a:	f1b9 0f00 	cmp.w	r9, #0
 800ca0e:	d079      	beq.n	800cb04 <_dtoa_r+0x4b4>
 800ca10:	9b02      	ldr	r3, [sp, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	dd35      	ble.n	800ca82 <_dtoa_r+0x432>
 800ca16:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ca1a:	9308      	str	r3, [sp, #32]
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	2200      	movs	r2, #0
 800ca20:	4b8b      	ldr	r3, [pc, #556]	; (800cc50 <_dtoa_r+0x600>)
 800ca22:	4630      	mov	r0, r6
 800ca24:	f7f3 fde8 	bl	80005f8 <__aeabi_dmul>
 800ca28:	e9cd 0100 	strd	r0, r1, [sp]
 800ca2c:	9f02      	ldr	r7, [sp, #8]
 800ca2e:	3501      	adds	r5, #1
 800ca30:	4628      	mov	r0, r5
 800ca32:	f7f3 fd77 	bl	8000524 <__aeabi_i2d>
 800ca36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca3a:	f7f3 fddd 	bl	80005f8 <__aeabi_dmul>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	4b84      	ldr	r3, [pc, #528]	; (800cc54 <_dtoa_r+0x604>)
 800ca42:	f7f3 fc23 	bl	800028c <__adddf3>
 800ca46:	4605      	mov	r5, r0
 800ca48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ca4c:	2f00      	cmp	r7, #0
 800ca4e:	d15d      	bne.n	800cb0c <_dtoa_r+0x4bc>
 800ca50:	2200      	movs	r2, #0
 800ca52:	4b81      	ldr	r3, [pc, #516]	; (800cc58 <_dtoa_r+0x608>)
 800ca54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca58:	f7f3 fc16 	bl	8000288 <__aeabi_dsub>
 800ca5c:	462a      	mov	r2, r5
 800ca5e:	4633      	mov	r3, r6
 800ca60:	e9cd 0100 	strd	r0, r1, [sp]
 800ca64:	f7f4 f858 	bl	8000b18 <__aeabi_dcmpgt>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	f040 8288 	bne.w	800cf7e <_dtoa_r+0x92e>
 800ca6e:	462a      	mov	r2, r5
 800ca70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ca74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca78:	f7f4 f830 	bl	8000adc <__aeabi_dcmplt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f040 827c 	bne.w	800cf7a <_dtoa_r+0x92a>
 800ca82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca86:	e9cd 2300 	strd	r2, r3, [sp]
 800ca8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f2c0 8150 	blt.w	800cd32 <_dtoa_r+0x6e2>
 800ca92:	f1ba 0f0e 	cmp.w	sl, #14
 800ca96:	f300 814c 	bgt.w	800cd32 <_dtoa_r+0x6e2>
 800ca9a:	4b6a      	ldr	r3, [pc, #424]	; (800cc44 <_dtoa_r+0x5f4>)
 800ca9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800caa0:	ed93 7b00 	vldr	d7, [r3]
 800caa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800caac:	f280 80d8 	bge.w	800cc60 <_dtoa_r+0x610>
 800cab0:	f1b9 0f00 	cmp.w	r9, #0
 800cab4:	f300 80d4 	bgt.w	800cc60 <_dtoa_r+0x610>
 800cab8:	f040 825e 	bne.w	800cf78 <_dtoa_r+0x928>
 800cabc:	2200      	movs	r2, #0
 800cabe:	4b66      	ldr	r3, [pc, #408]	; (800cc58 <_dtoa_r+0x608>)
 800cac0:	ec51 0b17 	vmov	r0, r1, d7
 800cac4:	f7f3 fd98 	bl	80005f8 <__aeabi_dmul>
 800cac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cacc:	f7f4 f81a 	bl	8000b04 <__aeabi_dcmpge>
 800cad0:	464f      	mov	r7, r9
 800cad2:	464e      	mov	r6, r9
 800cad4:	2800      	cmp	r0, #0
 800cad6:	f040 8234 	bne.w	800cf42 <_dtoa_r+0x8f2>
 800cada:	2331      	movs	r3, #49	; 0x31
 800cadc:	f10b 0501 	add.w	r5, fp, #1
 800cae0:	f88b 3000 	strb.w	r3, [fp]
 800cae4:	f10a 0a01 	add.w	sl, sl, #1
 800cae8:	e22f      	b.n	800cf4a <_dtoa_r+0x8fa>
 800caea:	07f2      	lsls	r2, r6, #31
 800caec:	d505      	bpl.n	800cafa <_dtoa_r+0x4aa>
 800caee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caf2:	f7f3 fd81 	bl	80005f8 <__aeabi_dmul>
 800caf6:	3501      	adds	r5, #1
 800caf8:	2301      	movs	r3, #1
 800cafa:	1076      	asrs	r6, r6, #1
 800cafc:	3708      	adds	r7, #8
 800cafe:	e772      	b.n	800c9e6 <_dtoa_r+0x396>
 800cb00:	2502      	movs	r5, #2
 800cb02:	e774      	b.n	800c9ee <_dtoa_r+0x39e>
 800cb04:	f8cd a020 	str.w	sl, [sp, #32]
 800cb08:	464f      	mov	r7, r9
 800cb0a:	e791      	b.n	800ca30 <_dtoa_r+0x3e0>
 800cb0c:	4b4d      	ldr	r3, [pc, #308]	; (800cc44 <_dtoa_r+0x5f4>)
 800cb0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d047      	beq.n	800cbac <_dtoa_r+0x55c>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	2000      	movs	r0, #0
 800cb22:	494e      	ldr	r1, [pc, #312]	; (800cc5c <_dtoa_r+0x60c>)
 800cb24:	f7f3 fe92 	bl	800084c <__aeabi_ddiv>
 800cb28:	462a      	mov	r2, r5
 800cb2a:	4633      	mov	r3, r6
 800cb2c:	f7f3 fbac 	bl	8000288 <__aeabi_dsub>
 800cb30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cb34:	465d      	mov	r5, fp
 800cb36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb3a:	f7f4 f80d 	bl	8000b58 <__aeabi_d2iz>
 800cb3e:	4606      	mov	r6, r0
 800cb40:	f7f3 fcf0 	bl	8000524 <__aeabi_i2d>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb4c:	f7f3 fb9c 	bl	8000288 <__aeabi_dsub>
 800cb50:	3630      	adds	r6, #48	; 0x30
 800cb52:	f805 6b01 	strb.w	r6, [r5], #1
 800cb56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb5a:	e9cd 0100 	strd	r0, r1, [sp]
 800cb5e:	f7f3 ffbd 	bl	8000adc <__aeabi_dcmplt>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d163      	bne.n	800cc2e <_dtoa_r+0x5de>
 800cb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	4937      	ldr	r1, [pc, #220]	; (800cc4c <_dtoa_r+0x5fc>)
 800cb6e:	f7f3 fb8b 	bl	8000288 <__aeabi_dsub>
 800cb72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb76:	f7f3 ffb1 	bl	8000adc <__aeabi_dcmplt>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	f040 80b7 	bne.w	800ccee <_dtoa_r+0x69e>
 800cb80:	eba5 030b 	sub.w	r3, r5, fp
 800cb84:	429f      	cmp	r7, r3
 800cb86:	f77f af7c 	ble.w	800ca82 <_dtoa_r+0x432>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	4b30      	ldr	r3, [pc, #192]	; (800cc50 <_dtoa_r+0x600>)
 800cb8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb92:	f7f3 fd31 	bl	80005f8 <__aeabi_dmul>
 800cb96:	2200      	movs	r2, #0
 800cb98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cb9c:	4b2c      	ldr	r3, [pc, #176]	; (800cc50 <_dtoa_r+0x600>)
 800cb9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cba2:	f7f3 fd29 	bl	80005f8 <__aeabi_dmul>
 800cba6:	e9cd 0100 	strd	r0, r1, [sp]
 800cbaa:	e7c4      	b.n	800cb36 <_dtoa_r+0x4e6>
 800cbac:	462a      	mov	r2, r5
 800cbae:	4633      	mov	r3, r6
 800cbb0:	f7f3 fd22 	bl	80005f8 <__aeabi_dmul>
 800cbb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cbb8:	eb0b 0507 	add.w	r5, fp, r7
 800cbbc:	465e      	mov	r6, fp
 800cbbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbc2:	f7f3 ffc9 	bl	8000b58 <__aeabi_d2iz>
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	f7f3 fcac 	bl	8000524 <__aeabi_i2d>
 800cbcc:	3730      	adds	r7, #48	; 0x30
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbd6:	f7f3 fb57 	bl	8000288 <__aeabi_dsub>
 800cbda:	f806 7b01 	strb.w	r7, [r6], #1
 800cbde:	42ae      	cmp	r6, r5
 800cbe0:	e9cd 0100 	strd	r0, r1, [sp]
 800cbe4:	f04f 0200 	mov.w	r2, #0
 800cbe8:	d126      	bne.n	800cc38 <_dtoa_r+0x5e8>
 800cbea:	4b1c      	ldr	r3, [pc, #112]	; (800cc5c <_dtoa_r+0x60c>)
 800cbec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cbf0:	f7f3 fb4c 	bl	800028c <__adddf3>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbfc:	f7f3 ff8c 	bl	8000b18 <__aeabi_dcmpgt>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d174      	bne.n	800ccee <_dtoa_r+0x69e>
 800cc04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc08:	2000      	movs	r0, #0
 800cc0a:	4914      	ldr	r1, [pc, #80]	; (800cc5c <_dtoa_r+0x60c>)
 800cc0c:	f7f3 fb3c 	bl	8000288 <__aeabi_dsub>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc18:	f7f3 ff60 	bl	8000adc <__aeabi_dcmplt>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	f43f af30 	beq.w	800ca82 <_dtoa_r+0x432>
 800cc22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc26:	2b30      	cmp	r3, #48	; 0x30
 800cc28:	f105 32ff 	add.w	r2, r5, #4294967295
 800cc2c:	d002      	beq.n	800cc34 <_dtoa_r+0x5e4>
 800cc2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cc32:	e04a      	b.n	800ccca <_dtoa_r+0x67a>
 800cc34:	4615      	mov	r5, r2
 800cc36:	e7f4      	b.n	800cc22 <_dtoa_r+0x5d2>
 800cc38:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <_dtoa_r+0x600>)
 800cc3a:	f7f3 fcdd 	bl	80005f8 <__aeabi_dmul>
 800cc3e:	e9cd 0100 	strd	r0, r1, [sp]
 800cc42:	e7bc      	b.n	800cbbe <_dtoa_r+0x56e>
 800cc44:	0800ebf8 	.word	0x0800ebf8
 800cc48:	0800ebd0 	.word	0x0800ebd0
 800cc4c:	3ff00000 	.word	0x3ff00000
 800cc50:	40240000 	.word	0x40240000
 800cc54:	401c0000 	.word	0x401c0000
 800cc58:	40140000 	.word	0x40140000
 800cc5c:	3fe00000 	.word	0x3fe00000
 800cc60:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cc64:	465d      	mov	r5, fp
 800cc66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	f7f3 fded 	bl	800084c <__aeabi_ddiv>
 800cc72:	f7f3 ff71 	bl	8000b58 <__aeabi_d2iz>
 800cc76:	4680      	mov	r8, r0
 800cc78:	f7f3 fc54 	bl	8000524 <__aeabi_i2d>
 800cc7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc80:	f7f3 fcba 	bl	80005f8 <__aeabi_dmul>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4630      	mov	r0, r6
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cc90:	f7f3 fafa 	bl	8000288 <__aeabi_dsub>
 800cc94:	f805 6b01 	strb.w	r6, [r5], #1
 800cc98:	eba5 060b 	sub.w	r6, r5, fp
 800cc9c:	45b1      	cmp	r9, r6
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	d139      	bne.n	800cd18 <_dtoa_r+0x6c8>
 800cca4:	f7f3 faf2 	bl	800028c <__adddf3>
 800cca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccac:	4606      	mov	r6, r0
 800ccae:	460f      	mov	r7, r1
 800ccb0:	f7f3 ff32 	bl	8000b18 <__aeabi_dcmpgt>
 800ccb4:	b9c8      	cbnz	r0, 800ccea <_dtoa_r+0x69a>
 800ccb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccba:	4630      	mov	r0, r6
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	f7f3 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccc2:	b110      	cbz	r0, 800ccca <_dtoa_r+0x67a>
 800ccc4:	f018 0f01 	tst.w	r8, #1
 800ccc8:	d10f      	bne.n	800ccea <_dtoa_r+0x69a>
 800ccca:	9904      	ldr	r1, [sp, #16]
 800cccc:	4620      	mov	r0, r4
 800ccce:	f000 fb96 	bl	800d3fe <_Bfree>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ccd6:	702b      	strb	r3, [r5, #0]
 800ccd8:	f10a 0301 	add.w	r3, sl, #1
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 8241 	beq.w	800d168 <_dtoa_r+0xb18>
 800cce6:	601d      	str	r5, [r3, #0]
 800cce8:	e23e      	b.n	800d168 <_dtoa_r+0xb18>
 800ccea:	f8cd a020 	str.w	sl, [sp, #32]
 800ccee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccf2:	2a39      	cmp	r2, #57	; 0x39
 800ccf4:	f105 33ff 	add.w	r3, r5, #4294967295
 800ccf8:	d108      	bne.n	800cd0c <_dtoa_r+0x6bc>
 800ccfa:	459b      	cmp	fp, r3
 800ccfc:	d10a      	bne.n	800cd14 <_dtoa_r+0x6c4>
 800ccfe:	9b08      	ldr	r3, [sp, #32]
 800cd00:	3301      	adds	r3, #1
 800cd02:	9308      	str	r3, [sp, #32]
 800cd04:	2330      	movs	r3, #48	; 0x30
 800cd06:	f88b 3000 	strb.w	r3, [fp]
 800cd0a:	465b      	mov	r3, fp
 800cd0c:	781a      	ldrb	r2, [r3, #0]
 800cd0e:	3201      	adds	r2, #1
 800cd10:	701a      	strb	r2, [r3, #0]
 800cd12:	e78c      	b.n	800cc2e <_dtoa_r+0x5de>
 800cd14:	461d      	mov	r5, r3
 800cd16:	e7ea      	b.n	800ccee <_dtoa_r+0x69e>
 800cd18:	2200      	movs	r2, #0
 800cd1a:	4b9b      	ldr	r3, [pc, #620]	; (800cf88 <_dtoa_r+0x938>)
 800cd1c:	f7f3 fc6c 	bl	80005f8 <__aeabi_dmul>
 800cd20:	2200      	movs	r2, #0
 800cd22:	2300      	movs	r3, #0
 800cd24:	4606      	mov	r6, r0
 800cd26:	460f      	mov	r7, r1
 800cd28:	f7f3 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d09a      	beq.n	800cc66 <_dtoa_r+0x616>
 800cd30:	e7cb      	b.n	800ccca <_dtoa_r+0x67a>
 800cd32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd34:	2a00      	cmp	r2, #0
 800cd36:	f000 808b 	beq.w	800ce50 <_dtoa_r+0x800>
 800cd3a:	9a06      	ldr	r2, [sp, #24]
 800cd3c:	2a01      	cmp	r2, #1
 800cd3e:	dc6e      	bgt.n	800ce1e <_dtoa_r+0x7ce>
 800cd40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cd42:	2a00      	cmp	r2, #0
 800cd44:	d067      	beq.n	800ce16 <_dtoa_r+0x7c6>
 800cd46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd4a:	9f07      	ldr	r7, [sp, #28]
 800cd4c:	9d05      	ldr	r5, [sp, #20]
 800cd4e:	9a05      	ldr	r2, [sp, #20]
 800cd50:	2101      	movs	r1, #1
 800cd52:	441a      	add	r2, r3
 800cd54:	4620      	mov	r0, r4
 800cd56:	9205      	str	r2, [sp, #20]
 800cd58:	4498      	add	r8, r3
 800cd5a:	f000 fbf0 	bl	800d53e <__i2b>
 800cd5e:	4606      	mov	r6, r0
 800cd60:	2d00      	cmp	r5, #0
 800cd62:	dd0c      	ble.n	800cd7e <_dtoa_r+0x72e>
 800cd64:	f1b8 0f00 	cmp.w	r8, #0
 800cd68:	dd09      	ble.n	800cd7e <_dtoa_r+0x72e>
 800cd6a:	4545      	cmp	r5, r8
 800cd6c:	9a05      	ldr	r2, [sp, #20]
 800cd6e:	462b      	mov	r3, r5
 800cd70:	bfa8      	it	ge
 800cd72:	4643      	movge	r3, r8
 800cd74:	1ad2      	subs	r2, r2, r3
 800cd76:	9205      	str	r2, [sp, #20]
 800cd78:	1aed      	subs	r5, r5, r3
 800cd7a:	eba8 0803 	sub.w	r8, r8, r3
 800cd7e:	9b07      	ldr	r3, [sp, #28]
 800cd80:	b1eb      	cbz	r3, 800cdbe <_dtoa_r+0x76e>
 800cd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d067      	beq.n	800ce58 <_dtoa_r+0x808>
 800cd88:	b18f      	cbz	r7, 800cdae <_dtoa_r+0x75e>
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	463a      	mov	r2, r7
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 fc74 	bl	800d67c <__pow5mult>
 800cd94:	9a04      	ldr	r2, [sp, #16]
 800cd96:	4601      	mov	r1, r0
 800cd98:	4606      	mov	r6, r0
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f000 fbd8 	bl	800d550 <__multiply>
 800cda0:	9904      	ldr	r1, [sp, #16]
 800cda2:	9008      	str	r0, [sp, #32]
 800cda4:	4620      	mov	r0, r4
 800cda6:	f000 fb2a 	bl	800d3fe <_Bfree>
 800cdaa:	9b08      	ldr	r3, [sp, #32]
 800cdac:	9304      	str	r3, [sp, #16]
 800cdae:	9b07      	ldr	r3, [sp, #28]
 800cdb0:	1bda      	subs	r2, r3, r7
 800cdb2:	d004      	beq.n	800cdbe <_dtoa_r+0x76e>
 800cdb4:	9904      	ldr	r1, [sp, #16]
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f000 fc60 	bl	800d67c <__pow5mult>
 800cdbc:	9004      	str	r0, [sp, #16]
 800cdbe:	2101      	movs	r1, #1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 fbbc 	bl	800d53e <__i2b>
 800cdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdc8:	4607      	mov	r7, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f000 81d0 	beq.w	800d170 <_dtoa_r+0xb20>
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 fc51 	bl	800d67c <__pow5mult>
 800cdda:	9b06      	ldr	r3, [sp, #24]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	4607      	mov	r7, r0
 800cde0:	dc40      	bgt.n	800ce64 <_dtoa_r+0x814>
 800cde2:	9b00      	ldr	r3, [sp, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d139      	bne.n	800ce5c <_dtoa_r+0x80c>
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d136      	bne.n	800ce60 <_dtoa_r+0x810>
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdf8:	0d1b      	lsrs	r3, r3, #20
 800cdfa:	051b      	lsls	r3, r3, #20
 800cdfc:	b12b      	cbz	r3, 800ce0a <_dtoa_r+0x7ba>
 800cdfe:	9b05      	ldr	r3, [sp, #20]
 800ce00:	3301      	adds	r3, #1
 800ce02:	9305      	str	r3, [sp, #20]
 800ce04:	f108 0801 	add.w	r8, r8, #1
 800ce08:	2301      	movs	r3, #1
 800ce0a:	9307      	str	r3, [sp, #28]
 800ce0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d12a      	bne.n	800ce68 <_dtoa_r+0x818>
 800ce12:	2001      	movs	r0, #1
 800ce14:	e030      	b.n	800ce78 <_dtoa_r+0x828>
 800ce16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce1c:	e795      	b.n	800cd4a <_dtoa_r+0x6fa>
 800ce1e:	9b07      	ldr	r3, [sp, #28]
 800ce20:	f109 37ff 	add.w	r7, r9, #4294967295
 800ce24:	42bb      	cmp	r3, r7
 800ce26:	bfbf      	itttt	lt
 800ce28:	9b07      	ldrlt	r3, [sp, #28]
 800ce2a:	9707      	strlt	r7, [sp, #28]
 800ce2c:	1afa      	sublt	r2, r7, r3
 800ce2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ce30:	bfbb      	ittet	lt
 800ce32:	189b      	addlt	r3, r3, r2
 800ce34:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ce36:	1bdf      	subge	r7, r3, r7
 800ce38:	2700      	movlt	r7, #0
 800ce3a:	f1b9 0f00 	cmp.w	r9, #0
 800ce3e:	bfb5      	itete	lt
 800ce40:	9b05      	ldrlt	r3, [sp, #20]
 800ce42:	9d05      	ldrge	r5, [sp, #20]
 800ce44:	eba3 0509 	sublt.w	r5, r3, r9
 800ce48:	464b      	movge	r3, r9
 800ce4a:	bfb8      	it	lt
 800ce4c:	2300      	movlt	r3, #0
 800ce4e:	e77e      	b.n	800cd4e <_dtoa_r+0x6fe>
 800ce50:	9f07      	ldr	r7, [sp, #28]
 800ce52:	9d05      	ldr	r5, [sp, #20]
 800ce54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ce56:	e783      	b.n	800cd60 <_dtoa_r+0x710>
 800ce58:	9a07      	ldr	r2, [sp, #28]
 800ce5a:	e7ab      	b.n	800cdb4 <_dtoa_r+0x764>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e7d4      	b.n	800ce0a <_dtoa_r+0x7ba>
 800ce60:	9b00      	ldr	r3, [sp, #0]
 800ce62:	e7d2      	b.n	800ce0a <_dtoa_r+0x7ba>
 800ce64:	2300      	movs	r3, #0
 800ce66:	9307      	str	r3, [sp, #28]
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ce6e:	6918      	ldr	r0, [r3, #16]
 800ce70:	f000 fb17 	bl	800d4a2 <__hi0bits>
 800ce74:	f1c0 0020 	rsb	r0, r0, #32
 800ce78:	4440      	add	r0, r8
 800ce7a:	f010 001f 	ands.w	r0, r0, #31
 800ce7e:	d047      	beq.n	800cf10 <_dtoa_r+0x8c0>
 800ce80:	f1c0 0320 	rsb	r3, r0, #32
 800ce84:	2b04      	cmp	r3, #4
 800ce86:	dd3b      	ble.n	800cf00 <_dtoa_r+0x8b0>
 800ce88:	9b05      	ldr	r3, [sp, #20]
 800ce8a:	f1c0 001c 	rsb	r0, r0, #28
 800ce8e:	4403      	add	r3, r0
 800ce90:	9305      	str	r3, [sp, #20]
 800ce92:	4405      	add	r5, r0
 800ce94:	4480      	add	r8, r0
 800ce96:	9b05      	ldr	r3, [sp, #20]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	dd05      	ble.n	800cea8 <_dtoa_r+0x858>
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	9904      	ldr	r1, [sp, #16]
 800cea0:	4620      	mov	r0, r4
 800cea2:	f000 fc39 	bl	800d718 <__lshift>
 800cea6:	9004      	str	r0, [sp, #16]
 800cea8:	f1b8 0f00 	cmp.w	r8, #0
 800ceac:	dd05      	ble.n	800ceba <_dtoa_r+0x86a>
 800ceae:	4639      	mov	r1, r7
 800ceb0:	4642      	mov	r2, r8
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 fc30 	bl	800d718 <__lshift>
 800ceb8:	4607      	mov	r7, r0
 800ceba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cebc:	b353      	cbz	r3, 800cf14 <_dtoa_r+0x8c4>
 800cebe:	4639      	mov	r1, r7
 800cec0:	9804      	ldr	r0, [sp, #16]
 800cec2:	f000 fc7d 	bl	800d7c0 <__mcmp>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	da24      	bge.n	800cf14 <_dtoa_r+0x8c4>
 800ceca:	2300      	movs	r3, #0
 800cecc:	220a      	movs	r2, #10
 800cece:	9904      	ldr	r1, [sp, #16]
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 faab 	bl	800d42c <__multadd>
 800ced6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced8:	9004      	str	r0, [sp, #16]
 800ceda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 814d 	beq.w	800d17e <_dtoa_r+0xb2e>
 800cee4:	2300      	movs	r3, #0
 800cee6:	4631      	mov	r1, r6
 800cee8:	220a      	movs	r2, #10
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 fa9e 	bl	800d42c <__multadd>
 800cef0:	9b02      	ldr	r3, [sp, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	4606      	mov	r6, r0
 800cef6:	dc4f      	bgt.n	800cf98 <_dtoa_r+0x948>
 800cef8:	9b06      	ldr	r3, [sp, #24]
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	dd4c      	ble.n	800cf98 <_dtoa_r+0x948>
 800cefe:	e011      	b.n	800cf24 <_dtoa_r+0x8d4>
 800cf00:	d0c9      	beq.n	800ce96 <_dtoa_r+0x846>
 800cf02:	9a05      	ldr	r2, [sp, #20]
 800cf04:	331c      	adds	r3, #28
 800cf06:	441a      	add	r2, r3
 800cf08:	9205      	str	r2, [sp, #20]
 800cf0a:	441d      	add	r5, r3
 800cf0c:	4498      	add	r8, r3
 800cf0e:	e7c2      	b.n	800ce96 <_dtoa_r+0x846>
 800cf10:	4603      	mov	r3, r0
 800cf12:	e7f6      	b.n	800cf02 <_dtoa_r+0x8b2>
 800cf14:	f1b9 0f00 	cmp.w	r9, #0
 800cf18:	dc38      	bgt.n	800cf8c <_dtoa_r+0x93c>
 800cf1a:	9b06      	ldr	r3, [sp, #24]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	dd35      	ble.n	800cf8c <_dtoa_r+0x93c>
 800cf20:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf24:	9b02      	ldr	r3, [sp, #8]
 800cf26:	b963      	cbnz	r3, 800cf42 <_dtoa_r+0x8f2>
 800cf28:	4639      	mov	r1, r7
 800cf2a:	2205      	movs	r2, #5
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 fa7d 	bl	800d42c <__multadd>
 800cf32:	4601      	mov	r1, r0
 800cf34:	4607      	mov	r7, r0
 800cf36:	9804      	ldr	r0, [sp, #16]
 800cf38:	f000 fc42 	bl	800d7c0 <__mcmp>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	f73f adcc 	bgt.w	800cada <_dtoa_r+0x48a>
 800cf42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf44:	465d      	mov	r5, fp
 800cf46:	ea6f 0a03 	mvn.w	sl, r3
 800cf4a:	f04f 0900 	mov.w	r9, #0
 800cf4e:	4639      	mov	r1, r7
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 fa54 	bl	800d3fe <_Bfree>
 800cf56:	2e00      	cmp	r6, #0
 800cf58:	f43f aeb7 	beq.w	800ccca <_dtoa_r+0x67a>
 800cf5c:	f1b9 0f00 	cmp.w	r9, #0
 800cf60:	d005      	beq.n	800cf6e <_dtoa_r+0x91e>
 800cf62:	45b1      	cmp	r9, r6
 800cf64:	d003      	beq.n	800cf6e <_dtoa_r+0x91e>
 800cf66:	4649      	mov	r1, r9
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f000 fa48 	bl	800d3fe <_Bfree>
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 fa44 	bl	800d3fe <_Bfree>
 800cf76:	e6a8      	b.n	800ccca <_dtoa_r+0x67a>
 800cf78:	2700      	movs	r7, #0
 800cf7a:	463e      	mov	r6, r7
 800cf7c:	e7e1      	b.n	800cf42 <_dtoa_r+0x8f2>
 800cf7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cf82:	463e      	mov	r6, r7
 800cf84:	e5a9      	b.n	800cada <_dtoa_r+0x48a>
 800cf86:	bf00      	nop
 800cf88:	40240000 	.word	0x40240000
 800cf8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f000 80fa 	beq.w	800d18c <_dtoa_r+0xb3c>
 800cf98:	2d00      	cmp	r5, #0
 800cf9a:	dd05      	ble.n	800cfa8 <_dtoa_r+0x958>
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	462a      	mov	r2, r5
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f000 fbb9 	bl	800d718 <__lshift>
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	9b07      	ldr	r3, [sp, #28]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d04c      	beq.n	800d048 <_dtoa_r+0x9f8>
 800cfae:	6871      	ldr	r1, [r6, #4]
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f000 f9f0 	bl	800d396 <_Balloc>
 800cfb6:	6932      	ldr	r2, [r6, #16]
 800cfb8:	3202      	adds	r2, #2
 800cfba:	4605      	mov	r5, r0
 800cfbc:	0092      	lsls	r2, r2, #2
 800cfbe:	f106 010c 	add.w	r1, r6, #12
 800cfc2:	300c      	adds	r0, #12
 800cfc4:	f000 f9dc 	bl	800d380 <memcpy>
 800cfc8:	2201      	movs	r2, #1
 800cfca:	4629      	mov	r1, r5
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f000 fba3 	bl	800d718 <__lshift>
 800cfd2:	9b00      	ldr	r3, [sp, #0]
 800cfd4:	f8cd b014 	str.w	fp, [sp, #20]
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	46b1      	mov	r9, r6
 800cfde:	9307      	str	r3, [sp, #28]
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	9804      	ldr	r0, [sp, #16]
 800cfe6:	f7ff faa7 	bl	800c538 <quorem>
 800cfea:	4649      	mov	r1, r9
 800cfec:	4605      	mov	r5, r0
 800cfee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cff2:	9804      	ldr	r0, [sp, #16]
 800cff4:	f000 fbe4 	bl	800d7c0 <__mcmp>
 800cff8:	4632      	mov	r2, r6
 800cffa:	9000      	str	r0, [sp, #0]
 800cffc:	4639      	mov	r1, r7
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 fbf8 	bl	800d7f4 <__mdiff>
 800d004:	68c3      	ldr	r3, [r0, #12]
 800d006:	4602      	mov	r2, r0
 800d008:	bb03      	cbnz	r3, 800d04c <_dtoa_r+0x9fc>
 800d00a:	4601      	mov	r1, r0
 800d00c:	9008      	str	r0, [sp, #32]
 800d00e:	9804      	ldr	r0, [sp, #16]
 800d010:	f000 fbd6 	bl	800d7c0 <__mcmp>
 800d014:	9a08      	ldr	r2, [sp, #32]
 800d016:	4603      	mov	r3, r0
 800d018:	4611      	mov	r1, r2
 800d01a:	4620      	mov	r0, r4
 800d01c:	9308      	str	r3, [sp, #32]
 800d01e:	f000 f9ee 	bl	800d3fe <_Bfree>
 800d022:	9b08      	ldr	r3, [sp, #32]
 800d024:	b9a3      	cbnz	r3, 800d050 <_dtoa_r+0xa00>
 800d026:	9a06      	ldr	r2, [sp, #24]
 800d028:	b992      	cbnz	r2, 800d050 <_dtoa_r+0xa00>
 800d02a:	9a07      	ldr	r2, [sp, #28]
 800d02c:	b982      	cbnz	r2, 800d050 <_dtoa_r+0xa00>
 800d02e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d032:	d029      	beq.n	800d088 <_dtoa_r+0xa38>
 800d034:	9b00      	ldr	r3, [sp, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	dd01      	ble.n	800d03e <_dtoa_r+0x9ee>
 800d03a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d03e:	9b05      	ldr	r3, [sp, #20]
 800d040:	1c5d      	adds	r5, r3, #1
 800d042:	f883 8000 	strb.w	r8, [r3]
 800d046:	e782      	b.n	800cf4e <_dtoa_r+0x8fe>
 800d048:	4630      	mov	r0, r6
 800d04a:	e7c2      	b.n	800cfd2 <_dtoa_r+0x982>
 800d04c:	2301      	movs	r3, #1
 800d04e:	e7e3      	b.n	800d018 <_dtoa_r+0x9c8>
 800d050:	9a00      	ldr	r2, [sp, #0]
 800d052:	2a00      	cmp	r2, #0
 800d054:	db04      	blt.n	800d060 <_dtoa_r+0xa10>
 800d056:	d125      	bne.n	800d0a4 <_dtoa_r+0xa54>
 800d058:	9a06      	ldr	r2, [sp, #24]
 800d05a:	bb1a      	cbnz	r2, 800d0a4 <_dtoa_r+0xa54>
 800d05c:	9a07      	ldr	r2, [sp, #28]
 800d05e:	bb0a      	cbnz	r2, 800d0a4 <_dtoa_r+0xa54>
 800d060:	2b00      	cmp	r3, #0
 800d062:	ddec      	ble.n	800d03e <_dtoa_r+0x9ee>
 800d064:	2201      	movs	r2, #1
 800d066:	9904      	ldr	r1, [sp, #16]
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 fb55 	bl	800d718 <__lshift>
 800d06e:	4639      	mov	r1, r7
 800d070:	9004      	str	r0, [sp, #16]
 800d072:	f000 fba5 	bl	800d7c0 <__mcmp>
 800d076:	2800      	cmp	r0, #0
 800d078:	dc03      	bgt.n	800d082 <_dtoa_r+0xa32>
 800d07a:	d1e0      	bne.n	800d03e <_dtoa_r+0x9ee>
 800d07c:	f018 0f01 	tst.w	r8, #1
 800d080:	d0dd      	beq.n	800d03e <_dtoa_r+0x9ee>
 800d082:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d086:	d1d8      	bne.n	800d03a <_dtoa_r+0x9ea>
 800d088:	9b05      	ldr	r3, [sp, #20]
 800d08a:	9a05      	ldr	r2, [sp, #20]
 800d08c:	1c5d      	adds	r5, r3, #1
 800d08e:	2339      	movs	r3, #57	; 0x39
 800d090:	7013      	strb	r3, [r2, #0]
 800d092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d096:	2b39      	cmp	r3, #57	; 0x39
 800d098:	f105 32ff 	add.w	r2, r5, #4294967295
 800d09c:	d04f      	beq.n	800d13e <_dtoa_r+0xaee>
 800d09e:	3301      	adds	r3, #1
 800d0a0:	7013      	strb	r3, [r2, #0]
 800d0a2:	e754      	b.n	800cf4e <_dtoa_r+0x8fe>
 800d0a4:	9a05      	ldr	r2, [sp, #20]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f102 0501 	add.w	r5, r2, #1
 800d0ac:	dd06      	ble.n	800d0bc <_dtoa_r+0xa6c>
 800d0ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d0b2:	d0e9      	beq.n	800d088 <_dtoa_r+0xa38>
 800d0b4:	f108 0801 	add.w	r8, r8, #1
 800d0b8:	9b05      	ldr	r3, [sp, #20]
 800d0ba:	e7c2      	b.n	800d042 <_dtoa_r+0x9f2>
 800d0bc:	9a02      	ldr	r2, [sp, #8]
 800d0be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d0c2:	eba5 030b 	sub.w	r3, r5, fp
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d021      	beq.n	800d10e <_dtoa_r+0xabe>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	220a      	movs	r2, #10
 800d0ce:	9904      	ldr	r1, [sp, #16]
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f000 f9ab 	bl	800d42c <__multadd>
 800d0d6:	45b1      	cmp	r9, r6
 800d0d8:	9004      	str	r0, [sp, #16]
 800d0da:	f04f 0300 	mov.w	r3, #0
 800d0de:	f04f 020a 	mov.w	r2, #10
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	d105      	bne.n	800d0f4 <_dtoa_r+0xaa4>
 800d0e8:	f000 f9a0 	bl	800d42c <__multadd>
 800d0ec:	4681      	mov	r9, r0
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	9505      	str	r5, [sp, #20]
 800d0f2:	e776      	b.n	800cfe2 <_dtoa_r+0x992>
 800d0f4:	f000 f99a 	bl	800d42c <__multadd>
 800d0f8:	4631      	mov	r1, r6
 800d0fa:	4681      	mov	r9, r0
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	220a      	movs	r2, #10
 800d100:	4620      	mov	r0, r4
 800d102:	f000 f993 	bl	800d42c <__multadd>
 800d106:	4606      	mov	r6, r0
 800d108:	e7f2      	b.n	800d0f0 <_dtoa_r+0xaa0>
 800d10a:	f04f 0900 	mov.w	r9, #0
 800d10e:	2201      	movs	r2, #1
 800d110:	9904      	ldr	r1, [sp, #16]
 800d112:	4620      	mov	r0, r4
 800d114:	f000 fb00 	bl	800d718 <__lshift>
 800d118:	4639      	mov	r1, r7
 800d11a:	9004      	str	r0, [sp, #16]
 800d11c:	f000 fb50 	bl	800d7c0 <__mcmp>
 800d120:	2800      	cmp	r0, #0
 800d122:	dcb6      	bgt.n	800d092 <_dtoa_r+0xa42>
 800d124:	d102      	bne.n	800d12c <_dtoa_r+0xadc>
 800d126:	f018 0f01 	tst.w	r8, #1
 800d12a:	d1b2      	bne.n	800d092 <_dtoa_r+0xa42>
 800d12c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d130:	2b30      	cmp	r3, #48	; 0x30
 800d132:	f105 32ff 	add.w	r2, r5, #4294967295
 800d136:	f47f af0a 	bne.w	800cf4e <_dtoa_r+0x8fe>
 800d13a:	4615      	mov	r5, r2
 800d13c:	e7f6      	b.n	800d12c <_dtoa_r+0xadc>
 800d13e:	4593      	cmp	fp, r2
 800d140:	d105      	bne.n	800d14e <_dtoa_r+0xafe>
 800d142:	2331      	movs	r3, #49	; 0x31
 800d144:	f10a 0a01 	add.w	sl, sl, #1
 800d148:	f88b 3000 	strb.w	r3, [fp]
 800d14c:	e6ff      	b.n	800cf4e <_dtoa_r+0x8fe>
 800d14e:	4615      	mov	r5, r2
 800d150:	e79f      	b.n	800d092 <_dtoa_r+0xa42>
 800d152:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d1b8 <_dtoa_r+0xb68>
 800d156:	e007      	b.n	800d168 <_dtoa_r+0xb18>
 800d158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d15a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d1bc <_dtoa_r+0xb6c>
 800d15e:	b11b      	cbz	r3, 800d168 <_dtoa_r+0xb18>
 800d160:	f10b 0308 	add.w	r3, fp, #8
 800d164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	4658      	mov	r0, fp
 800d16a:	b017      	add	sp, #92	; 0x5c
 800d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d170:	9b06      	ldr	r3, [sp, #24]
 800d172:	2b01      	cmp	r3, #1
 800d174:	f77f ae35 	ble.w	800cde2 <_dtoa_r+0x792>
 800d178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d17a:	9307      	str	r3, [sp, #28]
 800d17c:	e649      	b.n	800ce12 <_dtoa_r+0x7c2>
 800d17e:	9b02      	ldr	r3, [sp, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	dc03      	bgt.n	800d18c <_dtoa_r+0xb3c>
 800d184:	9b06      	ldr	r3, [sp, #24]
 800d186:	2b02      	cmp	r3, #2
 800d188:	f73f aecc 	bgt.w	800cf24 <_dtoa_r+0x8d4>
 800d18c:	465d      	mov	r5, fp
 800d18e:	4639      	mov	r1, r7
 800d190:	9804      	ldr	r0, [sp, #16]
 800d192:	f7ff f9d1 	bl	800c538 <quorem>
 800d196:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d19a:	f805 8b01 	strb.w	r8, [r5], #1
 800d19e:	9a02      	ldr	r2, [sp, #8]
 800d1a0:	eba5 030b 	sub.w	r3, r5, fp
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	ddb0      	ble.n	800d10a <_dtoa_r+0xaba>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	220a      	movs	r2, #10
 800d1ac:	9904      	ldr	r1, [sp, #16]
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 f93c 	bl	800d42c <__multadd>
 800d1b4:	9004      	str	r0, [sp, #16]
 800d1b6:	e7ea      	b.n	800d18e <_dtoa_r+0xb3e>
 800d1b8:	0800eb3c 	.word	0x0800eb3c
 800d1bc:	0800eb60 	.word	0x0800eb60

0800d1c0 <std>:
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	b510      	push	{r4, lr}
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	e9c0 3300 	strd	r3, r3, [r0]
 800d1ca:	6083      	str	r3, [r0, #8]
 800d1cc:	8181      	strh	r1, [r0, #12]
 800d1ce:	6643      	str	r3, [r0, #100]	; 0x64
 800d1d0:	81c2      	strh	r2, [r0, #14]
 800d1d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1d6:	6183      	str	r3, [r0, #24]
 800d1d8:	4619      	mov	r1, r3
 800d1da:	2208      	movs	r2, #8
 800d1dc:	305c      	adds	r0, #92	; 0x5c
 800d1de:	f7fe fd0f 	bl	800bc00 <memset>
 800d1e2:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <std+0x38>)
 800d1e4:	6263      	str	r3, [r4, #36]	; 0x24
 800d1e6:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <std+0x3c>)
 800d1e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1ea:	4b05      	ldr	r3, [pc, #20]	; (800d200 <std+0x40>)
 800d1ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1ee:	4b05      	ldr	r3, [pc, #20]	; (800d204 <std+0x44>)
 800d1f0:	6224      	str	r4, [r4, #32]
 800d1f2:	6323      	str	r3, [r4, #48]	; 0x30
 800d1f4:	bd10      	pop	{r4, pc}
 800d1f6:	bf00      	nop
 800d1f8:	0800dffd 	.word	0x0800dffd
 800d1fc:	0800e01f 	.word	0x0800e01f
 800d200:	0800e057 	.word	0x0800e057
 800d204:	0800e07b 	.word	0x0800e07b

0800d208 <_cleanup_r>:
 800d208:	4901      	ldr	r1, [pc, #4]	; (800d210 <_cleanup_r+0x8>)
 800d20a:	f000 b885 	b.w	800d318 <_fwalk_reent>
 800d20e:	bf00      	nop
 800d210:	0800e355 	.word	0x0800e355

0800d214 <__sfmoreglue>:
 800d214:	b570      	push	{r4, r5, r6, lr}
 800d216:	1e4a      	subs	r2, r1, #1
 800d218:	2568      	movs	r5, #104	; 0x68
 800d21a:	4355      	muls	r5, r2
 800d21c:	460e      	mov	r6, r1
 800d21e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d222:	f000 fbef 	bl	800da04 <_malloc_r>
 800d226:	4604      	mov	r4, r0
 800d228:	b140      	cbz	r0, 800d23c <__sfmoreglue+0x28>
 800d22a:	2100      	movs	r1, #0
 800d22c:	e9c0 1600 	strd	r1, r6, [r0]
 800d230:	300c      	adds	r0, #12
 800d232:	60a0      	str	r0, [r4, #8]
 800d234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d238:	f7fe fce2 	bl	800bc00 <memset>
 800d23c:	4620      	mov	r0, r4
 800d23e:	bd70      	pop	{r4, r5, r6, pc}

0800d240 <__sinit>:
 800d240:	6983      	ldr	r3, [r0, #24]
 800d242:	b510      	push	{r4, lr}
 800d244:	4604      	mov	r4, r0
 800d246:	bb33      	cbnz	r3, 800d296 <__sinit+0x56>
 800d248:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d24c:	6503      	str	r3, [r0, #80]	; 0x50
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <__sinit+0x58>)
 800d250:	4a12      	ldr	r2, [pc, #72]	; (800d29c <__sinit+0x5c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6282      	str	r2, [r0, #40]	; 0x28
 800d256:	4298      	cmp	r0, r3
 800d258:	bf04      	itt	eq
 800d25a:	2301      	moveq	r3, #1
 800d25c:	6183      	streq	r3, [r0, #24]
 800d25e:	f000 f81f 	bl	800d2a0 <__sfp>
 800d262:	6060      	str	r0, [r4, #4]
 800d264:	4620      	mov	r0, r4
 800d266:	f000 f81b 	bl	800d2a0 <__sfp>
 800d26a:	60a0      	str	r0, [r4, #8]
 800d26c:	4620      	mov	r0, r4
 800d26e:	f000 f817 	bl	800d2a0 <__sfp>
 800d272:	2200      	movs	r2, #0
 800d274:	60e0      	str	r0, [r4, #12]
 800d276:	2104      	movs	r1, #4
 800d278:	6860      	ldr	r0, [r4, #4]
 800d27a:	f7ff ffa1 	bl	800d1c0 <std>
 800d27e:	2201      	movs	r2, #1
 800d280:	2109      	movs	r1, #9
 800d282:	68a0      	ldr	r0, [r4, #8]
 800d284:	f7ff ff9c 	bl	800d1c0 <std>
 800d288:	2202      	movs	r2, #2
 800d28a:	2112      	movs	r1, #18
 800d28c:	68e0      	ldr	r0, [r4, #12]
 800d28e:	f7ff ff97 	bl	800d1c0 <std>
 800d292:	2301      	movs	r3, #1
 800d294:	61a3      	str	r3, [r4, #24]
 800d296:	bd10      	pop	{r4, pc}
 800d298:	0800eb28 	.word	0x0800eb28
 800d29c:	0800d209 	.word	0x0800d209

0800d2a0 <__sfp>:
 800d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a2:	4b1b      	ldr	r3, [pc, #108]	; (800d310 <__sfp+0x70>)
 800d2a4:	681e      	ldr	r6, [r3, #0]
 800d2a6:	69b3      	ldr	r3, [r6, #24]
 800d2a8:	4607      	mov	r7, r0
 800d2aa:	b913      	cbnz	r3, 800d2b2 <__sfp+0x12>
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7ff ffc7 	bl	800d240 <__sinit>
 800d2b2:	3648      	adds	r6, #72	; 0x48
 800d2b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	d503      	bpl.n	800d2c4 <__sfp+0x24>
 800d2bc:	6833      	ldr	r3, [r6, #0]
 800d2be:	b133      	cbz	r3, 800d2ce <__sfp+0x2e>
 800d2c0:	6836      	ldr	r6, [r6, #0]
 800d2c2:	e7f7      	b.n	800d2b4 <__sfp+0x14>
 800d2c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2c8:	b16d      	cbz	r5, 800d2e6 <__sfp+0x46>
 800d2ca:	3468      	adds	r4, #104	; 0x68
 800d2cc:	e7f4      	b.n	800d2b8 <__sfp+0x18>
 800d2ce:	2104      	movs	r1, #4
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	f7ff ff9f 	bl	800d214 <__sfmoreglue>
 800d2d6:	6030      	str	r0, [r6, #0]
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d1f1      	bne.n	800d2c0 <__sfp+0x20>
 800d2dc:	230c      	movs	r3, #12
 800d2de:	603b      	str	r3, [r7, #0]
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e6:	4b0b      	ldr	r3, [pc, #44]	; (800d314 <__sfp+0x74>)
 800d2e8:	6665      	str	r5, [r4, #100]	; 0x64
 800d2ea:	e9c4 5500 	strd	r5, r5, [r4]
 800d2ee:	60a5      	str	r5, [r4, #8]
 800d2f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d2f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d2f8:	2208      	movs	r2, #8
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d300:	f7fe fc7e 	bl	800bc00 <memset>
 800d304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d30c:	e7e9      	b.n	800d2e2 <__sfp+0x42>
 800d30e:	bf00      	nop
 800d310:	0800eb28 	.word	0x0800eb28
 800d314:	ffff0001 	.word	0xffff0001

0800d318 <_fwalk_reent>:
 800d318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d31c:	4680      	mov	r8, r0
 800d31e:	4689      	mov	r9, r1
 800d320:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d324:	2600      	movs	r6, #0
 800d326:	b914      	cbnz	r4, 800d32e <_fwalk_reent+0x16>
 800d328:	4630      	mov	r0, r6
 800d32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d332:	3f01      	subs	r7, #1
 800d334:	d501      	bpl.n	800d33a <_fwalk_reent+0x22>
 800d336:	6824      	ldr	r4, [r4, #0]
 800d338:	e7f5      	b.n	800d326 <_fwalk_reent+0xe>
 800d33a:	89ab      	ldrh	r3, [r5, #12]
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d907      	bls.n	800d350 <_fwalk_reent+0x38>
 800d340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d344:	3301      	adds	r3, #1
 800d346:	d003      	beq.n	800d350 <_fwalk_reent+0x38>
 800d348:	4629      	mov	r1, r5
 800d34a:	4640      	mov	r0, r8
 800d34c:	47c8      	blx	r9
 800d34e:	4306      	orrs	r6, r0
 800d350:	3568      	adds	r5, #104	; 0x68
 800d352:	e7ee      	b.n	800d332 <_fwalk_reent+0x1a>

0800d354 <_localeconv_r>:
 800d354:	4b04      	ldr	r3, [pc, #16]	; (800d368 <_localeconv_r+0x14>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6a18      	ldr	r0, [r3, #32]
 800d35a:	4b04      	ldr	r3, [pc, #16]	; (800d36c <_localeconv_r+0x18>)
 800d35c:	2800      	cmp	r0, #0
 800d35e:	bf08      	it	eq
 800d360:	4618      	moveq	r0, r3
 800d362:	30f0      	adds	r0, #240	; 0xf0
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	20000034 	.word	0x20000034
 800d36c:	20000098 	.word	0x20000098

0800d370 <malloc>:
 800d370:	4b02      	ldr	r3, [pc, #8]	; (800d37c <malloc+0xc>)
 800d372:	4601      	mov	r1, r0
 800d374:	6818      	ldr	r0, [r3, #0]
 800d376:	f000 bb45 	b.w	800da04 <_malloc_r>
 800d37a:	bf00      	nop
 800d37c:	20000034 	.word	0x20000034

0800d380 <memcpy>:
 800d380:	b510      	push	{r4, lr}
 800d382:	1e43      	subs	r3, r0, #1
 800d384:	440a      	add	r2, r1
 800d386:	4291      	cmp	r1, r2
 800d388:	d100      	bne.n	800d38c <memcpy+0xc>
 800d38a:	bd10      	pop	{r4, pc}
 800d38c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d390:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d394:	e7f7      	b.n	800d386 <memcpy+0x6>

0800d396 <_Balloc>:
 800d396:	b570      	push	{r4, r5, r6, lr}
 800d398:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d39a:	4604      	mov	r4, r0
 800d39c:	460e      	mov	r6, r1
 800d39e:	b93d      	cbnz	r5, 800d3b0 <_Balloc+0x1a>
 800d3a0:	2010      	movs	r0, #16
 800d3a2:	f7ff ffe5 	bl	800d370 <malloc>
 800d3a6:	6260      	str	r0, [r4, #36]	; 0x24
 800d3a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3ac:	6005      	str	r5, [r0, #0]
 800d3ae:	60c5      	str	r5, [r0, #12]
 800d3b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d3b2:	68eb      	ldr	r3, [r5, #12]
 800d3b4:	b183      	cbz	r3, 800d3d8 <_Balloc+0x42>
 800d3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d3be:	b9b8      	cbnz	r0, 800d3f0 <_Balloc+0x5a>
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	fa01 f506 	lsl.w	r5, r1, r6
 800d3c6:	1d6a      	adds	r2, r5, #5
 800d3c8:	0092      	lsls	r2, r2, #2
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 fabe 	bl	800d94c <_calloc_r>
 800d3d0:	b160      	cbz	r0, 800d3ec <_Balloc+0x56>
 800d3d2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d3d6:	e00e      	b.n	800d3f6 <_Balloc+0x60>
 800d3d8:	2221      	movs	r2, #33	; 0x21
 800d3da:	2104      	movs	r1, #4
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f000 fab5 	bl	800d94c <_calloc_r>
 800d3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e4:	60e8      	str	r0, [r5, #12]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1e4      	bne.n	800d3b6 <_Balloc+0x20>
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}
 800d3f0:	6802      	ldr	r2, [r0, #0]
 800d3f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3fc:	e7f7      	b.n	800d3ee <_Balloc+0x58>

0800d3fe <_Bfree>:
 800d3fe:	b570      	push	{r4, r5, r6, lr}
 800d400:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d402:	4606      	mov	r6, r0
 800d404:	460d      	mov	r5, r1
 800d406:	b93c      	cbnz	r4, 800d418 <_Bfree+0x1a>
 800d408:	2010      	movs	r0, #16
 800d40a:	f7ff ffb1 	bl	800d370 <malloc>
 800d40e:	6270      	str	r0, [r6, #36]	; 0x24
 800d410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d414:	6004      	str	r4, [r0, #0]
 800d416:	60c4      	str	r4, [r0, #12]
 800d418:	b13d      	cbz	r5, 800d42a <_Bfree+0x2c>
 800d41a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d41c:	686a      	ldr	r2, [r5, #4]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d424:	6029      	str	r1, [r5, #0]
 800d426:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d42a:	bd70      	pop	{r4, r5, r6, pc}

0800d42c <__multadd>:
 800d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	690d      	ldr	r5, [r1, #16]
 800d432:	461f      	mov	r7, r3
 800d434:	4606      	mov	r6, r0
 800d436:	460c      	mov	r4, r1
 800d438:	f101 0c14 	add.w	ip, r1, #20
 800d43c:	2300      	movs	r3, #0
 800d43e:	f8dc 0000 	ldr.w	r0, [ip]
 800d442:	b281      	uxth	r1, r0
 800d444:	fb02 7101 	mla	r1, r2, r1, r7
 800d448:	0c0f      	lsrs	r7, r1, #16
 800d44a:	0c00      	lsrs	r0, r0, #16
 800d44c:	fb02 7000 	mla	r0, r2, r0, r7
 800d450:	b289      	uxth	r1, r1
 800d452:	3301      	adds	r3, #1
 800d454:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d458:	429d      	cmp	r5, r3
 800d45a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d45e:	f84c 1b04 	str.w	r1, [ip], #4
 800d462:	dcec      	bgt.n	800d43e <__multadd+0x12>
 800d464:	b1d7      	cbz	r7, 800d49c <__multadd+0x70>
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	42ab      	cmp	r3, r5
 800d46a:	dc12      	bgt.n	800d492 <__multadd+0x66>
 800d46c:	6861      	ldr	r1, [r4, #4]
 800d46e:	4630      	mov	r0, r6
 800d470:	3101      	adds	r1, #1
 800d472:	f7ff ff90 	bl	800d396 <_Balloc>
 800d476:	6922      	ldr	r2, [r4, #16]
 800d478:	3202      	adds	r2, #2
 800d47a:	f104 010c 	add.w	r1, r4, #12
 800d47e:	4680      	mov	r8, r0
 800d480:	0092      	lsls	r2, r2, #2
 800d482:	300c      	adds	r0, #12
 800d484:	f7ff ff7c 	bl	800d380 <memcpy>
 800d488:	4621      	mov	r1, r4
 800d48a:	4630      	mov	r0, r6
 800d48c:	f7ff ffb7 	bl	800d3fe <_Bfree>
 800d490:	4644      	mov	r4, r8
 800d492:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d496:	3501      	adds	r5, #1
 800d498:	615f      	str	r7, [r3, #20]
 800d49a:	6125      	str	r5, [r4, #16]
 800d49c:	4620      	mov	r0, r4
 800d49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4a2 <__hi0bits>:
 800d4a2:	0c02      	lsrs	r2, r0, #16
 800d4a4:	0412      	lsls	r2, r2, #16
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	b9b2      	cbnz	r2, 800d4d8 <__hi0bits+0x36>
 800d4aa:	0403      	lsls	r3, r0, #16
 800d4ac:	2010      	movs	r0, #16
 800d4ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d4b2:	bf04      	itt	eq
 800d4b4:	021b      	lsleq	r3, r3, #8
 800d4b6:	3008      	addeq	r0, #8
 800d4b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d4bc:	bf04      	itt	eq
 800d4be:	011b      	lsleq	r3, r3, #4
 800d4c0:	3004      	addeq	r0, #4
 800d4c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d4c6:	bf04      	itt	eq
 800d4c8:	009b      	lsleq	r3, r3, #2
 800d4ca:	3002      	addeq	r0, #2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	db06      	blt.n	800d4de <__hi0bits+0x3c>
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	d503      	bpl.n	800d4dc <__hi0bits+0x3a>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	4770      	bx	lr
 800d4d8:	2000      	movs	r0, #0
 800d4da:	e7e8      	b.n	800d4ae <__hi0bits+0xc>
 800d4dc:	2020      	movs	r0, #32
 800d4de:	4770      	bx	lr

0800d4e0 <__lo0bits>:
 800d4e0:	6803      	ldr	r3, [r0, #0]
 800d4e2:	f013 0207 	ands.w	r2, r3, #7
 800d4e6:	4601      	mov	r1, r0
 800d4e8:	d00b      	beq.n	800d502 <__lo0bits+0x22>
 800d4ea:	07da      	lsls	r2, r3, #31
 800d4ec:	d423      	bmi.n	800d536 <__lo0bits+0x56>
 800d4ee:	0798      	lsls	r0, r3, #30
 800d4f0:	bf49      	itett	mi
 800d4f2:	085b      	lsrmi	r3, r3, #1
 800d4f4:	089b      	lsrpl	r3, r3, #2
 800d4f6:	2001      	movmi	r0, #1
 800d4f8:	600b      	strmi	r3, [r1, #0]
 800d4fa:	bf5c      	itt	pl
 800d4fc:	600b      	strpl	r3, [r1, #0]
 800d4fe:	2002      	movpl	r0, #2
 800d500:	4770      	bx	lr
 800d502:	b298      	uxth	r0, r3
 800d504:	b9a8      	cbnz	r0, 800d532 <__lo0bits+0x52>
 800d506:	0c1b      	lsrs	r3, r3, #16
 800d508:	2010      	movs	r0, #16
 800d50a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d50e:	bf04      	itt	eq
 800d510:	0a1b      	lsreq	r3, r3, #8
 800d512:	3008      	addeq	r0, #8
 800d514:	071a      	lsls	r2, r3, #28
 800d516:	bf04      	itt	eq
 800d518:	091b      	lsreq	r3, r3, #4
 800d51a:	3004      	addeq	r0, #4
 800d51c:	079a      	lsls	r2, r3, #30
 800d51e:	bf04      	itt	eq
 800d520:	089b      	lsreq	r3, r3, #2
 800d522:	3002      	addeq	r0, #2
 800d524:	07da      	lsls	r2, r3, #31
 800d526:	d402      	bmi.n	800d52e <__lo0bits+0x4e>
 800d528:	085b      	lsrs	r3, r3, #1
 800d52a:	d006      	beq.n	800d53a <__lo0bits+0x5a>
 800d52c:	3001      	adds	r0, #1
 800d52e:	600b      	str	r3, [r1, #0]
 800d530:	4770      	bx	lr
 800d532:	4610      	mov	r0, r2
 800d534:	e7e9      	b.n	800d50a <__lo0bits+0x2a>
 800d536:	2000      	movs	r0, #0
 800d538:	4770      	bx	lr
 800d53a:	2020      	movs	r0, #32
 800d53c:	4770      	bx	lr

0800d53e <__i2b>:
 800d53e:	b510      	push	{r4, lr}
 800d540:	460c      	mov	r4, r1
 800d542:	2101      	movs	r1, #1
 800d544:	f7ff ff27 	bl	800d396 <_Balloc>
 800d548:	2201      	movs	r2, #1
 800d54a:	6144      	str	r4, [r0, #20]
 800d54c:	6102      	str	r2, [r0, #16]
 800d54e:	bd10      	pop	{r4, pc}

0800d550 <__multiply>:
 800d550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d554:	4614      	mov	r4, r2
 800d556:	690a      	ldr	r2, [r1, #16]
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	bfb8      	it	lt
 800d55e:	460b      	movlt	r3, r1
 800d560:	4688      	mov	r8, r1
 800d562:	bfbc      	itt	lt
 800d564:	46a0      	movlt	r8, r4
 800d566:	461c      	movlt	r4, r3
 800d568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d56c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d570:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d574:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d578:	eb07 0609 	add.w	r6, r7, r9
 800d57c:	42b3      	cmp	r3, r6
 800d57e:	bfb8      	it	lt
 800d580:	3101      	addlt	r1, #1
 800d582:	f7ff ff08 	bl	800d396 <_Balloc>
 800d586:	f100 0514 	add.w	r5, r0, #20
 800d58a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d58e:	462b      	mov	r3, r5
 800d590:	2200      	movs	r2, #0
 800d592:	4573      	cmp	r3, lr
 800d594:	d316      	bcc.n	800d5c4 <__multiply+0x74>
 800d596:	f104 0214 	add.w	r2, r4, #20
 800d59a:	f108 0114 	add.w	r1, r8, #20
 800d59e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d5a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	9b00      	ldr	r3, [sp, #0]
 800d5aa:	9201      	str	r2, [sp, #4]
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d80c      	bhi.n	800d5ca <__multiply+0x7a>
 800d5b0:	2e00      	cmp	r6, #0
 800d5b2:	dd03      	ble.n	800d5bc <__multiply+0x6c>
 800d5b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d05d      	beq.n	800d678 <__multiply+0x128>
 800d5bc:	6106      	str	r6, [r0, #16]
 800d5be:	b003      	add	sp, #12
 800d5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c4:	f843 2b04 	str.w	r2, [r3], #4
 800d5c8:	e7e3      	b.n	800d592 <__multiply+0x42>
 800d5ca:	f8b2 b000 	ldrh.w	fp, [r2]
 800d5ce:	f1bb 0f00 	cmp.w	fp, #0
 800d5d2:	d023      	beq.n	800d61c <__multiply+0xcc>
 800d5d4:	4689      	mov	r9, r1
 800d5d6:	46ac      	mov	ip, r5
 800d5d8:	f04f 0800 	mov.w	r8, #0
 800d5dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800d5e0:	f8dc a000 	ldr.w	sl, [ip]
 800d5e4:	b2a3      	uxth	r3, r4
 800d5e6:	fa1f fa8a 	uxth.w	sl, sl
 800d5ea:	fb0b a303 	mla	r3, fp, r3, sl
 800d5ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d5f2:	f8dc 4000 	ldr.w	r4, [ip]
 800d5f6:	4443      	add	r3, r8
 800d5f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d5fc:	fb0b 840a 	mla	r4, fp, sl, r8
 800d600:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d604:	46e2      	mov	sl, ip
 800d606:	b29b      	uxth	r3, r3
 800d608:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d60c:	454f      	cmp	r7, r9
 800d60e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d612:	f84a 3b04 	str.w	r3, [sl], #4
 800d616:	d82b      	bhi.n	800d670 <__multiply+0x120>
 800d618:	f8cc 8004 	str.w	r8, [ip, #4]
 800d61c:	9b01      	ldr	r3, [sp, #4]
 800d61e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d622:	3204      	adds	r2, #4
 800d624:	f1ba 0f00 	cmp.w	sl, #0
 800d628:	d020      	beq.n	800d66c <__multiply+0x11c>
 800d62a:	682b      	ldr	r3, [r5, #0]
 800d62c:	4689      	mov	r9, r1
 800d62e:	46a8      	mov	r8, r5
 800d630:	f04f 0b00 	mov.w	fp, #0
 800d634:	f8b9 c000 	ldrh.w	ip, [r9]
 800d638:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d63c:	fb0a 440c 	mla	r4, sl, ip, r4
 800d640:	445c      	add	r4, fp
 800d642:	46c4      	mov	ip, r8
 800d644:	b29b      	uxth	r3, r3
 800d646:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d64a:	f84c 3b04 	str.w	r3, [ip], #4
 800d64e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d652:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d656:	0c1b      	lsrs	r3, r3, #16
 800d658:	fb0a b303 	mla	r3, sl, r3, fp
 800d65c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d660:	454f      	cmp	r7, r9
 800d662:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d666:	d805      	bhi.n	800d674 <__multiply+0x124>
 800d668:	f8c8 3004 	str.w	r3, [r8, #4]
 800d66c:	3504      	adds	r5, #4
 800d66e:	e79b      	b.n	800d5a8 <__multiply+0x58>
 800d670:	46d4      	mov	ip, sl
 800d672:	e7b3      	b.n	800d5dc <__multiply+0x8c>
 800d674:	46e0      	mov	r8, ip
 800d676:	e7dd      	b.n	800d634 <__multiply+0xe4>
 800d678:	3e01      	subs	r6, #1
 800d67a:	e799      	b.n	800d5b0 <__multiply+0x60>

0800d67c <__pow5mult>:
 800d67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d680:	4615      	mov	r5, r2
 800d682:	f012 0203 	ands.w	r2, r2, #3
 800d686:	4606      	mov	r6, r0
 800d688:	460f      	mov	r7, r1
 800d68a:	d007      	beq.n	800d69c <__pow5mult+0x20>
 800d68c:	3a01      	subs	r2, #1
 800d68e:	4c21      	ldr	r4, [pc, #132]	; (800d714 <__pow5mult+0x98>)
 800d690:	2300      	movs	r3, #0
 800d692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d696:	f7ff fec9 	bl	800d42c <__multadd>
 800d69a:	4607      	mov	r7, r0
 800d69c:	10ad      	asrs	r5, r5, #2
 800d69e:	d035      	beq.n	800d70c <__pow5mult+0x90>
 800d6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d6a2:	b93c      	cbnz	r4, 800d6b4 <__pow5mult+0x38>
 800d6a4:	2010      	movs	r0, #16
 800d6a6:	f7ff fe63 	bl	800d370 <malloc>
 800d6aa:	6270      	str	r0, [r6, #36]	; 0x24
 800d6ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6b0:	6004      	str	r4, [r0, #0]
 800d6b2:	60c4      	str	r4, [r0, #12]
 800d6b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6bc:	b94c      	cbnz	r4, 800d6d2 <__pow5mult+0x56>
 800d6be:	f240 2171 	movw	r1, #625	; 0x271
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f7ff ff3b 	bl	800d53e <__i2b>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	6003      	str	r3, [r0, #0]
 800d6d2:	f04f 0800 	mov.w	r8, #0
 800d6d6:	07eb      	lsls	r3, r5, #31
 800d6d8:	d50a      	bpl.n	800d6f0 <__pow5mult+0x74>
 800d6da:	4639      	mov	r1, r7
 800d6dc:	4622      	mov	r2, r4
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f7ff ff36 	bl	800d550 <__multiply>
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	4681      	mov	r9, r0
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f7ff fe88 	bl	800d3fe <_Bfree>
 800d6ee:	464f      	mov	r7, r9
 800d6f0:	106d      	asrs	r5, r5, #1
 800d6f2:	d00b      	beq.n	800d70c <__pow5mult+0x90>
 800d6f4:	6820      	ldr	r0, [r4, #0]
 800d6f6:	b938      	cbnz	r0, 800d708 <__pow5mult+0x8c>
 800d6f8:	4622      	mov	r2, r4
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	f7ff ff27 	bl	800d550 <__multiply>
 800d702:	6020      	str	r0, [r4, #0]
 800d704:	f8c0 8000 	str.w	r8, [r0]
 800d708:	4604      	mov	r4, r0
 800d70a:	e7e4      	b.n	800d6d6 <__pow5mult+0x5a>
 800d70c:	4638      	mov	r0, r7
 800d70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d712:	bf00      	nop
 800d714:	0800ecc0 	.word	0x0800ecc0

0800d718 <__lshift>:
 800d718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	460c      	mov	r4, r1
 800d71e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d722:	6923      	ldr	r3, [r4, #16]
 800d724:	6849      	ldr	r1, [r1, #4]
 800d726:	eb0a 0903 	add.w	r9, sl, r3
 800d72a:	68a3      	ldr	r3, [r4, #8]
 800d72c:	4607      	mov	r7, r0
 800d72e:	4616      	mov	r6, r2
 800d730:	f109 0501 	add.w	r5, r9, #1
 800d734:	42ab      	cmp	r3, r5
 800d736:	db32      	blt.n	800d79e <__lshift+0x86>
 800d738:	4638      	mov	r0, r7
 800d73a:	f7ff fe2c 	bl	800d396 <_Balloc>
 800d73e:	2300      	movs	r3, #0
 800d740:	4680      	mov	r8, r0
 800d742:	f100 0114 	add.w	r1, r0, #20
 800d746:	461a      	mov	r2, r3
 800d748:	4553      	cmp	r3, sl
 800d74a:	db2b      	blt.n	800d7a4 <__lshift+0x8c>
 800d74c:	6920      	ldr	r0, [r4, #16]
 800d74e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d752:	f104 0314 	add.w	r3, r4, #20
 800d756:	f016 021f 	ands.w	r2, r6, #31
 800d75a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d75e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d762:	d025      	beq.n	800d7b0 <__lshift+0x98>
 800d764:	f1c2 0e20 	rsb	lr, r2, #32
 800d768:	2000      	movs	r0, #0
 800d76a:	681e      	ldr	r6, [r3, #0]
 800d76c:	468a      	mov	sl, r1
 800d76e:	4096      	lsls	r6, r2
 800d770:	4330      	orrs	r0, r6
 800d772:	f84a 0b04 	str.w	r0, [sl], #4
 800d776:	f853 0b04 	ldr.w	r0, [r3], #4
 800d77a:	459c      	cmp	ip, r3
 800d77c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d780:	d814      	bhi.n	800d7ac <__lshift+0x94>
 800d782:	6048      	str	r0, [r1, #4]
 800d784:	b108      	cbz	r0, 800d78a <__lshift+0x72>
 800d786:	f109 0502 	add.w	r5, r9, #2
 800d78a:	3d01      	subs	r5, #1
 800d78c:	4638      	mov	r0, r7
 800d78e:	f8c8 5010 	str.w	r5, [r8, #16]
 800d792:	4621      	mov	r1, r4
 800d794:	f7ff fe33 	bl	800d3fe <_Bfree>
 800d798:	4640      	mov	r0, r8
 800d79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79e:	3101      	adds	r1, #1
 800d7a0:	005b      	lsls	r3, r3, #1
 800d7a2:	e7c7      	b.n	800d734 <__lshift+0x1c>
 800d7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	e7cd      	b.n	800d748 <__lshift+0x30>
 800d7ac:	4651      	mov	r1, sl
 800d7ae:	e7dc      	b.n	800d76a <__lshift+0x52>
 800d7b0:	3904      	subs	r1, #4
 800d7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7ba:	459c      	cmp	ip, r3
 800d7bc:	d8f9      	bhi.n	800d7b2 <__lshift+0x9a>
 800d7be:	e7e4      	b.n	800d78a <__lshift+0x72>

0800d7c0 <__mcmp>:
 800d7c0:	6903      	ldr	r3, [r0, #16]
 800d7c2:	690a      	ldr	r2, [r1, #16]
 800d7c4:	1a9b      	subs	r3, r3, r2
 800d7c6:	b530      	push	{r4, r5, lr}
 800d7c8:	d10c      	bne.n	800d7e4 <__mcmp+0x24>
 800d7ca:	0092      	lsls	r2, r2, #2
 800d7cc:	3014      	adds	r0, #20
 800d7ce:	3114      	adds	r1, #20
 800d7d0:	1884      	adds	r4, r0, r2
 800d7d2:	4411      	add	r1, r2
 800d7d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d7d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d7dc:	4295      	cmp	r5, r2
 800d7de:	d003      	beq.n	800d7e8 <__mcmp+0x28>
 800d7e0:	d305      	bcc.n	800d7ee <__mcmp+0x2e>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	bd30      	pop	{r4, r5, pc}
 800d7e8:	42a0      	cmp	r0, r4
 800d7ea:	d3f3      	bcc.n	800d7d4 <__mcmp+0x14>
 800d7ec:	e7fa      	b.n	800d7e4 <__mcmp+0x24>
 800d7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f2:	e7f7      	b.n	800d7e4 <__mcmp+0x24>

0800d7f4 <__mdiff>:
 800d7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	4607      	mov	r7, r0
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	4628      	mov	r0, r5
 800d800:	4614      	mov	r4, r2
 800d802:	f7ff ffdd 	bl	800d7c0 <__mcmp>
 800d806:	1e06      	subs	r6, r0, #0
 800d808:	d108      	bne.n	800d81c <__mdiff+0x28>
 800d80a:	4631      	mov	r1, r6
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff fdc2 	bl	800d396 <_Balloc>
 800d812:	2301      	movs	r3, #1
 800d814:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d81c:	bfa4      	itt	ge
 800d81e:	4623      	movge	r3, r4
 800d820:	462c      	movge	r4, r5
 800d822:	4638      	mov	r0, r7
 800d824:	6861      	ldr	r1, [r4, #4]
 800d826:	bfa6      	itte	ge
 800d828:	461d      	movge	r5, r3
 800d82a:	2600      	movge	r6, #0
 800d82c:	2601      	movlt	r6, #1
 800d82e:	f7ff fdb2 	bl	800d396 <_Balloc>
 800d832:	692b      	ldr	r3, [r5, #16]
 800d834:	60c6      	str	r6, [r0, #12]
 800d836:	6926      	ldr	r6, [r4, #16]
 800d838:	f105 0914 	add.w	r9, r5, #20
 800d83c:	f104 0214 	add.w	r2, r4, #20
 800d840:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d844:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d848:	f100 0514 	add.w	r5, r0, #20
 800d84c:	f04f 0e00 	mov.w	lr, #0
 800d850:	f852 ab04 	ldr.w	sl, [r2], #4
 800d854:	f859 4b04 	ldr.w	r4, [r9], #4
 800d858:	fa1e f18a 	uxtah	r1, lr, sl
 800d85c:	b2a3      	uxth	r3, r4
 800d85e:	1ac9      	subs	r1, r1, r3
 800d860:	0c23      	lsrs	r3, r4, #16
 800d862:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d866:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d86a:	b289      	uxth	r1, r1
 800d86c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d870:	45c8      	cmp	r8, r9
 800d872:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d876:	4694      	mov	ip, r2
 800d878:	f845 3b04 	str.w	r3, [r5], #4
 800d87c:	d8e8      	bhi.n	800d850 <__mdiff+0x5c>
 800d87e:	45bc      	cmp	ip, r7
 800d880:	d304      	bcc.n	800d88c <__mdiff+0x98>
 800d882:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d886:	b183      	cbz	r3, 800d8aa <__mdiff+0xb6>
 800d888:	6106      	str	r6, [r0, #16]
 800d88a:	e7c5      	b.n	800d818 <__mdiff+0x24>
 800d88c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d890:	fa1e f381 	uxtah	r3, lr, r1
 800d894:	141a      	asrs	r2, r3, #16
 800d896:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d8a4:	f845 3b04 	str.w	r3, [r5], #4
 800d8a8:	e7e9      	b.n	800d87e <__mdiff+0x8a>
 800d8aa:	3e01      	subs	r6, #1
 800d8ac:	e7e9      	b.n	800d882 <__mdiff+0x8e>

0800d8ae <__d2b>:
 800d8ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8b2:	460e      	mov	r6, r1
 800d8b4:	2101      	movs	r1, #1
 800d8b6:	ec59 8b10 	vmov	r8, r9, d0
 800d8ba:	4615      	mov	r5, r2
 800d8bc:	f7ff fd6b 	bl	800d396 <_Balloc>
 800d8c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d8c4:	4607      	mov	r7, r0
 800d8c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8ca:	bb34      	cbnz	r4, 800d91a <__d2b+0x6c>
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	f1b8 0300 	subs.w	r3, r8, #0
 800d8d2:	d027      	beq.n	800d924 <__d2b+0x76>
 800d8d4:	a802      	add	r0, sp, #8
 800d8d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d8da:	f7ff fe01 	bl	800d4e0 <__lo0bits>
 800d8de:	9900      	ldr	r1, [sp, #0]
 800d8e0:	b1f0      	cbz	r0, 800d920 <__d2b+0x72>
 800d8e2:	9a01      	ldr	r2, [sp, #4]
 800d8e4:	f1c0 0320 	rsb	r3, r0, #32
 800d8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ec:	430b      	orrs	r3, r1
 800d8ee:	40c2      	lsrs	r2, r0
 800d8f0:	617b      	str	r3, [r7, #20]
 800d8f2:	9201      	str	r2, [sp, #4]
 800d8f4:	9b01      	ldr	r3, [sp, #4]
 800d8f6:	61bb      	str	r3, [r7, #24]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	bf14      	ite	ne
 800d8fc:	2102      	movne	r1, #2
 800d8fe:	2101      	moveq	r1, #1
 800d900:	6139      	str	r1, [r7, #16]
 800d902:	b1c4      	cbz	r4, 800d936 <__d2b+0x88>
 800d904:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d908:	4404      	add	r4, r0
 800d90a:	6034      	str	r4, [r6, #0]
 800d90c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d910:	6028      	str	r0, [r5, #0]
 800d912:	4638      	mov	r0, r7
 800d914:	b003      	add	sp, #12
 800d916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d91a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d91e:	e7d5      	b.n	800d8cc <__d2b+0x1e>
 800d920:	6179      	str	r1, [r7, #20]
 800d922:	e7e7      	b.n	800d8f4 <__d2b+0x46>
 800d924:	a801      	add	r0, sp, #4
 800d926:	f7ff fddb 	bl	800d4e0 <__lo0bits>
 800d92a:	9b01      	ldr	r3, [sp, #4]
 800d92c:	617b      	str	r3, [r7, #20]
 800d92e:	2101      	movs	r1, #1
 800d930:	6139      	str	r1, [r7, #16]
 800d932:	3020      	adds	r0, #32
 800d934:	e7e5      	b.n	800d902 <__d2b+0x54>
 800d936:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d93a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d93e:	6030      	str	r0, [r6, #0]
 800d940:	6918      	ldr	r0, [r3, #16]
 800d942:	f7ff fdae 	bl	800d4a2 <__hi0bits>
 800d946:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d94a:	e7e1      	b.n	800d910 <__d2b+0x62>

0800d94c <_calloc_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	fb02 f401 	mul.w	r4, r2, r1
 800d952:	4621      	mov	r1, r4
 800d954:	f000 f856 	bl	800da04 <_malloc_r>
 800d958:	4605      	mov	r5, r0
 800d95a:	b118      	cbz	r0, 800d964 <_calloc_r+0x18>
 800d95c:	4622      	mov	r2, r4
 800d95e:	2100      	movs	r1, #0
 800d960:	f7fe f94e 	bl	800bc00 <memset>
 800d964:	4628      	mov	r0, r5
 800d966:	bd38      	pop	{r3, r4, r5, pc}

0800d968 <_free_r>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4605      	mov	r5, r0
 800d96c:	2900      	cmp	r1, #0
 800d96e:	d045      	beq.n	800d9fc <_free_r+0x94>
 800d970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d974:	1f0c      	subs	r4, r1, #4
 800d976:	2b00      	cmp	r3, #0
 800d978:	bfb8      	it	lt
 800d97a:	18e4      	addlt	r4, r4, r3
 800d97c:	f000 fdb5 	bl	800e4ea <__malloc_lock>
 800d980:	4a1f      	ldr	r2, [pc, #124]	; (800da00 <_free_r+0x98>)
 800d982:	6813      	ldr	r3, [r2, #0]
 800d984:	4610      	mov	r0, r2
 800d986:	b933      	cbnz	r3, 800d996 <_free_r+0x2e>
 800d988:	6063      	str	r3, [r4, #4]
 800d98a:	6014      	str	r4, [r2, #0]
 800d98c:	4628      	mov	r0, r5
 800d98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d992:	f000 bdab 	b.w	800e4ec <__malloc_unlock>
 800d996:	42a3      	cmp	r3, r4
 800d998:	d90c      	bls.n	800d9b4 <_free_r+0x4c>
 800d99a:	6821      	ldr	r1, [r4, #0]
 800d99c:	1862      	adds	r2, r4, r1
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	bf04      	itt	eq
 800d9a2:	681a      	ldreq	r2, [r3, #0]
 800d9a4:	685b      	ldreq	r3, [r3, #4]
 800d9a6:	6063      	str	r3, [r4, #4]
 800d9a8:	bf04      	itt	eq
 800d9aa:	1852      	addeq	r2, r2, r1
 800d9ac:	6022      	streq	r2, [r4, #0]
 800d9ae:	6004      	str	r4, [r0, #0]
 800d9b0:	e7ec      	b.n	800d98c <_free_r+0x24>
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	685a      	ldr	r2, [r3, #4]
 800d9b6:	b10a      	cbz	r2, 800d9bc <_free_r+0x54>
 800d9b8:	42a2      	cmp	r2, r4
 800d9ba:	d9fa      	bls.n	800d9b2 <_free_r+0x4a>
 800d9bc:	6819      	ldr	r1, [r3, #0]
 800d9be:	1858      	adds	r0, r3, r1
 800d9c0:	42a0      	cmp	r0, r4
 800d9c2:	d10b      	bne.n	800d9dc <_free_r+0x74>
 800d9c4:	6820      	ldr	r0, [r4, #0]
 800d9c6:	4401      	add	r1, r0
 800d9c8:	1858      	adds	r0, r3, r1
 800d9ca:	4282      	cmp	r2, r0
 800d9cc:	6019      	str	r1, [r3, #0]
 800d9ce:	d1dd      	bne.n	800d98c <_free_r+0x24>
 800d9d0:	6810      	ldr	r0, [r2, #0]
 800d9d2:	6852      	ldr	r2, [r2, #4]
 800d9d4:	605a      	str	r2, [r3, #4]
 800d9d6:	4401      	add	r1, r0
 800d9d8:	6019      	str	r1, [r3, #0]
 800d9da:	e7d7      	b.n	800d98c <_free_r+0x24>
 800d9dc:	d902      	bls.n	800d9e4 <_free_r+0x7c>
 800d9de:	230c      	movs	r3, #12
 800d9e0:	602b      	str	r3, [r5, #0]
 800d9e2:	e7d3      	b.n	800d98c <_free_r+0x24>
 800d9e4:	6820      	ldr	r0, [r4, #0]
 800d9e6:	1821      	adds	r1, r4, r0
 800d9e8:	428a      	cmp	r2, r1
 800d9ea:	bf04      	itt	eq
 800d9ec:	6811      	ldreq	r1, [r2, #0]
 800d9ee:	6852      	ldreq	r2, [r2, #4]
 800d9f0:	6062      	str	r2, [r4, #4]
 800d9f2:	bf04      	itt	eq
 800d9f4:	1809      	addeq	r1, r1, r0
 800d9f6:	6021      	streq	r1, [r4, #0]
 800d9f8:	605c      	str	r4, [r3, #4]
 800d9fa:	e7c7      	b.n	800d98c <_free_r+0x24>
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	bf00      	nop
 800da00:	20000474 	.word	0x20000474

0800da04 <_malloc_r>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	1ccd      	adds	r5, r1, #3
 800da08:	f025 0503 	bic.w	r5, r5, #3
 800da0c:	3508      	adds	r5, #8
 800da0e:	2d0c      	cmp	r5, #12
 800da10:	bf38      	it	cc
 800da12:	250c      	movcc	r5, #12
 800da14:	2d00      	cmp	r5, #0
 800da16:	4606      	mov	r6, r0
 800da18:	db01      	blt.n	800da1e <_malloc_r+0x1a>
 800da1a:	42a9      	cmp	r1, r5
 800da1c:	d903      	bls.n	800da26 <_malloc_r+0x22>
 800da1e:	230c      	movs	r3, #12
 800da20:	6033      	str	r3, [r6, #0]
 800da22:	2000      	movs	r0, #0
 800da24:	bd70      	pop	{r4, r5, r6, pc}
 800da26:	f000 fd60 	bl	800e4ea <__malloc_lock>
 800da2a:	4a21      	ldr	r2, [pc, #132]	; (800dab0 <_malloc_r+0xac>)
 800da2c:	6814      	ldr	r4, [r2, #0]
 800da2e:	4621      	mov	r1, r4
 800da30:	b991      	cbnz	r1, 800da58 <_malloc_r+0x54>
 800da32:	4c20      	ldr	r4, [pc, #128]	; (800dab4 <_malloc_r+0xb0>)
 800da34:	6823      	ldr	r3, [r4, #0]
 800da36:	b91b      	cbnz	r3, 800da40 <_malloc_r+0x3c>
 800da38:	4630      	mov	r0, r6
 800da3a:	f000 facf 	bl	800dfdc <_sbrk_r>
 800da3e:	6020      	str	r0, [r4, #0]
 800da40:	4629      	mov	r1, r5
 800da42:	4630      	mov	r0, r6
 800da44:	f000 faca 	bl	800dfdc <_sbrk_r>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d124      	bne.n	800da96 <_malloc_r+0x92>
 800da4c:	230c      	movs	r3, #12
 800da4e:	6033      	str	r3, [r6, #0]
 800da50:	4630      	mov	r0, r6
 800da52:	f000 fd4b 	bl	800e4ec <__malloc_unlock>
 800da56:	e7e4      	b.n	800da22 <_malloc_r+0x1e>
 800da58:	680b      	ldr	r3, [r1, #0]
 800da5a:	1b5b      	subs	r3, r3, r5
 800da5c:	d418      	bmi.n	800da90 <_malloc_r+0x8c>
 800da5e:	2b0b      	cmp	r3, #11
 800da60:	d90f      	bls.n	800da82 <_malloc_r+0x7e>
 800da62:	600b      	str	r3, [r1, #0]
 800da64:	50cd      	str	r5, [r1, r3]
 800da66:	18cc      	adds	r4, r1, r3
 800da68:	4630      	mov	r0, r6
 800da6a:	f000 fd3f 	bl	800e4ec <__malloc_unlock>
 800da6e:	f104 000b 	add.w	r0, r4, #11
 800da72:	1d23      	adds	r3, r4, #4
 800da74:	f020 0007 	bic.w	r0, r0, #7
 800da78:	1ac3      	subs	r3, r0, r3
 800da7a:	d0d3      	beq.n	800da24 <_malloc_r+0x20>
 800da7c:	425a      	negs	r2, r3
 800da7e:	50e2      	str	r2, [r4, r3]
 800da80:	e7d0      	b.n	800da24 <_malloc_r+0x20>
 800da82:	428c      	cmp	r4, r1
 800da84:	684b      	ldr	r3, [r1, #4]
 800da86:	bf16      	itet	ne
 800da88:	6063      	strne	r3, [r4, #4]
 800da8a:	6013      	streq	r3, [r2, #0]
 800da8c:	460c      	movne	r4, r1
 800da8e:	e7eb      	b.n	800da68 <_malloc_r+0x64>
 800da90:	460c      	mov	r4, r1
 800da92:	6849      	ldr	r1, [r1, #4]
 800da94:	e7cc      	b.n	800da30 <_malloc_r+0x2c>
 800da96:	1cc4      	adds	r4, r0, #3
 800da98:	f024 0403 	bic.w	r4, r4, #3
 800da9c:	42a0      	cmp	r0, r4
 800da9e:	d005      	beq.n	800daac <_malloc_r+0xa8>
 800daa0:	1a21      	subs	r1, r4, r0
 800daa2:	4630      	mov	r0, r6
 800daa4:	f000 fa9a 	bl	800dfdc <_sbrk_r>
 800daa8:	3001      	adds	r0, #1
 800daaa:	d0cf      	beq.n	800da4c <_malloc_r+0x48>
 800daac:	6025      	str	r5, [r4, #0]
 800daae:	e7db      	b.n	800da68 <_malloc_r+0x64>
 800dab0:	20000474 	.word	0x20000474
 800dab4:	20000478 	.word	0x20000478

0800dab8 <__ssputs_r>:
 800dab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dabc:	688e      	ldr	r6, [r1, #8]
 800dabe:	429e      	cmp	r6, r3
 800dac0:	4682      	mov	sl, r0
 800dac2:	460c      	mov	r4, r1
 800dac4:	4690      	mov	r8, r2
 800dac6:	4699      	mov	r9, r3
 800dac8:	d837      	bhi.n	800db3a <__ssputs_r+0x82>
 800daca:	898a      	ldrh	r2, [r1, #12]
 800dacc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dad0:	d031      	beq.n	800db36 <__ssputs_r+0x7e>
 800dad2:	6825      	ldr	r5, [r4, #0]
 800dad4:	6909      	ldr	r1, [r1, #16]
 800dad6:	1a6f      	subs	r7, r5, r1
 800dad8:	6965      	ldr	r5, [r4, #20]
 800dada:	2302      	movs	r3, #2
 800dadc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dae0:	fb95 f5f3 	sdiv	r5, r5, r3
 800dae4:	f109 0301 	add.w	r3, r9, #1
 800dae8:	443b      	add	r3, r7
 800daea:	429d      	cmp	r5, r3
 800daec:	bf38      	it	cc
 800daee:	461d      	movcc	r5, r3
 800daf0:	0553      	lsls	r3, r2, #21
 800daf2:	d530      	bpl.n	800db56 <__ssputs_r+0x9e>
 800daf4:	4629      	mov	r1, r5
 800daf6:	f7ff ff85 	bl	800da04 <_malloc_r>
 800dafa:	4606      	mov	r6, r0
 800dafc:	b950      	cbnz	r0, 800db14 <__ssputs_r+0x5c>
 800dafe:	230c      	movs	r3, #12
 800db00:	f8ca 3000 	str.w	r3, [sl]
 800db04:	89a3      	ldrh	r3, [r4, #12]
 800db06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db0a:	81a3      	strh	r3, [r4, #12]
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295
 800db10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db14:	463a      	mov	r2, r7
 800db16:	6921      	ldr	r1, [r4, #16]
 800db18:	f7ff fc32 	bl	800d380 <memcpy>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db26:	81a3      	strh	r3, [r4, #12]
 800db28:	6126      	str	r6, [r4, #16]
 800db2a:	6165      	str	r5, [r4, #20]
 800db2c:	443e      	add	r6, r7
 800db2e:	1bed      	subs	r5, r5, r7
 800db30:	6026      	str	r6, [r4, #0]
 800db32:	60a5      	str	r5, [r4, #8]
 800db34:	464e      	mov	r6, r9
 800db36:	454e      	cmp	r6, r9
 800db38:	d900      	bls.n	800db3c <__ssputs_r+0x84>
 800db3a:	464e      	mov	r6, r9
 800db3c:	4632      	mov	r2, r6
 800db3e:	4641      	mov	r1, r8
 800db40:	6820      	ldr	r0, [r4, #0]
 800db42:	f000 fcb9 	bl	800e4b8 <memmove>
 800db46:	68a3      	ldr	r3, [r4, #8]
 800db48:	1b9b      	subs	r3, r3, r6
 800db4a:	60a3      	str	r3, [r4, #8]
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	441e      	add	r6, r3
 800db50:	6026      	str	r6, [r4, #0]
 800db52:	2000      	movs	r0, #0
 800db54:	e7dc      	b.n	800db10 <__ssputs_r+0x58>
 800db56:	462a      	mov	r2, r5
 800db58:	f000 fcc9 	bl	800e4ee <_realloc_r>
 800db5c:	4606      	mov	r6, r0
 800db5e:	2800      	cmp	r0, #0
 800db60:	d1e2      	bne.n	800db28 <__ssputs_r+0x70>
 800db62:	6921      	ldr	r1, [r4, #16]
 800db64:	4650      	mov	r0, sl
 800db66:	f7ff feff 	bl	800d968 <_free_r>
 800db6a:	e7c8      	b.n	800dafe <__ssputs_r+0x46>

0800db6c <_svfiprintf_r>:
 800db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	461d      	mov	r5, r3
 800db72:	898b      	ldrh	r3, [r1, #12]
 800db74:	061f      	lsls	r7, r3, #24
 800db76:	b09d      	sub	sp, #116	; 0x74
 800db78:	4680      	mov	r8, r0
 800db7a:	460c      	mov	r4, r1
 800db7c:	4616      	mov	r6, r2
 800db7e:	d50f      	bpl.n	800dba0 <_svfiprintf_r+0x34>
 800db80:	690b      	ldr	r3, [r1, #16]
 800db82:	b96b      	cbnz	r3, 800dba0 <_svfiprintf_r+0x34>
 800db84:	2140      	movs	r1, #64	; 0x40
 800db86:	f7ff ff3d 	bl	800da04 <_malloc_r>
 800db8a:	6020      	str	r0, [r4, #0]
 800db8c:	6120      	str	r0, [r4, #16]
 800db8e:	b928      	cbnz	r0, 800db9c <_svfiprintf_r+0x30>
 800db90:	230c      	movs	r3, #12
 800db92:	f8c8 3000 	str.w	r3, [r8]
 800db96:	f04f 30ff 	mov.w	r0, #4294967295
 800db9a:	e0c8      	b.n	800dd2e <_svfiprintf_r+0x1c2>
 800db9c:	2340      	movs	r3, #64	; 0x40
 800db9e:	6163      	str	r3, [r4, #20]
 800dba0:	2300      	movs	r3, #0
 800dba2:	9309      	str	r3, [sp, #36]	; 0x24
 800dba4:	2320      	movs	r3, #32
 800dba6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbaa:	2330      	movs	r3, #48	; 0x30
 800dbac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbb0:	9503      	str	r5, [sp, #12]
 800dbb2:	f04f 0b01 	mov.w	fp, #1
 800dbb6:	4637      	mov	r7, r6
 800dbb8:	463d      	mov	r5, r7
 800dbba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dbbe:	b10b      	cbz	r3, 800dbc4 <_svfiprintf_r+0x58>
 800dbc0:	2b25      	cmp	r3, #37	; 0x25
 800dbc2:	d13e      	bne.n	800dc42 <_svfiprintf_r+0xd6>
 800dbc4:	ebb7 0a06 	subs.w	sl, r7, r6
 800dbc8:	d00b      	beq.n	800dbe2 <_svfiprintf_r+0x76>
 800dbca:	4653      	mov	r3, sl
 800dbcc:	4632      	mov	r2, r6
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4640      	mov	r0, r8
 800dbd2:	f7ff ff71 	bl	800dab8 <__ssputs_r>
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	f000 80a4 	beq.w	800dd24 <_svfiprintf_r+0x1b8>
 800dbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbde:	4453      	add	r3, sl
 800dbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe2:	783b      	ldrb	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f000 809d 	beq.w	800dd24 <_svfiprintf_r+0x1b8>
 800dbea:	2300      	movs	r3, #0
 800dbec:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbf4:	9304      	str	r3, [sp, #16]
 800dbf6:	9307      	str	r3, [sp, #28]
 800dbf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbfc:	931a      	str	r3, [sp, #104]	; 0x68
 800dbfe:	462f      	mov	r7, r5
 800dc00:	2205      	movs	r2, #5
 800dc02:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dc06:	4850      	ldr	r0, [pc, #320]	; (800dd48 <_svfiprintf_r+0x1dc>)
 800dc08:	f7f2 faea 	bl	80001e0 <memchr>
 800dc0c:	9b04      	ldr	r3, [sp, #16]
 800dc0e:	b9d0      	cbnz	r0, 800dc46 <_svfiprintf_r+0xda>
 800dc10:	06d9      	lsls	r1, r3, #27
 800dc12:	bf44      	itt	mi
 800dc14:	2220      	movmi	r2, #32
 800dc16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc1a:	071a      	lsls	r2, r3, #28
 800dc1c:	bf44      	itt	mi
 800dc1e:	222b      	movmi	r2, #43	; 0x2b
 800dc20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc24:	782a      	ldrb	r2, [r5, #0]
 800dc26:	2a2a      	cmp	r2, #42	; 0x2a
 800dc28:	d015      	beq.n	800dc56 <_svfiprintf_r+0xea>
 800dc2a:	9a07      	ldr	r2, [sp, #28]
 800dc2c:	462f      	mov	r7, r5
 800dc2e:	2000      	movs	r0, #0
 800dc30:	250a      	movs	r5, #10
 800dc32:	4639      	mov	r1, r7
 800dc34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc38:	3b30      	subs	r3, #48	; 0x30
 800dc3a:	2b09      	cmp	r3, #9
 800dc3c:	d94d      	bls.n	800dcda <_svfiprintf_r+0x16e>
 800dc3e:	b1b8      	cbz	r0, 800dc70 <_svfiprintf_r+0x104>
 800dc40:	e00f      	b.n	800dc62 <_svfiprintf_r+0xf6>
 800dc42:	462f      	mov	r7, r5
 800dc44:	e7b8      	b.n	800dbb8 <_svfiprintf_r+0x4c>
 800dc46:	4a40      	ldr	r2, [pc, #256]	; (800dd48 <_svfiprintf_r+0x1dc>)
 800dc48:	1a80      	subs	r0, r0, r2
 800dc4a:	fa0b f000 	lsl.w	r0, fp, r0
 800dc4e:	4318      	orrs	r0, r3
 800dc50:	9004      	str	r0, [sp, #16]
 800dc52:	463d      	mov	r5, r7
 800dc54:	e7d3      	b.n	800dbfe <_svfiprintf_r+0x92>
 800dc56:	9a03      	ldr	r2, [sp, #12]
 800dc58:	1d11      	adds	r1, r2, #4
 800dc5a:	6812      	ldr	r2, [r2, #0]
 800dc5c:	9103      	str	r1, [sp, #12]
 800dc5e:	2a00      	cmp	r2, #0
 800dc60:	db01      	blt.n	800dc66 <_svfiprintf_r+0xfa>
 800dc62:	9207      	str	r2, [sp, #28]
 800dc64:	e004      	b.n	800dc70 <_svfiprintf_r+0x104>
 800dc66:	4252      	negs	r2, r2
 800dc68:	f043 0302 	orr.w	r3, r3, #2
 800dc6c:	9207      	str	r2, [sp, #28]
 800dc6e:	9304      	str	r3, [sp, #16]
 800dc70:	783b      	ldrb	r3, [r7, #0]
 800dc72:	2b2e      	cmp	r3, #46	; 0x2e
 800dc74:	d10c      	bne.n	800dc90 <_svfiprintf_r+0x124>
 800dc76:	787b      	ldrb	r3, [r7, #1]
 800dc78:	2b2a      	cmp	r3, #42	; 0x2a
 800dc7a:	d133      	bne.n	800dce4 <_svfiprintf_r+0x178>
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	1d1a      	adds	r2, r3, #4
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	9203      	str	r2, [sp, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	bfb8      	it	lt
 800dc88:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc8c:	3702      	adds	r7, #2
 800dc8e:	9305      	str	r3, [sp, #20]
 800dc90:	4d2e      	ldr	r5, [pc, #184]	; (800dd4c <_svfiprintf_r+0x1e0>)
 800dc92:	7839      	ldrb	r1, [r7, #0]
 800dc94:	2203      	movs	r2, #3
 800dc96:	4628      	mov	r0, r5
 800dc98:	f7f2 faa2 	bl	80001e0 <memchr>
 800dc9c:	b138      	cbz	r0, 800dcae <_svfiprintf_r+0x142>
 800dc9e:	2340      	movs	r3, #64	; 0x40
 800dca0:	1b40      	subs	r0, r0, r5
 800dca2:	fa03 f000 	lsl.w	r0, r3, r0
 800dca6:	9b04      	ldr	r3, [sp, #16]
 800dca8:	4303      	orrs	r3, r0
 800dcaa:	3701      	adds	r7, #1
 800dcac:	9304      	str	r3, [sp, #16]
 800dcae:	7839      	ldrb	r1, [r7, #0]
 800dcb0:	4827      	ldr	r0, [pc, #156]	; (800dd50 <_svfiprintf_r+0x1e4>)
 800dcb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcb6:	2206      	movs	r2, #6
 800dcb8:	1c7e      	adds	r6, r7, #1
 800dcba:	f7f2 fa91 	bl	80001e0 <memchr>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d038      	beq.n	800dd34 <_svfiprintf_r+0x1c8>
 800dcc2:	4b24      	ldr	r3, [pc, #144]	; (800dd54 <_svfiprintf_r+0x1e8>)
 800dcc4:	bb13      	cbnz	r3, 800dd0c <_svfiprintf_r+0x1a0>
 800dcc6:	9b03      	ldr	r3, [sp, #12]
 800dcc8:	3307      	adds	r3, #7
 800dcca:	f023 0307 	bic.w	r3, r3, #7
 800dcce:	3308      	adds	r3, #8
 800dcd0:	9303      	str	r3, [sp, #12]
 800dcd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd4:	444b      	add	r3, r9
 800dcd6:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd8:	e76d      	b.n	800dbb6 <_svfiprintf_r+0x4a>
 800dcda:	fb05 3202 	mla	r2, r5, r2, r3
 800dcde:	2001      	movs	r0, #1
 800dce0:	460f      	mov	r7, r1
 800dce2:	e7a6      	b.n	800dc32 <_svfiprintf_r+0xc6>
 800dce4:	2300      	movs	r3, #0
 800dce6:	3701      	adds	r7, #1
 800dce8:	9305      	str	r3, [sp, #20]
 800dcea:	4619      	mov	r1, r3
 800dcec:	250a      	movs	r5, #10
 800dcee:	4638      	mov	r0, r7
 800dcf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcf4:	3a30      	subs	r2, #48	; 0x30
 800dcf6:	2a09      	cmp	r2, #9
 800dcf8:	d903      	bls.n	800dd02 <_svfiprintf_r+0x196>
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d0c8      	beq.n	800dc90 <_svfiprintf_r+0x124>
 800dcfe:	9105      	str	r1, [sp, #20]
 800dd00:	e7c6      	b.n	800dc90 <_svfiprintf_r+0x124>
 800dd02:	fb05 2101 	mla	r1, r5, r1, r2
 800dd06:	2301      	movs	r3, #1
 800dd08:	4607      	mov	r7, r0
 800dd0a:	e7f0      	b.n	800dcee <_svfiprintf_r+0x182>
 800dd0c:	ab03      	add	r3, sp, #12
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	4622      	mov	r2, r4
 800dd12:	4b11      	ldr	r3, [pc, #68]	; (800dd58 <_svfiprintf_r+0x1ec>)
 800dd14:	a904      	add	r1, sp, #16
 800dd16:	4640      	mov	r0, r8
 800dd18:	f7fe f80e 	bl	800bd38 <_printf_float>
 800dd1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dd20:	4681      	mov	r9, r0
 800dd22:	d1d6      	bne.n	800dcd2 <_svfiprintf_r+0x166>
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	065b      	lsls	r3, r3, #25
 800dd28:	f53f af35 	bmi.w	800db96 <_svfiprintf_r+0x2a>
 800dd2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd2e:	b01d      	add	sp, #116	; 0x74
 800dd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd34:	ab03      	add	r3, sp, #12
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	4622      	mov	r2, r4
 800dd3a:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <_svfiprintf_r+0x1ec>)
 800dd3c:	a904      	add	r1, sp, #16
 800dd3e:	4640      	mov	r0, r8
 800dd40:	f7fe fab0 	bl	800c2a4 <_printf_i>
 800dd44:	e7ea      	b.n	800dd1c <_svfiprintf_r+0x1b0>
 800dd46:	bf00      	nop
 800dd48:	0800eccc 	.word	0x0800eccc
 800dd4c:	0800ecd2 	.word	0x0800ecd2
 800dd50:	0800ecd6 	.word	0x0800ecd6
 800dd54:	0800bd39 	.word	0x0800bd39
 800dd58:	0800dab9 	.word	0x0800dab9

0800dd5c <__sfputc_r>:
 800dd5c:	6893      	ldr	r3, [r2, #8]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	b410      	push	{r4}
 800dd64:	6093      	str	r3, [r2, #8]
 800dd66:	da08      	bge.n	800dd7a <__sfputc_r+0x1e>
 800dd68:	6994      	ldr	r4, [r2, #24]
 800dd6a:	42a3      	cmp	r3, r4
 800dd6c:	db01      	blt.n	800dd72 <__sfputc_r+0x16>
 800dd6e:	290a      	cmp	r1, #10
 800dd70:	d103      	bne.n	800dd7a <__sfputc_r+0x1e>
 800dd72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd76:	f000 b985 	b.w	800e084 <__swbuf_r>
 800dd7a:	6813      	ldr	r3, [r2, #0]
 800dd7c:	1c58      	adds	r0, r3, #1
 800dd7e:	6010      	str	r0, [r2, #0]
 800dd80:	7019      	strb	r1, [r3, #0]
 800dd82:	4608      	mov	r0, r1
 800dd84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <__sfputs_r>:
 800dd8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd8c:	4606      	mov	r6, r0
 800dd8e:	460f      	mov	r7, r1
 800dd90:	4614      	mov	r4, r2
 800dd92:	18d5      	adds	r5, r2, r3
 800dd94:	42ac      	cmp	r4, r5
 800dd96:	d101      	bne.n	800dd9c <__sfputs_r+0x12>
 800dd98:	2000      	movs	r0, #0
 800dd9a:	e007      	b.n	800ddac <__sfputs_r+0x22>
 800dd9c:	463a      	mov	r2, r7
 800dd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7ff ffda 	bl	800dd5c <__sfputc_r>
 800dda8:	1c43      	adds	r3, r0, #1
 800ddaa:	d1f3      	bne.n	800dd94 <__sfputs_r+0xa>
 800ddac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddb0 <_vfiprintf_r>:
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	460c      	mov	r4, r1
 800ddb6:	b09d      	sub	sp, #116	; 0x74
 800ddb8:	4617      	mov	r7, r2
 800ddba:	461d      	mov	r5, r3
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	b118      	cbz	r0, 800ddc8 <_vfiprintf_r+0x18>
 800ddc0:	6983      	ldr	r3, [r0, #24]
 800ddc2:	b90b      	cbnz	r3, 800ddc8 <_vfiprintf_r+0x18>
 800ddc4:	f7ff fa3c 	bl	800d240 <__sinit>
 800ddc8:	4b7c      	ldr	r3, [pc, #496]	; (800dfbc <_vfiprintf_r+0x20c>)
 800ddca:	429c      	cmp	r4, r3
 800ddcc:	d158      	bne.n	800de80 <_vfiprintf_r+0xd0>
 800ddce:	6874      	ldr	r4, [r6, #4]
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	0718      	lsls	r0, r3, #28
 800ddd4:	d55e      	bpl.n	800de94 <_vfiprintf_r+0xe4>
 800ddd6:	6923      	ldr	r3, [r4, #16]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d05b      	beq.n	800de94 <_vfiprintf_r+0xe4>
 800dddc:	2300      	movs	r3, #0
 800ddde:	9309      	str	r3, [sp, #36]	; 0x24
 800dde0:	2320      	movs	r3, #32
 800dde2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dde6:	2330      	movs	r3, #48	; 0x30
 800dde8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddec:	9503      	str	r5, [sp, #12]
 800ddee:	f04f 0b01 	mov.w	fp, #1
 800ddf2:	46b8      	mov	r8, r7
 800ddf4:	4645      	mov	r5, r8
 800ddf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ddfa:	b10b      	cbz	r3, 800de00 <_vfiprintf_r+0x50>
 800ddfc:	2b25      	cmp	r3, #37	; 0x25
 800ddfe:	d154      	bne.n	800deaa <_vfiprintf_r+0xfa>
 800de00:	ebb8 0a07 	subs.w	sl, r8, r7
 800de04:	d00b      	beq.n	800de1e <_vfiprintf_r+0x6e>
 800de06:	4653      	mov	r3, sl
 800de08:	463a      	mov	r2, r7
 800de0a:	4621      	mov	r1, r4
 800de0c:	4630      	mov	r0, r6
 800de0e:	f7ff ffbc 	bl	800dd8a <__sfputs_r>
 800de12:	3001      	adds	r0, #1
 800de14:	f000 80c2 	beq.w	800df9c <_vfiprintf_r+0x1ec>
 800de18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de1a:	4453      	add	r3, sl
 800de1c:	9309      	str	r3, [sp, #36]	; 0x24
 800de1e:	f898 3000 	ldrb.w	r3, [r8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	f000 80ba 	beq.w	800df9c <_vfiprintf_r+0x1ec>
 800de28:	2300      	movs	r3, #0
 800de2a:	f04f 32ff 	mov.w	r2, #4294967295
 800de2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de32:	9304      	str	r3, [sp, #16]
 800de34:	9307      	str	r3, [sp, #28]
 800de36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de3a:	931a      	str	r3, [sp, #104]	; 0x68
 800de3c:	46a8      	mov	r8, r5
 800de3e:	2205      	movs	r2, #5
 800de40:	f818 1b01 	ldrb.w	r1, [r8], #1
 800de44:	485e      	ldr	r0, [pc, #376]	; (800dfc0 <_vfiprintf_r+0x210>)
 800de46:	f7f2 f9cb 	bl	80001e0 <memchr>
 800de4a:	9b04      	ldr	r3, [sp, #16]
 800de4c:	bb78      	cbnz	r0, 800deae <_vfiprintf_r+0xfe>
 800de4e:	06d9      	lsls	r1, r3, #27
 800de50:	bf44      	itt	mi
 800de52:	2220      	movmi	r2, #32
 800de54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800de58:	071a      	lsls	r2, r3, #28
 800de5a:	bf44      	itt	mi
 800de5c:	222b      	movmi	r2, #43	; 0x2b
 800de5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800de62:	782a      	ldrb	r2, [r5, #0]
 800de64:	2a2a      	cmp	r2, #42	; 0x2a
 800de66:	d02a      	beq.n	800debe <_vfiprintf_r+0x10e>
 800de68:	9a07      	ldr	r2, [sp, #28]
 800de6a:	46a8      	mov	r8, r5
 800de6c:	2000      	movs	r0, #0
 800de6e:	250a      	movs	r5, #10
 800de70:	4641      	mov	r1, r8
 800de72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de76:	3b30      	subs	r3, #48	; 0x30
 800de78:	2b09      	cmp	r3, #9
 800de7a:	d969      	bls.n	800df50 <_vfiprintf_r+0x1a0>
 800de7c:	b360      	cbz	r0, 800ded8 <_vfiprintf_r+0x128>
 800de7e:	e024      	b.n	800deca <_vfiprintf_r+0x11a>
 800de80:	4b50      	ldr	r3, [pc, #320]	; (800dfc4 <_vfiprintf_r+0x214>)
 800de82:	429c      	cmp	r4, r3
 800de84:	d101      	bne.n	800de8a <_vfiprintf_r+0xda>
 800de86:	68b4      	ldr	r4, [r6, #8]
 800de88:	e7a2      	b.n	800ddd0 <_vfiprintf_r+0x20>
 800de8a:	4b4f      	ldr	r3, [pc, #316]	; (800dfc8 <_vfiprintf_r+0x218>)
 800de8c:	429c      	cmp	r4, r3
 800de8e:	bf08      	it	eq
 800de90:	68f4      	ldreq	r4, [r6, #12]
 800de92:	e79d      	b.n	800ddd0 <_vfiprintf_r+0x20>
 800de94:	4621      	mov	r1, r4
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f958 	bl	800e14c <__swsetup_r>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d09d      	beq.n	800dddc <_vfiprintf_r+0x2c>
 800dea0:	f04f 30ff 	mov.w	r0, #4294967295
 800dea4:	b01d      	add	sp, #116	; 0x74
 800dea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deaa:	46a8      	mov	r8, r5
 800deac:	e7a2      	b.n	800ddf4 <_vfiprintf_r+0x44>
 800deae:	4a44      	ldr	r2, [pc, #272]	; (800dfc0 <_vfiprintf_r+0x210>)
 800deb0:	1a80      	subs	r0, r0, r2
 800deb2:	fa0b f000 	lsl.w	r0, fp, r0
 800deb6:	4318      	orrs	r0, r3
 800deb8:	9004      	str	r0, [sp, #16]
 800deba:	4645      	mov	r5, r8
 800debc:	e7be      	b.n	800de3c <_vfiprintf_r+0x8c>
 800debe:	9a03      	ldr	r2, [sp, #12]
 800dec0:	1d11      	adds	r1, r2, #4
 800dec2:	6812      	ldr	r2, [r2, #0]
 800dec4:	9103      	str	r1, [sp, #12]
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	db01      	blt.n	800dece <_vfiprintf_r+0x11e>
 800deca:	9207      	str	r2, [sp, #28]
 800decc:	e004      	b.n	800ded8 <_vfiprintf_r+0x128>
 800dece:	4252      	negs	r2, r2
 800ded0:	f043 0302 	orr.w	r3, r3, #2
 800ded4:	9207      	str	r2, [sp, #28]
 800ded6:	9304      	str	r3, [sp, #16]
 800ded8:	f898 3000 	ldrb.w	r3, [r8]
 800dedc:	2b2e      	cmp	r3, #46	; 0x2e
 800dede:	d10e      	bne.n	800defe <_vfiprintf_r+0x14e>
 800dee0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dee4:	2b2a      	cmp	r3, #42	; 0x2a
 800dee6:	d138      	bne.n	800df5a <_vfiprintf_r+0x1aa>
 800dee8:	9b03      	ldr	r3, [sp, #12]
 800deea:	1d1a      	adds	r2, r3, #4
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	9203      	str	r2, [sp, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	bfb8      	it	lt
 800def4:	f04f 33ff 	movlt.w	r3, #4294967295
 800def8:	f108 0802 	add.w	r8, r8, #2
 800defc:	9305      	str	r3, [sp, #20]
 800defe:	4d33      	ldr	r5, [pc, #204]	; (800dfcc <_vfiprintf_r+0x21c>)
 800df00:	f898 1000 	ldrb.w	r1, [r8]
 800df04:	2203      	movs	r2, #3
 800df06:	4628      	mov	r0, r5
 800df08:	f7f2 f96a 	bl	80001e0 <memchr>
 800df0c:	b140      	cbz	r0, 800df20 <_vfiprintf_r+0x170>
 800df0e:	2340      	movs	r3, #64	; 0x40
 800df10:	1b40      	subs	r0, r0, r5
 800df12:	fa03 f000 	lsl.w	r0, r3, r0
 800df16:	9b04      	ldr	r3, [sp, #16]
 800df18:	4303      	orrs	r3, r0
 800df1a:	f108 0801 	add.w	r8, r8, #1
 800df1e:	9304      	str	r3, [sp, #16]
 800df20:	f898 1000 	ldrb.w	r1, [r8]
 800df24:	482a      	ldr	r0, [pc, #168]	; (800dfd0 <_vfiprintf_r+0x220>)
 800df26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df2a:	2206      	movs	r2, #6
 800df2c:	f108 0701 	add.w	r7, r8, #1
 800df30:	f7f2 f956 	bl	80001e0 <memchr>
 800df34:	2800      	cmp	r0, #0
 800df36:	d037      	beq.n	800dfa8 <_vfiprintf_r+0x1f8>
 800df38:	4b26      	ldr	r3, [pc, #152]	; (800dfd4 <_vfiprintf_r+0x224>)
 800df3a:	bb1b      	cbnz	r3, 800df84 <_vfiprintf_r+0x1d4>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	3307      	adds	r3, #7
 800df40:	f023 0307 	bic.w	r3, r3, #7
 800df44:	3308      	adds	r3, #8
 800df46:	9303      	str	r3, [sp, #12]
 800df48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4a:	444b      	add	r3, r9
 800df4c:	9309      	str	r3, [sp, #36]	; 0x24
 800df4e:	e750      	b.n	800ddf2 <_vfiprintf_r+0x42>
 800df50:	fb05 3202 	mla	r2, r5, r2, r3
 800df54:	2001      	movs	r0, #1
 800df56:	4688      	mov	r8, r1
 800df58:	e78a      	b.n	800de70 <_vfiprintf_r+0xc0>
 800df5a:	2300      	movs	r3, #0
 800df5c:	f108 0801 	add.w	r8, r8, #1
 800df60:	9305      	str	r3, [sp, #20]
 800df62:	4619      	mov	r1, r3
 800df64:	250a      	movs	r5, #10
 800df66:	4640      	mov	r0, r8
 800df68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df6c:	3a30      	subs	r2, #48	; 0x30
 800df6e:	2a09      	cmp	r2, #9
 800df70:	d903      	bls.n	800df7a <_vfiprintf_r+0x1ca>
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0c3      	beq.n	800defe <_vfiprintf_r+0x14e>
 800df76:	9105      	str	r1, [sp, #20]
 800df78:	e7c1      	b.n	800defe <_vfiprintf_r+0x14e>
 800df7a:	fb05 2101 	mla	r1, r5, r1, r2
 800df7e:	2301      	movs	r3, #1
 800df80:	4680      	mov	r8, r0
 800df82:	e7f0      	b.n	800df66 <_vfiprintf_r+0x1b6>
 800df84:	ab03      	add	r3, sp, #12
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	4622      	mov	r2, r4
 800df8a:	4b13      	ldr	r3, [pc, #76]	; (800dfd8 <_vfiprintf_r+0x228>)
 800df8c:	a904      	add	r1, sp, #16
 800df8e:	4630      	mov	r0, r6
 800df90:	f7fd fed2 	bl	800bd38 <_printf_float>
 800df94:	f1b0 3fff 	cmp.w	r0, #4294967295
 800df98:	4681      	mov	r9, r0
 800df9a:	d1d5      	bne.n	800df48 <_vfiprintf_r+0x198>
 800df9c:	89a3      	ldrh	r3, [r4, #12]
 800df9e:	065b      	lsls	r3, r3, #25
 800dfa0:	f53f af7e 	bmi.w	800dea0 <_vfiprintf_r+0xf0>
 800dfa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfa6:	e77d      	b.n	800dea4 <_vfiprintf_r+0xf4>
 800dfa8:	ab03      	add	r3, sp, #12
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	4622      	mov	r2, r4
 800dfae:	4b0a      	ldr	r3, [pc, #40]	; (800dfd8 <_vfiprintf_r+0x228>)
 800dfb0:	a904      	add	r1, sp, #16
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f7fe f976 	bl	800c2a4 <_printf_i>
 800dfb8:	e7ec      	b.n	800df94 <_vfiprintf_r+0x1e4>
 800dfba:	bf00      	nop
 800dfbc:	0800eb90 	.word	0x0800eb90
 800dfc0:	0800eccc 	.word	0x0800eccc
 800dfc4:	0800ebb0 	.word	0x0800ebb0
 800dfc8:	0800eb70 	.word	0x0800eb70
 800dfcc:	0800ecd2 	.word	0x0800ecd2
 800dfd0:	0800ecd6 	.word	0x0800ecd6
 800dfd4:	0800bd39 	.word	0x0800bd39
 800dfd8:	0800dd8b 	.word	0x0800dd8b

0800dfdc <_sbrk_r>:
 800dfdc:	b538      	push	{r3, r4, r5, lr}
 800dfde:	4c06      	ldr	r4, [pc, #24]	; (800dff8 <_sbrk_r+0x1c>)
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	6023      	str	r3, [r4, #0]
 800dfe8:	f7f5 fa8c 	bl	8003504 <_sbrk>
 800dfec:	1c43      	adds	r3, r0, #1
 800dfee:	d102      	bne.n	800dff6 <_sbrk_r+0x1a>
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	b103      	cbz	r3, 800dff6 <_sbrk_r+0x1a>
 800dff4:	602b      	str	r3, [r5, #0]
 800dff6:	bd38      	pop	{r3, r4, r5, pc}
 800dff8:	2000288c 	.word	0x2000288c

0800dffc <__sread>:
 800dffc:	b510      	push	{r4, lr}
 800dffe:	460c      	mov	r4, r1
 800e000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e004:	f000 fa9a 	bl	800e53c <_read_r>
 800e008:	2800      	cmp	r0, #0
 800e00a:	bfab      	itete	ge
 800e00c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e00e:	89a3      	ldrhlt	r3, [r4, #12]
 800e010:	181b      	addge	r3, r3, r0
 800e012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e016:	bfac      	ite	ge
 800e018:	6563      	strge	r3, [r4, #84]	; 0x54
 800e01a:	81a3      	strhlt	r3, [r4, #12]
 800e01c:	bd10      	pop	{r4, pc}

0800e01e <__swrite>:
 800e01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e022:	461f      	mov	r7, r3
 800e024:	898b      	ldrh	r3, [r1, #12]
 800e026:	05db      	lsls	r3, r3, #23
 800e028:	4605      	mov	r5, r0
 800e02a:	460c      	mov	r4, r1
 800e02c:	4616      	mov	r6, r2
 800e02e:	d505      	bpl.n	800e03c <__swrite+0x1e>
 800e030:	2302      	movs	r3, #2
 800e032:	2200      	movs	r2, #0
 800e034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e038:	f000 f9b6 	bl	800e3a8 <_lseek_r>
 800e03c:	89a3      	ldrh	r3, [r4, #12]
 800e03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e046:	81a3      	strh	r3, [r4, #12]
 800e048:	4632      	mov	r2, r6
 800e04a:	463b      	mov	r3, r7
 800e04c:	4628      	mov	r0, r5
 800e04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e052:	f000 b869 	b.w	800e128 <_write_r>

0800e056 <__sseek>:
 800e056:	b510      	push	{r4, lr}
 800e058:	460c      	mov	r4, r1
 800e05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e05e:	f000 f9a3 	bl	800e3a8 <_lseek_r>
 800e062:	1c43      	adds	r3, r0, #1
 800e064:	89a3      	ldrh	r3, [r4, #12]
 800e066:	bf15      	itete	ne
 800e068:	6560      	strne	r0, [r4, #84]	; 0x54
 800e06a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e06e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e072:	81a3      	strheq	r3, [r4, #12]
 800e074:	bf18      	it	ne
 800e076:	81a3      	strhne	r3, [r4, #12]
 800e078:	bd10      	pop	{r4, pc}

0800e07a <__sclose>:
 800e07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e07e:	f000 b8d3 	b.w	800e228 <_close_r>
	...

0800e084 <__swbuf_r>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	460e      	mov	r6, r1
 800e088:	4614      	mov	r4, r2
 800e08a:	4605      	mov	r5, r0
 800e08c:	b118      	cbz	r0, 800e096 <__swbuf_r+0x12>
 800e08e:	6983      	ldr	r3, [r0, #24]
 800e090:	b90b      	cbnz	r3, 800e096 <__swbuf_r+0x12>
 800e092:	f7ff f8d5 	bl	800d240 <__sinit>
 800e096:	4b21      	ldr	r3, [pc, #132]	; (800e11c <__swbuf_r+0x98>)
 800e098:	429c      	cmp	r4, r3
 800e09a:	d12a      	bne.n	800e0f2 <__swbuf_r+0x6e>
 800e09c:	686c      	ldr	r4, [r5, #4]
 800e09e:	69a3      	ldr	r3, [r4, #24]
 800e0a0:	60a3      	str	r3, [r4, #8]
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	071a      	lsls	r2, r3, #28
 800e0a6:	d52e      	bpl.n	800e106 <__swbuf_r+0x82>
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	b363      	cbz	r3, 800e106 <__swbuf_r+0x82>
 800e0ac:	6923      	ldr	r3, [r4, #16]
 800e0ae:	6820      	ldr	r0, [r4, #0]
 800e0b0:	1ac0      	subs	r0, r0, r3
 800e0b2:	6963      	ldr	r3, [r4, #20]
 800e0b4:	b2f6      	uxtb	r6, r6
 800e0b6:	4283      	cmp	r3, r0
 800e0b8:	4637      	mov	r7, r6
 800e0ba:	dc04      	bgt.n	800e0c6 <__swbuf_r+0x42>
 800e0bc:	4621      	mov	r1, r4
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f000 f948 	bl	800e354 <_fflush_r>
 800e0c4:	bb28      	cbnz	r0, 800e112 <__swbuf_r+0x8e>
 800e0c6:	68a3      	ldr	r3, [r4, #8]
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	60a3      	str	r3, [r4, #8]
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	1c5a      	adds	r2, r3, #1
 800e0d0:	6022      	str	r2, [r4, #0]
 800e0d2:	701e      	strb	r6, [r3, #0]
 800e0d4:	6963      	ldr	r3, [r4, #20]
 800e0d6:	3001      	adds	r0, #1
 800e0d8:	4283      	cmp	r3, r0
 800e0da:	d004      	beq.n	800e0e6 <__swbuf_r+0x62>
 800e0dc:	89a3      	ldrh	r3, [r4, #12]
 800e0de:	07db      	lsls	r3, r3, #31
 800e0e0:	d519      	bpl.n	800e116 <__swbuf_r+0x92>
 800e0e2:	2e0a      	cmp	r6, #10
 800e0e4:	d117      	bne.n	800e116 <__swbuf_r+0x92>
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f000 f933 	bl	800e354 <_fflush_r>
 800e0ee:	b190      	cbz	r0, 800e116 <__swbuf_r+0x92>
 800e0f0:	e00f      	b.n	800e112 <__swbuf_r+0x8e>
 800e0f2:	4b0b      	ldr	r3, [pc, #44]	; (800e120 <__swbuf_r+0x9c>)
 800e0f4:	429c      	cmp	r4, r3
 800e0f6:	d101      	bne.n	800e0fc <__swbuf_r+0x78>
 800e0f8:	68ac      	ldr	r4, [r5, #8]
 800e0fa:	e7d0      	b.n	800e09e <__swbuf_r+0x1a>
 800e0fc:	4b09      	ldr	r3, [pc, #36]	; (800e124 <__swbuf_r+0xa0>)
 800e0fe:	429c      	cmp	r4, r3
 800e100:	bf08      	it	eq
 800e102:	68ec      	ldreq	r4, [r5, #12]
 800e104:	e7cb      	b.n	800e09e <__swbuf_r+0x1a>
 800e106:	4621      	mov	r1, r4
 800e108:	4628      	mov	r0, r5
 800e10a:	f000 f81f 	bl	800e14c <__swsetup_r>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d0cc      	beq.n	800e0ac <__swbuf_r+0x28>
 800e112:	f04f 37ff 	mov.w	r7, #4294967295
 800e116:	4638      	mov	r0, r7
 800e118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e11a:	bf00      	nop
 800e11c:	0800eb90 	.word	0x0800eb90
 800e120:	0800ebb0 	.word	0x0800ebb0
 800e124:	0800eb70 	.word	0x0800eb70

0800e128 <_write_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4c07      	ldr	r4, [pc, #28]	; (800e148 <_write_r+0x20>)
 800e12c:	4605      	mov	r5, r0
 800e12e:	4608      	mov	r0, r1
 800e130:	4611      	mov	r1, r2
 800e132:	2200      	movs	r2, #0
 800e134:	6022      	str	r2, [r4, #0]
 800e136:	461a      	mov	r2, r3
 800e138:	f7f4 fd75 	bl	8002c26 <_write>
 800e13c:	1c43      	adds	r3, r0, #1
 800e13e:	d102      	bne.n	800e146 <_write_r+0x1e>
 800e140:	6823      	ldr	r3, [r4, #0]
 800e142:	b103      	cbz	r3, 800e146 <_write_r+0x1e>
 800e144:	602b      	str	r3, [r5, #0]
 800e146:	bd38      	pop	{r3, r4, r5, pc}
 800e148:	2000288c 	.word	0x2000288c

0800e14c <__swsetup_r>:
 800e14c:	4b32      	ldr	r3, [pc, #200]	; (800e218 <__swsetup_r+0xcc>)
 800e14e:	b570      	push	{r4, r5, r6, lr}
 800e150:	681d      	ldr	r5, [r3, #0]
 800e152:	4606      	mov	r6, r0
 800e154:	460c      	mov	r4, r1
 800e156:	b125      	cbz	r5, 800e162 <__swsetup_r+0x16>
 800e158:	69ab      	ldr	r3, [r5, #24]
 800e15a:	b913      	cbnz	r3, 800e162 <__swsetup_r+0x16>
 800e15c:	4628      	mov	r0, r5
 800e15e:	f7ff f86f 	bl	800d240 <__sinit>
 800e162:	4b2e      	ldr	r3, [pc, #184]	; (800e21c <__swsetup_r+0xd0>)
 800e164:	429c      	cmp	r4, r3
 800e166:	d10f      	bne.n	800e188 <__swsetup_r+0x3c>
 800e168:	686c      	ldr	r4, [r5, #4]
 800e16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16e:	b29a      	uxth	r2, r3
 800e170:	0715      	lsls	r5, r2, #28
 800e172:	d42c      	bmi.n	800e1ce <__swsetup_r+0x82>
 800e174:	06d0      	lsls	r0, r2, #27
 800e176:	d411      	bmi.n	800e19c <__swsetup_r+0x50>
 800e178:	2209      	movs	r2, #9
 800e17a:	6032      	str	r2, [r6, #0]
 800e17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e180:	81a3      	strh	r3, [r4, #12]
 800e182:	f04f 30ff 	mov.w	r0, #4294967295
 800e186:	e03e      	b.n	800e206 <__swsetup_r+0xba>
 800e188:	4b25      	ldr	r3, [pc, #148]	; (800e220 <__swsetup_r+0xd4>)
 800e18a:	429c      	cmp	r4, r3
 800e18c:	d101      	bne.n	800e192 <__swsetup_r+0x46>
 800e18e:	68ac      	ldr	r4, [r5, #8]
 800e190:	e7eb      	b.n	800e16a <__swsetup_r+0x1e>
 800e192:	4b24      	ldr	r3, [pc, #144]	; (800e224 <__swsetup_r+0xd8>)
 800e194:	429c      	cmp	r4, r3
 800e196:	bf08      	it	eq
 800e198:	68ec      	ldreq	r4, [r5, #12]
 800e19a:	e7e6      	b.n	800e16a <__swsetup_r+0x1e>
 800e19c:	0751      	lsls	r1, r2, #29
 800e19e:	d512      	bpl.n	800e1c6 <__swsetup_r+0x7a>
 800e1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1a2:	b141      	cbz	r1, 800e1b6 <__swsetup_r+0x6a>
 800e1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1a8:	4299      	cmp	r1, r3
 800e1aa:	d002      	beq.n	800e1b2 <__swsetup_r+0x66>
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	f7ff fbdb 	bl	800d968 <_free_r>
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	6363      	str	r3, [r4, #52]	; 0x34
 800e1b6:	89a3      	ldrh	r3, [r4, #12]
 800e1b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1bc:	81a3      	strh	r3, [r4, #12]
 800e1be:	2300      	movs	r3, #0
 800e1c0:	6063      	str	r3, [r4, #4]
 800e1c2:	6923      	ldr	r3, [r4, #16]
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	89a3      	ldrh	r3, [r4, #12]
 800e1c8:	f043 0308 	orr.w	r3, r3, #8
 800e1cc:	81a3      	strh	r3, [r4, #12]
 800e1ce:	6923      	ldr	r3, [r4, #16]
 800e1d0:	b94b      	cbnz	r3, 800e1e6 <__swsetup_r+0x9a>
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1dc:	d003      	beq.n	800e1e6 <__swsetup_r+0x9a>
 800e1de:	4621      	mov	r1, r4
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f000 f917 	bl	800e414 <__smakebuf_r>
 800e1e6:	89a2      	ldrh	r2, [r4, #12]
 800e1e8:	f012 0301 	ands.w	r3, r2, #1
 800e1ec:	d00c      	beq.n	800e208 <__swsetup_r+0xbc>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60a3      	str	r3, [r4, #8]
 800e1f2:	6963      	ldr	r3, [r4, #20]
 800e1f4:	425b      	negs	r3, r3
 800e1f6:	61a3      	str	r3, [r4, #24]
 800e1f8:	6923      	ldr	r3, [r4, #16]
 800e1fa:	b953      	cbnz	r3, 800e212 <__swsetup_r+0xc6>
 800e1fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e200:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e204:	d1ba      	bne.n	800e17c <__swsetup_r+0x30>
 800e206:	bd70      	pop	{r4, r5, r6, pc}
 800e208:	0792      	lsls	r2, r2, #30
 800e20a:	bf58      	it	pl
 800e20c:	6963      	ldrpl	r3, [r4, #20]
 800e20e:	60a3      	str	r3, [r4, #8]
 800e210:	e7f2      	b.n	800e1f8 <__swsetup_r+0xac>
 800e212:	2000      	movs	r0, #0
 800e214:	e7f7      	b.n	800e206 <__swsetup_r+0xba>
 800e216:	bf00      	nop
 800e218:	20000034 	.word	0x20000034
 800e21c:	0800eb90 	.word	0x0800eb90
 800e220:	0800ebb0 	.word	0x0800ebb0
 800e224:	0800eb70 	.word	0x0800eb70

0800e228 <_close_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4c06      	ldr	r4, [pc, #24]	; (800e244 <_close_r+0x1c>)
 800e22c:	2300      	movs	r3, #0
 800e22e:	4605      	mov	r5, r0
 800e230:	4608      	mov	r0, r1
 800e232:	6023      	str	r3, [r4, #0]
 800e234:	f7f5 f931 	bl	800349a <_close>
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	d102      	bne.n	800e242 <_close_r+0x1a>
 800e23c:	6823      	ldr	r3, [r4, #0]
 800e23e:	b103      	cbz	r3, 800e242 <_close_r+0x1a>
 800e240:	602b      	str	r3, [r5, #0]
 800e242:	bd38      	pop	{r3, r4, r5, pc}
 800e244:	2000288c 	.word	0x2000288c

0800e248 <__sflush_r>:
 800e248:	898a      	ldrh	r2, [r1, #12]
 800e24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e24e:	4605      	mov	r5, r0
 800e250:	0710      	lsls	r0, r2, #28
 800e252:	460c      	mov	r4, r1
 800e254:	d458      	bmi.n	800e308 <__sflush_r+0xc0>
 800e256:	684b      	ldr	r3, [r1, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	dc05      	bgt.n	800e268 <__sflush_r+0x20>
 800e25c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e25e:	2b00      	cmp	r3, #0
 800e260:	dc02      	bgt.n	800e268 <__sflush_r+0x20>
 800e262:	2000      	movs	r0, #0
 800e264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e26a:	2e00      	cmp	r6, #0
 800e26c:	d0f9      	beq.n	800e262 <__sflush_r+0x1a>
 800e26e:	2300      	movs	r3, #0
 800e270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e274:	682f      	ldr	r7, [r5, #0]
 800e276:	6a21      	ldr	r1, [r4, #32]
 800e278:	602b      	str	r3, [r5, #0]
 800e27a:	d032      	beq.n	800e2e2 <__sflush_r+0x9a>
 800e27c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e27e:	89a3      	ldrh	r3, [r4, #12]
 800e280:	075a      	lsls	r2, r3, #29
 800e282:	d505      	bpl.n	800e290 <__sflush_r+0x48>
 800e284:	6863      	ldr	r3, [r4, #4]
 800e286:	1ac0      	subs	r0, r0, r3
 800e288:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e28a:	b10b      	cbz	r3, 800e290 <__sflush_r+0x48>
 800e28c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e28e:	1ac0      	subs	r0, r0, r3
 800e290:	2300      	movs	r3, #0
 800e292:	4602      	mov	r2, r0
 800e294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e296:	6a21      	ldr	r1, [r4, #32]
 800e298:	4628      	mov	r0, r5
 800e29a:	47b0      	blx	r6
 800e29c:	1c43      	adds	r3, r0, #1
 800e29e:	89a3      	ldrh	r3, [r4, #12]
 800e2a0:	d106      	bne.n	800e2b0 <__sflush_r+0x68>
 800e2a2:	6829      	ldr	r1, [r5, #0]
 800e2a4:	291d      	cmp	r1, #29
 800e2a6:	d848      	bhi.n	800e33a <__sflush_r+0xf2>
 800e2a8:	4a29      	ldr	r2, [pc, #164]	; (800e350 <__sflush_r+0x108>)
 800e2aa:	40ca      	lsrs	r2, r1
 800e2ac:	07d6      	lsls	r6, r2, #31
 800e2ae:	d544      	bpl.n	800e33a <__sflush_r+0xf2>
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	6062      	str	r2, [r4, #4]
 800e2b4:	04d9      	lsls	r1, r3, #19
 800e2b6:	6922      	ldr	r2, [r4, #16]
 800e2b8:	6022      	str	r2, [r4, #0]
 800e2ba:	d504      	bpl.n	800e2c6 <__sflush_r+0x7e>
 800e2bc:	1c42      	adds	r2, r0, #1
 800e2be:	d101      	bne.n	800e2c4 <__sflush_r+0x7c>
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	b903      	cbnz	r3, 800e2c6 <__sflush_r+0x7e>
 800e2c4:	6560      	str	r0, [r4, #84]	; 0x54
 800e2c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2c8:	602f      	str	r7, [r5, #0]
 800e2ca:	2900      	cmp	r1, #0
 800e2cc:	d0c9      	beq.n	800e262 <__sflush_r+0x1a>
 800e2ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2d2:	4299      	cmp	r1, r3
 800e2d4:	d002      	beq.n	800e2dc <__sflush_r+0x94>
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f7ff fb46 	bl	800d968 <_free_r>
 800e2dc:	2000      	movs	r0, #0
 800e2de:	6360      	str	r0, [r4, #52]	; 0x34
 800e2e0:	e7c0      	b.n	800e264 <__sflush_r+0x1c>
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	47b0      	blx	r6
 800e2e8:	1c41      	adds	r1, r0, #1
 800e2ea:	d1c8      	bne.n	800e27e <__sflush_r+0x36>
 800e2ec:	682b      	ldr	r3, [r5, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d0c5      	beq.n	800e27e <__sflush_r+0x36>
 800e2f2:	2b1d      	cmp	r3, #29
 800e2f4:	d001      	beq.n	800e2fa <__sflush_r+0xb2>
 800e2f6:	2b16      	cmp	r3, #22
 800e2f8:	d101      	bne.n	800e2fe <__sflush_r+0xb6>
 800e2fa:	602f      	str	r7, [r5, #0]
 800e2fc:	e7b1      	b.n	800e262 <__sflush_r+0x1a>
 800e2fe:	89a3      	ldrh	r3, [r4, #12]
 800e300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e304:	81a3      	strh	r3, [r4, #12]
 800e306:	e7ad      	b.n	800e264 <__sflush_r+0x1c>
 800e308:	690f      	ldr	r7, [r1, #16]
 800e30a:	2f00      	cmp	r7, #0
 800e30c:	d0a9      	beq.n	800e262 <__sflush_r+0x1a>
 800e30e:	0793      	lsls	r3, r2, #30
 800e310:	680e      	ldr	r6, [r1, #0]
 800e312:	bf08      	it	eq
 800e314:	694b      	ldreq	r3, [r1, #20]
 800e316:	600f      	str	r7, [r1, #0]
 800e318:	bf18      	it	ne
 800e31a:	2300      	movne	r3, #0
 800e31c:	eba6 0807 	sub.w	r8, r6, r7
 800e320:	608b      	str	r3, [r1, #8]
 800e322:	f1b8 0f00 	cmp.w	r8, #0
 800e326:	dd9c      	ble.n	800e262 <__sflush_r+0x1a>
 800e328:	4643      	mov	r3, r8
 800e32a:	463a      	mov	r2, r7
 800e32c:	6a21      	ldr	r1, [r4, #32]
 800e32e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e330:	4628      	mov	r0, r5
 800e332:	47b0      	blx	r6
 800e334:	2800      	cmp	r0, #0
 800e336:	dc06      	bgt.n	800e346 <__sflush_r+0xfe>
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e33e:	81a3      	strh	r3, [r4, #12]
 800e340:	f04f 30ff 	mov.w	r0, #4294967295
 800e344:	e78e      	b.n	800e264 <__sflush_r+0x1c>
 800e346:	4407      	add	r7, r0
 800e348:	eba8 0800 	sub.w	r8, r8, r0
 800e34c:	e7e9      	b.n	800e322 <__sflush_r+0xda>
 800e34e:	bf00      	nop
 800e350:	20400001 	.word	0x20400001

0800e354 <_fflush_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	690b      	ldr	r3, [r1, #16]
 800e358:	4605      	mov	r5, r0
 800e35a:	460c      	mov	r4, r1
 800e35c:	b1db      	cbz	r3, 800e396 <_fflush_r+0x42>
 800e35e:	b118      	cbz	r0, 800e368 <_fflush_r+0x14>
 800e360:	6983      	ldr	r3, [r0, #24]
 800e362:	b90b      	cbnz	r3, 800e368 <_fflush_r+0x14>
 800e364:	f7fe ff6c 	bl	800d240 <__sinit>
 800e368:	4b0c      	ldr	r3, [pc, #48]	; (800e39c <_fflush_r+0x48>)
 800e36a:	429c      	cmp	r4, r3
 800e36c:	d109      	bne.n	800e382 <_fflush_r+0x2e>
 800e36e:	686c      	ldr	r4, [r5, #4]
 800e370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e374:	b17b      	cbz	r3, 800e396 <_fflush_r+0x42>
 800e376:	4621      	mov	r1, r4
 800e378:	4628      	mov	r0, r5
 800e37a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e37e:	f7ff bf63 	b.w	800e248 <__sflush_r>
 800e382:	4b07      	ldr	r3, [pc, #28]	; (800e3a0 <_fflush_r+0x4c>)
 800e384:	429c      	cmp	r4, r3
 800e386:	d101      	bne.n	800e38c <_fflush_r+0x38>
 800e388:	68ac      	ldr	r4, [r5, #8]
 800e38a:	e7f1      	b.n	800e370 <_fflush_r+0x1c>
 800e38c:	4b05      	ldr	r3, [pc, #20]	; (800e3a4 <_fflush_r+0x50>)
 800e38e:	429c      	cmp	r4, r3
 800e390:	bf08      	it	eq
 800e392:	68ec      	ldreq	r4, [r5, #12]
 800e394:	e7ec      	b.n	800e370 <_fflush_r+0x1c>
 800e396:	2000      	movs	r0, #0
 800e398:	bd38      	pop	{r3, r4, r5, pc}
 800e39a:	bf00      	nop
 800e39c:	0800eb90 	.word	0x0800eb90
 800e3a0:	0800ebb0 	.word	0x0800ebb0
 800e3a4:	0800eb70 	.word	0x0800eb70

0800e3a8 <_lseek_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	4c07      	ldr	r4, [pc, #28]	; (800e3c8 <_lseek_r+0x20>)
 800e3ac:	4605      	mov	r5, r0
 800e3ae:	4608      	mov	r0, r1
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	6022      	str	r2, [r4, #0]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f7f5 f896 	bl	80034e8 <_lseek>
 800e3bc:	1c43      	adds	r3, r0, #1
 800e3be:	d102      	bne.n	800e3c6 <_lseek_r+0x1e>
 800e3c0:	6823      	ldr	r3, [r4, #0]
 800e3c2:	b103      	cbz	r3, 800e3c6 <_lseek_r+0x1e>
 800e3c4:	602b      	str	r3, [r5, #0]
 800e3c6:	bd38      	pop	{r3, r4, r5, pc}
 800e3c8:	2000288c 	.word	0x2000288c

0800e3cc <__swhatbuf_r>:
 800e3cc:	b570      	push	{r4, r5, r6, lr}
 800e3ce:	460e      	mov	r6, r1
 800e3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d4:	2900      	cmp	r1, #0
 800e3d6:	b096      	sub	sp, #88	; 0x58
 800e3d8:	4614      	mov	r4, r2
 800e3da:	461d      	mov	r5, r3
 800e3dc:	da07      	bge.n	800e3ee <__swhatbuf_r+0x22>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	602b      	str	r3, [r5, #0]
 800e3e2:	89b3      	ldrh	r3, [r6, #12]
 800e3e4:	061a      	lsls	r2, r3, #24
 800e3e6:	d410      	bmi.n	800e40a <__swhatbuf_r+0x3e>
 800e3e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ec:	e00e      	b.n	800e40c <__swhatbuf_r+0x40>
 800e3ee:	466a      	mov	r2, sp
 800e3f0:	f000 f8c4 	bl	800e57c <_fstat_r>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	dbf2      	blt.n	800e3de <__swhatbuf_r+0x12>
 800e3f8:	9a01      	ldr	r2, [sp, #4]
 800e3fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e402:	425a      	negs	r2, r3
 800e404:	415a      	adcs	r2, r3
 800e406:	602a      	str	r2, [r5, #0]
 800e408:	e7ee      	b.n	800e3e8 <__swhatbuf_r+0x1c>
 800e40a:	2340      	movs	r3, #64	; 0x40
 800e40c:	2000      	movs	r0, #0
 800e40e:	6023      	str	r3, [r4, #0]
 800e410:	b016      	add	sp, #88	; 0x58
 800e412:	bd70      	pop	{r4, r5, r6, pc}

0800e414 <__smakebuf_r>:
 800e414:	898b      	ldrh	r3, [r1, #12]
 800e416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e418:	079d      	lsls	r5, r3, #30
 800e41a:	4606      	mov	r6, r0
 800e41c:	460c      	mov	r4, r1
 800e41e:	d507      	bpl.n	800e430 <__smakebuf_r+0x1c>
 800e420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e424:	6023      	str	r3, [r4, #0]
 800e426:	6123      	str	r3, [r4, #16]
 800e428:	2301      	movs	r3, #1
 800e42a:	6163      	str	r3, [r4, #20]
 800e42c:	b002      	add	sp, #8
 800e42e:	bd70      	pop	{r4, r5, r6, pc}
 800e430:	ab01      	add	r3, sp, #4
 800e432:	466a      	mov	r2, sp
 800e434:	f7ff ffca 	bl	800e3cc <__swhatbuf_r>
 800e438:	9900      	ldr	r1, [sp, #0]
 800e43a:	4605      	mov	r5, r0
 800e43c:	4630      	mov	r0, r6
 800e43e:	f7ff fae1 	bl	800da04 <_malloc_r>
 800e442:	b948      	cbnz	r0, 800e458 <__smakebuf_r+0x44>
 800e444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e448:	059a      	lsls	r2, r3, #22
 800e44a:	d4ef      	bmi.n	800e42c <__smakebuf_r+0x18>
 800e44c:	f023 0303 	bic.w	r3, r3, #3
 800e450:	f043 0302 	orr.w	r3, r3, #2
 800e454:	81a3      	strh	r3, [r4, #12]
 800e456:	e7e3      	b.n	800e420 <__smakebuf_r+0xc>
 800e458:	4b0d      	ldr	r3, [pc, #52]	; (800e490 <__smakebuf_r+0x7c>)
 800e45a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e45c:	89a3      	ldrh	r3, [r4, #12]
 800e45e:	6020      	str	r0, [r4, #0]
 800e460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e464:	81a3      	strh	r3, [r4, #12]
 800e466:	9b00      	ldr	r3, [sp, #0]
 800e468:	6163      	str	r3, [r4, #20]
 800e46a:	9b01      	ldr	r3, [sp, #4]
 800e46c:	6120      	str	r0, [r4, #16]
 800e46e:	b15b      	cbz	r3, 800e488 <__smakebuf_r+0x74>
 800e470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e474:	4630      	mov	r0, r6
 800e476:	f000 f893 	bl	800e5a0 <_isatty_r>
 800e47a:	b128      	cbz	r0, 800e488 <__smakebuf_r+0x74>
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	f023 0303 	bic.w	r3, r3, #3
 800e482:	f043 0301 	orr.w	r3, r3, #1
 800e486:	81a3      	strh	r3, [r4, #12]
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	431d      	orrs	r5, r3
 800e48c:	81a5      	strh	r5, [r4, #12]
 800e48e:	e7cd      	b.n	800e42c <__smakebuf_r+0x18>
 800e490:	0800d209 	.word	0x0800d209

0800e494 <__ascii_mbtowc>:
 800e494:	b082      	sub	sp, #8
 800e496:	b901      	cbnz	r1, 800e49a <__ascii_mbtowc+0x6>
 800e498:	a901      	add	r1, sp, #4
 800e49a:	b142      	cbz	r2, 800e4ae <__ascii_mbtowc+0x1a>
 800e49c:	b14b      	cbz	r3, 800e4b2 <__ascii_mbtowc+0x1e>
 800e49e:	7813      	ldrb	r3, [r2, #0]
 800e4a0:	600b      	str	r3, [r1, #0]
 800e4a2:	7812      	ldrb	r2, [r2, #0]
 800e4a4:	1c10      	adds	r0, r2, #0
 800e4a6:	bf18      	it	ne
 800e4a8:	2001      	movne	r0, #1
 800e4aa:	b002      	add	sp, #8
 800e4ac:	4770      	bx	lr
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	e7fb      	b.n	800e4aa <__ascii_mbtowc+0x16>
 800e4b2:	f06f 0001 	mvn.w	r0, #1
 800e4b6:	e7f8      	b.n	800e4aa <__ascii_mbtowc+0x16>

0800e4b8 <memmove>:
 800e4b8:	4288      	cmp	r0, r1
 800e4ba:	b510      	push	{r4, lr}
 800e4bc:	eb01 0302 	add.w	r3, r1, r2
 800e4c0:	d807      	bhi.n	800e4d2 <memmove+0x1a>
 800e4c2:	1e42      	subs	r2, r0, #1
 800e4c4:	4299      	cmp	r1, r3
 800e4c6:	d00a      	beq.n	800e4de <memmove+0x26>
 800e4c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e4d0:	e7f8      	b.n	800e4c4 <memmove+0xc>
 800e4d2:	4283      	cmp	r3, r0
 800e4d4:	d9f5      	bls.n	800e4c2 <memmove+0xa>
 800e4d6:	1881      	adds	r1, r0, r2
 800e4d8:	1ad2      	subs	r2, r2, r3
 800e4da:	42d3      	cmn	r3, r2
 800e4dc:	d100      	bne.n	800e4e0 <memmove+0x28>
 800e4de:	bd10      	pop	{r4, pc}
 800e4e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e4e8:	e7f7      	b.n	800e4da <memmove+0x22>

0800e4ea <__malloc_lock>:
 800e4ea:	4770      	bx	lr

0800e4ec <__malloc_unlock>:
 800e4ec:	4770      	bx	lr

0800e4ee <_realloc_r>:
 800e4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	4614      	mov	r4, r2
 800e4f4:	460e      	mov	r6, r1
 800e4f6:	b921      	cbnz	r1, 800e502 <_realloc_r+0x14>
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4fe:	f7ff ba81 	b.w	800da04 <_malloc_r>
 800e502:	b922      	cbnz	r2, 800e50e <_realloc_r+0x20>
 800e504:	f7ff fa30 	bl	800d968 <_free_r>
 800e508:	4625      	mov	r5, r4
 800e50a:	4628      	mov	r0, r5
 800e50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e50e:	f000 f857 	bl	800e5c0 <_malloc_usable_size_r>
 800e512:	42a0      	cmp	r0, r4
 800e514:	d20f      	bcs.n	800e536 <_realloc_r+0x48>
 800e516:	4621      	mov	r1, r4
 800e518:	4638      	mov	r0, r7
 800e51a:	f7ff fa73 	bl	800da04 <_malloc_r>
 800e51e:	4605      	mov	r5, r0
 800e520:	2800      	cmp	r0, #0
 800e522:	d0f2      	beq.n	800e50a <_realloc_r+0x1c>
 800e524:	4631      	mov	r1, r6
 800e526:	4622      	mov	r2, r4
 800e528:	f7fe ff2a 	bl	800d380 <memcpy>
 800e52c:	4631      	mov	r1, r6
 800e52e:	4638      	mov	r0, r7
 800e530:	f7ff fa1a 	bl	800d968 <_free_r>
 800e534:	e7e9      	b.n	800e50a <_realloc_r+0x1c>
 800e536:	4635      	mov	r5, r6
 800e538:	e7e7      	b.n	800e50a <_realloc_r+0x1c>
	...

0800e53c <_read_r>:
 800e53c:	b538      	push	{r3, r4, r5, lr}
 800e53e:	4c07      	ldr	r4, [pc, #28]	; (800e55c <_read_r+0x20>)
 800e540:	4605      	mov	r5, r0
 800e542:	4608      	mov	r0, r1
 800e544:	4611      	mov	r1, r2
 800e546:	2200      	movs	r2, #0
 800e548:	6022      	str	r2, [r4, #0]
 800e54a:	461a      	mov	r2, r3
 800e54c:	f7f4 ff88 	bl	8003460 <_read>
 800e550:	1c43      	adds	r3, r0, #1
 800e552:	d102      	bne.n	800e55a <_read_r+0x1e>
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	b103      	cbz	r3, 800e55a <_read_r+0x1e>
 800e558:	602b      	str	r3, [r5, #0]
 800e55a:	bd38      	pop	{r3, r4, r5, pc}
 800e55c:	2000288c 	.word	0x2000288c

0800e560 <__ascii_wctomb>:
 800e560:	b149      	cbz	r1, 800e576 <__ascii_wctomb+0x16>
 800e562:	2aff      	cmp	r2, #255	; 0xff
 800e564:	bf85      	ittet	hi
 800e566:	238a      	movhi	r3, #138	; 0x8a
 800e568:	6003      	strhi	r3, [r0, #0]
 800e56a:	700a      	strbls	r2, [r1, #0]
 800e56c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e570:	bf98      	it	ls
 800e572:	2001      	movls	r0, #1
 800e574:	4770      	bx	lr
 800e576:	4608      	mov	r0, r1
 800e578:	4770      	bx	lr
	...

0800e57c <_fstat_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4c07      	ldr	r4, [pc, #28]	; (800e59c <_fstat_r+0x20>)
 800e580:	2300      	movs	r3, #0
 800e582:	4605      	mov	r5, r0
 800e584:	4608      	mov	r0, r1
 800e586:	4611      	mov	r1, r2
 800e588:	6023      	str	r3, [r4, #0]
 800e58a:	f7f4 ff92 	bl	80034b2 <_fstat>
 800e58e:	1c43      	adds	r3, r0, #1
 800e590:	d102      	bne.n	800e598 <_fstat_r+0x1c>
 800e592:	6823      	ldr	r3, [r4, #0]
 800e594:	b103      	cbz	r3, 800e598 <_fstat_r+0x1c>
 800e596:	602b      	str	r3, [r5, #0]
 800e598:	bd38      	pop	{r3, r4, r5, pc}
 800e59a:	bf00      	nop
 800e59c:	2000288c 	.word	0x2000288c

0800e5a0 <_isatty_r>:
 800e5a0:	b538      	push	{r3, r4, r5, lr}
 800e5a2:	4c06      	ldr	r4, [pc, #24]	; (800e5bc <_isatty_r+0x1c>)
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	4608      	mov	r0, r1
 800e5aa:	6023      	str	r3, [r4, #0]
 800e5ac:	f7f4 ff91 	bl	80034d2 <_isatty>
 800e5b0:	1c43      	adds	r3, r0, #1
 800e5b2:	d102      	bne.n	800e5ba <_isatty_r+0x1a>
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	b103      	cbz	r3, 800e5ba <_isatty_r+0x1a>
 800e5b8:	602b      	str	r3, [r5, #0]
 800e5ba:	bd38      	pop	{r3, r4, r5, pc}
 800e5bc:	2000288c 	.word	0x2000288c

0800e5c0 <_malloc_usable_size_r>:
 800e5c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5c4:	1f18      	subs	r0, r3, #4
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	bfbc      	itt	lt
 800e5ca:	580b      	ldrlt	r3, [r1, r0]
 800e5cc:	18c0      	addlt	r0, r0, r3
 800e5ce:	4770      	bx	lr

0800e5d0 <_init>:
 800e5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d2:	bf00      	nop
 800e5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5d6:	bc08      	pop	{r3}
 800e5d8:	469e      	mov	lr, r3
 800e5da:	4770      	bx	lr

0800e5dc <_fini>:
 800e5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5de:	bf00      	nop
 800e5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5e2:	bc08      	pop	{r3}
 800e5e4:	469e      	mov	lr, r3
 800e5e6:	4770      	bx	lr
