
STM_SR_DHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08009538  08009538  00019538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009878  08009878  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009880  08009880  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009880  08009880  00019880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002458  200001f0  08009a78  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002648  08009a78  00022648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4f6  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004021  00000000  00000000  0003f716  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001898  00000000  00000000  00043738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00044fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bb2e  00000000  00000000  00046650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017863  00000000  00000000  0007217e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff8c9  00000000  00000000  000899e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001892aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000751c  00000000  00000000  00189328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009520 	.word	0x08009520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009520 	.word	0x08009520

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9bd 	b.w	8000f44 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <OneWire_Delay+0x2c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8000f5a:	bf00      	nop
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <OneWire_Delay+0x2c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d9f9      	bls.n	8000f5c <OneWire_Delay+0x14>
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	20000538 	.word	0x20000538

08000f78 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	889b      	ldrh	r3, [r3, #4]
 8000f90:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 f843 	bl	8003028 <HAL_GPIO_Init>
}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b088      	sub	sp, #32
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8000fb2:	2311      	movs	r3, #17
 8000fb4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	889b      	ldrh	r3, [r3, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f107 020c 	add.w	r2, r7, #12
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 f82a 	bl	8003028 <HAL_GPIO_Init>
}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	889b      	ldrh	r3, [r3, #4]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	619a      	str	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	889a      	ldrh	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffda 	bl	8000fdc <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffbe 	bl	8000faa <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 800102e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001032:	f7ff ff89 	bl	8000f48 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff9e 	bl	8000f78 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 800103c:	2046      	movs	r0, #70	; 0x46
 800103e:	f7ff ff83 	bl	8000f48 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f002 f993 	bl	8003378 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001056:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800105a:	f7ff ff75 	bl	8000f48 <OneWire_Delay>

	return i;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00f      	beq.n	800109a <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffae 	bl	8000fdc <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff92 	bl	8000faa <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001086:	2006      	movs	r0, #6
 8001088:	f7ff ff5e 	bl	8000f48 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff73 	bl	8000f78 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8001092:	2040      	movs	r0, #64	; 0x40
 8001094:	f7ff ff58 	bl	8000f48 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8001098:	e00e      	b.n	80010b8 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff9e 	bl	8000fdc <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff82 	bl	8000faa <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 80010a6:	203c      	movs	r0, #60	; 0x3c
 80010a8:	f7ff ff4e 	bl	8000f48 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff63 	bl	8000f78 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f7ff ff48 	bl	8000f48 <OneWire_Delay>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff85 	bl	8000fdc <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff69 	bl	8000faa <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff ff35 	bl	8000f48 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff4a 	bl	8000f78 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f7ff ff2f 	bl	8000f48 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	889b      	ldrh	r3, [r3, #4]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f002 f93f 	bl	8003378 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <OneWire_ReadBit+0x44>
		bit = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8001104:	2032      	movs	r0, #50	; 0x32
 8001106:	f7ff ff1f 	bl	8000f48 <OneWire_Delay>

	return bit;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001120:	2308      	movs	r3, #8
 8001122:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff9a 	bl	8001068 <OneWire_WriteBit>
		byte >>= 1;
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	3b01      	subs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ee      	bne.n	8001124 <OneWire_WriteByte+0x10>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001156:	2308      	movs	r3, #8
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	2300      	movs	r3, #0
 800115c:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffab 	bl	80010c0 <OneWire_ReadBit>
 800116a:	4603      	mov	r3, r0
 800116c:	01db      	lsls	r3, r3, #7
 800116e:	b25a      	sxtb	r2, r3
 8001170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	3b01      	subs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1eb      	bne.n	800115e <OneWire_ReadByte+0x10>
	
	return byte;
 8001186:	7bbb      	ldrb	r3, [r7, #14]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	71da      	strb	r2, [r3, #7]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a1b      	ldrb	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 809a 	bne.w	8001314 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff1a 	bl	800101a <OneWire_Reset>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00a      	beq.n	8001202 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	71da      	strb	r2, [r3, #7]
			return 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	e09b      	b.n	800133a <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff84 	bl	8001114 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff57 	bl	80010c0 <OneWire_ReadBit>
 8001212:	4603      	mov	r3, r0
 8001214:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff52 	bl	80010c0 <OneWire_ReadBit>
 800121c:	4603      	mov	r3, r0
 800121e:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001220:	7a7b      	ldrb	r3, [r7, #9]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <OneWire_Search+0x76>
 8001226:	7a3b      	ldrb	r3, [r7, #8]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d064      	beq.n	80012f6 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 800122c:	7a7a      	ldrb	r2, [r7, #9]
 800122e:	7a3b      	ldrb	r3, [r7, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	d002      	beq.n	800123a <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001234:	7a7b      	ldrb	r3, [r7, #9]
 8001236:	72bb      	strb	r3, [r7, #10]
 8001238:	e026      	b.n	8001288 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	799b      	ldrb	r3, [r3, #6]
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	429a      	cmp	r2, r3
 8001242:	d20d      	bcs.n	8001260 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001244:	7b7b      	ldrb	r3, [r7, #13]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	7a5a      	ldrb	r2, [r3, #9]
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	4013      	ands	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	72bb      	strb	r3, [r7, #10]
 800125e:	e008      	b.n	8001272 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	799b      	ldrb	r3, [r3, #6]
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	429a      	cmp	r2, r3
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001272:	7abb      	ldrb	r3, [r7, #10]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d802      	bhi.n	8001288 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7bba      	ldrb	r2, [r7, #14]
 8001286:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d10c      	bne.n	80012a8 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 800128e:	7b7b      	ldrb	r3, [r7, #13]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	7a59      	ldrb	r1, [r3, #9]
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	7afa      	ldrb	r2, [r7, #11]
 800129a:	430a      	orrs	r2, r1
 800129c:	b2d1      	uxtb	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	460a      	mov	r2, r1
 80012a4:	725a      	strb	r2, [r3, #9]
 80012a6:	e010      	b.n	80012ca <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 80012a8:	7b7b      	ldrb	r3, [r7, #13]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	7a5b      	ldrb	r3, [r3, #9]
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	7b7b      	ldrb	r3, [r7, #13]
 80012c0:	b2d1      	uxtb	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 80012ca:	7abb      	ldrb	r3, [r7, #10]
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff feca 	bl	8001068 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3301      	adds	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 80012da:	7afb      	ldrb	r3, [r7, #11]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 80012e0:	7afb      	ldrb	r3, [r7, #11]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d104      	bne.n	80012f0 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	3301      	adds	r3, #1
 80012ea:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 80012ec:	2301      	movs	r3, #1
 80012ee:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
 80012f2:	2b07      	cmp	r3, #7
 80012f4:	d98a      	bls.n	800120c <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b40      	cmp	r3, #64	; 0x40
 80012fa:	d90b      	bls.n	8001314 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7bba      	ldrb	r2, [r7, #14]
 8001300:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	799b      	ldrb	r3, [r3, #6]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001310:	2301      	movs	r3, #1
 8001312:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001314:	7b3b      	ldrb	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <OneWire_Search+0x16c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7a5b      	ldrb	r3, [r3, #9]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001338:	7b3b      	ldrb	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff20 	bl	8001190 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001350:	21f0      	movs	r1, #240	; 0xf0
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff2f 	bl	80011b6 <OneWire_Search>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800136a:	21f0      	movs	r1, #240	; 0xf0
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff22 	bl	80011b6 <OneWire_Search>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001386:	2155      	movs	r1, #85	; 0x55
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fec3 	bl	8001114 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e00a      	b.n	80013aa <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff feb8 	bl	8001114 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b07      	cmp	r3, #7
 80013ae:	d9f1      	bls.n	8001394 <OneWire_SelectWithPointer+0x18>
	}
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e00a      	b.n	80013de <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	440b      	add	r3, r1
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	440a      	add	r2, r1
 80013d4:	7a52      	ldrb	r2, [r2, #9]
 80013d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	3301      	adds	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	d9f1      	bls.n	80013c8 <OneWire_GetFullROM+0x10>
	}
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <OneWire_Init+0x54>)
 8001400:	f003 fe32 	bl	8005068 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	88fa      	ldrh	r2, [r7, #6]
 800140e:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff fdca 	bl	8000faa <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff fdf0 	bl	8000ffc <OneWire_OutputHigh>
	HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	f001 fc8f 	bl	8002d40 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7ff fdda 	bl	8000fdc <OneWire_OutputLow>
	HAL_Delay(100);
 8001428:	2064      	movs	r0, #100	; 0x64
 800142a:	f001 fc89 	bl	8002d40 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff fde4 	bl	8000ffc <OneWire_OutputHigh>
	HAL_Delay(200);
 8001434:	20c8      	movs	r0, #200	; 0xc8
 8001436:	f001 fc83 	bl	8002d40 <HAL_Delay>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000538 	.word	0x20000538

08001448 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <DS18B20_StartAll+0x20>)
 800144e:	f7ff fde4 	bl	800101a <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8001452:	21cc      	movs	r1, #204	; 0xcc
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <DS18B20_StartAll+0x20>)
 8001456:	f7ff fe5d 	bl	8001114 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 800145a:	2144      	movs	r1, #68	; 0x44
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DS18B20_StartAll+0x20>)
 800145e:	f7ff fe59 	bl	8001114 <OneWire_WriteByte>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000284 	.word	0x20000284

0800146c <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8001478:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <DS18B20_Read+0x144>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	429a      	cmp	r2, r3
 8001480:	d301      	bcc.n	8001486 <DS18B20_Read+0x1a>
		return 0;
 8001482:	2300      	movs	r3, #0
 8001484:	e090      	b.n	80015a8 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4a49      	ldr	r2, [pc, #292]	; (80015b4 <DS18B20_Read+0x148>)
 8001490:	4413      	add	r3, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f93c 	bl	8001710 <DS18B20_Is>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <DS18B20_Read+0x36>
		return 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	e082      	b.n	80015a8 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 80014a2:	4845      	ldr	r0, [pc, #276]	; (80015b8 <DS18B20_Read+0x14c>)
 80014a4:	f7ff fe0c 	bl	80010c0 <OneWire_ReadBit>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 80014ae:	2300      	movs	r3, #0
 80014b0:	e07a      	b.n	80015a8 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 80014b2:	4841      	ldr	r0, [pc, #260]	; (80015b8 <DS18B20_Read+0x14c>)
 80014b4:	f7ff fdb1 	bl	800101a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4a3d      	ldr	r2, [pc, #244]	; (80015b4 <DS18B20_Read+0x148>)
 80014be:	4413      	add	r3, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	483d      	ldr	r0, [pc, #244]	; (80015b8 <DS18B20_Read+0x14c>)
 80014c4:	f7ff ff5a 	bl	800137c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80014c8:	21be      	movs	r1, #190	; 0xbe
 80014ca:	483b      	ldr	r0, [pc, #236]	; (80015b8 <DS18B20_Read+0x14c>)
 80014cc:	f7ff fe22 	bl	8001114 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80014d0:	2300      	movs	r3, #0
 80014d2:	74fb      	strb	r3, [r7, #19]
 80014d4:	e00d      	b.n	80014f2 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 80014d6:	7cfc      	ldrb	r4, [r7, #19]
 80014d8:	4837      	ldr	r0, [pc, #220]	; (80015b8 <DS18B20_Read+0x14c>)
 80014da:	f7ff fe38 	bl	800114e <OneWire_ReadByte>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4423      	add	r3, r4
 80014e8:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	3301      	adds	r3, #1
 80014f0:	74fb      	strb	r3, [r7, #19]
 80014f2:	7cfb      	ldrb	r3, [r7, #19]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d9ee      	bls.n	80014d6 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 80014f8:	7a3b      	ldrb	r3, [r7, #8]
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7a7b      	ldrb	r3, [r7, #9]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8001508:	482b      	ldr	r0, [pc, #172]	; (80015b8 <DS18B20_Read+0x14c>)
 800150a:	f7ff fd86 	bl	800101a <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800150e:	7b3b      	ldrb	r3, [r7, #12]
 8001510:	115b      	asrs	r3, r3, #5
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3309      	adds	r3, #9
 800151c:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	3b09      	subs	r3, #9
 8001522:	2b03      	cmp	r3, #3
 8001524:	d83a      	bhi.n	800159c <DS18B20_Read+0x130>
 8001526:	a201      	add	r2, pc, #4	; (adr r2, 800152c <DS18B20_Read+0xc0>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	08001555 	.word	0x08001555
 8001534:	0800156d 	.word	0x0800156d
 8001538:	08001585 	.word	0x08001585
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 800153c:	8a3b      	ldrh	r3, [r7, #16]
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001546:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800154a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8001552:	e025      	b.n	80015a0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8001554:	8a3b      	ldrh	r3, [r7, #16]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001566:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 800156a:	e019      	b.n	80015a0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 800156c:	8a3b      	ldrh	r3, [r7, #16]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001576:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800157a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800157e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8001582:	e00d      	b.n	80015a0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8001584:	8a3b      	ldrh	r3, [r7, #16]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80015bc <DS18B20_Read+0x150>
 8001592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001596:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 800159a:	e001      	b.n	80015a0 <DS18B20_Read+0x134>
		default:
			result = 0xFF;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <DS18B20_Read+0x154>)
 800159e:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	2000020c 	.word	0x2000020c
 80015b4:	20000244 	.word	0x20000244
 80015b8:	20000284 	.word	0x20000284
 80015bc:	3d800000 	.word	0x3d800000
 80015c0:	437f0000 	.word	0x437f0000

080015c4 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <DS18B20_SetResolution+0x140>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	79fa      	ldrb	r2, [r7, #7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d301      	bcc.n	80015e2 <DS18B20_SetResolution+0x1e>
		return 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	e08c      	b.n	80016fc <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4a48      	ldr	r2, [pc, #288]	; (8001708 <DS18B20_SetResolution+0x144>)
 80015e8:	4413      	add	r3, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f890 	bl	8001710 <DS18B20_Is>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <DS18B20_SetResolution+0x36>
		return 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e080      	b.n	80016fc <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 80015fa:	4844      	ldr	r0, [pc, #272]	; (800170c <DS18B20_SetResolution+0x148>)
 80015fc:	f7ff fd0d 	bl	800101a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4a40      	ldr	r2, [pc, #256]	; (8001708 <DS18B20_SetResolution+0x144>)
 8001606:	4413      	add	r3, r2
 8001608:	4619      	mov	r1, r3
 800160a:	4840      	ldr	r0, [pc, #256]	; (800170c <DS18B20_SetResolution+0x148>)
 800160c:	f7ff feb6 	bl	800137c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001610:	21be      	movs	r1, #190	; 0xbe
 8001612:	483e      	ldr	r0, [pc, #248]	; (800170c <DS18B20_SetResolution+0x148>)
 8001614:	f7ff fd7e 	bl	8001114 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8001618:	483c      	ldr	r0, [pc, #240]	; (800170c <DS18B20_SetResolution+0x148>)
 800161a:	f7ff fd98 	bl	800114e <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 800161e:	483b      	ldr	r0, [pc, #236]	; (800170c <DS18B20_SetResolution+0x148>)
 8001620:	f7ff fd95 	bl	800114e <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8001624:	4839      	ldr	r0, [pc, #228]	; (800170c <DS18B20_SetResolution+0x148>)
 8001626:	f7ff fd92 	bl	800114e <OneWire_ReadByte>
 800162a:	4603      	mov	r3, r0
 800162c:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 800162e:	4837      	ldr	r0, [pc, #220]	; (800170c <DS18B20_SetResolution+0x148>)
 8001630:	f7ff fd8d 	bl	800114e <OneWire_ReadByte>
 8001634:	4603      	mov	r3, r0
 8001636:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001638:	4834      	ldr	r0, [pc, #208]	; (800170c <DS18B20_SetResolution+0x148>)
 800163a:	f7ff fd88 	bl	800114e <OneWire_ReadByte>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d108      	bne.n	800165a <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800164e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	f023 0320 	bic.w	r3, r3, #32
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e022      	b.n	80016a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	2b0a      	cmp	r3, #10
 800165e:	d108      	bne.n	8001672 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001666:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e016      	b.n	80016a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	2b0b      	cmp	r3, #11
 8001676:	d108      	bne.n	800168a <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f023 0320 	bic.w	r3, r3, #32
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e00a      	b.n	80016a0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b0c      	cmp	r3, #12
 800168e:	d107      	bne.n	80016a0 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001696:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	f043 0320 	orr.w	r3, r3, #32
 800169e:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 80016a0:	481a      	ldr	r0, [pc, #104]	; (800170c <DS18B20_SetResolution+0x148>)
 80016a2:	f7ff fcba 	bl	800101a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <DS18B20_SetResolution+0x144>)
 80016ac:	4413      	add	r3, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	4816      	ldr	r0, [pc, #88]	; (800170c <DS18B20_SetResolution+0x148>)
 80016b2:	f7ff fe63 	bl	800137c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 80016b6:	214e      	movs	r1, #78	; 0x4e
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <DS18B20_SetResolution+0x148>)
 80016ba:	f7ff fd2b 	bl	8001114 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <DS18B20_SetResolution+0x148>)
 80016c4:	f7ff fd26 	bl	8001114 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 80016c8:	7b7b      	ldrb	r3, [r7, #13]
 80016ca:	4619      	mov	r1, r3
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <DS18B20_SetResolution+0x148>)
 80016ce:	f7ff fd21 	bl	8001114 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4619      	mov	r1, r3
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <DS18B20_SetResolution+0x148>)
 80016d8:	f7ff fd1c 	bl	8001114 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <DS18B20_SetResolution+0x148>)
 80016de:	f7ff fc9c 	bl	800101a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <DS18B20_SetResolution+0x144>)
 80016e8:	4413      	add	r3, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <DS18B20_SetResolution+0x148>)
 80016ee:	f7ff fe45 	bl	800137c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80016f2:	2148      	movs	r1, #72	; 0x48
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <DS18B20_SetResolution+0x148>)
 80016f6:	f7ff fd0d 	bl	8001114 <OneWire_WriteByte>

	return 1;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000020c 	.word	0x2000020c
 8001708:	20000244 	.word	0x20000244
 800170c:	20000284 	.word	0x20000284

08001710 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b28      	cmp	r3, #40	; 0x28
 800171e:	d101      	bne.n	8001724 <DS18B20_Is+0x14>
		return 1;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <DS18B20_Is+0x16>
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DS18B20_AllDone+0x10>)
 800173a:	f7ff fcc1 	bl	80010c0 <OneWire_ReadBit>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000284 	.word	0x20000284

08001748 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 800174e:	f7ff fff1 	bl	8001734 <DS18B20_AllDone>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d02e      	beq.n	80017b6 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001758:	2300      	movs	r3, #0
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	e026      	b.n	80017ac <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <DS18B20_ReadAll+0x78>)
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	330c      	adds	r3, #12
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <DS18B20_ReadAll+0x78>)
 8001772:	4413      	add	r3, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ffcb 	bl	8001710 <DS18B20_Is>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d012      	beq.n	80017a6 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	3308      	adds	r3, #8
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <DS18B20_ReadAll+0x78>)
 8001788:	441a      	add	r2, r3
 800178a:	79fc      	ldrb	r4, [r7, #7]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe6b 	bl	800146c <DS18B20_Read>
 8001796:	4603      	mov	r3, r0
 8001798:	4619      	mov	r1, r3
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <DS18B20_ReadAll+0x78>)
 800179c:	0123      	lsls	r3, r4, #4
 800179e:	4413      	add	r3, r2
 80017a0:	330c      	adds	r3, #12
 80017a2:	460a      	mov	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3301      	adds	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <DS18B20_ReadAll+0x7c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3d3      	bcc.n	800175e <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000244 	.word	0x20000244
 80017c4:	2000020c 	.word	0x2000020c

080017c8 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <DS18B20_GetROM+0x50>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d302      	bcc.n	80017e4 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <DS18B20_GetROM+0x50>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e00d      	b.n	8001806 <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 80017ea:	79f9      	ldrb	r1, [r7, #7]
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	4403      	add	r3, r0
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <DS18B20_GetROM+0x54>)
 80017f6:	0109      	lsls	r1, r1, #4
 80017f8:	4401      	add	r1, r0
 80017fa:	440a      	add	r2, r1
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3301      	adds	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b07      	cmp	r3, #7
 800180a:	d9ee      	bls.n	80017ea <DS18B20_GetROM+0x22>
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	2000020c 	.word	0x2000020c
 800181c:	20000244 	.word	0x20000244

08001820 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <DS18B20_Quantity+0x14>)
 8001826:	781b      	ldrb	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000020c 	.word	0x2000020c

08001838 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <DS18B20_GetTemperature+0x40>)
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	330c      	adds	r3, #12
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <DS18B20_GetTemperature+0x20>
		return 0;
 8001854:	2300      	movs	r3, #0
 8001856:	e008      	b.n	800186a <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <DS18B20_GetTemperature+0x40>)
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	4413      	add	r3, r2
 8001860:	3308      	adds	r3, #8
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]
	return 1;
 8001868:	2301      	movs	r3, #1

}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000244 	.word	0x20000244

0800187c <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	2300      	movs	r3, #0
 800188c:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, _DS18B20_GPIO, _DS18B20_PIN); // Init OneWire bus
 800188e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001892:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001896:	481e      	ldr	r0, [pc, #120]	; (8001910 <DS18B20_Init+0x94>)
 8001898:	f7ff fdaa 	bl	80013f0 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 800189c:	481c      	ldr	r0, [pc, #112]	; (8001910 <DS18B20_Init+0x94>)
 800189e:	f7ff fd50 	bl	8001342 <OneWire_First>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73fb      	strb	r3, [r7, #15]
	while(next)
 80018a6:	e018      	b.n	80018da <DS18B20_Init+0x5e>
	{
		TempSensorCount++;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <DS18B20_Init+0x98>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <DS18B20_Init+0x98>)
 80018b2:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	73ba      	strb	r2, [r7, #14]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <DS18B20_Init+0x9c>)
 80018be:	4413      	add	r3, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	4813      	ldr	r0, [pc, #76]	; (8001910 <DS18B20_Init+0x94>)
 80018c4:	f7ff fd78 	bl	80013b8 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80018c8:	4811      	ldr	r0, [pc, #68]	; (8001910 <DS18B20_Init+0x94>)
 80018ca:	f7ff fd4a 	bl	8001362 <OneWire_Next>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <DS18B20_Init+0x98>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d803      	bhi.n	80018e2 <DS18B20_Init+0x66>
	while(next)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e3      	bne.n	80018a8 <DS18B20_Init+0x2c>
 80018e0:	e000      	b.n	80018e4 <DS18B20_Init+0x68>
			break;
 80018e2:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	737b      	strb	r3, [r7, #13]
 80018e8:	e00a      	b.n	8001900 <DS18B20_Init+0x84>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe67 	bl	80015c4 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 80018f6:	f7ff fda7 	bl	8001448 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	3301      	adds	r3, #1
 80018fe:	737b      	strb	r3, [r7, #13]
 8001900:	7b7a      	ldrb	r2, [r7, #13]
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3f0      	bcc.n	80018ea <DS18B20_Init+0x6e>
	}
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000284 	.word	0x20000284
 8001914:	2000020c 	.word	0x2000020c
 8001918:	20000244 	.word	0x20000244

0800191c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800194a:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <MX_GPIO_Init+0x17c>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a52      	ldr	r2, [pc, #328]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <MX_GPIO_Init+0x17c>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a46      	ldr	r2, [pc, #280]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <MX_GPIO_Init+0x17c>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_DIODE_Pin|CS_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f240 2111 	movw	r1, #529	; 0x211
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f001 fd04 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2101      	movs	r1, #1
 80019a4:	483d      	ldr	r0, [pc, #244]	; (8001a9c <MX_GPIO_Init+0x180>)
 80019a6:	f001 fcff 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019b0:	483b      	ldr	r0, [pc, #236]	; (8001aa0 <MX_GPIO_Init+0x184>)
 80019b2:	f001 fcf9 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <MX_GPIO_Init+0x188>)
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4835      	ldr	r0, [pc, #212]	; (8001aa0 <MX_GPIO_Init+0x184>)
 80019cc:	f001 fb2c 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_DIODE_Pin;
 80019d0:	2301      	movs	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019d8:	2302      	movs	r3, #2
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_DIODE_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f001 fb1d 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA9 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_9;
 80019ee:	f44f 7304 	mov.w	r3, #528	; 0x210
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f001 fb0d 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_Pin;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	481d      	ldr	r0, [pc, #116]	; (8001a9c <MX_GPIO_Init+0x180>)
 8001a26:	f001 faff 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_SENSOR_Pin;
 8001a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_GPIO_Init+0x188>)
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a42:	f001 faf1 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_DAT_Pin;
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711_DAT_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <MX_GPIO_Init+0x184>)
 8001a5c:	f001 fae4 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_CLK_Pin;
 8001a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HX711_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <MX_GPIO_Init+0x184>)
 8001a7a:	f001 fad5 	bl	8003028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2017      	movs	r0, #23
 8001a84:	f001 fa59 	bl	8002f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a88:	2017      	movs	r0, #23
 8001a8a:	f001 fa72 	bl	8002f72 <HAL_NVIC_EnableIRQ>

}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400
 8001aa0:	48000800 	.word	0x48000800
 8001aa4:	10210000 	.word	0x10210000

08001aa8 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8001ab2:	e006      	b.n	8001ac2 <hx711_delay_us+0x1a>
  {
    delay--;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	607b      	str	r3, [r7, #4]
    __NOP(); __NOP(); __NOP(); __NOP();
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
  while (delay > 0)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f5      	bne.n	8001ab4 <hx711_delay_us+0xc>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8001adc:	e002      	b.n	8001ae4 <hx711_lock+0x10>
    hx711_delay(1);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f001 f92e 	bl	8002d40 <HAL_Delay>
  while (hx711->lock)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7d1b      	ldrb	r3, [r3, #20]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f8      	bne.n	8001ade <hx711_lock+0xa>
  hx711->lock = 1;      
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	751a      	strb	r2, [r3, #20]
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	751a      	strb	r2, [r3, #20]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff ffd5 	bl	8001ad4 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	88fa      	ldrh	r2, [r7, #6]
 8001b34:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001b40:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f001 fa5d 	bl	8003028 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b76:	2302      	movs	r3, #2
 8001b78:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8001b7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	6838      	ldr	r0, [r7, #0]
 8001b86:	f001 fa4f 	bl	8003028 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	891b      	ldrh	r3, [r3, #8]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4619      	mov	r1, r3
 8001b96:	f001 fc07 	bl	80033a8 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f001 f8d0 	bl	8002d40 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	891b      	ldrh	r3, [r3, #8]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	f001 fbfc 	bl	80033a8 <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8001bb0:	200a      	movs	r0, #10
 8001bb2:	f001 f8c5 	bl	8002d40 <HAL_Delay>
  hx711_value(hx711);
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 f80a 	bl	8001bd0 <hx711_value>
  hx711_value(hx711);
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f807 	bl	8001bd0 <hx711_value>
  hx711_unlock(hx711); 
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff ff99 	bl	8001afa <hx711_unlock>
}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8001bdc:	f001 f8a4 	bl	8002d28 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001be2:	e00b      	b.n	8001bfc <hx711_value+0x2c>
  {
    hx711_delay(1);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f001 f8ab 	bl	8002d40 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8001bea:	f001 f89d 	bl	8002d28 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b96      	cmp	r3, #150	; 0x96
 8001bf6:	d901      	bls.n	8001bfc <hx711_value+0x2c>
      return 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e055      	b.n	8001ca8 <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	895b      	ldrh	r3, [r3, #10]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f001 fbb6 	bl	8003378 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d0e8      	beq.n	8001be4 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	74fb      	strb	r3, [r7, #19]
 8001c16:	e02a      	b.n	8001c6e <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	891b      	ldrh	r3, [r3, #8]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4619      	mov	r1, r3
 8001c24:	f001 fbc0 	bl	80033a8 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001c28:	f7ff ff3e 	bl	8001aa8 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	891b      	ldrh	r3, [r3, #8]
 8001c34:	2200      	movs	r2, #0
 8001c36:	4619      	mov	r1, r3
 8001c38:	f001 fbb6 	bl	80033a8 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001c3c:	f7ff ff34 	bl	8001aa8 <hx711_delay_us>
    data = data << 1;    
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	895b      	ldrh	r3, [r3, #10]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4610      	mov	r0, r2
 8001c52:	f001 fb91 	bl	8003378 <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <hx711_value+0x92>
      data ++;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8001c62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	74fb      	strb	r3, [r7, #19]
 8001c6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c72:	2b17      	cmp	r3, #23
 8001c74:	ddd0      	ble.n	8001c18 <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001c7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	891b      	ldrh	r3, [r3, #8]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f001 fb8d 	bl	80033a8 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001c8e:	f7ff ff0b 	bl	8001aa8 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	891b      	ldrh	r3, [r3, #8]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f001 fb83 	bl	80033a8 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001ca2:	f7ff ff01 	bl	8001aa8 <hx711_delay_us>
  return data;    
 8001ca6:	697b      	ldr	r3, [r7, #20]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8001cb0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001cb4:	b088      	sub	sp, #32
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff08 	bl	8001ad4 <hx711_lock>
  int64_t  ave = 0;
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	e9c7 3406 	strd	r3, r4, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	82fb      	strh	r3, [r7, #22]
 8001cd4:	e014      	b.n	8001d00 <hx711_weight+0x50>
  {
    ave += hx711_value(hx711);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff7a 	bl	8001bd0 <hx711_value>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	469b      	mov	fp, r3
 8001ce0:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001ce4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001ce8:	eb1b 0301 	adds.w	r3, fp, r1
 8001cec:	eb4c 0402 	adc.w	r4, ip, r2
 8001cf0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    hx711_delay(5);
 8001cf4:	2005      	movs	r0, #5
 8001cf6:	f001 f823 	bl	8002d40 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8001cfa:	8afb      	ldrh	r3, [r7, #22]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	82fb      	strh	r3, [r7, #22]
 8001d00:	8afa      	ldrh	r2, [r7, #22]
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d3e6      	bcc.n	8001cd6 <hx711_weight+0x26>
  }
  int32_t data = (int32_t)(ave / sample);
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	f04f 0400 	mov.w	r4, #0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4623      	mov	r3, r4
 8001d12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d16:	f7fe ff47 	bl	8000ba8 <__aeabi_ldivmod>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d3a:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fedb 	bl	8001afa <hx711_unlock>
  return answer;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	ee07 3a90 	vmov	s15, r3
}
 8001d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
	...

08001d58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <MX_I2C1_Init+0x78>)
 8001d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d64:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <MX_I2C1_Init+0x7c>)
 8001d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d92:	480e      	ldr	r0, [pc, #56]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001d94:	f001 fb38 	bl	8003408 <HAL_I2C_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d9e:	f000 fab7 	bl	8002310 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4809      	ldr	r0, [pc, #36]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001da6:	f001 fbbe 	bl	8003526 <HAL_I2CEx_ConfigAnalogFilter>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001db0:	f000 faae 	bl	8002310 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001db4:	2100      	movs	r1, #0
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_I2C1_Init+0x74>)
 8001db8:	f001 fc00 	bl	80035bc <HAL_I2CEx_ConfigDigitalFilter>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dc2:	f000 faa5 	bl	8002310 <Error_Handler>
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000298 	.word	0x20000298
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	10909cec 	.word	0x10909cec

08001dd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_I2C_MspInit+0x7c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d128      	bne.n	8001e4c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_I2C_MspInit+0x80>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_I2C_MspInit+0x80>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_I2C_MspInit+0x80>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin|LCD_I2C_SCL_Pin;
 8001e12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e18:	2312      	movs	r3, #18
 8001e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e24:	2304      	movs	r3, #4
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <HAL_I2C_MspInit+0x84>)
 8001e30:	f001 f8fa 	bl	8003028 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_I2C_MspInit+0x80>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_I2C_MspInit+0x80>)
 8001e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_I2C_MspInit+0x80>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40005400 	.word	0x40005400
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48000400 	.word	0x48000400

08001e60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001e80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e88:	e000      	b.n	8001e8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f9      	beq.n	8001e8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart2;
int _write(int file, char *ptr, int len)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e009      	b.n	8001ed4 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ffc9 	bl	8001e60 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dbf1      	blt.n	8001ec0 <_write+0x12>
	}
	return len;
 8001edc:	687b      	ldr	r3, [r7, #4]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == RPM_SENSOR_Pin)
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef8:	d126      	bne.n	8001f48 <HAL_GPIO_EXTI_Callback+0x60>
  {
	  uint32_t now = TIM16->CNT; // Get current timer count + compensation
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	617b      	str	r3, [r7, #20]
	  uint32_t tmp_compensation = compensation;
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	613b      	str	r3, [r7, #16]
	  compensation = 0; // zero compensation value
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
	  uint32_t delta = now + tmp_compensation - lastCapture; // Calculate time difference
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	441a      	add	r2, r3
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_GPIO_EXTI_Callback+0x74>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	60fb      	str	r3, [r7, #12]
	  lastCapture = now;
 8001f1a:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <HAL_GPIO_EXTI_Callback+0x74>)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	6013      	str	r3, [r2, #0]
	  capturedBuffer[bufferIndex] = delta; // Store time difference in buffer
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_GPIO_EXTI_Callback+0x78>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4619      	mov	r1, r3
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  bufferIndex = (bufferIndex + 1) % 2; // Wrap buffer index
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_GPIO_EXTI_Callback+0x78>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	bfb8      	it	lt
 8001f40:	425b      	neglt	r3, r3
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_GPIO_EXTI_Callback+0x78>)
 8001f46:	701a      	strb	r2, [r3, #0]
  }
}
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40014400 	.word	0x40014400
 8001f58:	20000220 	.word	0x20000220
 8001f5c:	20000210 	.word	0x20000210
 8001f60:	2000021c 	.word	0x2000021c
 8001f64:	20000214 	.word	0x20000214

08001f68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d106      	bne.n	8001f86 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		compensation += 0xFFFF; // compensate for timer overflow
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001f80:	33ff      	adds	r3, #255	; 0xff
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001f84:	6013      	str	r3, [r2, #0]
	}
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000584 	.word	0x20000584
 8001f98:	20000220 	.word	0x20000220

08001f9c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_UART_RxCpltCallback+0x28>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d104      	bne.n	8001fba <HAL_UART_RxCpltCallback+0x1e>
    {
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4905      	ldr	r1, [pc, #20]	; (8001fc8 <HAL_UART_RxCpltCallback+0x2c>)
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <HAL_UART_RxCpltCallback+0x28>)
 8001fb6:	f003 fdeb 	bl	8005b90 <HAL_UART_Receive_IT>
    }
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000364 	.word	0x20000364
 8001fc8:	20000224 	.word	0x20000224

08001fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b097      	sub	sp, #92	; 0x5c
 8001fd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd2:	f000 fe39 	bl	8002c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd6:	f000 f8d1 	bl	800217c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fda:	f7ff fc9f 	bl	800191c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fde:	f000 fcd5 	bl	800298c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001fe2:	f7ff feb9 	bl	8001d58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001fe6:	f000 f9df 	bl	80023a8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001fea:	f000 fcff 	bl	80029ec <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001fee:	f004 fcbd 	bl	800696c <MX_FATFS_Init>
  MX_RTC_Init();
 8001ff2:	f000 f995 	bl	8002320 <MX_RTC_Init>
  MX_TIM6_Init();
 8001ff6:	f000 fbe5 	bl	80027c4 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001ffa:	f000 fc19 	bl	8002830 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001ffe:	f000 fb8d 	bl	800271c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002002:	f000 fc93 	bl	800292c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  hx711_t loadcell = {0};
 8002006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	615a      	str	r2, [r3, #20]
  uint32_t rpm;
  float weight;
  hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_CLK_Pin, HX711_DAT_GPIO_Port, HX711_DAT_Pin);
 8002018:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800201c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <main+0x18c>)
 8002024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002028:	494b      	ldr	r1, [pc, #300]	; (8002158 <main+0x18c>)
 800202a:	f7ff fd73 	bl	8001b14 <hx711_init>
  //hx711_coef_set(&loadcell, 354.5); // read after calibration
  //hx711_tare(&loadcell, 10);
  loadcell.coef = 1;
 800202e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
  loadcell.offset = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_TIM_Base_Start_IT(&htim16);
 8002038:	4848      	ldr	r0, [pc, #288]	; (800215c <main+0x190>)
 800203a:	f003 f87d 	bl	8005138 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	2101      	movs	r1, #1
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f001 f9af 	bl	80033a8 <HAL_GPIO_WritePin>

  float temperature;
  DS18B20_Init(DS18B20_Resolution_12bits);
 800204a:	200c      	movs	r0, #12
 800204c:	f7ff fc16 	bl	800187c <DS18B20_Init>
  char uart_buf[32];

  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8002050:	2201      	movs	r2, #1
 8002052:	4943      	ldr	r1, [pc, #268]	; (8002160 <main+0x194>)
 8002054:	4843      	ldr	r0, [pc, #268]	; (8002164 <main+0x198>)
 8002056:	f003 fd9b 	bl	8005b90 <HAL_UART_Receive_IT>
  {
	  /*if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_SET);
	  else
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);*/
	  rpm = measure_RPM();
 800205a:	f000 f913 	bl	8002284 <measure_RPM>
 800205e:	64b8      	str	r0, [r7, #72]	; 0x48
	  if(rpm > 0) printf("RPM value: %lu\n", rpm);
 8002060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <main+0xa2>
 8002066:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002068:	483f      	ldr	r0, [pc, #252]	; (8002168 <main+0x19c>)
 800206a:	f005 f9d3 	bl	8007414 <iprintf>
	  weight = hx711_weight(&loadcell, 1);
 800206e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002072:	2101      	movs	r1, #1
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fe1b 	bl	8001cb0 <hx711_weight>
 800207a:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	  printf("Weight value : %f\n", weight);
 800207e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002080:	f7fe fa62 	bl	8000548 <__aeabi_f2d>
 8002084:	4603      	mov	r3, r0
 8002086:	460c      	mov	r4, r1
 8002088:	461a      	mov	r2, r3
 800208a:	4623      	mov	r3, r4
 800208c:	4837      	ldr	r0, [pc, #220]	; (800216c <main+0x1a0>)
 800208e:	f005 f9c1 	bl	8007414 <iprintf>

	  	  	DS18B20_ReadAll();
 8002092:	f7ff fb59 	bl	8001748 <DS18B20_ReadAll>
	    	DS18B20_StartAll();
 8002096:	f7ff f9d7 	bl	8001448 <DS18B20_StartAll>
	    	uint8_t ROM_tmp[8];
	    	uint8_t i;
	  for(i = 0; i < DS18B20_Quantity(); i++)
 800209a:	2300      	movs	r3, #0
 800209c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80020a0:	e03d      	b.n	800211e <main+0x152>
	    	{
	    		if(DS18B20_GetTemperature(i, &temperature))
 80020a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fbc3 	bl	8001838 <DS18B20_GetTemperature>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02d      	beq.n	8002114 <main+0x148>
	    		{
	    			DS18B20_GetROM(i, ROM_tmp);
 80020b8:	463a      	mov	r2, r7
 80020ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fb81 	bl	80017c8 <DS18B20_GetROM>
	    					sprintf(uart_buf, "Temperature: %.2f\r\n", temperature);
 80020c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa3d 	bl	8000548 <__aeabi_f2d>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	f107 0008 	add.w	r0, r7, #8
 80020d6:	461a      	mov	r2, r3
 80020d8:	4623      	mov	r3, r4
 80020da:	4925      	ldr	r1, [pc, #148]	; (8002170 <main+0x1a4>)
 80020dc:	f005 f9b2 	bl	8007444 <siprintf>
	    			        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f873 	bl	80001d0 <strlen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	f107 0108 	add.w	r1, r7, #8
 80020f2:	2364      	movs	r3, #100	; 0x64
 80020f4:	481f      	ldr	r0, [pc, #124]	; (8002174 <main+0x1a8>)
 80020f6:	f003 fcb7 	bl	8005a68 <HAL_UART_Transmit>
	    			        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe f866 	bl	80001d0 <strlen>
 8002104:	4603      	mov	r3, r0
 8002106:	b29a      	uxth	r2, r3
 8002108:	f107 0108 	add.w	r1, r7, #8
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	4815      	ldr	r0, [pc, #84]	; (8002164 <main+0x198>)
 8002110:	f003 fcaa 	bl	8005a68 <HAL_UART_Transmit>
	  for(i = 0; i < DS18B20_Quantity(); i++)
 8002114:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002118:	3301      	adds	r3, #1
 800211a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800211e:	f7ff fb7f 	bl	8001820 <DS18B20_Quantity>
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800212a:	4293      	cmp	r3, r2
 800212c:	d3b9      	bcc.n	80020a2 <main+0xd6>

	    		}
	    	}
	  if(RX_BUFFER[0] == '1')
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <main+0x194>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b31      	cmp	r3, #49	; 0x31
 8002134:	d105      	bne.n	8002142 <main+0x176>
	  	          {
		  	  	  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, 1);
 8002136:	2201      	movs	r2, #1
 8002138:	2101      	movs	r1, #1
 800213a:	480f      	ldr	r0, [pc, #60]	; (8002178 <main+0x1ac>)
 800213c:	f001 f934 	bl	80033a8 <HAL_GPIO_WritePin>
 8002140:	e78b      	b.n	800205a <main+0x8e>
	  	          }
	  	          else if(RX_BUFFER[0] == '0')
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <main+0x194>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b30      	cmp	r3, #48	; 0x30
 8002148:	d187      	bne.n	800205a <main+0x8e>
	  	          {

	  	        	HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2101      	movs	r1, #1
 800214e:	480a      	ldr	r0, [pc, #40]	; (8002178 <main+0x1ac>)
 8002150:	f001 f92a 	bl	80033a8 <HAL_GPIO_WritePin>
  {
 8002154:	e781      	b.n	800205a <main+0x8e>
 8002156:	bf00      	nop
 8002158:	48000800 	.word	0x48000800
 800215c:	20000584 	.word	0x20000584
 8002160:	20000224 	.word	0x20000224
 8002164:	20000364 	.word	0x20000364
 8002168:	08009538 	.word	0x08009538
 800216c:	08009548 	.word	0x08009548
 8002170:	0800955c 	.word	0x0800955c
 8002174:	200003e4 	.word	0x200003e4
 8002178:	48000400 	.word	0x48000400

0800217c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0b8      	sub	sp, #224	; 0xe0
 8002180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002182:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002186:	2244      	movs	r2, #68	; 0x44
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fcde 	bl	8006b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002190:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021a0:	463b      	mov	r3, r7
 80021a2:	2288      	movs	r2, #136	; 0x88
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fcd0 	bl	8006b4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80021ac:	230a      	movs	r3, #10
 80021ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ba:	2310      	movs	r3, #16
 80021bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80021d8:	230a      	movs	r3, #10
 80021da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021de:	2307      	movs	r3, #7
 80021e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021e4:	2302      	movs	r3, #2
 80021e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021ea:	2302      	movs	r3, #2
 80021ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 fa91 	bl	800371c <HAL_RCC_OscConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002200:	f000 f886 	bl	8002310 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002204:	230f      	movs	r3, #15
 8002206:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800220a:	2303      	movs	r3, #3
 800220c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002222:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002226:	2104      	movs	r1, #4
 8002228:	4618      	mov	r0, r3
 800222a:	f001 fe5d 	bl	8003ee8 <HAL_RCC_ClockConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002234:	f000 f86c 	bl	8002310 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <SystemClock_Config+0x104>)
 800223a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800223c:	2300      	movs	r3, #0
 800223e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002240:	2300      	movs	r3, #0
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002244:	2300      	movs	r3, #0
 8002246:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002248:	2300      	movs	r3, #0
 800224a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002254:	463b      	mov	r3, r7
 8002256:	4618      	mov	r0, r3
 8002258:	f002 f84a 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002262:	f000 f855 	bl	8002310 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002266:	f44f 7000 	mov.w	r0, #512	; 0x200
 800226a:	f001 fa01 	bl	8003670 <HAL_PWREx_ControlVoltageScaling>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002274:	f000 f84c 	bl	8002310 <Error_Handler>
  }
}
 8002278:	bf00      	nop
 800227a:	37e0      	adds	r7, #224	; 0xe0
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	00020047 	.word	0x00020047

08002284 <measure_RPM>:

/* USER CODE BEGIN 4 */
uint32_t measure_RPM(){
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
	uint32_t delta1 = capturedBuffer[0];
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <measure_RPM+0x80>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	617b      	str	r3, [r7, #20]
	uint32_t delta2 = capturedBuffer[1];
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <measure_RPM+0x80>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	613b      	str	r3, [r7, #16]
	if (delta1 > 0 && delta2 > 0) {
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02c      	beq.n	80022f6 <measure_RPM+0x72>
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d029      	beq.n	80022f6 <measure_RPM+0x72>
		uint32_t delta = delta1 + delta2;
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
		float frequency = 1.0f / (delta / 2.0f / 10000.0f ); // Calculate frequency in Hz
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80022b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022bc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002308 <measure_RPM+0x84>
 80022c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022cc:	edc7 7a02 	vstr	s15, [r7, #8]
		uint32_t rpm = frequency * 60.0f; // Calculate RPM
 80022d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022d4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800230c <measure_RPM+0x88>
 80022d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e0:	ee17 3a90 	vmov	r3, s15
 80022e4:	607b      	str	r3, [r7, #4]
		capturedBuffer[0] = 0;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <measure_RPM+0x80>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
		capturedBuffer[1] = 0;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <measure_RPM+0x80>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	605a      	str	r2, [r3, #4]
		return rpm;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	e000      	b.n	80022f8 <measure_RPM+0x74>
	}
	else return 0;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	20000214 	.word	0x20000214
 8002308:	461c4000 	.word	0x461c4000
 800230c:	42700000 	.word	0x42700000

08002310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <MX_RTC_Init+0x48>)
 8002326:	4a11      	ldr	r2, [pc, #68]	; (800236c <MX_RTC_Init+0x4c>)
 8002328:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MX_RTC_Init+0x48>)
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <MX_RTC_Init+0x48>)
 8002332:	227f      	movs	r2, #127	; 0x7f
 8002334:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_RTC_Init+0x48>)
 8002338:	22ff      	movs	r2, #255	; 0xff
 800233a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <MX_RTC_Init+0x48>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_RTC_Init+0x48>)
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <MX_RTC_Init+0x48>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_RTC_Init+0x48>)
 8002350:	2200      	movs	r2, #0
 8002352:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <MX_RTC_Init+0x48>)
 8002356:	f002 fc7b 	bl	8004c50 <HAL_RTC_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002360:	f7ff ffd6 	bl	8002310 <Error_Handler>
  }

}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000464 	.word	0x20000464
 800236c:	40002800 	.word	0x40002800

08002370 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_RTC_MspInit+0x30>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d107      	bne.n	8002392 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_RTC_MspInit+0x34>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_RTC_MspInit+0x34>)
 800238a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800238e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40002800 	.word	0x40002800
 80023a4:	40021000 	.word	0x40021000

080023a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_SPI1_Init+0x74>)
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <MX_SPI1_Init+0x78>)
 80023b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_SPI1_Init+0x74>)
 80023b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_SPI1_Init+0x74>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_SPI1_Init+0x74>)
 80023c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80023c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <MX_SPI1_Init+0x74>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <MX_SPI1_Init+0x74>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_SPI1_Init+0x74>)
 80023d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_SPI1_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_SPI1_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_SPI1_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_SPI1_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_SPI1_Init+0x74>)
 80023f6:	2207      	movs	r2, #7
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_SPI1_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_SPI1_Init+0x74>)
 8002402:	2208      	movs	r2, #8
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_SPI1_Init+0x74>)
 8002408:	f002 fd34 	bl	8004e74 <HAL_SPI_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002412:	f7ff ff7d 	bl	8002310 <Error_Handler>
  }

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000488 	.word	0x20000488
 8002420:	40013000 	.word	0x40013000

08002424 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_SPI_MspInit+0x7c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d128      	bne.n	8002498 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 800244c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002450:	6613      	str	r3, [r2, #96]	; 0x60
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002476:	23e0      	movs	r3, #224	; 0xe0
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002486:	2305      	movs	r3, #5
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002494:	f000 fdc8 	bl	8003028 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40013000 	.word	0x40013000
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_MspInit+0x44>)
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_MspInit+0x44>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_MspInit+0x44>)
 80024bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_MspInit+0x44>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_MspInit+0x44>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_MspInit+0x44>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002544:	f000 fbdc 	bl	8002d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002550:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002554:	f000 ff40 	bl	80033d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002560:	4803      	ldr	r0, [pc, #12]	; (8002570 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002562:	f002 fe59 	bl	8005218 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002566:	4803      	ldr	r0, [pc, #12]	; (8002574 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002568:	f002 fe56 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000538 	.word	0x20000538
 8002574:	20000584 	.word	0x20000584

08002578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <USART1_IRQHandler+0x10>)
 800257e:	f003 fba9 	bl	8005cd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000364 	.word	0x20000364

0800258c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <USART2_IRQHandler+0x10>)
 8002592:	f003 fb9f 	bl	8005cd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200003e4 	.word	0x200003e4

080025a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e00a      	b.n	80025c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025b2:	f3af 8000 	nop.w
 80025b6:	4601      	mov	r1, r0
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	60ba      	str	r2, [r7, #8]
 80025be:	b2ca      	uxtb	r2, r1
 80025c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	dbf0      	blt.n	80025b2 <_read+0x12>
	}

return len;
 80025d0:	687b      	ldr	r3, [r7, #4]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_close>:
	}
	return len;
}

int _close(int file)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	return -1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002602:	605a      	str	r2, [r3, #4]
	return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_isatty>:

int _isatty(int file)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
	return 1;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
	return 0;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <_sbrk+0x5c>)
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <_sbrk+0x60>)
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <_sbrk+0x64>)
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <_sbrk+0x68>)
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	429a      	cmp	r2, r3
 8002672:	d207      	bcs.n	8002684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002674:	f004 fa40 	bl	8006af8 <__errno>
 8002678:	4602      	mov	r2, r0
 800267a:	230c      	movs	r3, #12
 800267c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	e009      	b.n	8002698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <_sbrk+0x64>)
 8002694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20018000 	.word	0x20018000
 80026a4:	00000400 	.word	0x00000400
 80026a8:	20000228 	.word	0x20000228
 80026ac:	20002648 	.word	0x20002648

080026b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <SystemInit+0x64>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	4a16      	ldr	r2, [pc, #88]	; (8002714 <SystemInit+0x64>)
 80026bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <SystemInit+0x68>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a13      	ldr	r2, [pc, #76]	; (8002718 <SystemInit+0x68>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <SystemInit+0x68>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <SystemInit+0x68>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <SystemInit+0x68>)
 80026dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80026e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <SystemInit+0x68>)
 80026e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <SystemInit+0x68>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <SystemInit+0x68>)
 80026f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <SystemInit+0x68>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SystemInit+0x64>)
 8002702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002706:	609a      	str	r2, [r3, #8]
#endif
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00
 8002718:	40021000 	.word	0x40021000

0800271c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <MX_TIM1_Init+0xa0>)
 800273c:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <MX_TIM1_Init+0xa4>)
 800273e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <MX_TIM1_Init+0xa0>)
 8002742:	224f      	movs	r2, #79	; 0x4f
 8002744:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <MX_TIM1_Init+0xa0>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <MX_TIM1_Init+0xa0>)
 800274e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002752:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <MX_TIM1_Init+0xa0>)
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <MX_TIM1_Init+0xa0>)
 800275c:	2200      	movs	r2, #0
 800275e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <MX_TIM1_Init+0xa0>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002766:	4815      	ldr	r0, [pc, #84]	; (80027bc <MX_TIM1_Init+0xa0>)
 8002768:	f002 fc27 	bl	8004fba <HAL_TIM_Base_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002772:	f7ff fdcd 	bl	8002310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4619      	mov	r1, r3
 8002782:	480e      	ldr	r0, [pc, #56]	; (80027bc <MX_TIM1_Init+0xa0>)
 8002784:	f002 fe67 	bl	8005456 <HAL_TIM_ConfigClockSource>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800278e:	f7ff fdbf 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <MX_TIM1_Init+0xa0>)
 80027a4:	f003 f86c 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80027ae:	f7ff fdaf 	bl	8002310 <Error_Handler>
  }

}
 80027b2:	bf00      	nop
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000538 	.word	0x20000538
 80027c0:	40012c00 	.word	0x40012c00

080027c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <MX_TIM6_Init+0x64>)
 80027d6:	4a15      	ldr	r2, [pc, #84]	; (800282c <MX_TIM6_Init+0x68>)
 80027d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_TIM6_Init+0x64>)
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_TIM6_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_TIM6_Init+0x64>)
 80027e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_TIM6_Init+0x64>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027f4:	480c      	ldr	r0, [pc, #48]	; (8002828 <MX_TIM6_Init+0x64>)
 80027f6:	f002 fbe0 	bl	8004fba <HAL_TIM_Base_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002800:	f7ff fd86 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	4619      	mov	r1, r3
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_TIM6_Init+0x64>)
 8002812:	f003 f835 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800281c:	f7ff fd78 	bl	8002310 <Error_Handler>
  }

}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200004ec 	.word	0x200004ec
 800282c:	40001000 	.word	0x40001000

08002830 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_TIM16_Init+0x48>)
 8002836:	4a11      	ldr	r2, [pc, #68]	; (800287c <MX_TIM16_Init+0x4c>)
 8002838:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MX_TIM16_Init+0x48>)
 800283c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002840:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <MX_TIM16_Init+0x48>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <MX_TIM16_Init+0x48>)
 800284a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800284e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_TIM16_Init+0x48>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <MX_TIM16_Init+0x48>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_TIM16_Init+0x48>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_TIM16_Init+0x48>)
 8002864:	f002 fba9 	bl	8004fba <HAL_TIM_Base_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800286e:	f7ff fd4f 	bl	8002310 <Error_Handler>
  }

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000584 	.word	0x20000584
 800287c:	40014400 	.word	0x40014400

08002880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a23      	ldr	r2, [pc, #140]	; (800291c <HAL_TIM_Base_MspInit+0x9c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d114      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	4a22      	ldr	r2, [pc, #136]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 8002898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800289c:	6613      	str	r3, [r2, #96]	; 0x60
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2019      	movs	r0, #25
 80028b0:	f000 fb43 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028b4:	2019      	movs	r0, #25
 80028b6:	f000 fb5c 	bl	8002f72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80028ba:	e02a      	b.n	8002912 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_TIM_Base_MspInit+0xa4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10c      	bne.n	80028e0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	4a15      	ldr	r2, [pc, #84]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 80028cc:	f043 0310 	orr.w	r3, r3, #16
 80028d0:	6593      	str	r3, [r2, #88]	; 0x58
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
}
 80028de:	e018      	b.n	8002912 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_TIM_Base_MspInit+0xa8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d113      	bne.n	8002912 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	6613      	str	r3, [r2, #96]	; 0x60
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_TIM_Base_MspInit+0xa0>)
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	2019      	movs	r0, #25
 8002908:	f000 fb17 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800290c:	2019      	movs	r0, #25
 800290e:	f000 fb30 	bl	8002f72 <HAL_NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40021000 	.word	0x40021000
 8002924:	40001000 	.word	0x40001000
 8002928:	40014400 	.word	0x40014400

0800292c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <MX_USART1_UART_Init+0x58>)
 8002932:	4a15      	ldr	r2, [pc, #84]	; (8002988 <MX_USART1_UART_Init+0x5c>)
 8002934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <MX_USART1_UART_Init+0x58>)
 8002938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800293c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_USART1_UART_Init+0x58>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <MX_USART1_UART_Init+0x58>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <MX_USART1_UART_Init+0x58>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_USART1_UART_Init+0x58>)
 8002952:	220c      	movs	r2, #12
 8002954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <MX_USART1_UART_Init+0x58>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_USART1_UART_Init+0x58>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <MX_USART1_UART_Init+0x58>)
 8002964:	2200      	movs	r2, #0
 8002966:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <MX_USART1_UART_Init+0x58>)
 800296a:	2200      	movs	r2, #0
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_USART1_UART_Init+0x58>)
 8002970:	f003 f82c 	bl	80059cc <HAL_UART_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800297a:	f7ff fcc9 	bl	8002310 <Error_Handler>
  }

}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000364 	.word	0x20000364
 8002988:	40013800 	.word	0x40013800

0800298c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 8002992:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <MX_USART2_UART_Init+0x5c>)
 8002994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 8002998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800299c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029b2:	220c      	movs	r2, #12
 80029b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ce:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_USART2_UART_Init+0x58>)
 80029d0:	f002 fffc 	bl	80059cc <HAL_UART_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029da:	f7ff fc99 	bl	8002310 <Error_Handler>
  }

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200003e4 	.word	0x200003e4
 80029e8:	40004400 	.word	0x40004400

080029ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <MX_USART3_UART_Init+0x5c>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 80029f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_USART3_UART_Init+0x58>)
 8002a30:	f002 ffcc 	bl	80059cc <HAL_UART_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002a3a:	f7ff fc69 	bl	8002310 <Error_Handler>
  }

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200002e4 	.word	0x200002e4
 8002a48:	40004800 	.word	0x40004800

08002a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08e      	sub	sp, #56	; 0x38
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a5c      	ldr	r2, [pc, #368]	; (8002bdc <HAL_UART_MspInit+0x190>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d14e      	bne.n	8002b0c <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a72:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6613      	str	r3, [r2, #96]	; 0x60
 8002a7a:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	4b56      	ldr	r3, [pc, #344]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a55      	ldr	r2, [pc, #340]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a4f      	ldr	r2, [pc, #316]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ac8:	2307      	movs	r3, #7
 8002aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad6:	f000 faa7 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ada:	2340      	movs	r3, #64	; 0x40
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aea:	2307      	movs	r3, #7
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af2:	4619      	mov	r1, r3
 8002af4:	483b      	ldr	r0, [pc, #236]	; (8002be4 <HAL_UART_MspInit+0x198>)
 8002af6:	f000 fa97 	bl	8003028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2100      	movs	r1, #0
 8002afe:	2025      	movs	r0, #37	; 0x25
 8002b00:	f000 fa1b 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b04:	2025      	movs	r0, #37	; 0x25
 8002b06:	f000 fa34 	bl	8002f72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b0a:	e063      	b.n	8002bd4 <HAL_UART_MspInit+0x188>
  else if(uartHandle->Instance==USART2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a35      	ldr	r2, [pc, #212]	; (8002be8 <HAL_UART_MspInit+0x19c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d131      	bne.n	8002b7a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b16:	4b32      	ldr	r3, [pc, #200]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	4a31      	ldr	r2, [pc, #196]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	6593      	str	r3, [r2, #88]	; 0x58
 8002b22:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 8002b46:	230c      	movs	r3, #12
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b56:	2307      	movs	r3, #7
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b64:	f000 fa60 	bl	8003028 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	2026      	movs	r0, #38	; 0x26
 8002b6e:	f000 f9e4 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b72:	2026      	movs	r0, #38	; 0x26
 8002b74:	f000 f9fd 	bl	8002f72 <HAL_NVIC_EnableIRQ>
}
 8002b78:	e02c      	b.n	8002bd4 <HAL_UART_MspInit+0x188>
  else if(uartHandle->Instance==USART3)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <HAL_UART_MspInit+0x1a0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d127      	bne.n	8002bd4 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b90:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_UART_MspInit+0x194>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC_05_TX_Pin|HC_05_RX_Pin;
 8002bb4:	2330      	movs	r3, #48	; 0x30
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4808      	ldr	r0, [pc, #32]	; (8002bf0 <HAL_UART_MspInit+0x1a4>)
 8002bd0:	f000 fa2a 	bl	8003028 <HAL_GPIO_Init>
}
 8002bd4:	bf00      	nop
 8002bd6:	3738      	adds	r7, #56	; 0x38
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40021000 	.word	0x40021000
 8002be4:	48000400 	.word	0x48000400
 8002be8:	40004400 	.word	0x40004400
 8002bec:	40004800 	.word	0x40004800
 8002bf0:	48000800 	.word	0x48000800

08002bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bf8:	f7ff fd5a 	bl	80026b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002bfc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002bfe:	e003      	b.n	8002c08 <LoopCopyDataInit>

08002c00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c06:	3104      	adds	r1, #4

08002c08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c08:	480a      	ldr	r0, [pc, #40]	; (8002c34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c10:	d3f6      	bcc.n	8002c00 <CopyDataInit>
	ldr	r2, =_sbss
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c14:	e002      	b.n	8002c1c <LoopFillZerobss>

08002c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c18:	f842 3b04 	str.w	r3, [r2], #4

08002c1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <LoopForever+0x16>)
	cmp	r2, r3
 8002c1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c20:	d3f9      	bcc.n	8002c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c22:	f003 ff6f 	bl	8006b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c26:	f7ff f9d1 	bl	8001fcc <main>

08002c2a <LoopForever>:

LoopForever:
    b LoopForever
 8002c2a:	e7fe      	b.n	8002c2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c2c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002c30:	08009888 	.word	0x08009888
	ldr	r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c38:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8002c3c:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8002c40:	20002648 	.word	0x20002648

08002c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c44:	e7fe      	b.n	8002c44 <ADC1_2_IRQHandler>
	...

08002c48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_Init+0x3c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <HAL_Init+0x3c>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5e:	2003      	movs	r0, #3
 8002c60:	f000 f960 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c64:	2000      	movs	r0, #0
 8002c66:	f000 f80f 	bl	8002c88 <HAL_InitTick>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	71fb      	strb	r3, [r7, #7]
 8002c74:	e001      	b.n	8002c7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c76:	f7ff fc17 	bl	80024a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40022000 	.word	0x40022000

08002c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_InitTick+0x6c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d023      	beq.n	8002ce4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_InitTick+0x70>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_InitTick+0x6c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f96b 	bl	8002f8e <HAL_SYSTICK_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10f      	bne.n	8002cde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d809      	bhi.n	8002cd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f000 f935 	bl	8002f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <HAL_InitTick+0x74>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e007      	b.n	8002ce8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e004      	b.n	8002ce8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e001      	b.n	8002ce8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	20000004 	.word	0x20000004

08002d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_IncTick+0x20>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x24>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_IncTick+0x24>)
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000008 	.word	0x20000008
 8002d24:	200005d0 	.word	0x200005d0

08002d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_GetTick+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	200005d0 	.word	0x200005d0

08002d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff ffee 	bl	8002d28 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d005      	beq.n	8002d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_Delay+0x40>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d66:	bf00      	nop
 8002d68:	f7ff ffde 	bl	8002d28 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d8f7      	bhi.n	8002d68 <HAL_Delay+0x28>
  {
  }
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000008 	.word	0x20000008

08002d84 <__NVIC_SetPriorityGrouping>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db6:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60d3      	str	r3, [r2, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_GetPriorityGrouping>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4907      	ldr	r1, [pc, #28]	; (8002e20 <__NVIC_EnableIRQ+0x38>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <__NVIC_SetPriority>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0a      	blt.n	8002e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	490c      	ldr	r1, [pc, #48]	; (8002e70 <__NVIC_SetPriority+0x4c>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e4c:	e00a      	b.n	8002e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4908      	ldr	r1, [pc, #32]	; (8002e74 <__NVIC_SetPriority+0x50>)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	440b      	add	r3, r1
 8002e62:	761a      	strb	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <NVIC_EncodePriority>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf28      	it	cs
 8002e96:	2304      	movcs	r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d902      	bls.n	8002ea8 <NVIC_EncodePriority+0x30>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b03      	subs	r3, #3
 8002ea6:	e000      	b.n	8002eaa <NVIC_EncodePriority+0x32>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	401a      	ands	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	4313      	orrs	r3, r2
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <SysTick_Config>:
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	f7ff ff8e 	bl	8002e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff29 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4c:	f7ff ff3e 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7ff ff8e 	bl	8002e78 <NVIC_EncodePriority>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff5d 	bl	8002e24 <__NVIC_SetPriority>
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff31 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffa2 	bl	8002ee0 <SysTick_Config>
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d005      	beq.n	8002fca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e029      	b.n	800301e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 020e 	bic.w	r2, r2, #14
 8002fd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f003 021c 	and.w	r2, r3, #28
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
    }
  }
  return status;
 800301e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003036:	e17f      	b.n	8003338 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2101      	movs	r1, #1
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8171 	beq.w	8003332 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d00b      	beq.n	8003070 <HAL_GPIO_Init+0x48>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d007      	beq.n	8003070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003064:	2b11      	cmp	r3, #17
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b12      	cmp	r3, #18
 800306e:	d130      	bne.n	80030d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a6:	2201      	movs	r2, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 0201 	and.w	r2, r3, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d118      	bne.n	8003110 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030e4:	2201      	movs	r2, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	f003 0201 	and.w	r2, r3, #1
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x128>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b12      	cmp	r3, #18
 800314e:	d123      	bne.n	8003198 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	220f      	movs	r2, #15
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	08da      	lsrs	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3208      	adds	r2, #8
 8003192:	6939      	ldr	r1, [r7, #16]
 8003194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0203 	and.w	r2, r3, #3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80ac 	beq.w	8003332 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_GPIO_Init+0x32c>)
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <HAL_GPIO_Init+0x32c>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6613      	str	r3, [r2, #96]	; 0x60
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <HAL_GPIO_Init+0x32c>)
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031f2:	4a59      	ldr	r2, [pc, #356]	; (8003358 <HAL_GPIO_Init+0x330>)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	3302      	adds	r3, #2
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800321c:	d025      	beq.n	800326a <HAL_GPIO_Init+0x242>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4e      	ldr	r2, [pc, #312]	; (800335c <HAL_GPIO_Init+0x334>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01f      	beq.n	8003266 <HAL_GPIO_Init+0x23e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <HAL_GPIO_Init+0x338>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d019      	beq.n	8003262 <HAL_GPIO_Init+0x23a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4c      	ldr	r2, [pc, #304]	; (8003364 <HAL_GPIO_Init+0x33c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_GPIO_Init+0x236>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4b      	ldr	r2, [pc, #300]	; (8003368 <HAL_GPIO_Init+0x340>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00d      	beq.n	800325a <HAL_GPIO_Init+0x232>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4a      	ldr	r2, [pc, #296]	; (800336c <HAL_GPIO_Init+0x344>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x22e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a49      	ldr	r2, [pc, #292]	; (8003370 <HAL_GPIO_Init+0x348>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_GPIO_Init+0x22a>
 800324e:	2306      	movs	r3, #6
 8003250:	e00c      	b.n	800326c <HAL_GPIO_Init+0x244>
 8003252:	2307      	movs	r3, #7
 8003254:	e00a      	b.n	800326c <HAL_GPIO_Init+0x244>
 8003256:	2305      	movs	r3, #5
 8003258:	e008      	b.n	800326c <HAL_GPIO_Init+0x244>
 800325a:	2304      	movs	r3, #4
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x244>
 800325e:	2303      	movs	r3, #3
 8003260:	e004      	b.n	800326c <HAL_GPIO_Init+0x244>
 8003262:	2302      	movs	r3, #2
 8003264:	e002      	b.n	800326c <HAL_GPIO_Init+0x244>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_GPIO_Init+0x244>
 800326a:	2300      	movs	r3, #0
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	f002 0203 	and.w	r2, r2, #3
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	4093      	lsls	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800327c:	4936      	ldr	r1, [pc, #216]	; (8003358 <HAL_GPIO_Init+0x330>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800328a:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_GPIO_Init+0x34c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ae:	4a31      	ldr	r2, [pc, #196]	; (8003374 <HAL_GPIO_Init+0x34c>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_GPIO_Init+0x34c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032d8:	4a26      	ldr	r2, [pc, #152]	; (8003374 <HAL_GPIO_Init+0x34c>)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_GPIO_Init+0x34c>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003302:	4a1c      	ldr	r2, [pc, #112]	; (8003374 <HAL_GPIO_Init+0x34c>)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_GPIO_Init+0x34c>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800332c:	4a11      	ldr	r2, [pc, #68]	; (8003374 <HAL_GPIO_Init+0x34c>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa22 f303 	lsr.w	r3, r2, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	f47f ae78 	bne.w	8003038 <HAL_GPIO_Init+0x10>
  }
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40021000 	.word	0x40021000
 8003358:	40010000 	.word	0x40010000
 800335c:	48000400 	.word	0x48000400
 8003360:	48000800 	.word	0x48000800
 8003364:	48000c00 	.word	0x48000c00
 8003368:	48001000 	.word	0x48001000
 800336c:	48001400 	.word	0x48001400
 8003370:	48001800 	.word	0x48001800
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e001      	b.n	800339a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ee:	4a05      	ldr	r2, [pc, #20]	; (8003404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fd76 	bl	8001ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40010400 	.word	0x40010400

08003408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e081      	b.n	800351e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fcd2 	bl	8001dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	e006      	b.n	8003490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800348e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d104      	bne.n	80034a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	ea42 0103 	orr.w	r1, r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	021a      	lsls	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b20      	cmp	r3, #32
 800353a:	d138      	bne.n	80035ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003546:	2302      	movs	r3, #2
 8003548:	e032      	b.n	80035b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2224      	movs	r2, #36	; 0x24
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003578:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d139      	bne.n	8003646 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035dc:	2302      	movs	r3, #2
 80035de:	e033      	b.n	8003648 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800360e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_PWREx_GetVoltageRange+0x18>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40007000 	.word	0x40007000

08003670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367e:	d130      	bne.n	80036e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368c:	d038      	beq.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003696:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2232      	movs	r2, #50	; 0x32
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	0c9b      	lsrs	r3, r3, #18
 80036b0:	3301      	adds	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b4:	e002      	b.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c8:	d102      	bne.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f2      	bne.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036dc:	d110      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e00f      	b.n	8003702 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ee:	d007      	beq.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f8:	4a05      	ldr	r2, [pc, #20]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40007000 	.word	0x40007000
 8003714:	20000000 	.word	0x20000000
 8003718:	431bde83 	.word	0x431bde83

0800371c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e3d4      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372e:	4ba1      	ldr	r3, [pc, #644]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003738:	4b9e      	ldr	r3, [pc, #632]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80e4 	beq.w	8003918 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_RCC_OscConfig+0x4a>
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	f040 808b 	bne.w	8003874 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b01      	cmp	r3, #1
 8003762:	f040 8087 	bne.w	8003874 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003766:	4b93      	ldr	r3, [pc, #588]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_RCC_OscConfig+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e3ac      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	4b8c      	ldr	r3, [pc, #560]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <HAL_RCC_OscConfig+0x7c>
 800378e:	4b89      	ldr	r3, [pc, #548]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003796:	e005      	b.n	80037a4 <HAL_RCC_OscConfig+0x88>
 8003798:	4b86      	ldr	r3, [pc, #536]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d223      	bcs.n	80037f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fd3f 	bl	8004230 <RCC_SetFlashLatencyFromMSIRange>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e38d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037bc:	4b7d      	ldr	r3, [pc, #500]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7c      	ldr	r2, [pc, #496]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037c2:	f043 0308 	orr.w	r3, r3, #8
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b7a      	ldr	r3, [pc, #488]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4977      	ldr	r1, [pc, #476]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037da:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	4972      	ldr	r1, [pc, #456]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
 80037ee:	e025      	b.n	800383c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037f0:	4b70      	ldr	r3, [pc, #448]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6f      	ldr	r2, [pc, #444]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037f6:	f043 0308 	orr.w	r3, r3, #8
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b6d      	ldr	r3, [pc, #436]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	496a      	ldr	r1, [pc, #424]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380e:	4b69      	ldr	r3, [pc, #420]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	4965      	ldr	r1, [pc, #404]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fcff 	bl	8004230 <RCC_SetFlashLatencyFromMSIRange>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e34d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800383c:	f000 fc36 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8003840:	4601      	mov	r1, r0
 8003842:	4b5c      	ldr	r3, [pc, #368]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	4a5a      	ldr	r2, [pc, #360]	; (80039b8 <HAL_RCC_OscConfig+0x29c>)
 800384e:	5cd3      	ldrb	r3, [r2, r3]
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	fa21 f303 	lsr.w	r3, r1, r3
 8003858:	4a58      	ldr	r2, [pc, #352]	; (80039bc <HAL_RCC_OscConfig+0x2a0>)
 800385a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800385c:	4b58      	ldr	r3, [pc, #352]	; (80039c0 <HAL_RCC_OscConfig+0x2a4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fa11 	bl	8002c88 <HAL_InitTick>
 8003866:	4603      	mov	r3, r0
 8003868:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d052      	beq.n	8003916 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	e331      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d032      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800387c:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a4c      	ldr	r2, [pc, #304]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003888:	f7ff fa4e 	bl	8002d28 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003890:	f7ff fa4a 	bl	8002d28 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e31a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038b4:	f043 0308 	orr.w	r3, r3, #8
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	493b      	ldr	r1, [pc, #236]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	4936      	ldr	r1, [pc, #216]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
 80038e0:	e01a      	b.n	8003918 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038e2:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a33      	ldr	r2, [pc, #204]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ee:	f7ff fa1b 	bl	8002d28 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f6:	f7ff fa17 	bl	8002d28 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e2e7      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f0      	bne.n	80038f6 <HAL_RCC_OscConfig+0x1da>
 8003914:	e000      	b.n	8003918 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003916:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d074      	beq.n	8003a0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b08      	cmp	r3, #8
 8003928:	d005      	beq.n	8003936 <HAL_RCC_OscConfig+0x21a>
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d10e      	bne.n	800394e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d10b      	bne.n	800394e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003936:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d064      	beq.n	8003a0c <HAL_RCC_OscConfig+0x2f0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d160      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e2c4      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x24a>
 8003958:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800395e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e01d      	b.n	80039a2 <HAL_RCC_OscConfig+0x286>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396e:	d10c      	bne.n	800398a <HAL_RCC_OscConfig+0x26e>
 8003970:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0f      	ldr	r2, [pc, #60]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e00b      	b.n	80039a2 <HAL_RCC_OscConfig+0x286>
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <HAL_RCC_OscConfig+0x298>)
 800399c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7ff f9bd 	bl	8002d28 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039b0:	e011      	b.n	80039d6 <HAL_RCC_OscConfig+0x2ba>
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08009570 	.word	0x08009570
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c4:	f7ff f9b0 	bl	8002d28 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e280      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d6:	4baf      	ldr	r3, [pc, #700]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x2a8>
 80039e2:	e014      	b.n	8003a0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7ff f9a0 	bl	8002d28 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ec:	f7ff f99c 	bl	8002d28 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e26c      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039fe:	4ba5      	ldr	r3, [pc, #660]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x2d0>
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d060      	beq.n	8003adc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_OscConfig+0x310>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d119      	bne.n	8003a5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d116      	bne.n	8003a5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a2c:	4b99      	ldr	r3, [pc, #612]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_OscConfig+0x328>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e249      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a44:	4b93      	ldr	r3, [pc, #588]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	4990      	ldr	r1, [pc, #576]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a58:	e040      	b.n	8003adc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d023      	beq.n	8003aaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a62:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a8b      	ldr	r2, [pc, #556]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7ff f95b 	bl	8002d28 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a76:	f7ff f957 	bl	8002d28 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e227      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a88:	4b82      	ldr	r3, [pc, #520]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	497c      	ldr	r1, [pc, #496]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]
 8003aa8:	e018      	b.n	8003adc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b7a      	ldr	r3, [pc, #488]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a79      	ldr	r2, [pc, #484]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7ff f937 	bl	8002d28 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abe:	f7ff f933 	bl	8002d28 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e203      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad0:	4b70      	ldr	r3, [pc, #448]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d03c      	beq.n	8003b62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01c      	beq.n	8003b2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af0:	4b68      	ldr	r3, [pc, #416]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7ff f912 	bl	8002d28 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b08:	f7ff f90e 	bl	8002d28 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e1de      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1a:	4b5e      	ldr	r3, [pc, #376]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ef      	beq.n	8003b08 <HAL_RCC_OscConfig+0x3ec>
 8003b28:	e01b      	b.n	8003b62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2a:	4b5a      	ldr	r3, [pc, #360]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b30:	4a58      	ldr	r2, [pc, #352]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3a:	f7ff f8f5 	bl	8002d28 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b42:	f7ff f8f1 	bl	8002d28 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e1c1      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b54:	4b4f      	ldr	r3, [pc, #316]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ef      	bne.n	8003b42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80a6 	beq.w	8003cbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b70:	2300      	movs	r3, #0
 8003b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b74:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10d      	bne.n	8003b9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b80:	4b44      	ldr	r3, [pc, #272]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	4a43      	ldr	r2, [pc, #268]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8c:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9c:	4b3e      	ldr	r3, [pc, #248]	; (8003c98 <HAL_RCC_OscConfig+0x57c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d118      	bne.n	8003bda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <HAL_RCC_OscConfig+0x57c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a3a      	ldr	r2, [pc, #232]	; (8003c98 <HAL_RCC_OscConfig+0x57c>)
 8003bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb4:	f7ff f8b8 	bl	8002d28 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbc:	f7ff f8b4 	bl	8002d28 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e184      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bce:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <HAL_RCC_OscConfig+0x57c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d108      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4d8>
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf2:	e024      	b.n	8003c3e <HAL_RCC_OscConfig+0x522>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d110      	bne.n	8003c1e <HAL_RCC_OscConfig+0x502>
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	4a24      	ldr	r2, [pc, #144]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c1c:	e00f      	b.n	8003c3e <HAL_RCC_OscConfig+0x522>
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2e:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003c36:	f023 0304 	bic.w	r3, r3, #4
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7ff f86f 	bl	8002d28 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7ff f86b 	bl	8002d28 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e139      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_OscConfig+0x578>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ed      	beq.n	8003c4e <HAL_RCC_OscConfig+0x532>
 8003c72:	e01a      	b.n	8003caa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7ff f858 	bl	8002d28 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c7a:	e00f      	b.n	8003c9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7ff f854 	bl	8002d28 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d906      	bls.n	8003c9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e122      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c9c:	4b90      	ldr	r3, [pc, #576]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e8      	bne.n	8003c7c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003caa:	7ffb      	ldrb	r3, [r7, #31]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b8b      	ldr	r3, [pc, #556]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	4a8a      	ldr	r2, [pc, #552]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8108 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	f040 80d0 	bne.w	8003e70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cd0:	4b83      	ldr	r3, [pc, #524]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0203 	and.w	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d130      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d127      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d11f      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d10:	2a07      	cmp	r2, #7
 8003d12:	bf14      	ite	ne
 8003d14:	2201      	movne	r2, #1
 8003d16:	2200      	moveq	r2, #0
 8003d18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d113      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d06e      	beq.n	8003e24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b0c      	cmp	r3, #12
 8003d4a:	d069      	beq.n	8003e20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d58:	4b61      	ldr	r3, [pc, #388]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b7      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d68:	4b5d      	ldr	r3, [pc, #372]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a5c      	ldr	r2, [pc, #368]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d74:	f7fe ffd8 	bl	8002d28 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fe ffd4 	bl	8002d28 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0a4      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8e:	4b54      	ldr	r3, [pc, #336]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9a:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <HAL_RCC_OscConfig+0x7c8>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003daa:	3a01      	subs	r2, #1
 8003dac:	0112      	lsls	r2, r2, #4
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003db4:	0212      	lsls	r2, r2, #8
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dbc:	0852      	lsrs	r2, r2, #1
 8003dbe:	3a01      	subs	r2, #1
 8003dc0:	0552      	lsls	r2, r2, #21
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dc8:	0852      	lsrs	r2, r2, #1
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0652      	lsls	r2, r2, #25
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dd4:	0912      	lsrs	r2, r2, #4
 8003dd6:	0452      	lsls	r2, r2, #17
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	4941      	ldr	r1, [pc, #260]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003de0:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3e      	ldr	r2, [pc, #248]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dec:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a3b      	ldr	r2, [pc, #236]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df8:	f7fe ff96 	bl	8002d28 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fe ff92 	bl	8002d28 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e062      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e12:	4b33      	ldr	r3, [pc, #204]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e1e:	e05a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e059      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e24:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d152      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a27      	ldr	r2, [pc, #156]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e48:	f7fe ff6e 	bl	8002d28 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe ff6a 	bl	8002d28 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e03a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e62:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x734>
 8003e6e:	e032      	b.n	8003ed6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d02d      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e94:	f023 0303 	bic.w	r3, r3, #3
 8003e98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003ea0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7fe ff3d 	bl	8002d28 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fe ff39 	bl	8002d28 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e009      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_OscConfig+0x7c4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x796>
 8003ed0:	e001      	b.n	8003ed6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	f99d808c 	.word	0xf99d808c

08003ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0c8      	b.n	800408e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003efc:	4b66      	ldr	r3, [pc, #408]	; (8004098 <HAL_RCC_ClockConfig+0x1b0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d910      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b63      	ldr	r3, [pc, #396]	; (8004098 <HAL_RCC_ClockConfig+0x1b0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 0207 	bic.w	r2, r3, #7
 8003f12:	4961      	ldr	r1, [pc, #388]	; (8004098 <HAL_RCC_ClockConfig+0x1b0>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	; (8004098 <HAL_RCC_ClockConfig+0x1b0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0b0      	b.n	800408e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d04c      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f40:	4b56      	ldr	r3, [pc, #344]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d121      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e09e      	b.n	800408e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f58:	4b50      	ldr	r3, [pc, #320]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d115      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e092      	b.n	800408e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f70:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e086      	b.n	800408e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f80:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e07e      	b.n	800408e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f90:	4b42      	ldr	r3, [pc, #264]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f023 0203 	bic.w	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	493f      	ldr	r1, [pc, #252]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa2:	f7fe fec1 	bl	8002d28 <HAL_GetTick>
 8003fa6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003faa:	f7fe febd 	bl	8002d28 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e066      	b.n	800408e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 020c 	and.w	r2, r3, #12
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d1eb      	bne.n	8003faa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fde:	4b2f      	ldr	r3, [pc, #188]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	492c      	ldr	r1, [pc, #176]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b29      	ldr	r3, [pc, #164]	; (8004098 <HAL_RCC_ClockConfig+0x1b0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d210      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b26      	ldr	r3, [pc, #152]	; (8004098 <HAL_RCC_ClockConfig+0x1b0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 0207 	bic.w	r2, r3, #7
 8004006:	4924      	ldr	r1, [pc, #144]	; (8004098 <HAL_RCC_ClockConfig+0x1b0>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b22      	ldr	r3, [pc, #136]	; (8004098 <HAL_RCC_ClockConfig+0x1b0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e036      	b.n	800408e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4918      	ldr	r1, [pc, #96]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4910      	ldr	r1, [pc, #64]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800405e:	f000 f825 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8004062:	4601      	mov	r1, r0
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	fa21 f303 	lsr.w	r3, r1, r3
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fe00 	bl	8002c88 <HAL_InitTick>
 8004088:	4603      	mov	r3, r0
 800408a:	72fb      	strb	r3, [r7, #11]

  return status;
 800408c:	7afb      	ldrb	r3, [r7, #11]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40022000 	.word	0x40022000
 800409c:	40021000 	.word	0x40021000
 80040a0:	08009570 	.word	0x08009570
 80040a4:	20000000 	.word	0x20000000
 80040a8:	20000004 	.word	0x20000004

080040ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c4:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x34>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d121      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d11e      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040e0:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040ec:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	e005      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040fc:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004108:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10d      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d102      	bne.n	800412a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004124:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e004      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d101      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004130:	4b22      	ldr	r3, [pc, #136]	; (80041bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004132:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d133      	bne.n	80041a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800413a:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d002      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0xa4>
 800414a:	2b03      	cmp	r3, #3
 800414c:	d003      	beq.n	8004156 <HAL_RCC_GetSysClockFreq+0xaa>
 800414e:	e005      	b.n	800415c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004152:	617b      	str	r3, [r7, #20]
      break;
 8004154:	e005      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004156:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004158:	617b      	str	r3, [r7, #20]
      break;
 800415a:	e002      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	617b      	str	r3, [r7, #20]
      break;
 8004160:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004162:	4b13      	ldr	r3, [pc, #76]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	3301      	adds	r3, #1
 800416e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	0a1b      	lsrs	r3, r3, #8
 8004176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	fb02 f203 	mul.w	r2, r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0e5b      	lsrs	r3, r3, #25
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	3301      	adds	r3, #1
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041a2:	69bb      	ldr	r3, [r7, #24]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3724      	adds	r7, #36	; 0x24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08009588 	.word	0x08009588
 80041b8:	00f42400 	.word	0x00f42400
 80041bc:	007a1200 	.word	0x007a1200

080041c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c6:	681b      	ldr	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000000 	.word	0x20000000

080041d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041dc:	f7ff fff0 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 80041e0:	4601      	mov	r1, r0
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ee:	5cd3      	ldrb	r3, [r2, r3]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40021000 	.word	0x40021000
 8004200:	08009580 	.word	0x08009580

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004208:	f7ff ffda 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 800420c:	4601      	mov	r1, r0
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0adb      	lsrs	r3, r3, #11
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4a04      	ldr	r2, [pc, #16]	; (800422c <HAL_RCC_GetPCLK2Freq+0x28>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	08009580 	.word	0x08009580

08004230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800423c:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004248:	f7ff fa04 	bl	8003654 <HAL_PWREx_GetVoltageRange>
 800424c:	6178      	str	r0, [r7, #20]
 800424e:	e014      	b.n	800427a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425a:	6593      	str	r3, [r2, #88]	; 0x58
 800425c:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004268:	f7ff f9f4 	bl	8003654 <HAL_PWREx_GetVoltageRange>
 800426c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004278:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d10b      	bne.n	800429a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	d919      	bls.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2ba0      	cmp	r3, #160	; 0xa0
 800428c:	d902      	bls.n	8004294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800428e:	2302      	movs	r3, #2
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e013      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004294:	2301      	movs	r3, #1
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	e010      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b80      	cmp	r3, #128	; 0x80
 800429e:	d902      	bls.n	80042a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042a0:	2303      	movs	r3, #3
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e00a      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d102      	bne.n	80042b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ac:	2302      	movs	r3, #2
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e004      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b70      	cmp	r3, #112	; 0x70
 80042b6:	d101      	bne.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b8:	2301      	movs	r3, #1
 80042ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 0207 	bic.w	r2, r3, #7
 80042c4:	4909      	ldr	r1, [pc, #36]	; (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042cc:	4b07      	ldr	r3, [pc, #28]	; (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40022000 	.word	0x40022000

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042f8:	2300      	movs	r3, #0
 80042fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042fc:	2300      	movs	r3, #0
 80042fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d03f      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004314:	d01c      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431a:	d802      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004320:	e01f      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004326:	d003      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004328:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800432c:	d01c      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800432e:	e018      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004330:	4b85      	ldr	r3, [pc, #532]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a84      	ldr	r2, [pc, #528]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800433c:	e015      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fab9 	bl	80048bc <RCCEx_PLLSAI1_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800434e:	e00c      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3320      	adds	r3, #32
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fba0 	bl	8004a9c <RCCEx_PLLSAI2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	74fb      	strb	r3, [r7, #19]
      break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004370:	4b75      	ldr	r3, [pc, #468]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800437e:	4972      	ldr	r1, [pc, #456]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004386:	e001      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d03f      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800439c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a0:	d01c      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a6:	d802      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00e      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 80043ac:	e01f      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043b2:	d003      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80043b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043b8:	d01c      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80043ba:	e018      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043bc:	4b62      	ldr	r3, [pc, #392]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a61      	ldr	r2, [pc, #388]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043c8:	e015      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fa73 	bl	80048bc <RCCEx_PLLSAI1_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043da:	e00c      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3320      	adds	r3, #32
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fb5a 	bl	8004a9c <RCCEx_PLLSAI2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043ec:	e003      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	74fb      	strb	r3, [r7, #19]
      break;
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80043f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043fc:	4b52      	ldr	r3, [pc, #328]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004402:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800440a:	494f      	ldr	r1, [pc, #316]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80a0 	beq.w	8004566 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004440:	4b41      	ldr	r3, [pc, #260]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	4a40      	ldr	r2, [pc, #256]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444a:	6593      	str	r3, [r2, #88]	; 0x58
 800444c:	4b3e      	ldr	r3, [pc, #248]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004458:	2301      	movs	r3, #1
 800445a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445c:	4b3b      	ldr	r3, [pc, #236]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a3a      	ldr	r2, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004468:	f7fe fc5e 	bl	8002d28 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800446e:	e009      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004470:	f7fe fc5a 	bl	8002d28 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d902      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	74fb      	strb	r3, [r7, #19]
        break;
 8004482:	e005      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004484:	4b31      	ldr	r3, [pc, #196]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ef      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d15c      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004496:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01f      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d019      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044b4:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	4a20      	ldr	r2, [pc, #128]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fe fc19 	bl	8002d28 <HAL_GetTick>
 80044f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f8:	e00b      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fa:	f7fe fc15 	bl	8002d28 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f241 3288 	movw	r2, #5000	; 0x1388
 8004508:	4293      	cmp	r3, r2
 800450a:	d902      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	74fb      	strb	r3, [r7, #19]
            break;
 8004510:	e006      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0ec      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004536:	4904      	ldr	r1, [pc, #16]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800453e:	e009      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	74bb      	strb	r3, [r7, #18]
 8004544:	e006      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004554:	7c7b      	ldrb	r3, [r7, #17]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d105      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	4b9e      	ldr	r3, [pc, #632]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	4a9d      	ldr	r2, [pc, #628]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004564:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004572:	4b98      	ldr	r3, [pc, #608]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f023 0203 	bic.w	r2, r3, #3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	4994      	ldr	r1, [pc, #592]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004594:	4b8f      	ldr	r3, [pc, #572]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f023 020c 	bic.w	r2, r3, #12
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	498c      	ldr	r1, [pc, #560]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045b6:	4b87      	ldr	r3, [pc, #540]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	4983      	ldr	r1, [pc, #524]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045d8:	4b7e      	ldr	r3, [pc, #504]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	497b      	ldr	r1, [pc, #492]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045fa:	4b76      	ldr	r3, [pc, #472]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	4972      	ldr	r1, [pc, #456]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800461c:	4b6d      	ldr	r3, [pc, #436]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	496a      	ldr	r1, [pc, #424]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800463e:	4b65      	ldr	r3, [pc, #404]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464c:	4961      	ldr	r1, [pc, #388]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004660:	4b5c      	ldr	r3, [pc, #368]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466e:	4959      	ldr	r1, [pc, #356]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004682:	4b54      	ldr	r3, [pc, #336]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	4950      	ldr	r1, [pc, #320]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046a4:	4b4b      	ldr	r3, [pc, #300]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	4948      	ldr	r1, [pc, #288]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046c6:	4b43      	ldr	r3, [pc, #268]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	493f      	ldr	r1, [pc, #252]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d028      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046e8:	4b3a      	ldr	r3, [pc, #232]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f6:	4937      	ldr	r1, [pc, #220]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004706:	d106      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004708:	4b32      	ldr	r3, [pc, #200]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a31      	ldr	r2, [pc, #196]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004712:	60d3      	str	r3, [r2, #12]
 8004714:	e011      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800471e:	d10c      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	2101      	movs	r1, #1
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f8c8 	bl	80048bc <RCCEx_PLLSAI1_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d028      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004746:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	491f      	ldr	r1, [pc, #124]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004764:	d106      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800476c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004770:	60d3      	str	r3, [r2, #12]
 8004772:	e011      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800477c:	d10c      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	2101      	movs	r1, #1
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f899 	bl	80048bc <RCCEx_PLLSAI1_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02b      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b2:	4908      	ldr	r1, [pc, #32]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c2:	d109      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a02      	ldr	r2, [pc, #8]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ce:	60d3      	str	r3, [r2, #12]
 80047d0:	e014      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e0:	d10c      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2101      	movs	r1, #1
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f867 	bl	80048bc <RCCEx_PLLSAI1_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02f      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004816:	4928      	ldr	r1, [pc, #160]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004826:	d10d      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f844 	bl	80048bc <RCCEx_PLLSAI1_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d014      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800483e:	7cfb      	ldrb	r3, [r7, #19]
 8004840:	74bb      	strb	r3, [r7, #18]
 8004842:	e011      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3320      	adds	r3, #32
 8004852:	2102      	movs	r1, #2
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f921 	bl	8004a9c <RCCEx_PLLSAI2_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004874:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004882:	490d      	ldr	r1, [pc, #52]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048a6:	4904      	ldr	r1, [pc, #16]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000

080048bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ca:	4b73      	ldr	r3, [pc, #460]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048d6:	4b70      	ldr	r3, [pc, #448]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0203 	and.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d10d      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
       ||
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048ee:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
       ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d044      	beq.n	800498c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
 8004906:	e041      	b.n	800498c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d00c      	beq.n	800492a <RCCEx_PLLSAI1_Config+0x6e>
 8004910:	2b03      	cmp	r3, #3
 8004912:	d013      	beq.n	800493c <RCCEx_PLLSAI1_Config+0x80>
 8004914:	2b01      	cmp	r3, #1
 8004916:	d120      	bne.n	800495a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004918:	4b5f      	ldr	r3, [pc, #380]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11d      	bne.n	8004960 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004928:	e01a      	b.n	8004960 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800492a:	4b5b      	ldr	r3, [pc, #364]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004932:	2b00      	cmp	r3, #0
 8004934:	d116      	bne.n	8004964 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493a:	e013      	b.n	8004964 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800493c:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004948:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004958:	e006      	b.n	8004968 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
      break;
 800495e:	e004      	b.n	800496a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004960:	bf00      	nop
 8004962:	e002      	b.n	800496a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004964:	bf00      	nop
 8004966:	e000      	b.n	800496a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004968:	bf00      	nop
    }

    if(status == HAL_OK)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10d      	bne.n	800498c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004970:	4b49      	ldr	r3, [pc, #292]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	3b01      	subs	r3, #1
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	430b      	orrs	r3, r1
 8004986:	4944      	ldr	r1, [pc, #272]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004988:	4313      	orrs	r3, r2
 800498a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d17d      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004992:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a40      	ldr	r2, [pc, #256]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800499c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499e:	f7fe f9c3 	bl	8002d28 <HAL_GetTick>
 80049a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a4:	e009      	b.n	80049ba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a6:	f7fe f9bf 	bl	8002d28 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d902      	bls.n	80049ba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	73fb      	strb	r3, [r7, #15]
        break;
 80049b8:	e005      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ef      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d160      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d111      	bne.n	80049f6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049d2:	4b31      	ldr	r3, [pc, #196]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6892      	ldr	r2, [r2, #8]
 80049e2:	0211      	lsls	r1, r2, #8
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68d2      	ldr	r2, [r2, #12]
 80049e8:	0912      	lsrs	r2, r2, #4
 80049ea:	0452      	lsls	r2, r2, #17
 80049ec:	430a      	orrs	r2, r1
 80049ee:	492a      	ldr	r1, [pc, #168]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	610b      	str	r3, [r1, #16]
 80049f4:	e027      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d112      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049fc:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	0211      	lsls	r1, r2, #8
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6912      	ldr	r2, [r2, #16]
 8004a12:	0852      	lsrs	r2, r2, #1
 8004a14:	3a01      	subs	r2, #1
 8004a16:	0552      	lsls	r2, r2, #21
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	491f      	ldr	r1, [pc, #124]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	610b      	str	r3, [r1, #16]
 8004a20:	e011      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6892      	ldr	r2, [r2, #8]
 8004a32:	0211      	lsls	r1, r2, #8
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6952      	ldr	r2, [r2, #20]
 8004a38:	0852      	lsrs	r2, r2, #1
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	0652      	lsls	r2, r2, #25
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	4915      	ldr	r1, [pc, #84]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a46:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a52:	f7fe f969 	bl	8002d28 <HAL_GetTick>
 8004a56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a58:	e009      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a5a:	f7fe f965 	bl	8002d28 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d902      	bls.n	8004a6e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	73fb      	strb	r3, [r7, #15]
          break;
 8004a6c:	e005      	b.n	8004a7a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0ef      	beq.n	8004a5a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	4903      	ldr	r1, [pc, #12]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000

08004a9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aaa:	4b68      	ldr	r3, [pc, #416]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d018      	beq.n	8004ae8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ab6:	4b65      	ldr	r3, [pc, #404]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f003 0203 	and.w	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d10d      	bne.n	8004ae2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ace:	4b5f      	ldr	r3, [pc, #380]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d044      	beq.n	8004b6c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
 8004ae6:	e041      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d00c      	beq.n	8004b0a <RCCEx_PLLSAI2_Config+0x6e>
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d013      	beq.n	8004b1c <RCCEx_PLLSAI2_Config+0x80>
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d120      	bne.n	8004b3a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004af8:	4b54      	ldr	r3, [pc, #336]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d11d      	bne.n	8004b40 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b08:	e01a      	b.n	8004b40 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b0a:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1a:	e013      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b38:	e006      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b3e:	e004      	b.n	8004b4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b40:	bf00      	nop
 8004b42:	e002      	b.n	8004b4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b44:	bf00      	nop
 8004b46:	e000      	b.n	8004b4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b48:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10d      	bne.n	8004b6c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b50:	4b3e      	ldr	r3, [pc, #248]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6819      	ldr	r1, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	430b      	orrs	r3, r1
 8004b66:	4939      	ldr	r1, [pc, #228]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d167      	bne.n	8004c42 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b72:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a35      	ldr	r2, [pc, #212]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7e:	f7fe f8d3 	bl	8002d28 <HAL_GetTick>
 8004b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b84:	e009      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b86:	f7fe f8cf 	bl	8002d28 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d902      	bls.n	8004b9a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	73fb      	strb	r3, [r7, #15]
        break;
 8004b98:	e005      	b.n	8004ba6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b9a:	4b2c      	ldr	r3, [pc, #176]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ef      	bne.n	8004b86 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d14a      	bne.n	8004c42 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d111      	bne.n	8004bd6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bb2:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6892      	ldr	r2, [r2, #8]
 8004bc2:	0211      	lsls	r1, r2, #8
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68d2      	ldr	r2, [r2, #12]
 8004bc8:	0912      	lsrs	r2, r2, #4
 8004bca:	0452      	lsls	r2, r2, #17
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	491f      	ldr	r1, [pc, #124]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	614b      	str	r3, [r1, #20]
 8004bd4:	e011      	b.n	8004bfa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bd6:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6892      	ldr	r2, [r2, #8]
 8004be6:	0211      	lsls	r1, r2, #8
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6912      	ldr	r2, [r2, #16]
 8004bec:	0852      	lsrs	r2, r2, #1
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	0652      	lsls	r2, r2, #25
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	4915      	ldr	r1, [pc, #84]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bfa:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fe f88f 	bl	8002d28 <HAL_GetTick>
 8004c0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c0c:	e009      	b.n	8004c22 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c0e:	f7fe f88b 	bl	8002d28 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d902      	bls.n	8004c22 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	73fb      	strb	r3, [r7, #15]
          break;
 8004c20:	e005      	b.n	8004c2e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ef      	beq.n	8004c0e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	4903      	ldr	r1, [pc, #12]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40021000 	.word	0x40021000

08004c50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d06c      	beq.n	8004d3c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd fb7a 	bl	8002370 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	22ca      	movs	r2, #202	; 0xca
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2253      	movs	r2, #83	; 0x53
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f87c 	bl	8004d92 <RTC_EnterInitMode>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d14b      	bne.n	8004d3c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6899      	ldr	r1, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68d2      	ldr	r2, [r2, #12]
 8004cde:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6919      	ldr	r1, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	041a      	lsls	r2, r3, #16
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f87f 	bl	8004df8 <RTC_ExitInitMode>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11b      	bne.n	8004d3c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0203 	bic.w	r2, r2, #3
 8004d12:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d5c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004d5e:	f7fd ffe3 	bl	8002d28 <HAL_GetTick>
 8004d62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d64:	e009      	b.n	8004d7a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d66:	f7fd ffdf 	bl	8002d28 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d74:	d901      	bls.n	8004d7a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e007      	b.n	8004d8a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ee      	beq.n	8004d66 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d120      	bne.n	8004dee <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004db6:	f7fd ffb7 	bl	8002d28 <HAL_GetTick>
 8004dba:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004dbc:	e00d      	b.n	8004dda <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004dbe:	f7fd ffb3 	bl	8002d28 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dcc:	d905      	bls.n	8004dda <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d102      	bne.n	8004dee <RTC_EnterInitMode+0x5c>
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d1e7      	bne.n	8004dbe <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004e04:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <RTC_ExitInitMode+0x78>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <RTC_ExitInitMode+0x78>)
 8004e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004e10:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <RTC_ExitInitMode+0x78>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10c      	bne.n	8004e36 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff ff92 	bl	8004d46 <HAL_RTC_WaitForSynchro>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01e      	beq.n	8004e66 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e017      	b.n	8004e66 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e36:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <RTC_ExitInitMode+0x78>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <RTC_ExitInitMode+0x78>)
 8004e3c:	f023 0320 	bic.w	r3, r3, #32
 8004e40:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff ff7f 	bl	8004d46 <HAL_RTC_WaitForSynchro>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2203      	movs	r2, #3
 8004e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <RTC_ExitInitMode+0x78>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <RTC_ExitInitMode+0x78>)
 8004e60:	f043 0320 	orr.w	r3, r3, #32
 8004e64:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40002800 	.word	0x40002800

08004e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e095      	b.n	8004fb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e96:	d009      	beq.n	8004eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	61da      	str	r2, [r3, #28]
 8004e9e:	e005      	b.n	8004eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fd faac 	bl	8002424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eec:	d902      	bls.n	8004ef4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e002      	b.n	8004efa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f02:	d007      	beq.n	8004f14 <HAL_SPI_Init+0xa0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	ea42 0103 	orr.w	r1, r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	0c1b      	lsrs	r3, r3, #16
 8004f70:	f003 0204 	and.w	r2, r3, #4
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f90:	ea42 0103 	orr.w	r1, r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e049      	b.n	8005060 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fd fc4d 	bl	8002880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f000 fb0d 	bl	8005618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e047      	b.n	8005110 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a23      	ldr	r2, [pc, #140]	; (800511c <HAL_TIM_Base_Start+0xb4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01d      	beq.n	80050ce <HAL_TIM_Base_Start+0x66>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d018      	beq.n	80050ce <HAL_TIM_Base_Start+0x66>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <HAL_TIM_Base_Start+0xb8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_TIM_Base_Start+0x66>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <HAL_TIM_Base_Start+0xbc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_TIM_Base_Start+0x66>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <HAL_TIM_Base_Start+0xc0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_TIM_Base_Start+0x66>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1b      	ldr	r2, [pc, #108]	; (800512c <HAL_TIM_Base_Start+0xc4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIM_Base_Start+0x66>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a19      	ldr	r2, [pc, #100]	; (8005130 <HAL_TIM_Base_Start+0xc8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d115      	bne.n	80050fa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	4b17      	ldr	r3, [pc, #92]	; (8005134 <HAL_TIM_Base_Start+0xcc>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b06      	cmp	r3, #6
 80050de:	d015      	beq.n	800510c <HAL_TIM_Base_Start+0xa4>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d011      	beq.n	800510c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	e008      	b.n	800510c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e000      	b.n	800510e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	00010007 	.word	0x00010007

08005138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e04f      	b.n	80051f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a23      	ldr	r2, [pc, #140]	; (80051fc <HAL_TIM_Base_Start_IT+0xc4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01d      	beq.n	80051ae <HAL_TIM_Base_Start_IT+0x76>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517a:	d018      	beq.n	80051ae <HAL_TIM_Base_Start_IT+0x76>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <HAL_TIM_Base_Start_IT+0xc8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <HAL_TIM_Base_Start_IT+0x76>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_TIM_Base_Start_IT+0xcc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00e      	beq.n	80051ae <HAL_TIM_Base_Start_IT+0x76>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1c      	ldr	r2, [pc, #112]	; (8005208 <HAL_TIM_Base_Start_IT+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_TIM_Base_Start_IT+0x76>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_TIM_Base_Start_IT+0xd4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_TIM_Base_Start_IT+0x76>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a19      	ldr	r2, [pc, #100]	; (8005210 <HAL_TIM_Base_Start_IT+0xd8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d115      	bne.n	80051da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	4b17      	ldr	r3, [pc, #92]	; (8005214 <HAL_TIM_Base_Start_IT+0xdc>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b06      	cmp	r3, #6
 80051be:	d015      	beq.n	80051ec <HAL_TIM_Base_Start_IT+0xb4>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d011      	beq.n	80051ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d8:	e008      	b.n	80051ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e000      	b.n	80051ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40013400 	.word	0x40013400
 8005210:	40014000 	.word	0x40014000
 8005214:	00010007 	.word	0x00010007

08005218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0202 	mvn.w	r2, #2
 8005244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9be 	bl	80055dc <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9b0 	bl	80055c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f9c1 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0204 	mvn.w	r2, #4
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f994 	bl	80055dc <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f986 	bl	80055c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f997 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0208 	mvn.w	r2, #8
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f96a 	bl	80055dc <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f95c 	bl	80055c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f96d 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b10      	cmp	r3, #16
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0210 	mvn.w	r2, #16
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2208      	movs	r2, #8
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f940 	bl	80055dc <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f932 	bl	80055c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f943 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0201 	mvn.w	r2, #1
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc fde6 	bl	8001f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 faee 	bl	80059a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fae1 	bl	80059b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8f1 	bl	8005604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b20      	cmp	r3, #32
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0220 	mvn.w	r2, #32
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 faa1 	bl	8005990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_TIM_ConfigClockSource+0x18>
 800546a:	2302      	movs	r3, #2
 800546c:	e0a8      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x16a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005490:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005498:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d067      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x124>
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d80b      	bhi.n	80054c6 <HAL_TIM_ConfigClockSource+0x70>
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d073      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x144>
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d802      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x66>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d06f      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054ba:	e078      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d06c      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x144>
 80054c0:	2b30      	cmp	r3, #48	; 0x30
 80054c2:	d06a      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x144>
      break;
 80054c4:	e073      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80054c6:	2b70      	cmp	r3, #112	; 0x70
 80054c8:	d00d      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x90>
 80054ca:	2b70      	cmp	r3, #112	; 0x70
 80054cc:	d804      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x82>
 80054ce:	2b50      	cmp	r3, #80	; 0x50
 80054d0:	d033      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xe4>
 80054d2:	2b60      	cmp	r3, #96	; 0x60
 80054d4:	d041      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x104>
      break;
 80054d6:	e06a      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d066      	beq.n	80055ac <HAL_TIM_ConfigClockSource+0x156>
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d017      	beq.n	8005514 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80054e4:	e063      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6899      	ldr	r1, [r3, #8]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f000 f9a3 	bl	8005840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005508:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	609a      	str	r2, [r3, #8]
      break;
 8005512:	e04c      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f000 f98c 	bl	8005840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005536:	609a      	str	r2, [r3, #8]
      break;
 8005538:	e039      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	461a      	mov	r2, r3
 8005548:	f000 f900 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2150      	movs	r1, #80	; 0x50
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f959 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8005558:	e029      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	461a      	mov	r2, r3
 8005568:	f000 f91f 	bl	80057aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2160      	movs	r1, #96	; 0x60
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f949 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8005578:	e019      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	f000 f8e0 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2140      	movs	r1, #64	; 0x40
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f939 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8005598:	e009      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 f930 	bl	800580a <TIM_ITRx_SetConfig>
        break;
 80055aa:	e000      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x158>
      break;
 80055ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a40      	ldr	r2, [pc, #256]	; (800572c <TIM_Base_SetConfig+0x114>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a3d      	ldr	r2, [pc, #244]	; (8005730 <TIM_Base_SetConfig+0x118>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3c      	ldr	r2, [pc, #240]	; (8005734 <TIM_Base_SetConfig+0x11c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3b      	ldr	r2, [pc, #236]	; (8005738 <TIM_Base_SetConfig+0x120>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3a      	ldr	r2, [pc, #232]	; (800573c <TIM_Base_SetConfig+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2f      	ldr	r2, [pc, #188]	; (800572c <TIM_Base_SetConfig+0x114>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01f      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d01b      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <TIM_Base_SetConfig+0x118>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d017      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <TIM_Base_SetConfig+0x11c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <TIM_Base_SetConfig+0x120>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00f      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a29      	ldr	r2, [pc, #164]	; (800573c <TIM_Base_SetConfig+0x124>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00b      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a28      	ldr	r2, [pc, #160]	; (8005740 <TIM_Base_SetConfig+0x128>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d007      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a27      	ldr	r2, [pc, #156]	; (8005744 <TIM_Base_SetConfig+0x12c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <TIM_Base_SetConfig+0x130>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d108      	bne.n	80056c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a10      	ldr	r2, [pc, #64]	; (800572c <TIM_Base_SetConfig+0x114>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a12      	ldr	r2, [pc, #72]	; (800573c <TIM_Base_SetConfig+0x124>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a11      	ldr	r2, [pc, #68]	; (8005740 <TIM_Base_SetConfig+0x128>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <TIM_Base_SetConfig+0x12c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0f      	ldr	r2, [pc, #60]	; (8005748 <TIM_Base_SetConfig+0x130>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d103      	bne.n	8005718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	615a      	str	r2, [r3, #20]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40013400 	.word	0x40013400
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800

0800574c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 030a 	bic.w	r3, r3, #10
 8005788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0210 	bic.w	r2, r3, #16
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	031b      	lsls	r3, r3, #12
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	f043 0307 	orr.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	431a      	orrs	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005894:	2302      	movs	r3, #2
 8005896:	e068      	b.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a2e      	ldr	r2, [pc, #184]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2d      	ldr	r2, [pc, #180]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01d      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590a:	d018      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a18      	ldr	r2, [pc, #96]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a13      	ldr	r2, [pc, #76]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10c      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	4313      	orrs	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40000c00 	.word	0x40000c00
 800598c:	40014000 	.word	0x40014000

08005990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e040      	b.n	8005a60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fd f82c 	bl	8002a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	; 0x24
 80059f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fabe 	bl	8005f8c <UART_SetConfig>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e022      	b.n	8005a60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fd3c 	bl	80064a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fdc3 	bl	80065e4 <UART_CheckIdleState>
 8005a5e:	4603      	mov	r3, r0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	f040 8081 	bne.w	8005b84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_Transmit+0x26>
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e079      	b.n	8005b86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UART_Transmit+0x38>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e072      	b.n	8005b86 <HAL_UART_Transmit+0x11e>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2221      	movs	r2, #33	; 0x21
 8005ab2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005ab4:	f7fd f938 	bl	8002d28 <HAL_GetTick>
 8005ab8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	88fa      	ldrh	r2, [r7, #6]
 8005abe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	88fa      	ldrh	r2, [r7, #6]
 8005ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d108      	bne.n	8005ae6 <HAL_UART_Transmit+0x7e>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e003      	b.n	8005aee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005af6:	e02d      	b.n	8005b54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2200      	movs	r2, #0
 8005b00:	2180      	movs	r1, #128	; 0x80
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fdb3 	bl	800666e <UART_WaitOnFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e039      	b.n	8005b86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b24:	b292      	uxth	r2, r2
 8005b26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e008      	b.n	8005b42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	b292      	uxth	r2, r2
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1cb      	bne.n	8005af8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2200      	movs	r2, #0
 8005b68:	2140      	movs	r1, #64	; 0x40
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fd7f 	bl	800666e <UART_WaitOnFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e005      	b.n	8005b86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	f040 808a 	bne.w	8005cbc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_UART_Receive_IT+0x24>
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e082      	b.n	8005cbe <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Receive_IT+0x36>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e07b      	b.n	8005cbe <HAL_UART_Receive_IT+0x12e>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	d10e      	bne.n	8005c12 <HAL_UART_Receive_IT+0x82>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_UART_Receive_IT+0x78>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c06:	e02d      	b.n	8005c64 <HAL_UART_Receive_IT+0xd4>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	22ff      	movs	r2, #255	; 0xff
 8005c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c10:	e028      	b.n	8005c64 <HAL_UART_Receive_IT+0xd4>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10d      	bne.n	8005c36 <HAL_UART_Receive_IT+0xa6>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <HAL_UART_Receive_IT+0x9c>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	22ff      	movs	r2, #255	; 0xff
 8005c26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c2a:	e01b      	b.n	8005c64 <HAL_UART_Receive_IT+0xd4>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	227f      	movs	r2, #127	; 0x7f
 8005c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c34:	e016      	b.n	8005c64 <HAL_UART_Receive_IT+0xd4>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c3e:	d10d      	bne.n	8005c5c <HAL_UART_Receive_IT+0xcc>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <HAL_UART_Receive_IT+0xc2>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	227f      	movs	r2, #127	; 0x7f
 8005c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c50:	e008      	b.n	8005c64 <HAL_UART_Receive_IT+0xd4>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	223f      	movs	r2, #63	; 0x3f
 8005c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c5a:	e003      	b.n	8005c64 <HAL_UART_Receive_IT+0xd4>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2222      	movs	r2, #34	; 0x22
 8005c6e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	d107      	bne.n	8005c9a <HAL_UART_Receive_IT+0x10a>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a0d      	ldr	r2, [pc, #52]	; (8005ccc <HAL_UART_Receive_IT+0x13c>)
 8005c96:	661a      	str	r2, [r3, #96]	; 0x60
 8005c98:	e002      	b.n	8005ca0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a0c      	ldr	r2, [pc, #48]	; (8005cd0 <HAL_UART_Receive_IT+0x140>)
 8005c9e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005cb6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e000      	b.n	8005cbe <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	080068ad 	.word	0x080068ad
 8005cd0:	08006803 	.word	0x08006803

08005cd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8114 	beq.w	8005f4a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
      }
      return;
 8005d2a:	e10e      	b.n	8005f4a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 80d6 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4b86      	ldr	r3, [pc, #536]	; (8005f5c <HAL_UART_IRQHandler+0x288>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80cb 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <HAL_UART_IRQHandler+0x9e>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2201      	movs	r2, #1
 8005d64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d6a:	f043 0201 	orr.w	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00e      	beq.n	8005d9a <HAL_UART_IRQHandler+0xc6>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d92:	f043 0204 	orr.w	r2, r3, #4
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00e      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xee>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d009      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2204      	movs	r2, #4
 8005db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dba:	f043 0202 	orr.w	r2, r3, #2
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d013      	beq.n	8005df4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2208      	movs	r2, #8
 8005de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dec:	f043 0208 	orr.w	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00f      	beq.n	8005e1e <HAL_UART_IRQHandler+0x14a>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 8093 	beq.w	8005f4e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00c      	beq.n	8005e4c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e50:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d004      	beq.n	8005e6a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d031      	beq.n	8005ece <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fc7a 	bl	8006764 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d123      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e8c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d013      	beq.n	8005ebe <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9a:	4a31      	ldr	r2, [pc, #196]	; (8005f60 <HAL_UART_IRQHandler+0x28c>)
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd f87f 	bl	8002fa6 <HAL_DMA_Abort_IT>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	e00e      	b.n	8005edc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f85a 	bl	8005f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	e00a      	b.n	8005edc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f856 	bl	8005f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	e006      	b.n	8005edc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f852 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005eda:	e038      	b.n	8005f4e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005edc:	bf00      	nop
    return;
 8005ede:	e036      	b.n	8005f4e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <HAL_UART_IRQHandler+0x232>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005efc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fd29 	bl	8006956 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f04:	e026      	b.n	8005f54 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00d      	beq.n	8005f2c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d017      	beq.n	8005f52 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
    }
    return;
 8005f2a:	e012      	b.n	8005f52 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00e      	beq.n	8005f54 <HAL_UART_IRQHandler+0x280>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d009      	beq.n	8005f54 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fc45 	bl	80067d0 <UART_EndTransmit_IT>
    return;
 8005f46:	bf00      	nop
 8005f48:	e004      	b.n	8005f54 <HAL_UART_IRQHandler+0x280>
      return;
 8005f4a:	bf00      	nop
 8005f4c:	e002      	b.n	8005f54 <HAL_UART_IRQHandler+0x280>
    return;
 8005f4e:	bf00      	nop
 8005f50:	e000      	b.n	8005f54 <HAL_UART_IRQHandler+0x280>
    return;
 8005f52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	04000120 	.word	0x04000120
 8005f60:	080067a5 	.word	0x080067a5

08005f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005f90:	b088      	sub	sp, #32
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4bac      	ldr	r3, [pc, #688]	; (800626c <UART_SetConfig+0x2e0>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4aa2      	ldr	r2, [pc, #648]	; (8006270 <UART_SetConfig+0x2e4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a99      	ldr	r2, [pc, #612]	; (8006274 <UART_SetConfig+0x2e8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d121      	bne.n	8006058 <UART_SetConfig+0xcc>
 8006014:	4b98      	ldr	r3, [pc, #608]	; (8006278 <UART_SetConfig+0x2ec>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b03      	cmp	r3, #3
 8006020:	d816      	bhi.n	8006050 <UART_SetConfig+0xc4>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0x9c>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006039 	.word	0x08006039
 800602c:	08006045 	.word	0x08006045
 8006030:	0800603f 	.word	0x0800603f
 8006034:	0800604b 	.word	0x0800604b
 8006038:	2301      	movs	r3, #1
 800603a:	76fb      	strb	r3, [r7, #27]
 800603c:	e0e8      	b.n	8006210 <UART_SetConfig+0x284>
 800603e:	2302      	movs	r3, #2
 8006040:	76fb      	strb	r3, [r7, #27]
 8006042:	e0e5      	b.n	8006210 <UART_SetConfig+0x284>
 8006044:	2304      	movs	r3, #4
 8006046:	76fb      	strb	r3, [r7, #27]
 8006048:	e0e2      	b.n	8006210 <UART_SetConfig+0x284>
 800604a:	2308      	movs	r3, #8
 800604c:	76fb      	strb	r3, [r7, #27]
 800604e:	e0df      	b.n	8006210 <UART_SetConfig+0x284>
 8006050:	2310      	movs	r3, #16
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	bf00      	nop
 8006056:	e0db      	b.n	8006210 <UART_SetConfig+0x284>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a87      	ldr	r2, [pc, #540]	; (800627c <UART_SetConfig+0x2f0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d134      	bne.n	80060cc <UART_SetConfig+0x140>
 8006062:	4b85      	ldr	r3, [pc, #532]	; (8006278 <UART_SetConfig+0x2ec>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	2b0c      	cmp	r3, #12
 800606e:	d829      	bhi.n	80060c4 <UART_SetConfig+0x138>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0xec>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080060c5 	.word	0x080060c5
 8006080:	080060c5 	.word	0x080060c5
 8006084:	080060c5 	.word	0x080060c5
 8006088:	080060b9 	.word	0x080060b9
 800608c:	080060c5 	.word	0x080060c5
 8006090:	080060c5 	.word	0x080060c5
 8006094:	080060c5 	.word	0x080060c5
 8006098:	080060b3 	.word	0x080060b3
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	080060bf 	.word	0x080060bf
 80060ac:	2300      	movs	r3, #0
 80060ae:	76fb      	strb	r3, [r7, #27]
 80060b0:	e0ae      	b.n	8006210 <UART_SetConfig+0x284>
 80060b2:	2302      	movs	r3, #2
 80060b4:	76fb      	strb	r3, [r7, #27]
 80060b6:	e0ab      	b.n	8006210 <UART_SetConfig+0x284>
 80060b8:	2304      	movs	r3, #4
 80060ba:	76fb      	strb	r3, [r7, #27]
 80060bc:	e0a8      	b.n	8006210 <UART_SetConfig+0x284>
 80060be:	2308      	movs	r3, #8
 80060c0:	76fb      	strb	r3, [r7, #27]
 80060c2:	e0a5      	b.n	8006210 <UART_SetConfig+0x284>
 80060c4:	2310      	movs	r3, #16
 80060c6:	76fb      	strb	r3, [r7, #27]
 80060c8:	bf00      	nop
 80060ca:	e0a1      	b.n	8006210 <UART_SetConfig+0x284>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a6b      	ldr	r2, [pc, #428]	; (8006280 <UART_SetConfig+0x2f4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d120      	bne.n	8006118 <UART_SetConfig+0x18c>
 80060d6:	4b68      	ldr	r3, [pc, #416]	; (8006278 <UART_SetConfig+0x2ec>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d00f      	beq.n	8006104 <UART_SetConfig+0x178>
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d802      	bhi.n	80060ee <UART_SetConfig+0x162>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <UART_SetConfig+0x16c>
 80060ec:	e010      	b.n	8006110 <UART_SetConfig+0x184>
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d005      	beq.n	80060fe <UART_SetConfig+0x172>
 80060f2:	2b30      	cmp	r3, #48	; 0x30
 80060f4:	d009      	beq.n	800610a <UART_SetConfig+0x17e>
 80060f6:	e00b      	b.n	8006110 <UART_SetConfig+0x184>
 80060f8:	2300      	movs	r3, #0
 80060fa:	76fb      	strb	r3, [r7, #27]
 80060fc:	e088      	b.n	8006210 <UART_SetConfig+0x284>
 80060fe:	2302      	movs	r3, #2
 8006100:	76fb      	strb	r3, [r7, #27]
 8006102:	e085      	b.n	8006210 <UART_SetConfig+0x284>
 8006104:	2304      	movs	r3, #4
 8006106:	76fb      	strb	r3, [r7, #27]
 8006108:	e082      	b.n	8006210 <UART_SetConfig+0x284>
 800610a:	2308      	movs	r3, #8
 800610c:	76fb      	strb	r3, [r7, #27]
 800610e:	e07f      	b.n	8006210 <UART_SetConfig+0x284>
 8006110:	2310      	movs	r3, #16
 8006112:	76fb      	strb	r3, [r7, #27]
 8006114:	bf00      	nop
 8006116:	e07b      	b.n	8006210 <UART_SetConfig+0x284>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a59      	ldr	r2, [pc, #356]	; (8006284 <UART_SetConfig+0x2f8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d120      	bne.n	8006164 <UART_SetConfig+0x1d8>
 8006122:	4b55      	ldr	r3, [pc, #340]	; (8006278 <UART_SetConfig+0x2ec>)
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d00f      	beq.n	8006150 <UART_SetConfig+0x1c4>
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d802      	bhi.n	800613a <UART_SetConfig+0x1ae>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <UART_SetConfig+0x1b8>
 8006138:	e010      	b.n	800615c <UART_SetConfig+0x1d0>
 800613a:	2b80      	cmp	r3, #128	; 0x80
 800613c:	d005      	beq.n	800614a <UART_SetConfig+0x1be>
 800613e:	2bc0      	cmp	r3, #192	; 0xc0
 8006140:	d009      	beq.n	8006156 <UART_SetConfig+0x1ca>
 8006142:	e00b      	b.n	800615c <UART_SetConfig+0x1d0>
 8006144:	2300      	movs	r3, #0
 8006146:	76fb      	strb	r3, [r7, #27]
 8006148:	e062      	b.n	8006210 <UART_SetConfig+0x284>
 800614a:	2302      	movs	r3, #2
 800614c:	76fb      	strb	r3, [r7, #27]
 800614e:	e05f      	b.n	8006210 <UART_SetConfig+0x284>
 8006150:	2304      	movs	r3, #4
 8006152:	76fb      	strb	r3, [r7, #27]
 8006154:	e05c      	b.n	8006210 <UART_SetConfig+0x284>
 8006156:	2308      	movs	r3, #8
 8006158:	76fb      	strb	r3, [r7, #27]
 800615a:	e059      	b.n	8006210 <UART_SetConfig+0x284>
 800615c:	2310      	movs	r3, #16
 800615e:	76fb      	strb	r3, [r7, #27]
 8006160:	bf00      	nop
 8006162:	e055      	b.n	8006210 <UART_SetConfig+0x284>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a47      	ldr	r2, [pc, #284]	; (8006288 <UART_SetConfig+0x2fc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d124      	bne.n	80061b8 <UART_SetConfig+0x22c>
 800616e:	4b42      	ldr	r3, [pc, #264]	; (8006278 <UART_SetConfig+0x2ec>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617c:	d012      	beq.n	80061a4 <UART_SetConfig+0x218>
 800617e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006182:	d802      	bhi.n	800618a <UART_SetConfig+0x1fe>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <UART_SetConfig+0x20c>
 8006188:	e012      	b.n	80061b0 <UART_SetConfig+0x224>
 800618a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618e:	d006      	beq.n	800619e <UART_SetConfig+0x212>
 8006190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006194:	d009      	beq.n	80061aa <UART_SetConfig+0x21e>
 8006196:	e00b      	b.n	80061b0 <UART_SetConfig+0x224>
 8006198:	2300      	movs	r3, #0
 800619a:	76fb      	strb	r3, [r7, #27]
 800619c:	e038      	b.n	8006210 <UART_SetConfig+0x284>
 800619e:	2302      	movs	r3, #2
 80061a0:	76fb      	strb	r3, [r7, #27]
 80061a2:	e035      	b.n	8006210 <UART_SetConfig+0x284>
 80061a4:	2304      	movs	r3, #4
 80061a6:	76fb      	strb	r3, [r7, #27]
 80061a8:	e032      	b.n	8006210 <UART_SetConfig+0x284>
 80061aa:	2308      	movs	r3, #8
 80061ac:	76fb      	strb	r3, [r7, #27]
 80061ae:	e02f      	b.n	8006210 <UART_SetConfig+0x284>
 80061b0:	2310      	movs	r3, #16
 80061b2:	76fb      	strb	r3, [r7, #27]
 80061b4:	bf00      	nop
 80061b6:	e02b      	b.n	8006210 <UART_SetConfig+0x284>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a2c      	ldr	r2, [pc, #176]	; (8006270 <UART_SetConfig+0x2e4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d124      	bne.n	800620c <UART_SetConfig+0x280>
 80061c2:	4b2d      	ldr	r3, [pc, #180]	; (8006278 <UART_SetConfig+0x2ec>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d0:	d012      	beq.n	80061f8 <UART_SetConfig+0x26c>
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d6:	d802      	bhi.n	80061de <UART_SetConfig+0x252>
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <UART_SetConfig+0x260>
 80061dc:	e012      	b.n	8006204 <UART_SetConfig+0x278>
 80061de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e2:	d006      	beq.n	80061f2 <UART_SetConfig+0x266>
 80061e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061e8:	d009      	beq.n	80061fe <UART_SetConfig+0x272>
 80061ea:	e00b      	b.n	8006204 <UART_SetConfig+0x278>
 80061ec:	2300      	movs	r3, #0
 80061ee:	76fb      	strb	r3, [r7, #27]
 80061f0:	e00e      	b.n	8006210 <UART_SetConfig+0x284>
 80061f2:	2302      	movs	r3, #2
 80061f4:	76fb      	strb	r3, [r7, #27]
 80061f6:	e00b      	b.n	8006210 <UART_SetConfig+0x284>
 80061f8:	2304      	movs	r3, #4
 80061fa:	76fb      	strb	r3, [r7, #27]
 80061fc:	e008      	b.n	8006210 <UART_SetConfig+0x284>
 80061fe:	2308      	movs	r3, #8
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e005      	b.n	8006210 <UART_SetConfig+0x284>
 8006204:	2310      	movs	r3, #16
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	bf00      	nop
 800620a:	e001      	b.n	8006210 <UART_SetConfig+0x284>
 800620c:	2310      	movs	r3, #16
 800620e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a16      	ldr	r2, [pc, #88]	; (8006270 <UART_SetConfig+0x2e4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f040 8087 	bne.w	800632a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800621c:	7efb      	ldrb	r3, [r7, #27]
 800621e:	2b08      	cmp	r3, #8
 8006220:	d836      	bhi.n	8006290 <UART_SetConfig+0x304>
 8006222:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <UART_SetConfig+0x29c>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006291 	.word	0x08006291
 8006230:	08006255 	.word	0x08006255
 8006234:	08006291 	.word	0x08006291
 8006238:	0800625b 	.word	0x0800625b
 800623c:	08006291 	.word	0x08006291
 8006240:	08006291 	.word	0x08006291
 8006244:	08006291 	.word	0x08006291
 8006248:	08006263 	.word	0x08006263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fd ffc4 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8006250:	6178      	str	r0, [r7, #20]
        break;
 8006252:	e022      	b.n	800629a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006254:	4b0d      	ldr	r3, [pc, #52]	; (800628c <UART_SetConfig+0x300>)
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e01f      	b.n	800629a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625a:	f7fd ff27 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 800625e:	6178      	str	r0, [r7, #20]
        break;
 8006260:	e01b      	b.n	800629a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006266:	617b      	str	r3, [r7, #20]
        break;
 8006268:	e017      	b.n	800629a <UART_SetConfig+0x30e>
 800626a:	bf00      	nop
 800626c:	efff69f3 	.word	0xefff69f3
 8006270:	40008000 	.word	0x40008000
 8006274:	40013800 	.word	0x40013800
 8006278:	40021000 	.word	0x40021000
 800627c:	40004400 	.word	0x40004400
 8006280:	40004800 	.word	0x40004800
 8006284:	40004c00 	.word	0x40004c00
 8006288:	40005000 	.word	0x40005000
 800628c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	76bb      	strb	r3, [r7, #26]
        break;
 8006298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80f1 	beq.w	8006484 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4613      	mov	r3, r2
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4413      	add	r3, r2
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d305      	bcc.n	80062be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d902      	bls.n	80062c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	76bb      	strb	r3, [r7, #26]
 80062c2:	e0df      	b.n	8006484 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	4619      	mov	r1, r3
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	0214      	lsls	r4, r2, #8
 80062d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80062da:	020b      	lsls	r3, r1, #8
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6852      	ldr	r2, [r2, #4]
 80062e0:	0852      	lsrs	r2, r2, #1
 80062e2:	4611      	mov	r1, r2
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	eb13 0b01 	adds.w	fp, r3, r1
 80062ec:	eb44 0c02 	adc.w	ip, r4, r2
 80062f0:	4658      	mov	r0, fp
 80062f2:	4661      	mov	r1, ip
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f04f 0400 	mov.w	r4, #0
 80062fc:	461a      	mov	r2, r3
 80062fe:	4623      	mov	r3, r4
 8006300:	f7fa fca2 	bl	8000c48 <__aeabi_uldivmod>
 8006304:	4603      	mov	r3, r0
 8006306:	460c      	mov	r4, r1
 8006308:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006310:	d308      	bcc.n	8006324 <UART_SetConfig+0x398>
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006318:	d204      	bcs.n	8006324 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	60da      	str	r2, [r3, #12]
 8006322:	e0af      	b.n	8006484 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	76bb      	strb	r3, [r7, #26]
 8006328:	e0ac      	b.n	8006484 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006332:	d15b      	bne.n	80063ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006334:	7efb      	ldrb	r3, [r7, #27]
 8006336:	2b08      	cmp	r3, #8
 8006338:	d827      	bhi.n	800638a <UART_SetConfig+0x3fe>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x3b4>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006365 	.word	0x08006365
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638b 	.word	0x0800638b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800638b 	.word	0x0800638b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fd ff38 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8006368:	6178      	str	r0, [r7, #20]
        break;
 800636a:	e013      	b.n	8006394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fd ff4a 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8006370:	6178      	str	r0, [r7, #20]
        break;
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b49      	ldr	r3, [pc, #292]	; (800649c <UART_SetConfig+0x510>)
 8006376:	617b      	str	r3, [r7, #20]
        break;
 8006378:	e00c      	b.n	8006394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fd fe97 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 800637e:	6178      	str	r0, [r7, #20]
        break;
 8006380:	e008      	b.n	8006394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006386:	617b      	str	r3, [r7, #20]
        break;
 8006388:	e004      	b.n	8006394 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	76bb      	strb	r3, [r7, #26]
        break;
 8006392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d074      	beq.n	8006484 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	005a      	lsls	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b0f      	cmp	r3, #15
 80063b6:	d916      	bls.n	80063e6 <UART_SetConfig+0x45a>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d212      	bcs.n	80063e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f023 030f 	bic.w	r3, r3, #15
 80063c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	89fb      	ldrh	r3, [r7, #14]
 80063d8:	4313      	orrs	r3, r2
 80063da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	89fa      	ldrh	r2, [r7, #14]
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	e04e      	b.n	8006484 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	76bb      	strb	r3, [r7, #26]
 80063ea:	e04b      	b.n	8006484 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ec:	7efb      	ldrb	r3, [r7, #27]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d827      	bhi.n	8006442 <UART_SetConfig+0x4b6>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x46c>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	08006443 	.word	0x08006443
 8006408:	08006433 	.word	0x08006433
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
 8006418:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fd fedc 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8006420:	6178      	str	r0, [r7, #20]
        break;
 8006422:	e013      	b.n	800644c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7fd feee 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8006428:	6178      	str	r0, [r7, #20]
        break;
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <UART_SetConfig+0x510>)
 800642e:	617b      	str	r3, [r7, #20]
        break;
 8006430:	e00c      	b.n	800644c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fd fe3b 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8006436:	6178      	str	r0, [r7, #20]
        break;
 8006438:	e008      	b.n	800644c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	617b      	str	r3, [r7, #20]
        break;
 8006440:	e004      	b.n	800644c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	76bb      	strb	r3, [r7, #26]
        break;
 800644a:	bf00      	nop
    }

    if (pclk != 0U)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d018      	beq.n	8006484 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	085a      	lsrs	r2, r3, #1
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	b29b      	uxth	r3, r3
 8006466:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d908      	bls.n	8006480 <UART_SetConfig+0x4f4>
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d204      	bcs.n	8006480 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	e001      	b.n	8006484 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006490:	7ebb      	ldrb	r3, [r7, #26]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800649c:	00f42400 	.word	0x00f42400

080064a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01a      	beq.n	80065b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659e:	d10a      	bne.n	80065b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065f2:	f7fc fb99 	bl	8002d28 <HAL_GetTick>
 80065f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b08      	cmp	r3, #8
 8006604:	d10e      	bne.n	8006624 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006606:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f82a 	bl	800666e <UART_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e020      	b.n	8006666 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b04      	cmp	r3, #4
 8006630:	d10e      	bne.n	8006650 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006632:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f814 	bl	800666e <UART_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e00a      	b.n	8006666 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	603b      	str	r3, [r7, #0]
 800667a:	4613      	mov	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667e:	e05d      	b.n	800673c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d059      	beq.n	800673c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006688:	f7fc fb4e 	bl	8002d28 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <UART_WaitOnFlagUntilTimeout+0x30>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d11b      	bne.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e042      	b.n	800675c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d02b      	beq.n	800673c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f2:	d123      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800670c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0201 	bic.w	r2, r2, #1
 800671c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e00f      	b.n	800675c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69da      	ldr	r2, [r3, #28]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4013      	ands	r3, r2
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	429a      	cmp	r2, r3
 800674a:	bf0c      	ite	eq
 800674c:	2301      	moveq	r3, #1
 800674e:	2300      	movne	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	429a      	cmp	r2, r3
 8006758:	d092      	beq.n	8006680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800677a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fbd8 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff fbb5 	bl	8005f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006810:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006816:	2b22      	cmp	r3, #34	; 0x22
 8006818:	d13a      	bne.n	8006890 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006820:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006822:	89bb      	ldrh	r3, [r7, #12]
 8006824:	b2d9      	uxtb	r1, r3
 8006826:	89fb      	ldrh	r3, [r7, #14]
 8006828:	b2da      	uxtb	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	400a      	ands	r2, r1
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d123      	bne.n	80068a4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800686a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7fb fb87 	bl	8001f9c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800688e:	e009      	b.n	80068a4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	8b1b      	ldrh	r3, [r3, #24]
 8006896:	b29a      	uxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0208 	orr.w	r2, r2, #8
 80068a0:	b292      	uxth	r2, r2
 80068a2:	831a      	strh	r2, [r3, #24]
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068ba:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c0:	2b22      	cmp	r3, #34	; 0x22
 80068c2:	d13a      	bne.n	800693a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068ca:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80068d2:	89ba      	ldrh	r2, [r7, #12]
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	4013      	ands	r3, r2
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	1c9a      	adds	r2, r3, #2
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d123      	bne.n	800694e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006914:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0201 	bic.w	r2, r2, #1
 8006924:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fb fb32 	bl	8001f9c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006938:	e009      	b.n	800694e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	8b1b      	ldrh	r3, [r3, #24]
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0208 	orr.w	r2, r2, #8
 800694a:	b292      	uxth	r2, r2
 800694c:	831a      	strh	r2, [r3, #24]
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006970:	4904      	ldr	r1, [pc, #16]	; (8006984 <MX_FATFS_Init+0x18>)
 8006972:	4805      	ldr	r0, [pc, #20]	; (8006988 <MX_FATFS_Init+0x1c>)
 8006974:	f000 f8b0 	bl	8006ad8 <FATFS_LinkDriver>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	4b03      	ldr	r3, [pc, #12]	; (800698c <MX_FATFS_Init+0x20>)
 800697e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006980:	bf00      	nop
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200005d4 	.word	0x200005d4
 8006988:	2000000c 	.word	0x2000000c
 800698c:	200005d8 	.word	0x200005d8

08006990 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <USER_initialize+0x24>)
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
    return Stat;
 80069a0:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <USER_initialize+0x24>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000009 	.word	0x20000009

080069b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <USER_status+0x24>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <USER_status+0x24>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000009 	.word	0x20000009

080069e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80069f0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b085      	sub	sp, #20
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006a0e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	603a      	str	r2, [r7, #0]
 8006a26:	71fb      	strb	r3, [r7, #7]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
    return res;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006a56:	4b1f      	ldr	r3, [pc, #124]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a58:	7a5b      	ldrb	r3, [r3, #9]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d131      	bne.n	8006ac4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a60:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a62:	7a5b      	ldrb	r3, [r3, #9]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006a6e:	4b19      	ldr	r3, [pc, #100]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a70:	7a5b      	ldrb	r3, [r3, #9]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006a7e:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a80:	7a5b      	ldrb	r3, [r3, #9]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a88:	4413      	add	r3, r2
 8006a8a:	79fa      	ldrb	r2, [r7, #7]
 8006a8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a90:	7a5b      	ldrb	r3, [r3, #9]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	b2d1      	uxtb	r1, r2
 8006a98:	4a0e      	ldr	r2, [pc, #56]	; (8006ad4 <FATFS_LinkDriverEx+0x94>)
 8006a9a:	7251      	strb	r1, [r2, #9]
 8006a9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a9e:	7dbb      	ldrb	r3, [r7, #22]
 8006aa0:	3330      	adds	r3, #48	; 0x30
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	223a      	movs	r2, #58	; 0x3a
 8006aae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	3302      	adds	r3, #2
 8006ab4:	222f      	movs	r2, #47	; 0x2f
 8006ab6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3303      	adds	r3, #3
 8006abc:	2200      	movs	r2, #0
 8006abe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	2000022c 	.word	0x2000022c

08006ad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ffaa 	bl	8006a40 <FATFS_LinkDriverEx>
 8006aec:	4603      	mov	r3, r0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <__errno>:
 8006af8:	4b01      	ldr	r3, [pc, #4]	; (8006b00 <__errno+0x8>)
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20000020 	.word	0x20000020

08006b04 <__libc_init_array>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	4e0d      	ldr	r6, [pc, #52]	; (8006b3c <__libc_init_array+0x38>)
 8006b08:	4c0d      	ldr	r4, [pc, #52]	; (8006b40 <__libc_init_array+0x3c>)
 8006b0a:	1ba4      	subs	r4, r4, r6
 8006b0c:	10a4      	asrs	r4, r4, #2
 8006b0e:	2500      	movs	r5, #0
 8006b10:	42a5      	cmp	r5, r4
 8006b12:	d109      	bne.n	8006b28 <__libc_init_array+0x24>
 8006b14:	4e0b      	ldr	r6, [pc, #44]	; (8006b44 <__libc_init_array+0x40>)
 8006b16:	4c0c      	ldr	r4, [pc, #48]	; (8006b48 <__libc_init_array+0x44>)
 8006b18:	f002 fd02 	bl	8009520 <_init>
 8006b1c:	1ba4      	subs	r4, r4, r6
 8006b1e:	10a4      	asrs	r4, r4, #2
 8006b20:	2500      	movs	r5, #0
 8006b22:	42a5      	cmp	r5, r4
 8006b24:	d105      	bne.n	8006b32 <__libc_init_array+0x2e>
 8006b26:	bd70      	pop	{r4, r5, r6, pc}
 8006b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b2c:	4798      	blx	r3
 8006b2e:	3501      	adds	r5, #1
 8006b30:	e7ee      	b.n	8006b10 <__libc_init_array+0xc>
 8006b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b36:	4798      	blx	r3
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7f2      	b.n	8006b22 <__libc_init_array+0x1e>
 8006b3c:	08009880 	.word	0x08009880
 8006b40:	08009880 	.word	0x08009880
 8006b44:	08009880 	.word	0x08009880
 8006b48:	08009884 	.word	0x08009884

08006b4c <memset>:
 8006b4c:	4402      	add	r2, r0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d100      	bne.n	8006b56 <memset+0xa>
 8006b54:	4770      	bx	lr
 8006b56:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5a:	e7f9      	b.n	8006b50 <memset+0x4>

08006b5c <__cvt>:
 8006b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b60:	ec55 4b10 	vmov	r4, r5, d0
 8006b64:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006b66:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b6a:	2d00      	cmp	r5, #0
 8006b6c:	460e      	mov	r6, r1
 8006b6e:	4691      	mov	r9, r2
 8006b70:	4619      	mov	r1, r3
 8006b72:	bfb8      	it	lt
 8006b74:	4622      	movlt	r2, r4
 8006b76:	462b      	mov	r3, r5
 8006b78:	f027 0720 	bic.w	r7, r7, #32
 8006b7c:	bfbb      	ittet	lt
 8006b7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b82:	461d      	movlt	r5, r3
 8006b84:	2300      	movge	r3, #0
 8006b86:	232d      	movlt	r3, #45	; 0x2d
 8006b88:	bfb8      	it	lt
 8006b8a:	4614      	movlt	r4, r2
 8006b8c:	2f46      	cmp	r7, #70	; 0x46
 8006b8e:	700b      	strb	r3, [r1, #0]
 8006b90:	d004      	beq.n	8006b9c <__cvt+0x40>
 8006b92:	2f45      	cmp	r7, #69	; 0x45
 8006b94:	d100      	bne.n	8006b98 <__cvt+0x3c>
 8006b96:	3601      	adds	r6, #1
 8006b98:	2102      	movs	r1, #2
 8006b9a:	e000      	b.n	8006b9e <__cvt+0x42>
 8006b9c:	2103      	movs	r1, #3
 8006b9e:	ab03      	add	r3, sp, #12
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	ab02      	add	r3, sp, #8
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	4653      	mov	r3, sl
 8006baa:	ec45 4b10 	vmov	d0, r4, r5
 8006bae:	f000 fcf7 	bl	80075a0 <_dtoa_r>
 8006bb2:	2f47      	cmp	r7, #71	; 0x47
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	d102      	bne.n	8006bbe <__cvt+0x62>
 8006bb8:	f019 0f01 	tst.w	r9, #1
 8006bbc:	d026      	beq.n	8006c0c <__cvt+0xb0>
 8006bbe:	2f46      	cmp	r7, #70	; 0x46
 8006bc0:	eb08 0906 	add.w	r9, r8, r6
 8006bc4:	d111      	bne.n	8006bea <__cvt+0x8e>
 8006bc6:	f898 3000 	ldrb.w	r3, [r8]
 8006bca:	2b30      	cmp	r3, #48	; 0x30
 8006bcc:	d10a      	bne.n	8006be4 <__cvt+0x88>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7f9 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bda:	b918      	cbnz	r0, 8006be4 <__cvt+0x88>
 8006bdc:	f1c6 0601 	rsb	r6, r6, #1
 8006be0:	f8ca 6000 	str.w	r6, [sl]
 8006be4:	f8da 3000 	ldr.w	r3, [sl]
 8006be8:	4499      	add	r9, r3
 8006bea:	2200      	movs	r2, #0
 8006bec:	2300      	movs	r3, #0
 8006bee:	4620      	mov	r0, r4
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7f9 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf6:	b938      	cbnz	r0, 8006c08 <__cvt+0xac>
 8006bf8:	2230      	movs	r2, #48	; 0x30
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	454b      	cmp	r3, r9
 8006bfe:	d205      	bcs.n	8006c0c <__cvt+0xb0>
 8006c00:	1c59      	adds	r1, r3, #1
 8006c02:	9103      	str	r1, [sp, #12]
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	e7f8      	b.n	8006bfa <__cvt+0x9e>
 8006c08:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c10:	eba3 0308 	sub.w	r3, r3, r8
 8006c14:	4640      	mov	r0, r8
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	b004      	add	sp, #16
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006c1e <__exponent>:
 8006c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c20:	2900      	cmp	r1, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	bfba      	itte	lt
 8006c26:	4249      	neglt	r1, r1
 8006c28:	232d      	movlt	r3, #45	; 0x2d
 8006c2a:	232b      	movge	r3, #43	; 0x2b
 8006c2c:	2909      	cmp	r1, #9
 8006c2e:	f804 2b02 	strb.w	r2, [r4], #2
 8006c32:	7043      	strb	r3, [r0, #1]
 8006c34:	dd20      	ble.n	8006c78 <__exponent+0x5a>
 8006c36:	f10d 0307 	add.w	r3, sp, #7
 8006c3a:	461f      	mov	r7, r3
 8006c3c:	260a      	movs	r6, #10
 8006c3e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c42:	fb06 1115 	mls	r1, r6, r5, r1
 8006c46:	3130      	adds	r1, #48	; 0x30
 8006c48:	2d09      	cmp	r5, #9
 8006c4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c4e:	f103 32ff 	add.w	r2, r3, #4294967295
 8006c52:	4629      	mov	r1, r5
 8006c54:	dc09      	bgt.n	8006c6a <__exponent+0x4c>
 8006c56:	3130      	adds	r1, #48	; 0x30
 8006c58:	3b02      	subs	r3, #2
 8006c5a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c5e:	42bb      	cmp	r3, r7
 8006c60:	4622      	mov	r2, r4
 8006c62:	d304      	bcc.n	8006c6e <__exponent+0x50>
 8006c64:	1a10      	subs	r0, r2, r0
 8006c66:	b003      	add	sp, #12
 8006c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	e7e7      	b.n	8006c3e <__exponent+0x20>
 8006c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c72:	f804 2b01 	strb.w	r2, [r4], #1
 8006c76:	e7f2      	b.n	8006c5e <__exponent+0x40>
 8006c78:	2330      	movs	r3, #48	; 0x30
 8006c7a:	4419      	add	r1, r3
 8006c7c:	7083      	strb	r3, [r0, #2]
 8006c7e:	1d02      	adds	r2, r0, #4
 8006c80:	70c1      	strb	r1, [r0, #3]
 8006c82:	e7ef      	b.n	8006c64 <__exponent+0x46>

08006c84 <_printf_float>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	b08d      	sub	sp, #52	; 0x34
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006c90:	4616      	mov	r6, r2
 8006c92:	461f      	mov	r7, r3
 8006c94:	4605      	mov	r5, r0
 8006c96:	f001 fb05 	bl	80082a4 <_localeconv_r>
 8006c9a:	6803      	ldr	r3, [r0, #0]
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7f9 fa96 	bl	80001d0 <strlen>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cac:	9005      	str	r0, [sp, #20]
 8006cae:	3307      	adds	r3, #7
 8006cb0:	f023 0307 	bic.w	r3, r3, #7
 8006cb4:	f103 0208 	add.w	r2, r3, #8
 8006cb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006cbc:	f8d4 b000 	ldr.w	fp, [r4]
 8006cc0:	f8c8 2000 	str.w	r2, [r8]
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ccc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006cd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cd4:	9307      	str	r3, [sp, #28]
 8006cd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cda:	f04f 32ff 	mov.w	r2, #4294967295
 8006cde:	4ba7      	ldr	r3, [pc, #668]	; (8006f7c <_printf_float+0x2f8>)
 8006ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ce4:	f7f9 ff22 	bl	8000b2c <__aeabi_dcmpun>
 8006ce8:	bb70      	cbnz	r0, 8006d48 <_printf_float+0xc4>
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	4ba3      	ldr	r3, [pc, #652]	; (8006f7c <_printf_float+0x2f8>)
 8006cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cf4:	f7f9 fefc 	bl	8000af0 <__aeabi_dcmple>
 8006cf8:	bb30      	cbnz	r0, 8006d48 <_printf_float+0xc4>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4649      	mov	r1, r9
 8006d02:	f7f9 feeb 	bl	8000adc <__aeabi_dcmplt>
 8006d06:	b110      	cbz	r0, 8006d0e <_printf_float+0x8a>
 8006d08:	232d      	movs	r3, #45	; 0x2d
 8006d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0e:	4a9c      	ldr	r2, [pc, #624]	; (8006f80 <_printf_float+0x2fc>)
 8006d10:	4b9c      	ldr	r3, [pc, #624]	; (8006f84 <_printf_float+0x300>)
 8006d12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006d16:	bf8c      	ite	hi
 8006d18:	4690      	movhi	r8, r2
 8006d1a:	4698      	movls	r8, r3
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	f02b 0204 	bic.w	r2, fp, #4
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	6022      	str	r2, [r4, #0]
 8006d26:	f04f 0900 	mov.w	r9, #0
 8006d2a:	9700      	str	r7, [sp, #0]
 8006d2c:	4633      	mov	r3, r6
 8006d2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d30:	4621      	mov	r1, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 f9e6 	bl	8007104 <_printf_common>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f040 808d 	bne.w	8006e58 <_printf_float+0x1d4>
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	b00d      	add	sp, #52	; 0x34
 8006d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d48:	4642      	mov	r2, r8
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	4649      	mov	r1, r9
 8006d50:	f7f9 feec 	bl	8000b2c <__aeabi_dcmpun>
 8006d54:	b110      	cbz	r0, 8006d5c <_printf_float+0xd8>
 8006d56:	4a8c      	ldr	r2, [pc, #560]	; (8006f88 <_printf_float+0x304>)
 8006d58:	4b8c      	ldr	r3, [pc, #560]	; (8006f8c <_printf_float+0x308>)
 8006d5a:	e7da      	b.n	8006d12 <_printf_float+0x8e>
 8006d5c:	6861      	ldr	r1, [r4, #4]
 8006d5e:	1c4b      	adds	r3, r1, #1
 8006d60:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006d64:	a80a      	add	r0, sp, #40	; 0x28
 8006d66:	d13e      	bne.n	8006de6 <_printf_float+0x162>
 8006d68:	2306      	movs	r3, #6
 8006d6a:	6063      	str	r3, [r4, #4]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006d72:	ab09      	add	r3, sp, #36	; 0x24
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	ec49 8b10 	vmov	d0, r8, r9
 8006d7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d7e:	6022      	str	r2, [r4, #0]
 8006d80:	f8cd a004 	str.w	sl, [sp, #4]
 8006d84:	6861      	ldr	r1, [r4, #4]
 8006d86:	4628      	mov	r0, r5
 8006d88:	f7ff fee8 	bl	8006b5c <__cvt>
 8006d8c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006d90:	2b47      	cmp	r3, #71	; 0x47
 8006d92:	4680      	mov	r8, r0
 8006d94:	d109      	bne.n	8006daa <_printf_float+0x126>
 8006d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d98:	1cd8      	adds	r0, r3, #3
 8006d9a:	db02      	blt.n	8006da2 <_printf_float+0x11e>
 8006d9c:	6862      	ldr	r2, [r4, #4]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	dd47      	ble.n	8006e32 <_printf_float+0x1ae>
 8006da2:	f1aa 0a02 	sub.w	sl, sl, #2
 8006da6:	fa5f fa8a 	uxtb.w	sl, sl
 8006daa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006db0:	d824      	bhi.n	8006dfc <_printf_float+0x178>
 8006db2:	3901      	subs	r1, #1
 8006db4:	4652      	mov	r2, sl
 8006db6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dba:	9109      	str	r1, [sp, #36]	; 0x24
 8006dbc:	f7ff ff2f 	bl	8006c1e <__exponent>
 8006dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dc2:	1813      	adds	r3, r2, r0
 8006dc4:	2a01      	cmp	r2, #1
 8006dc6:	4681      	mov	r9, r0
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	dc02      	bgt.n	8006dd2 <_printf_float+0x14e>
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	07d1      	lsls	r1, r2, #31
 8006dd0:	d501      	bpl.n	8006dd6 <_printf_float+0x152>
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0a5      	beq.n	8006d2a <_printf_float+0xa6>
 8006dde:	232d      	movs	r3, #45	; 0x2d
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de4:	e7a1      	b.n	8006d2a <_printf_float+0xa6>
 8006de6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006dea:	f000 8177 	beq.w	80070dc <_printf_float+0x458>
 8006dee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006df2:	d1bb      	bne.n	8006d6c <_printf_float+0xe8>
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d1b9      	bne.n	8006d6c <_printf_float+0xe8>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e7b6      	b.n	8006d6a <_printf_float+0xe6>
 8006dfc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006e00:	d119      	bne.n	8006e36 <_printf_float+0x1b2>
 8006e02:	2900      	cmp	r1, #0
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	dd0c      	ble.n	8006e22 <_printf_float+0x19e>
 8006e08:	6121      	str	r1, [r4, #16]
 8006e0a:	b913      	cbnz	r3, 8006e12 <_printf_float+0x18e>
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	07d2      	lsls	r2, r2, #31
 8006e10:	d502      	bpl.n	8006e18 <_printf_float+0x194>
 8006e12:	3301      	adds	r3, #1
 8006e14:	440b      	add	r3, r1
 8006e16:	6123      	str	r3, [r4, #16]
 8006e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e1c:	f04f 0900 	mov.w	r9, #0
 8006e20:	e7d9      	b.n	8006dd6 <_printf_float+0x152>
 8006e22:	b913      	cbnz	r3, 8006e2a <_printf_float+0x1a6>
 8006e24:	6822      	ldr	r2, [r4, #0]
 8006e26:	07d0      	lsls	r0, r2, #31
 8006e28:	d501      	bpl.n	8006e2e <_printf_float+0x1aa>
 8006e2a:	3302      	adds	r3, #2
 8006e2c:	e7f3      	b.n	8006e16 <_printf_float+0x192>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e7f1      	b.n	8006e16 <_printf_float+0x192>
 8006e32:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006e36:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	db05      	blt.n	8006e4a <_printf_float+0x1c6>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	6123      	str	r3, [r4, #16]
 8006e42:	07d1      	lsls	r1, r2, #31
 8006e44:	d5e8      	bpl.n	8006e18 <_printf_float+0x194>
 8006e46:	3301      	adds	r3, #1
 8006e48:	e7e5      	b.n	8006e16 <_printf_float+0x192>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bfd4      	ite	le
 8006e4e:	f1c3 0302 	rsble	r3, r3, #2
 8006e52:	2301      	movgt	r3, #1
 8006e54:	4413      	add	r3, r2
 8006e56:	e7de      	b.n	8006e16 <_printf_float+0x192>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	055a      	lsls	r2, r3, #21
 8006e5c:	d407      	bmi.n	8006e6e <_printf_float+0x1ea>
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	4642      	mov	r2, r8
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d12b      	bne.n	8006ec4 <_printf_float+0x240>
 8006e6c:	e767      	b.n	8006d3e <_printf_float+0xba>
 8006e6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006e72:	f240 80dc 	bls.w	800702e <_printf_float+0x3aa>
 8006e76:	2200      	movs	r2, #0
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e7e:	f7f9 fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d033      	beq.n	8006eee <_printf_float+0x26a>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4a41      	ldr	r2, [pc, #260]	; (8006f90 <_printf_float+0x30c>)
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	f43f af54 	beq.w	8006d3e <_printf_float+0xba>
 8006e96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	db02      	blt.n	8006ea4 <_printf_float+0x220>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	07d8      	lsls	r0, r3, #31
 8006ea2:	d50f      	bpl.n	8006ec4 <_printf_float+0x240>
 8006ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4628      	mov	r0, r5
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	f43f af45 	beq.w	8006d3e <_printf_float+0xba>
 8006eb4:	f04f 0800 	mov.w	r8, #0
 8006eb8:	f104 091a 	add.w	r9, r4, #26
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	4543      	cmp	r3, r8
 8006ec2:	dc09      	bgt.n	8006ed8 <_printf_float+0x254>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	079b      	lsls	r3, r3, #30
 8006ec8:	f100 8103 	bmi.w	80070d2 <_printf_float+0x44e>
 8006ecc:	68e0      	ldr	r0, [r4, #12]
 8006ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed0:	4298      	cmp	r0, r3
 8006ed2:	bfb8      	it	lt
 8006ed4:	4618      	movlt	r0, r3
 8006ed6:	e734      	b.n	8006d42 <_printf_float+0xbe>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	464a      	mov	r2, r9
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f43f af2b 	beq.w	8006d3e <_printf_float+0xba>
 8006ee8:	f108 0801 	add.w	r8, r8, #1
 8006eec:	e7e6      	b.n	8006ebc <_printf_float+0x238>
 8006eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	dc2b      	bgt.n	8006f4c <_printf_float+0x2c8>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4a26      	ldr	r2, [pc, #152]	; (8006f90 <_printf_float+0x30c>)
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f af1d 	beq.w	8006d3e <_printf_float+0xba>
 8006f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f06:	b923      	cbnz	r3, 8006f12 <_printf_float+0x28e>
 8006f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0a:	b913      	cbnz	r3, 8006f12 <_printf_float+0x28e>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	07d9      	lsls	r1, r3, #31
 8006f10:	d5d8      	bpl.n	8006ec4 <_printf_float+0x240>
 8006f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f af0e 	beq.w	8006d3e <_printf_float+0xba>
 8006f22:	f04f 0900 	mov.w	r9, #0
 8006f26:	f104 0a1a 	add.w	sl, r4, #26
 8006f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	454b      	cmp	r3, r9
 8006f30:	dc01      	bgt.n	8006f36 <_printf_float+0x2b2>
 8006f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f34:	e794      	b.n	8006e60 <_printf_float+0x1dc>
 8006f36:	2301      	movs	r3, #1
 8006f38:	4652      	mov	r2, sl
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	f43f aefc 	beq.w	8006d3e <_printf_float+0xba>
 8006f46:	f109 0901 	add.w	r9, r9, #1
 8006f4a:	e7ee      	b.n	8006f2a <_printf_float+0x2a6>
 8006f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f50:	429a      	cmp	r2, r3
 8006f52:	bfa8      	it	ge
 8006f54:	461a      	movge	r2, r3
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	4691      	mov	r9, r2
 8006f5a:	dd07      	ble.n	8006f6c <_printf_float+0x2e8>
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4642      	mov	r2, r8
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f aee9 	beq.w	8006d3e <_printf_float+0xba>
 8006f6c:	f104 031a 	add.w	r3, r4, #26
 8006f70:	f04f 0b00 	mov.w	fp, #0
 8006f74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f78:	9306      	str	r3, [sp, #24]
 8006f7a:	e015      	b.n	8006fa8 <_printf_float+0x324>
 8006f7c:	7fefffff 	.word	0x7fefffff
 8006f80:	080095c0 	.word	0x080095c0
 8006f84:	080095bc 	.word	0x080095bc
 8006f88:	080095c8 	.word	0x080095c8
 8006f8c:	080095c4 	.word	0x080095c4
 8006f90:	080095cc 	.word	0x080095cc
 8006f94:	2301      	movs	r3, #1
 8006f96:	9a06      	ldr	r2, [sp, #24]
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b8      	blx	r7
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	f43f aecd 	beq.w	8006d3e <_printf_float+0xba>
 8006fa4:	f10b 0b01 	add.w	fp, fp, #1
 8006fa8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006fac:	ebaa 0309 	sub.w	r3, sl, r9
 8006fb0:	455b      	cmp	r3, fp
 8006fb2:	dcef      	bgt.n	8006f94 <_printf_float+0x310>
 8006fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	44d0      	add	r8, sl
 8006fbc:	db15      	blt.n	8006fea <_printf_float+0x366>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	07da      	lsls	r2, r3, #31
 8006fc2:	d412      	bmi.n	8006fea <_printf_float+0x366>
 8006fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fc8:	eba3 020a 	sub.w	r2, r3, sl
 8006fcc:	eba3 0a01 	sub.w	sl, r3, r1
 8006fd0:	4592      	cmp	sl, r2
 8006fd2:	bfa8      	it	ge
 8006fd4:	4692      	movge	sl, r2
 8006fd6:	f1ba 0f00 	cmp.w	sl, #0
 8006fda:	dc0e      	bgt.n	8006ffa <_printf_float+0x376>
 8006fdc:	f04f 0800 	mov.w	r8, #0
 8006fe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fe4:	f104 091a 	add.w	r9, r4, #26
 8006fe8:	e019      	b.n	800701e <_printf_float+0x39a>
 8006fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	47b8      	blx	r7
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d1e5      	bne.n	8006fc4 <_printf_float+0x340>
 8006ff8:	e6a1      	b.n	8006d3e <_printf_float+0xba>
 8006ffa:	4653      	mov	r3, sl
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	d1e9      	bne.n	8006fdc <_printf_float+0x358>
 8007008:	e699      	b.n	8006d3e <_printf_float+0xba>
 800700a:	2301      	movs	r3, #1
 800700c:	464a      	mov	r2, r9
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f ae92 	beq.w	8006d3e <_printf_float+0xba>
 800701a:	f108 0801 	add.w	r8, r8, #1
 800701e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	eba3 030a 	sub.w	r3, r3, sl
 8007028:	4543      	cmp	r3, r8
 800702a:	dcee      	bgt.n	800700a <_printf_float+0x386>
 800702c:	e74a      	b.n	8006ec4 <_printf_float+0x240>
 800702e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007030:	2a01      	cmp	r2, #1
 8007032:	dc01      	bgt.n	8007038 <_printf_float+0x3b4>
 8007034:	07db      	lsls	r3, r3, #31
 8007036:	d53a      	bpl.n	80070ae <_printf_float+0x42a>
 8007038:	2301      	movs	r3, #1
 800703a:	4642      	mov	r2, r8
 800703c:	4631      	mov	r1, r6
 800703e:	4628      	mov	r0, r5
 8007040:	47b8      	blx	r7
 8007042:	3001      	adds	r0, #1
 8007044:	f43f ae7b 	beq.w	8006d3e <_printf_float+0xba>
 8007048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	f108 0801 	add.w	r8, r8, #1
 8007058:	f43f ae71 	beq.w	8006d3e <_printf_float+0xba>
 800705c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705e:	2200      	movs	r2, #0
 8007060:	f103 3aff 	add.w	sl, r3, #4294967295
 8007064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007068:	2300      	movs	r3, #0
 800706a:	f7f9 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800706e:	b9c8      	cbnz	r0, 80070a4 <_printf_float+0x420>
 8007070:	4653      	mov	r3, sl
 8007072:	4642      	mov	r2, r8
 8007074:	4631      	mov	r1, r6
 8007076:	4628      	mov	r0, r5
 8007078:	47b8      	blx	r7
 800707a:	3001      	adds	r0, #1
 800707c:	d10e      	bne.n	800709c <_printf_float+0x418>
 800707e:	e65e      	b.n	8006d3e <_printf_float+0xba>
 8007080:	2301      	movs	r3, #1
 8007082:	4652      	mov	r2, sl
 8007084:	4631      	mov	r1, r6
 8007086:	4628      	mov	r0, r5
 8007088:	47b8      	blx	r7
 800708a:	3001      	adds	r0, #1
 800708c:	f43f ae57 	beq.w	8006d3e <_printf_float+0xba>
 8007090:	f108 0801 	add.w	r8, r8, #1
 8007094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007096:	3b01      	subs	r3, #1
 8007098:	4543      	cmp	r3, r8
 800709a:	dcf1      	bgt.n	8007080 <_printf_float+0x3fc>
 800709c:	464b      	mov	r3, r9
 800709e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070a2:	e6de      	b.n	8006e62 <_printf_float+0x1de>
 80070a4:	f04f 0800 	mov.w	r8, #0
 80070a8:	f104 0a1a 	add.w	sl, r4, #26
 80070ac:	e7f2      	b.n	8007094 <_printf_float+0x410>
 80070ae:	2301      	movs	r3, #1
 80070b0:	e7df      	b.n	8007072 <_printf_float+0x3ee>
 80070b2:	2301      	movs	r3, #1
 80070b4:	464a      	mov	r2, r9
 80070b6:	4631      	mov	r1, r6
 80070b8:	4628      	mov	r0, r5
 80070ba:	47b8      	blx	r7
 80070bc:	3001      	adds	r0, #1
 80070be:	f43f ae3e 	beq.w	8006d3e <_printf_float+0xba>
 80070c2:	f108 0801 	add.w	r8, r8, #1
 80070c6:	68e3      	ldr	r3, [r4, #12]
 80070c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	4543      	cmp	r3, r8
 80070ce:	dcf0      	bgt.n	80070b2 <_printf_float+0x42e>
 80070d0:	e6fc      	b.n	8006ecc <_printf_float+0x248>
 80070d2:	f04f 0800 	mov.w	r8, #0
 80070d6:	f104 0919 	add.w	r9, r4, #25
 80070da:	e7f4      	b.n	80070c6 <_printf_float+0x442>
 80070dc:	2900      	cmp	r1, #0
 80070de:	f43f ae8b 	beq.w	8006df8 <_printf_float+0x174>
 80070e2:	2300      	movs	r3, #0
 80070e4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80070e8:	ab09      	add	r3, sp, #36	; 0x24
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	ec49 8b10 	vmov	d0, r8, r9
 80070f0:	6022      	str	r2, [r4, #0]
 80070f2:	f8cd a004 	str.w	sl, [sp, #4]
 80070f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070fa:	4628      	mov	r0, r5
 80070fc:	f7ff fd2e 	bl	8006b5c <__cvt>
 8007100:	4680      	mov	r8, r0
 8007102:	e648      	b.n	8006d96 <_printf_float+0x112>

08007104 <_printf_common>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	4691      	mov	r9, r2
 800710a:	461f      	mov	r7, r3
 800710c:	688a      	ldr	r2, [r1, #8]
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007114:	4293      	cmp	r3, r2
 8007116:	bfb8      	it	lt
 8007118:	4613      	movlt	r3, r2
 800711a:	f8c9 3000 	str.w	r3, [r9]
 800711e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007122:	4606      	mov	r6, r0
 8007124:	460c      	mov	r4, r1
 8007126:	b112      	cbz	r2, 800712e <_printf_common+0x2a>
 8007128:	3301      	adds	r3, #1
 800712a:	f8c9 3000 	str.w	r3, [r9]
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	0699      	lsls	r1, r3, #26
 8007132:	bf42      	ittt	mi
 8007134:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007138:	3302      	addmi	r3, #2
 800713a:	f8c9 3000 	strmi.w	r3, [r9]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	f015 0506 	ands.w	r5, r5, #6
 8007144:	d107      	bne.n	8007156 <_printf_common+0x52>
 8007146:	f104 0a19 	add.w	sl, r4, #25
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	f8d9 2000 	ldr.w	r2, [r9]
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	42ab      	cmp	r3, r5
 8007154:	dc28      	bgt.n	80071a8 <_printf_common+0xa4>
 8007156:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	3300      	adds	r3, #0
 800715e:	bf18      	it	ne
 8007160:	2301      	movne	r3, #1
 8007162:	0692      	lsls	r2, r2, #26
 8007164:	d42d      	bmi.n	80071c2 <_printf_common+0xbe>
 8007166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800716a:	4639      	mov	r1, r7
 800716c:	4630      	mov	r0, r6
 800716e:	47c0      	blx	r8
 8007170:	3001      	adds	r0, #1
 8007172:	d020      	beq.n	80071b6 <_printf_common+0xb2>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	68e5      	ldr	r5, [r4, #12]
 8007178:	f8d9 2000 	ldr.w	r2, [r9]
 800717c:	f003 0306 	and.w	r3, r3, #6
 8007180:	2b04      	cmp	r3, #4
 8007182:	bf08      	it	eq
 8007184:	1aad      	subeq	r5, r5, r2
 8007186:	68a3      	ldr	r3, [r4, #8]
 8007188:	6922      	ldr	r2, [r4, #16]
 800718a:	bf0c      	ite	eq
 800718c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007190:	2500      	movne	r5, #0
 8007192:	4293      	cmp	r3, r2
 8007194:	bfc4      	itt	gt
 8007196:	1a9b      	subgt	r3, r3, r2
 8007198:	18ed      	addgt	r5, r5, r3
 800719a:	f04f 0900 	mov.w	r9, #0
 800719e:	341a      	adds	r4, #26
 80071a0:	454d      	cmp	r5, r9
 80071a2:	d11a      	bne.n	80071da <_printf_common+0xd6>
 80071a4:	2000      	movs	r0, #0
 80071a6:	e008      	b.n	80071ba <_printf_common+0xb6>
 80071a8:	2301      	movs	r3, #1
 80071aa:	4652      	mov	r2, sl
 80071ac:	4639      	mov	r1, r7
 80071ae:	4630      	mov	r0, r6
 80071b0:	47c0      	blx	r8
 80071b2:	3001      	adds	r0, #1
 80071b4:	d103      	bne.n	80071be <_printf_common+0xba>
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071be:	3501      	adds	r5, #1
 80071c0:	e7c3      	b.n	800714a <_printf_common+0x46>
 80071c2:	18e1      	adds	r1, r4, r3
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	2030      	movs	r0, #48	; 0x30
 80071c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071cc:	4422      	add	r2, r4
 80071ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071d6:	3302      	adds	r3, #2
 80071d8:	e7c5      	b.n	8007166 <_printf_common+0x62>
 80071da:	2301      	movs	r3, #1
 80071dc:	4622      	mov	r2, r4
 80071de:	4639      	mov	r1, r7
 80071e0:	4630      	mov	r0, r6
 80071e2:	47c0      	blx	r8
 80071e4:	3001      	adds	r0, #1
 80071e6:	d0e6      	beq.n	80071b6 <_printf_common+0xb2>
 80071e8:	f109 0901 	add.w	r9, r9, #1
 80071ec:	e7d8      	b.n	80071a0 <_printf_common+0x9c>
	...

080071f0 <_printf_i>:
 80071f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071f8:	460c      	mov	r4, r1
 80071fa:	7e09      	ldrb	r1, [r1, #24]
 80071fc:	b085      	sub	sp, #20
 80071fe:	296e      	cmp	r1, #110	; 0x6e
 8007200:	4617      	mov	r7, r2
 8007202:	4606      	mov	r6, r0
 8007204:	4698      	mov	r8, r3
 8007206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007208:	f000 80b3 	beq.w	8007372 <_printf_i+0x182>
 800720c:	d822      	bhi.n	8007254 <_printf_i+0x64>
 800720e:	2963      	cmp	r1, #99	; 0x63
 8007210:	d036      	beq.n	8007280 <_printf_i+0x90>
 8007212:	d80a      	bhi.n	800722a <_printf_i+0x3a>
 8007214:	2900      	cmp	r1, #0
 8007216:	f000 80b9 	beq.w	800738c <_printf_i+0x19c>
 800721a:	2958      	cmp	r1, #88	; 0x58
 800721c:	f000 8083 	beq.w	8007326 <_printf_i+0x136>
 8007220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007224:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007228:	e032      	b.n	8007290 <_printf_i+0xa0>
 800722a:	2964      	cmp	r1, #100	; 0x64
 800722c:	d001      	beq.n	8007232 <_printf_i+0x42>
 800722e:	2969      	cmp	r1, #105	; 0x69
 8007230:	d1f6      	bne.n	8007220 <_printf_i+0x30>
 8007232:	6820      	ldr	r0, [r4, #0]
 8007234:	6813      	ldr	r3, [r2, #0]
 8007236:	0605      	lsls	r5, r0, #24
 8007238:	f103 0104 	add.w	r1, r3, #4
 800723c:	d52a      	bpl.n	8007294 <_printf_i+0xa4>
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6011      	str	r1, [r2, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	da03      	bge.n	800724e <_printf_i+0x5e>
 8007246:	222d      	movs	r2, #45	; 0x2d
 8007248:	425b      	negs	r3, r3
 800724a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800724e:	486f      	ldr	r0, [pc, #444]	; (800740c <_printf_i+0x21c>)
 8007250:	220a      	movs	r2, #10
 8007252:	e039      	b.n	80072c8 <_printf_i+0xd8>
 8007254:	2973      	cmp	r1, #115	; 0x73
 8007256:	f000 809d 	beq.w	8007394 <_printf_i+0x1a4>
 800725a:	d808      	bhi.n	800726e <_printf_i+0x7e>
 800725c:	296f      	cmp	r1, #111	; 0x6f
 800725e:	d020      	beq.n	80072a2 <_printf_i+0xb2>
 8007260:	2970      	cmp	r1, #112	; 0x70
 8007262:	d1dd      	bne.n	8007220 <_printf_i+0x30>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	f043 0320 	orr.w	r3, r3, #32
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	e003      	b.n	8007276 <_printf_i+0x86>
 800726e:	2975      	cmp	r1, #117	; 0x75
 8007270:	d017      	beq.n	80072a2 <_printf_i+0xb2>
 8007272:	2978      	cmp	r1, #120	; 0x78
 8007274:	d1d4      	bne.n	8007220 <_printf_i+0x30>
 8007276:	2378      	movs	r3, #120	; 0x78
 8007278:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800727c:	4864      	ldr	r0, [pc, #400]	; (8007410 <_printf_i+0x220>)
 800727e:	e055      	b.n	800732c <_printf_i+0x13c>
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	1d19      	adds	r1, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6011      	str	r1, [r2, #0]
 8007288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800728c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007290:	2301      	movs	r3, #1
 8007292:	e08c      	b.n	80073ae <_printf_i+0x1be>
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6011      	str	r1, [r2, #0]
 8007298:	f010 0f40 	tst.w	r0, #64	; 0x40
 800729c:	bf18      	it	ne
 800729e:	b21b      	sxthne	r3, r3
 80072a0:	e7cf      	b.n	8007242 <_printf_i+0x52>
 80072a2:	6813      	ldr	r3, [r2, #0]
 80072a4:	6825      	ldr	r5, [r4, #0]
 80072a6:	1d18      	adds	r0, r3, #4
 80072a8:	6010      	str	r0, [r2, #0]
 80072aa:	0628      	lsls	r0, r5, #24
 80072ac:	d501      	bpl.n	80072b2 <_printf_i+0xc2>
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	e002      	b.n	80072b8 <_printf_i+0xc8>
 80072b2:	0668      	lsls	r0, r5, #25
 80072b4:	d5fb      	bpl.n	80072ae <_printf_i+0xbe>
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	4854      	ldr	r0, [pc, #336]	; (800740c <_printf_i+0x21c>)
 80072ba:	296f      	cmp	r1, #111	; 0x6f
 80072bc:	bf14      	ite	ne
 80072be:	220a      	movne	r2, #10
 80072c0:	2208      	moveq	r2, #8
 80072c2:	2100      	movs	r1, #0
 80072c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072c8:	6865      	ldr	r5, [r4, #4]
 80072ca:	60a5      	str	r5, [r4, #8]
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	f2c0 8095 	blt.w	80073fc <_printf_i+0x20c>
 80072d2:	6821      	ldr	r1, [r4, #0]
 80072d4:	f021 0104 	bic.w	r1, r1, #4
 80072d8:	6021      	str	r1, [r4, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d13d      	bne.n	800735a <_printf_i+0x16a>
 80072de:	2d00      	cmp	r5, #0
 80072e0:	f040 808e 	bne.w	8007400 <_printf_i+0x210>
 80072e4:	4665      	mov	r5, ip
 80072e6:	2a08      	cmp	r2, #8
 80072e8:	d10b      	bne.n	8007302 <_printf_i+0x112>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	07db      	lsls	r3, r3, #31
 80072ee:	d508      	bpl.n	8007302 <_printf_i+0x112>
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	6862      	ldr	r2, [r4, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	bfde      	ittt	le
 80072f8:	2330      	movle	r3, #48	; 0x30
 80072fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007302:	ebac 0305 	sub.w	r3, ip, r5
 8007306:	6123      	str	r3, [r4, #16]
 8007308:	f8cd 8000 	str.w	r8, [sp]
 800730c:	463b      	mov	r3, r7
 800730e:	aa03      	add	r2, sp, #12
 8007310:	4621      	mov	r1, r4
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff fef6 	bl	8007104 <_printf_common>
 8007318:	3001      	adds	r0, #1
 800731a:	d14d      	bne.n	80073b8 <_printf_i+0x1c8>
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	b005      	add	sp, #20
 8007322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007326:	4839      	ldr	r0, [pc, #228]	; (800740c <_printf_i+0x21c>)
 8007328:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800732c:	6813      	ldr	r3, [r2, #0]
 800732e:	6821      	ldr	r1, [r4, #0]
 8007330:	1d1d      	adds	r5, r3, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6015      	str	r5, [r2, #0]
 8007336:	060a      	lsls	r2, r1, #24
 8007338:	d50b      	bpl.n	8007352 <_printf_i+0x162>
 800733a:	07ca      	lsls	r2, r1, #31
 800733c:	bf44      	itt	mi
 800733e:	f041 0120 	orrmi.w	r1, r1, #32
 8007342:	6021      	strmi	r1, [r4, #0]
 8007344:	b91b      	cbnz	r3, 800734e <_printf_i+0x15e>
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	f022 0220 	bic.w	r2, r2, #32
 800734c:	6022      	str	r2, [r4, #0]
 800734e:	2210      	movs	r2, #16
 8007350:	e7b7      	b.n	80072c2 <_printf_i+0xd2>
 8007352:	064d      	lsls	r5, r1, #25
 8007354:	bf48      	it	mi
 8007356:	b29b      	uxthmi	r3, r3
 8007358:	e7ef      	b.n	800733a <_printf_i+0x14a>
 800735a:	4665      	mov	r5, ip
 800735c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007360:	fb02 3311 	mls	r3, r2, r1, r3
 8007364:	5cc3      	ldrb	r3, [r0, r3]
 8007366:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800736a:	460b      	mov	r3, r1
 800736c:	2900      	cmp	r1, #0
 800736e:	d1f5      	bne.n	800735c <_printf_i+0x16c>
 8007370:	e7b9      	b.n	80072e6 <_printf_i+0xf6>
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	6825      	ldr	r5, [r4, #0]
 8007376:	6961      	ldr	r1, [r4, #20]
 8007378:	1d18      	adds	r0, r3, #4
 800737a:	6010      	str	r0, [r2, #0]
 800737c:	0628      	lsls	r0, r5, #24
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	d501      	bpl.n	8007386 <_printf_i+0x196>
 8007382:	6019      	str	r1, [r3, #0]
 8007384:	e002      	b.n	800738c <_printf_i+0x19c>
 8007386:	066a      	lsls	r2, r5, #25
 8007388:	d5fb      	bpl.n	8007382 <_printf_i+0x192>
 800738a:	8019      	strh	r1, [r3, #0]
 800738c:	2300      	movs	r3, #0
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	4665      	mov	r5, ip
 8007392:	e7b9      	b.n	8007308 <_printf_i+0x118>
 8007394:	6813      	ldr	r3, [r2, #0]
 8007396:	1d19      	adds	r1, r3, #4
 8007398:	6011      	str	r1, [r2, #0]
 800739a:	681d      	ldr	r5, [r3, #0]
 800739c:	6862      	ldr	r2, [r4, #4]
 800739e:	2100      	movs	r1, #0
 80073a0:	4628      	mov	r0, r5
 80073a2:	f7f8 ff1d 	bl	80001e0 <memchr>
 80073a6:	b108      	cbz	r0, 80073ac <_printf_i+0x1bc>
 80073a8:	1b40      	subs	r0, r0, r5
 80073aa:	6060      	str	r0, [r4, #4]
 80073ac:	6863      	ldr	r3, [r4, #4]
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	2300      	movs	r3, #0
 80073b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b6:	e7a7      	b.n	8007308 <_printf_i+0x118>
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	462a      	mov	r2, r5
 80073bc:	4639      	mov	r1, r7
 80073be:	4630      	mov	r0, r6
 80073c0:	47c0      	blx	r8
 80073c2:	3001      	adds	r0, #1
 80073c4:	d0aa      	beq.n	800731c <_printf_i+0x12c>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	079b      	lsls	r3, r3, #30
 80073ca:	d413      	bmi.n	80073f4 <_printf_i+0x204>
 80073cc:	68e0      	ldr	r0, [r4, #12]
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	4298      	cmp	r0, r3
 80073d2:	bfb8      	it	lt
 80073d4:	4618      	movlt	r0, r3
 80073d6:	e7a3      	b.n	8007320 <_printf_i+0x130>
 80073d8:	2301      	movs	r3, #1
 80073da:	464a      	mov	r2, r9
 80073dc:	4639      	mov	r1, r7
 80073de:	4630      	mov	r0, r6
 80073e0:	47c0      	blx	r8
 80073e2:	3001      	adds	r0, #1
 80073e4:	d09a      	beq.n	800731c <_printf_i+0x12c>
 80073e6:	3501      	adds	r5, #1
 80073e8:	68e3      	ldr	r3, [r4, #12]
 80073ea:	9a03      	ldr	r2, [sp, #12]
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	dcf2      	bgt.n	80073d8 <_printf_i+0x1e8>
 80073f2:	e7eb      	b.n	80073cc <_printf_i+0x1dc>
 80073f4:	2500      	movs	r5, #0
 80073f6:	f104 0919 	add.w	r9, r4, #25
 80073fa:	e7f5      	b.n	80073e8 <_printf_i+0x1f8>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1ac      	bne.n	800735a <_printf_i+0x16a>
 8007400:	7803      	ldrb	r3, [r0, #0]
 8007402:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007406:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800740a:	e76c      	b.n	80072e6 <_printf_i+0xf6>
 800740c:	080095ce 	.word	0x080095ce
 8007410:	080095df 	.word	0x080095df

08007414 <iprintf>:
 8007414:	b40f      	push	{r0, r1, r2, r3}
 8007416:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <iprintf+0x2c>)
 8007418:	b513      	push	{r0, r1, r4, lr}
 800741a:	681c      	ldr	r4, [r3, #0]
 800741c:	b124      	cbz	r4, 8007428 <iprintf+0x14>
 800741e:	69a3      	ldr	r3, [r4, #24]
 8007420:	b913      	cbnz	r3, 8007428 <iprintf+0x14>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 feb4 	bl	8008190 <__sinit>
 8007428:	ab05      	add	r3, sp, #20
 800742a:	9a04      	ldr	r2, [sp, #16]
 800742c:	68a1      	ldr	r1, [r4, #8]
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	4620      	mov	r0, r4
 8007432:	f001 fc65 	bl	8008d00 <_vfiprintf_r>
 8007436:	b002      	add	sp, #8
 8007438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800743c:	b004      	add	sp, #16
 800743e:	4770      	bx	lr
 8007440:	20000020 	.word	0x20000020

08007444 <siprintf>:
 8007444:	b40e      	push	{r1, r2, r3}
 8007446:	b500      	push	{lr}
 8007448:	b09c      	sub	sp, #112	; 0x70
 800744a:	ab1d      	add	r3, sp, #116	; 0x74
 800744c:	9002      	str	r0, [sp, #8]
 800744e:	9006      	str	r0, [sp, #24]
 8007450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007454:	4809      	ldr	r0, [pc, #36]	; (800747c <siprintf+0x38>)
 8007456:	9107      	str	r1, [sp, #28]
 8007458:	9104      	str	r1, [sp, #16]
 800745a:	4909      	ldr	r1, [pc, #36]	; (8007480 <siprintf+0x3c>)
 800745c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007460:	9105      	str	r1, [sp, #20]
 8007462:	6800      	ldr	r0, [r0, #0]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	a902      	add	r1, sp, #8
 8007468:	f001 fb28 	bl	8008abc <_svfiprintf_r>
 800746c:	9b02      	ldr	r3, [sp, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	b01c      	add	sp, #112	; 0x70
 8007474:	f85d eb04 	ldr.w	lr, [sp], #4
 8007478:	b003      	add	sp, #12
 800747a:	4770      	bx	lr
 800747c:	20000020 	.word	0x20000020
 8007480:	ffff0208 	.word	0xffff0208

08007484 <quorem>:
 8007484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	6903      	ldr	r3, [r0, #16]
 800748a:	690c      	ldr	r4, [r1, #16]
 800748c:	42a3      	cmp	r3, r4
 800748e:	4680      	mov	r8, r0
 8007490:	f2c0 8082 	blt.w	8007598 <quorem+0x114>
 8007494:	3c01      	subs	r4, #1
 8007496:	f101 0714 	add.w	r7, r1, #20
 800749a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800749e:	f100 0614 	add.w	r6, r0, #20
 80074a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80074a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80074aa:	eb06 030c 	add.w	r3, r6, ip
 80074ae:	3501      	adds	r5, #1
 80074b0:	eb07 090c 	add.w	r9, r7, ip
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80074ba:	b395      	cbz	r5, 8007522 <quorem+0x9e>
 80074bc:	f04f 0a00 	mov.w	sl, #0
 80074c0:	4638      	mov	r0, r7
 80074c2:	46b6      	mov	lr, r6
 80074c4:	46d3      	mov	fp, sl
 80074c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80074ca:	b293      	uxth	r3, r2
 80074cc:	fb05 a303 	mla	r3, r5, r3, sl
 80074d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	ebab 0303 	sub.w	r3, fp, r3
 80074da:	0c12      	lsrs	r2, r2, #16
 80074dc:	f8de b000 	ldr.w	fp, [lr]
 80074e0:	fb05 a202 	mla	r2, r5, r2, sl
 80074e4:	fa13 f38b 	uxtah	r3, r3, fp
 80074e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80074ec:	fa1f fb82 	uxth.w	fp, r2
 80074f0:	f8de 2000 	ldr.w	r2, [lr]
 80074f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80074f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007502:	4581      	cmp	r9, r0
 8007504:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007508:	f84e 3b04 	str.w	r3, [lr], #4
 800750c:	d2db      	bcs.n	80074c6 <quorem+0x42>
 800750e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007512:	b933      	cbnz	r3, 8007522 <quorem+0x9e>
 8007514:	9b01      	ldr	r3, [sp, #4]
 8007516:	3b04      	subs	r3, #4
 8007518:	429e      	cmp	r6, r3
 800751a:	461a      	mov	r2, r3
 800751c:	d330      	bcc.n	8007580 <quorem+0xfc>
 800751e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007522:	4640      	mov	r0, r8
 8007524:	f001 f8f4 	bl	8008710 <__mcmp>
 8007528:	2800      	cmp	r0, #0
 800752a:	db25      	blt.n	8007578 <quorem+0xf4>
 800752c:	3501      	adds	r5, #1
 800752e:	4630      	mov	r0, r6
 8007530:	f04f 0c00 	mov.w	ip, #0
 8007534:	f857 2b04 	ldr.w	r2, [r7], #4
 8007538:	f8d0 e000 	ldr.w	lr, [r0]
 800753c:	b293      	uxth	r3, r2
 800753e:	ebac 0303 	sub.w	r3, ip, r3
 8007542:	0c12      	lsrs	r2, r2, #16
 8007544:	fa13 f38e 	uxtah	r3, r3, lr
 8007548:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800754c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007550:	b29b      	uxth	r3, r3
 8007552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007556:	45b9      	cmp	r9, r7
 8007558:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800755c:	f840 3b04 	str.w	r3, [r0], #4
 8007560:	d2e8      	bcs.n	8007534 <quorem+0xb0>
 8007562:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007566:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800756a:	b92a      	cbnz	r2, 8007578 <quorem+0xf4>
 800756c:	3b04      	subs	r3, #4
 800756e:	429e      	cmp	r6, r3
 8007570:	461a      	mov	r2, r3
 8007572:	d30b      	bcc.n	800758c <quorem+0x108>
 8007574:	f8c8 4010 	str.w	r4, [r8, #16]
 8007578:	4628      	mov	r0, r5
 800757a:	b003      	add	sp, #12
 800757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	3b04      	subs	r3, #4
 8007584:	2a00      	cmp	r2, #0
 8007586:	d1ca      	bne.n	800751e <quorem+0x9a>
 8007588:	3c01      	subs	r4, #1
 800758a:	e7c5      	b.n	8007518 <quorem+0x94>
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	3b04      	subs	r3, #4
 8007590:	2a00      	cmp	r2, #0
 8007592:	d1ef      	bne.n	8007574 <quorem+0xf0>
 8007594:	3c01      	subs	r4, #1
 8007596:	e7ea      	b.n	800756e <quorem+0xea>
 8007598:	2000      	movs	r0, #0
 800759a:	e7ee      	b.n	800757a <quorem+0xf6>
 800759c:	0000      	movs	r0, r0
	...

080075a0 <_dtoa_r>:
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	ec57 6b10 	vmov	r6, r7, d0
 80075a8:	b097      	sub	sp, #92	; 0x5c
 80075aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075ac:	9106      	str	r1, [sp, #24]
 80075ae:	4604      	mov	r4, r0
 80075b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80075b2:	9312      	str	r3, [sp, #72]	; 0x48
 80075b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075b8:	e9cd 6700 	strd	r6, r7, [sp]
 80075bc:	b93d      	cbnz	r5, 80075ce <_dtoa_r+0x2e>
 80075be:	2010      	movs	r0, #16
 80075c0:	f000 fe7e 	bl	80082c0 <malloc>
 80075c4:	6260      	str	r0, [r4, #36]	; 0x24
 80075c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075ca:	6005      	str	r5, [r0, #0]
 80075cc:	60c5      	str	r5, [r0, #12]
 80075ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d0:	6819      	ldr	r1, [r3, #0]
 80075d2:	b151      	cbz	r1, 80075ea <_dtoa_r+0x4a>
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	604a      	str	r2, [r1, #4]
 80075d8:	2301      	movs	r3, #1
 80075da:	4093      	lsls	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 feb5 	bl	800834e <_Bfree>
 80075e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	1e3b      	subs	r3, r7, #0
 80075ec:	bfbb      	ittet	lt
 80075ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80075f2:	9301      	strlt	r3, [sp, #4]
 80075f4:	2300      	movge	r3, #0
 80075f6:	2201      	movlt	r2, #1
 80075f8:	bfac      	ite	ge
 80075fa:	f8c8 3000 	strge.w	r3, [r8]
 80075fe:	f8c8 2000 	strlt.w	r2, [r8]
 8007602:	4baf      	ldr	r3, [pc, #700]	; (80078c0 <_dtoa_r+0x320>)
 8007604:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007608:	ea33 0308 	bics.w	r3, r3, r8
 800760c:	d114      	bne.n	8007638 <_dtoa_r+0x98>
 800760e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007610:	f242 730f 	movw	r3, #9999	; 0x270f
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	9b00      	ldr	r3, [sp, #0]
 8007618:	b923      	cbnz	r3, 8007624 <_dtoa_r+0x84>
 800761a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800761e:	2800      	cmp	r0, #0
 8007620:	f000 8542 	beq.w	80080a8 <_dtoa_r+0xb08>
 8007624:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007626:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80078d4 <_dtoa_r+0x334>
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 8544 	beq.w	80080b8 <_dtoa_r+0xb18>
 8007630:	f10b 0303 	add.w	r3, fp, #3
 8007634:	f000 bd3e 	b.w	80080b4 <_dtoa_r+0xb14>
 8007638:	e9dd 6700 	ldrd	r6, r7, [sp]
 800763c:	2200      	movs	r2, #0
 800763e:	2300      	movs	r3, #0
 8007640:	4630      	mov	r0, r6
 8007642:	4639      	mov	r1, r7
 8007644:	f7f9 fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007648:	4681      	mov	r9, r0
 800764a:	b168      	cbz	r0, 8007668 <_dtoa_r+0xc8>
 800764c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800764e:	2301      	movs	r3, #1
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 8524 	beq.w	80080a2 <_dtoa_r+0xb02>
 800765a:	4b9a      	ldr	r3, [pc, #616]	; (80078c4 <_dtoa_r+0x324>)
 800765c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800765e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	f000 bd28 	b.w	80080b8 <_dtoa_r+0xb18>
 8007668:	aa14      	add	r2, sp, #80	; 0x50
 800766a:	a915      	add	r1, sp, #84	; 0x54
 800766c:	ec47 6b10 	vmov	d0, r6, r7
 8007670:	4620      	mov	r0, r4
 8007672:	f001 f8c4 	bl	80087fe <__d2b>
 8007676:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800767a:	9004      	str	r0, [sp, #16]
 800767c:	2d00      	cmp	r5, #0
 800767e:	d07c      	beq.n	800777a <_dtoa_r+0x1da>
 8007680:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007684:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007688:	46b2      	mov	sl, r6
 800768a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800768e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007692:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007696:	2200      	movs	r2, #0
 8007698:	4b8b      	ldr	r3, [pc, #556]	; (80078c8 <_dtoa_r+0x328>)
 800769a:	4650      	mov	r0, sl
 800769c:	4659      	mov	r1, fp
 800769e:	f7f8 fdf3 	bl	8000288 <__aeabi_dsub>
 80076a2:	a381      	add	r3, pc, #516	; (adr r3, 80078a8 <_dtoa_r+0x308>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 ffa6 	bl	80005f8 <__aeabi_dmul>
 80076ac:	a380      	add	r3, pc, #512	; (adr r3, 80078b0 <_dtoa_r+0x310>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f7f8 fdeb 	bl	800028c <__adddf3>
 80076b6:	4606      	mov	r6, r0
 80076b8:	4628      	mov	r0, r5
 80076ba:	460f      	mov	r7, r1
 80076bc:	f7f8 ff32 	bl	8000524 <__aeabi_i2d>
 80076c0:	a37d      	add	r3, pc, #500	; (adr r3, 80078b8 <_dtoa_r+0x318>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 ff97 	bl	80005f8 <__aeabi_dmul>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4630      	mov	r0, r6
 80076d0:	4639      	mov	r1, r7
 80076d2:	f7f8 fddb 	bl	800028c <__adddf3>
 80076d6:	4606      	mov	r6, r0
 80076d8:	460f      	mov	r7, r1
 80076da:	f7f9 fa3d 	bl	8000b58 <__aeabi_d2iz>
 80076de:	2200      	movs	r2, #0
 80076e0:	4682      	mov	sl, r0
 80076e2:	2300      	movs	r3, #0
 80076e4:	4630      	mov	r0, r6
 80076e6:	4639      	mov	r1, r7
 80076e8:	f7f9 f9f8 	bl	8000adc <__aeabi_dcmplt>
 80076ec:	b148      	cbz	r0, 8007702 <_dtoa_r+0x162>
 80076ee:	4650      	mov	r0, sl
 80076f0:	f7f8 ff18 	bl	8000524 <__aeabi_i2d>
 80076f4:	4632      	mov	r2, r6
 80076f6:	463b      	mov	r3, r7
 80076f8:	f7f9 f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80076fc:	b908      	cbnz	r0, 8007702 <_dtoa_r+0x162>
 80076fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007702:	f1ba 0f16 	cmp.w	sl, #22
 8007706:	d859      	bhi.n	80077bc <_dtoa_r+0x21c>
 8007708:	4970      	ldr	r1, [pc, #448]	; (80078cc <_dtoa_r+0x32c>)
 800770a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800770e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007716:	f7f9 f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800771a:	2800      	cmp	r0, #0
 800771c:	d050      	beq.n	80077c0 <_dtoa_r+0x220>
 800771e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007722:	2300      	movs	r3, #0
 8007724:	930f      	str	r3, [sp, #60]	; 0x3c
 8007726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007728:	1b5d      	subs	r5, r3, r5
 800772a:	f1b5 0801 	subs.w	r8, r5, #1
 800772e:	bf49      	itett	mi
 8007730:	f1c5 0301 	rsbmi	r3, r5, #1
 8007734:	2300      	movpl	r3, #0
 8007736:	9305      	strmi	r3, [sp, #20]
 8007738:	f04f 0800 	movmi.w	r8, #0
 800773c:	bf58      	it	pl
 800773e:	9305      	strpl	r3, [sp, #20]
 8007740:	f1ba 0f00 	cmp.w	sl, #0
 8007744:	db3e      	blt.n	80077c4 <_dtoa_r+0x224>
 8007746:	2300      	movs	r3, #0
 8007748:	44d0      	add	r8, sl
 800774a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800774e:	9307      	str	r3, [sp, #28]
 8007750:	9b06      	ldr	r3, [sp, #24]
 8007752:	2b09      	cmp	r3, #9
 8007754:	f200 8090 	bhi.w	8007878 <_dtoa_r+0x2d8>
 8007758:	2b05      	cmp	r3, #5
 800775a:	bfc4      	itt	gt
 800775c:	3b04      	subgt	r3, #4
 800775e:	9306      	strgt	r3, [sp, #24]
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	f1a3 0302 	sub.w	r3, r3, #2
 8007766:	bfcc      	ite	gt
 8007768:	2500      	movgt	r5, #0
 800776a:	2501      	movle	r5, #1
 800776c:	2b03      	cmp	r3, #3
 800776e:	f200 808f 	bhi.w	8007890 <_dtoa_r+0x2f0>
 8007772:	e8df f003 	tbb	[pc, r3]
 8007776:	7f7d      	.short	0x7f7d
 8007778:	7131      	.short	0x7131
 800777a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800777e:	441d      	add	r5, r3
 8007780:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007784:	2820      	cmp	r0, #32
 8007786:	dd13      	ble.n	80077b0 <_dtoa_r+0x210>
 8007788:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	fa08 f800 	lsl.w	r8, r8, r0
 8007792:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007796:	fa23 f000 	lsr.w	r0, r3, r0
 800779a:	ea48 0000 	orr.w	r0, r8, r0
 800779e:	f7f8 feb1 	bl	8000504 <__aeabi_ui2d>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4682      	mov	sl, r0
 80077a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80077aa:	3d01      	subs	r5, #1
 80077ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80077ae:	e772      	b.n	8007696 <_dtoa_r+0xf6>
 80077b0:	9b00      	ldr	r3, [sp, #0]
 80077b2:	f1c0 0020 	rsb	r0, r0, #32
 80077b6:	fa03 f000 	lsl.w	r0, r3, r0
 80077ba:	e7f0      	b.n	800779e <_dtoa_r+0x1fe>
 80077bc:	2301      	movs	r3, #1
 80077be:	e7b1      	b.n	8007724 <_dtoa_r+0x184>
 80077c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80077c2:	e7b0      	b.n	8007726 <_dtoa_r+0x186>
 80077c4:	9b05      	ldr	r3, [sp, #20]
 80077c6:	eba3 030a 	sub.w	r3, r3, sl
 80077ca:	9305      	str	r3, [sp, #20]
 80077cc:	f1ca 0300 	rsb	r3, sl, #0
 80077d0:	9307      	str	r3, [sp, #28]
 80077d2:	2300      	movs	r3, #0
 80077d4:	930e      	str	r3, [sp, #56]	; 0x38
 80077d6:	e7bb      	b.n	8007750 <_dtoa_r+0x1b0>
 80077d8:	2301      	movs	r3, #1
 80077da:	930a      	str	r3, [sp, #40]	; 0x28
 80077dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dd59      	ble.n	8007896 <_dtoa_r+0x2f6>
 80077e2:	9302      	str	r3, [sp, #8]
 80077e4:	4699      	mov	r9, r3
 80077e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077e8:	2200      	movs	r2, #0
 80077ea:	6072      	str	r2, [r6, #4]
 80077ec:	2204      	movs	r2, #4
 80077ee:	f102 0014 	add.w	r0, r2, #20
 80077f2:	4298      	cmp	r0, r3
 80077f4:	6871      	ldr	r1, [r6, #4]
 80077f6:	d953      	bls.n	80078a0 <_dtoa_r+0x300>
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fd74 	bl	80082e6 <_Balloc>
 80077fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007800:	6030      	str	r0, [r6, #0]
 8007802:	f1b9 0f0e 	cmp.w	r9, #14
 8007806:	f8d3 b000 	ldr.w	fp, [r3]
 800780a:	f200 80e6 	bhi.w	80079da <_dtoa_r+0x43a>
 800780e:	2d00      	cmp	r5, #0
 8007810:	f000 80e3 	beq.w	80079da <_dtoa_r+0x43a>
 8007814:	ed9d 7b00 	vldr	d7, [sp]
 8007818:	f1ba 0f00 	cmp.w	sl, #0
 800781c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007820:	dd74      	ble.n	800790c <_dtoa_r+0x36c>
 8007822:	4a2a      	ldr	r2, [pc, #168]	; (80078cc <_dtoa_r+0x32c>)
 8007824:	f00a 030f 	and.w	r3, sl, #15
 8007828:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800782c:	ed93 7b00 	vldr	d7, [r3]
 8007830:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007834:	06f0      	lsls	r0, r6, #27
 8007836:	ed8d 7b08 	vstr	d7, [sp, #32]
 800783a:	d565      	bpl.n	8007908 <_dtoa_r+0x368>
 800783c:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <_dtoa_r+0x330>)
 800783e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007842:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007846:	f7f9 f801 	bl	800084c <__aeabi_ddiv>
 800784a:	e9cd 0100 	strd	r0, r1, [sp]
 800784e:	f006 060f 	and.w	r6, r6, #15
 8007852:	2503      	movs	r5, #3
 8007854:	4f1e      	ldr	r7, [pc, #120]	; (80078d0 <_dtoa_r+0x330>)
 8007856:	e04c      	b.n	80078f2 <_dtoa_r+0x352>
 8007858:	2301      	movs	r3, #1
 800785a:	930a      	str	r3, [sp, #40]	; 0x28
 800785c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785e:	4453      	add	r3, sl
 8007860:	f103 0901 	add.w	r9, r3, #1
 8007864:	9302      	str	r3, [sp, #8]
 8007866:	464b      	mov	r3, r9
 8007868:	2b01      	cmp	r3, #1
 800786a:	bfb8      	it	lt
 800786c:	2301      	movlt	r3, #1
 800786e:	e7ba      	b.n	80077e6 <_dtoa_r+0x246>
 8007870:	2300      	movs	r3, #0
 8007872:	e7b2      	b.n	80077da <_dtoa_r+0x23a>
 8007874:	2300      	movs	r3, #0
 8007876:	e7f0      	b.n	800785a <_dtoa_r+0x2ba>
 8007878:	2501      	movs	r5, #1
 800787a:	2300      	movs	r3, #0
 800787c:	9306      	str	r3, [sp, #24]
 800787e:	950a      	str	r5, [sp, #40]	; 0x28
 8007880:	f04f 33ff 	mov.w	r3, #4294967295
 8007884:	9302      	str	r3, [sp, #8]
 8007886:	4699      	mov	r9, r3
 8007888:	2200      	movs	r2, #0
 800788a:	2312      	movs	r3, #18
 800788c:	920b      	str	r2, [sp, #44]	; 0x2c
 800788e:	e7aa      	b.n	80077e6 <_dtoa_r+0x246>
 8007890:	2301      	movs	r3, #1
 8007892:	930a      	str	r3, [sp, #40]	; 0x28
 8007894:	e7f4      	b.n	8007880 <_dtoa_r+0x2e0>
 8007896:	2301      	movs	r3, #1
 8007898:	9302      	str	r3, [sp, #8]
 800789a:	4699      	mov	r9, r3
 800789c:	461a      	mov	r2, r3
 800789e:	e7f5      	b.n	800788c <_dtoa_r+0x2ec>
 80078a0:	3101      	adds	r1, #1
 80078a2:	6071      	str	r1, [r6, #4]
 80078a4:	0052      	lsls	r2, r2, #1
 80078a6:	e7a2      	b.n	80077ee <_dtoa_r+0x24e>
 80078a8:	636f4361 	.word	0x636f4361
 80078ac:	3fd287a7 	.word	0x3fd287a7
 80078b0:	8b60c8b3 	.word	0x8b60c8b3
 80078b4:	3fc68a28 	.word	0x3fc68a28
 80078b8:	509f79fb 	.word	0x509f79fb
 80078bc:	3fd34413 	.word	0x3fd34413
 80078c0:	7ff00000 	.word	0x7ff00000
 80078c4:	080095cd 	.word	0x080095cd
 80078c8:	3ff80000 	.word	0x3ff80000
 80078cc:	08009688 	.word	0x08009688
 80078d0:	08009660 	.word	0x08009660
 80078d4:	080095f9 	.word	0x080095f9
 80078d8:	07f1      	lsls	r1, r6, #31
 80078da:	d508      	bpl.n	80078ee <_dtoa_r+0x34e>
 80078dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e4:	f7f8 fe88 	bl	80005f8 <__aeabi_dmul>
 80078e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078ec:	3501      	adds	r5, #1
 80078ee:	1076      	asrs	r6, r6, #1
 80078f0:	3708      	adds	r7, #8
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	d1f0      	bne.n	80078d8 <_dtoa_r+0x338>
 80078f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078fe:	f7f8 ffa5 	bl	800084c <__aeabi_ddiv>
 8007902:	e9cd 0100 	strd	r0, r1, [sp]
 8007906:	e01a      	b.n	800793e <_dtoa_r+0x39e>
 8007908:	2502      	movs	r5, #2
 800790a:	e7a3      	b.n	8007854 <_dtoa_r+0x2b4>
 800790c:	f000 80a0 	beq.w	8007a50 <_dtoa_r+0x4b0>
 8007910:	f1ca 0600 	rsb	r6, sl, #0
 8007914:	4b9f      	ldr	r3, [pc, #636]	; (8007b94 <_dtoa_r+0x5f4>)
 8007916:	4fa0      	ldr	r7, [pc, #640]	; (8007b98 <_dtoa_r+0x5f8>)
 8007918:	f006 020f 	and.w	r2, r6, #15
 800791c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007928:	f7f8 fe66 	bl	80005f8 <__aeabi_dmul>
 800792c:	e9cd 0100 	strd	r0, r1, [sp]
 8007930:	1136      	asrs	r6, r6, #4
 8007932:	2300      	movs	r3, #0
 8007934:	2502      	movs	r5, #2
 8007936:	2e00      	cmp	r6, #0
 8007938:	d17f      	bne.n	8007a3a <_dtoa_r+0x49a>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e1      	bne.n	8007902 <_dtoa_r+0x362>
 800793e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 8087 	beq.w	8007a54 <_dtoa_r+0x4b4>
 8007946:	e9dd 6700 	ldrd	r6, r7, [sp]
 800794a:	2200      	movs	r2, #0
 800794c:	4b93      	ldr	r3, [pc, #588]	; (8007b9c <_dtoa_r+0x5fc>)
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	f7f9 f8c3 	bl	8000adc <__aeabi_dcmplt>
 8007956:	2800      	cmp	r0, #0
 8007958:	d07c      	beq.n	8007a54 <_dtoa_r+0x4b4>
 800795a:	f1b9 0f00 	cmp.w	r9, #0
 800795e:	d079      	beq.n	8007a54 <_dtoa_r+0x4b4>
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	dd35      	ble.n	80079d2 <_dtoa_r+0x432>
 8007966:	f10a 33ff 	add.w	r3, sl, #4294967295
 800796a:	9308      	str	r3, [sp, #32]
 800796c:	4639      	mov	r1, r7
 800796e:	2200      	movs	r2, #0
 8007970:	4b8b      	ldr	r3, [pc, #556]	; (8007ba0 <_dtoa_r+0x600>)
 8007972:	4630      	mov	r0, r6
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	e9cd 0100 	strd	r0, r1, [sp]
 800797c:	9f02      	ldr	r7, [sp, #8]
 800797e:	3501      	adds	r5, #1
 8007980:	4628      	mov	r0, r5
 8007982:	f7f8 fdcf 	bl	8000524 <__aeabi_i2d>
 8007986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800798a:	f7f8 fe35 	bl	80005f8 <__aeabi_dmul>
 800798e:	2200      	movs	r2, #0
 8007990:	4b84      	ldr	r3, [pc, #528]	; (8007ba4 <_dtoa_r+0x604>)
 8007992:	f7f8 fc7b 	bl	800028c <__adddf3>
 8007996:	4605      	mov	r5, r0
 8007998:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800799c:	2f00      	cmp	r7, #0
 800799e:	d15d      	bne.n	8007a5c <_dtoa_r+0x4bc>
 80079a0:	2200      	movs	r2, #0
 80079a2:	4b81      	ldr	r3, [pc, #516]	; (8007ba8 <_dtoa_r+0x608>)
 80079a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079a8:	f7f8 fc6e 	bl	8000288 <__aeabi_dsub>
 80079ac:	462a      	mov	r2, r5
 80079ae:	4633      	mov	r3, r6
 80079b0:	e9cd 0100 	strd	r0, r1, [sp]
 80079b4:	f7f9 f8b0 	bl	8000b18 <__aeabi_dcmpgt>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	f040 8288 	bne.w	8007ece <_dtoa_r+0x92e>
 80079be:	462a      	mov	r2, r5
 80079c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80079c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c8:	f7f9 f888 	bl	8000adc <__aeabi_dcmplt>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f040 827c 	bne.w	8007eca <_dtoa_r+0x92a>
 80079d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079d6:	e9cd 2300 	strd	r2, r3, [sp]
 80079da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f2c0 8150 	blt.w	8007c82 <_dtoa_r+0x6e2>
 80079e2:	f1ba 0f0e 	cmp.w	sl, #14
 80079e6:	f300 814c 	bgt.w	8007c82 <_dtoa_r+0x6e2>
 80079ea:	4b6a      	ldr	r3, [pc, #424]	; (8007b94 <_dtoa_r+0x5f4>)
 80079ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079f0:	ed93 7b00 	vldr	d7, [r3]
 80079f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079fc:	f280 80d8 	bge.w	8007bb0 <_dtoa_r+0x610>
 8007a00:	f1b9 0f00 	cmp.w	r9, #0
 8007a04:	f300 80d4 	bgt.w	8007bb0 <_dtoa_r+0x610>
 8007a08:	f040 825e 	bne.w	8007ec8 <_dtoa_r+0x928>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	4b66      	ldr	r3, [pc, #408]	; (8007ba8 <_dtoa_r+0x608>)
 8007a10:	ec51 0b17 	vmov	r0, r1, d7
 8007a14:	f7f8 fdf0 	bl	80005f8 <__aeabi_dmul>
 8007a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a1c:	f7f9 f872 	bl	8000b04 <__aeabi_dcmpge>
 8007a20:	464f      	mov	r7, r9
 8007a22:	464e      	mov	r6, r9
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f040 8234 	bne.w	8007e92 <_dtoa_r+0x8f2>
 8007a2a:	2331      	movs	r3, #49	; 0x31
 8007a2c:	f10b 0501 	add.w	r5, fp, #1
 8007a30:	f88b 3000 	strb.w	r3, [fp]
 8007a34:	f10a 0a01 	add.w	sl, sl, #1
 8007a38:	e22f      	b.n	8007e9a <_dtoa_r+0x8fa>
 8007a3a:	07f2      	lsls	r2, r6, #31
 8007a3c:	d505      	bpl.n	8007a4a <_dtoa_r+0x4aa>
 8007a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a42:	f7f8 fdd9 	bl	80005f8 <__aeabi_dmul>
 8007a46:	3501      	adds	r5, #1
 8007a48:	2301      	movs	r3, #1
 8007a4a:	1076      	asrs	r6, r6, #1
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	e772      	b.n	8007936 <_dtoa_r+0x396>
 8007a50:	2502      	movs	r5, #2
 8007a52:	e774      	b.n	800793e <_dtoa_r+0x39e>
 8007a54:	f8cd a020 	str.w	sl, [sp, #32]
 8007a58:	464f      	mov	r7, r9
 8007a5a:	e791      	b.n	8007980 <_dtoa_r+0x3e0>
 8007a5c:	4b4d      	ldr	r3, [pc, #308]	; (8007b94 <_dtoa_r+0x5f4>)
 8007a5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d047      	beq.n	8007afc <_dtoa_r+0x55c>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	2000      	movs	r0, #0
 8007a72:	494e      	ldr	r1, [pc, #312]	; (8007bac <_dtoa_r+0x60c>)
 8007a74:	f7f8 feea 	bl	800084c <__aeabi_ddiv>
 8007a78:	462a      	mov	r2, r5
 8007a7a:	4633      	mov	r3, r6
 8007a7c:	f7f8 fc04 	bl	8000288 <__aeabi_dsub>
 8007a80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a84:	465d      	mov	r5, fp
 8007a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a8a:	f7f9 f865 	bl	8000b58 <__aeabi_d2iz>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	f7f8 fd48 	bl	8000524 <__aeabi_i2d>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a9c:	f7f8 fbf4 	bl	8000288 <__aeabi_dsub>
 8007aa0:	3630      	adds	r6, #48	; 0x30
 8007aa2:	f805 6b01 	strb.w	r6, [r5], #1
 8007aa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007aaa:	e9cd 0100 	strd	r0, r1, [sp]
 8007aae:	f7f9 f815 	bl	8000adc <__aeabi_dcmplt>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d163      	bne.n	8007b7e <_dtoa_r+0x5de>
 8007ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aba:	2000      	movs	r0, #0
 8007abc:	4937      	ldr	r1, [pc, #220]	; (8007b9c <_dtoa_r+0x5fc>)
 8007abe:	f7f8 fbe3 	bl	8000288 <__aeabi_dsub>
 8007ac2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ac6:	f7f9 f809 	bl	8000adc <__aeabi_dcmplt>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f040 80b7 	bne.w	8007c3e <_dtoa_r+0x69e>
 8007ad0:	eba5 030b 	sub.w	r3, r5, fp
 8007ad4:	429f      	cmp	r7, r3
 8007ad6:	f77f af7c 	ble.w	80079d2 <_dtoa_r+0x432>
 8007ada:	2200      	movs	r2, #0
 8007adc:	4b30      	ldr	r3, [pc, #192]	; (8007ba0 <_dtoa_r+0x600>)
 8007ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ae2:	f7f8 fd89 	bl	80005f8 <__aeabi_dmul>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007aec:	4b2c      	ldr	r3, [pc, #176]	; (8007ba0 <_dtoa_r+0x600>)
 8007aee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007af2:	f7f8 fd81 	bl	80005f8 <__aeabi_dmul>
 8007af6:	e9cd 0100 	strd	r0, r1, [sp]
 8007afa:	e7c4      	b.n	8007a86 <_dtoa_r+0x4e6>
 8007afc:	462a      	mov	r2, r5
 8007afe:	4633      	mov	r3, r6
 8007b00:	f7f8 fd7a 	bl	80005f8 <__aeabi_dmul>
 8007b04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b08:	eb0b 0507 	add.w	r5, fp, r7
 8007b0c:	465e      	mov	r6, fp
 8007b0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b12:	f7f9 f821 	bl	8000b58 <__aeabi_d2iz>
 8007b16:	4607      	mov	r7, r0
 8007b18:	f7f8 fd04 	bl	8000524 <__aeabi_i2d>
 8007b1c:	3730      	adds	r7, #48	; 0x30
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b26:	f7f8 fbaf 	bl	8000288 <__aeabi_dsub>
 8007b2a:	f806 7b01 	strb.w	r7, [r6], #1
 8007b2e:	42ae      	cmp	r6, r5
 8007b30:	e9cd 0100 	strd	r0, r1, [sp]
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	d126      	bne.n	8007b88 <_dtoa_r+0x5e8>
 8007b3a:	4b1c      	ldr	r3, [pc, #112]	; (8007bac <_dtoa_r+0x60c>)
 8007b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b40:	f7f8 fba4 	bl	800028c <__adddf3>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b4c:	f7f8 ffe4 	bl	8000b18 <__aeabi_dcmpgt>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d174      	bne.n	8007c3e <_dtoa_r+0x69e>
 8007b54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b58:	2000      	movs	r0, #0
 8007b5a:	4914      	ldr	r1, [pc, #80]	; (8007bac <_dtoa_r+0x60c>)
 8007b5c:	f7f8 fb94 	bl	8000288 <__aeabi_dsub>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b68:	f7f8 ffb8 	bl	8000adc <__aeabi_dcmplt>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	f43f af30 	beq.w	80079d2 <_dtoa_r+0x432>
 8007b72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b76:	2b30      	cmp	r3, #48	; 0x30
 8007b78:	f105 32ff 	add.w	r2, r5, #4294967295
 8007b7c:	d002      	beq.n	8007b84 <_dtoa_r+0x5e4>
 8007b7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007b82:	e04a      	b.n	8007c1a <_dtoa_r+0x67a>
 8007b84:	4615      	mov	r5, r2
 8007b86:	e7f4      	b.n	8007b72 <_dtoa_r+0x5d2>
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <_dtoa_r+0x600>)
 8007b8a:	f7f8 fd35 	bl	80005f8 <__aeabi_dmul>
 8007b8e:	e9cd 0100 	strd	r0, r1, [sp]
 8007b92:	e7bc      	b.n	8007b0e <_dtoa_r+0x56e>
 8007b94:	08009688 	.word	0x08009688
 8007b98:	08009660 	.word	0x08009660
 8007b9c:	3ff00000 	.word	0x3ff00000
 8007ba0:	40240000 	.word	0x40240000
 8007ba4:	401c0000 	.word	0x401c0000
 8007ba8:	40140000 	.word	0x40140000
 8007bac:	3fe00000 	.word	0x3fe00000
 8007bb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007bb4:	465d      	mov	r5, fp
 8007bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 fe45 	bl	800084c <__aeabi_ddiv>
 8007bc2:	f7f8 ffc9 	bl	8000b58 <__aeabi_d2iz>
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	f7f8 fcac 	bl	8000524 <__aeabi_i2d>
 8007bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bd0:	f7f8 fd12 	bl	80005f8 <__aeabi_dmul>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007be0:	f7f8 fb52 	bl	8000288 <__aeabi_dsub>
 8007be4:	f805 6b01 	strb.w	r6, [r5], #1
 8007be8:	eba5 060b 	sub.w	r6, r5, fp
 8007bec:	45b1      	cmp	r9, r6
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	d139      	bne.n	8007c68 <_dtoa_r+0x6c8>
 8007bf4:	f7f8 fb4a 	bl	800028c <__adddf3>
 8007bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	460f      	mov	r7, r1
 8007c00:	f7f8 ff8a 	bl	8000b18 <__aeabi_dcmpgt>
 8007c04:	b9c8      	cbnz	r0, 8007c3a <_dtoa_r+0x69a>
 8007c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	f7f8 ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c12:	b110      	cbz	r0, 8007c1a <_dtoa_r+0x67a>
 8007c14:	f018 0f01 	tst.w	r8, #1
 8007c18:	d10f      	bne.n	8007c3a <_dtoa_r+0x69a>
 8007c1a:	9904      	ldr	r1, [sp, #16]
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fb96 	bl	800834e <_Bfree>
 8007c22:	2300      	movs	r3, #0
 8007c24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c26:	702b      	strb	r3, [r5, #0]
 8007c28:	f10a 0301 	add.w	r3, sl, #1
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8241 	beq.w	80080b8 <_dtoa_r+0xb18>
 8007c36:	601d      	str	r5, [r3, #0]
 8007c38:	e23e      	b.n	80080b8 <_dtoa_r+0xb18>
 8007c3a:	f8cd a020 	str.w	sl, [sp, #32]
 8007c3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c42:	2a39      	cmp	r2, #57	; 0x39
 8007c44:	f105 33ff 	add.w	r3, r5, #4294967295
 8007c48:	d108      	bne.n	8007c5c <_dtoa_r+0x6bc>
 8007c4a:	459b      	cmp	fp, r3
 8007c4c:	d10a      	bne.n	8007c64 <_dtoa_r+0x6c4>
 8007c4e:	9b08      	ldr	r3, [sp, #32]
 8007c50:	3301      	adds	r3, #1
 8007c52:	9308      	str	r3, [sp, #32]
 8007c54:	2330      	movs	r3, #48	; 0x30
 8007c56:	f88b 3000 	strb.w	r3, [fp]
 8007c5a:	465b      	mov	r3, fp
 8007c5c:	781a      	ldrb	r2, [r3, #0]
 8007c5e:	3201      	adds	r2, #1
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e78c      	b.n	8007b7e <_dtoa_r+0x5de>
 8007c64:	461d      	mov	r5, r3
 8007c66:	e7ea      	b.n	8007c3e <_dtoa_r+0x69e>
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4b9b      	ldr	r3, [pc, #620]	; (8007ed8 <_dtoa_r+0x938>)
 8007c6c:	f7f8 fcc4 	bl	80005f8 <__aeabi_dmul>
 8007c70:	2200      	movs	r2, #0
 8007c72:	2300      	movs	r3, #0
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	f7f8 ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d09a      	beq.n	8007bb6 <_dtoa_r+0x616>
 8007c80:	e7cb      	b.n	8007c1a <_dtoa_r+0x67a>
 8007c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	f000 808b 	beq.w	8007da0 <_dtoa_r+0x800>
 8007c8a:	9a06      	ldr	r2, [sp, #24]
 8007c8c:	2a01      	cmp	r2, #1
 8007c8e:	dc6e      	bgt.n	8007d6e <_dtoa_r+0x7ce>
 8007c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	d067      	beq.n	8007d66 <_dtoa_r+0x7c6>
 8007c96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c9a:	9f07      	ldr	r7, [sp, #28]
 8007c9c:	9d05      	ldr	r5, [sp, #20]
 8007c9e:	9a05      	ldr	r2, [sp, #20]
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	441a      	add	r2, r3
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	9205      	str	r2, [sp, #20]
 8007ca8:	4498      	add	r8, r3
 8007caa:	f000 fbf0 	bl	800848e <__i2b>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	dd0c      	ble.n	8007cce <_dtoa_r+0x72e>
 8007cb4:	f1b8 0f00 	cmp.w	r8, #0
 8007cb8:	dd09      	ble.n	8007cce <_dtoa_r+0x72e>
 8007cba:	4545      	cmp	r5, r8
 8007cbc:	9a05      	ldr	r2, [sp, #20]
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	bfa8      	it	ge
 8007cc2:	4643      	movge	r3, r8
 8007cc4:	1ad2      	subs	r2, r2, r3
 8007cc6:	9205      	str	r2, [sp, #20]
 8007cc8:	1aed      	subs	r5, r5, r3
 8007cca:	eba8 0803 	sub.w	r8, r8, r3
 8007cce:	9b07      	ldr	r3, [sp, #28]
 8007cd0:	b1eb      	cbz	r3, 8007d0e <_dtoa_r+0x76e>
 8007cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d067      	beq.n	8007da8 <_dtoa_r+0x808>
 8007cd8:	b18f      	cbz	r7, 8007cfe <_dtoa_r+0x75e>
 8007cda:	4631      	mov	r1, r6
 8007cdc:	463a      	mov	r2, r7
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 fc74 	bl	80085cc <__pow5mult>
 8007ce4:	9a04      	ldr	r2, [sp, #16]
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	4606      	mov	r6, r0
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 fbd8 	bl	80084a0 <__multiply>
 8007cf0:	9904      	ldr	r1, [sp, #16]
 8007cf2:	9008      	str	r0, [sp, #32]
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fb2a 	bl	800834e <_Bfree>
 8007cfa:	9b08      	ldr	r3, [sp, #32]
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	9b07      	ldr	r3, [sp, #28]
 8007d00:	1bda      	subs	r2, r3, r7
 8007d02:	d004      	beq.n	8007d0e <_dtoa_r+0x76e>
 8007d04:	9904      	ldr	r1, [sp, #16]
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 fc60 	bl	80085cc <__pow5mult>
 8007d0c:	9004      	str	r0, [sp, #16]
 8007d0e:	2101      	movs	r1, #1
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fbbc 	bl	800848e <__i2b>
 8007d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d18:	4607      	mov	r7, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 81d0 	beq.w	80080c0 <_dtoa_r+0xb20>
 8007d20:	461a      	mov	r2, r3
 8007d22:	4601      	mov	r1, r0
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 fc51 	bl	80085cc <__pow5mult>
 8007d2a:	9b06      	ldr	r3, [sp, #24]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	4607      	mov	r7, r0
 8007d30:	dc40      	bgt.n	8007db4 <_dtoa_r+0x814>
 8007d32:	9b00      	ldr	r3, [sp, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d139      	bne.n	8007dac <_dtoa_r+0x80c>
 8007d38:	9b01      	ldr	r3, [sp, #4]
 8007d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d136      	bne.n	8007db0 <_dtoa_r+0x810>
 8007d42:	9b01      	ldr	r3, [sp, #4]
 8007d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d48:	0d1b      	lsrs	r3, r3, #20
 8007d4a:	051b      	lsls	r3, r3, #20
 8007d4c:	b12b      	cbz	r3, 8007d5a <_dtoa_r+0x7ba>
 8007d4e:	9b05      	ldr	r3, [sp, #20]
 8007d50:	3301      	adds	r3, #1
 8007d52:	9305      	str	r3, [sp, #20]
 8007d54:	f108 0801 	add.w	r8, r8, #1
 8007d58:	2301      	movs	r3, #1
 8007d5a:	9307      	str	r3, [sp, #28]
 8007d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d12a      	bne.n	8007db8 <_dtoa_r+0x818>
 8007d62:	2001      	movs	r0, #1
 8007d64:	e030      	b.n	8007dc8 <_dtoa_r+0x828>
 8007d66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d6c:	e795      	b.n	8007c9a <_dtoa_r+0x6fa>
 8007d6e:	9b07      	ldr	r3, [sp, #28]
 8007d70:	f109 37ff 	add.w	r7, r9, #4294967295
 8007d74:	42bb      	cmp	r3, r7
 8007d76:	bfbf      	itttt	lt
 8007d78:	9b07      	ldrlt	r3, [sp, #28]
 8007d7a:	9707      	strlt	r7, [sp, #28]
 8007d7c:	1afa      	sublt	r2, r7, r3
 8007d7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007d80:	bfbb      	ittet	lt
 8007d82:	189b      	addlt	r3, r3, r2
 8007d84:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007d86:	1bdf      	subge	r7, r3, r7
 8007d88:	2700      	movlt	r7, #0
 8007d8a:	f1b9 0f00 	cmp.w	r9, #0
 8007d8e:	bfb5      	itete	lt
 8007d90:	9b05      	ldrlt	r3, [sp, #20]
 8007d92:	9d05      	ldrge	r5, [sp, #20]
 8007d94:	eba3 0509 	sublt.w	r5, r3, r9
 8007d98:	464b      	movge	r3, r9
 8007d9a:	bfb8      	it	lt
 8007d9c:	2300      	movlt	r3, #0
 8007d9e:	e77e      	b.n	8007c9e <_dtoa_r+0x6fe>
 8007da0:	9f07      	ldr	r7, [sp, #28]
 8007da2:	9d05      	ldr	r5, [sp, #20]
 8007da4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007da6:	e783      	b.n	8007cb0 <_dtoa_r+0x710>
 8007da8:	9a07      	ldr	r2, [sp, #28]
 8007daa:	e7ab      	b.n	8007d04 <_dtoa_r+0x764>
 8007dac:	2300      	movs	r3, #0
 8007dae:	e7d4      	b.n	8007d5a <_dtoa_r+0x7ba>
 8007db0:	9b00      	ldr	r3, [sp, #0]
 8007db2:	e7d2      	b.n	8007d5a <_dtoa_r+0x7ba>
 8007db4:	2300      	movs	r3, #0
 8007db6:	9307      	str	r3, [sp, #28]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007dbe:	6918      	ldr	r0, [r3, #16]
 8007dc0:	f000 fb17 	bl	80083f2 <__hi0bits>
 8007dc4:	f1c0 0020 	rsb	r0, r0, #32
 8007dc8:	4440      	add	r0, r8
 8007dca:	f010 001f 	ands.w	r0, r0, #31
 8007dce:	d047      	beq.n	8007e60 <_dtoa_r+0x8c0>
 8007dd0:	f1c0 0320 	rsb	r3, r0, #32
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	dd3b      	ble.n	8007e50 <_dtoa_r+0x8b0>
 8007dd8:	9b05      	ldr	r3, [sp, #20]
 8007dda:	f1c0 001c 	rsb	r0, r0, #28
 8007dde:	4403      	add	r3, r0
 8007de0:	9305      	str	r3, [sp, #20]
 8007de2:	4405      	add	r5, r0
 8007de4:	4480      	add	r8, r0
 8007de6:	9b05      	ldr	r3, [sp, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	dd05      	ble.n	8007df8 <_dtoa_r+0x858>
 8007dec:	461a      	mov	r2, r3
 8007dee:	9904      	ldr	r1, [sp, #16]
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fc39 	bl	8008668 <__lshift>
 8007df6:	9004      	str	r0, [sp, #16]
 8007df8:	f1b8 0f00 	cmp.w	r8, #0
 8007dfc:	dd05      	ble.n	8007e0a <_dtoa_r+0x86a>
 8007dfe:	4639      	mov	r1, r7
 8007e00:	4642      	mov	r2, r8
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 fc30 	bl	8008668 <__lshift>
 8007e08:	4607      	mov	r7, r0
 8007e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e0c:	b353      	cbz	r3, 8007e64 <_dtoa_r+0x8c4>
 8007e0e:	4639      	mov	r1, r7
 8007e10:	9804      	ldr	r0, [sp, #16]
 8007e12:	f000 fc7d 	bl	8008710 <__mcmp>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	da24      	bge.n	8007e64 <_dtoa_r+0x8c4>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	9904      	ldr	r1, [sp, #16]
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 faab 	bl	800837c <__multadd>
 8007e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e28:	9004      	str	r0, [sp, #16]
 8007e2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 814d 	beq.w	80080ce <_dtoa_r+0xb2e>
 8007e34:	2300      	movs	r3, #0
 8007e36:	4631      	mov	r1, r6
 8007e38:	220a      	movs	r2, #10
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fa9e 	bl	800837c <__multadd>
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	4606      	mov	r6, r0
 8007e46:	dc4f      	bgt.n	8007ee8 <_dtoa_r+0x948>
 8007e48:	9b06      	ldr	r3, [sp, #24]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	dd4c      	ble.n	8007ee8 <_dtoa_r+0x948>
 8007e4e:	e011      	b.n	8007e74 <_dtoa_r+0x8d4>
 8007e50:	d0c9      	beq.n	8007de6 <_dtoa_r+0x846>
 8007e52:	9a05      	ldr	r2, [sp, #20]
 8007e54:	331c      	adds	r3, #28
 8007e56:	441a      	add	r2, r3
 8007e58:	9205      	str	r2, [sp, #20]
 8007e5a:	441d      	add	r5, r3
 8007e5c:	4498      	add	r8, r3
 8007e5e:	e7c2      	b.n	8007de6 <_dtoa_r+0x846>
 8007e60:	4603      	mov	r3, r0
 8007e62:	e7f6      	b.n	8007e52 <_dtoa_r+0x8b2>
 8007e64:	f1b9 0f00 	cmp.w	r9, #0
 8007e68:	dc38      	bgt.n	8007edc <_dtoa_r+0x93c>
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	dd35      	ble.n	8007edc <_dtoa_r+0x93c>
 8007e70:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e74:	9b02      	ldr	r3, [sp, #8]
 8007e76:	b963      	cbnz	r3, 8007e92 <_dtoa_r+0x8f2>
 8007e78:	4639      	mov	r1, r7
 8007e7a:	2205      	movs	r2, #5
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 fa7d 	bl	800837c <__multadd>
 8007e82:	4601      	mov	r1, r0
 8007e84:	4607      	mov	r7, r0
 8007e86:	9804      	ldr	r0, [sp, #16]
 8007e88:	f000 fc42 	bl	8008710 <__mcmp>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f73f adcc 	bgt.w	8007a2a <_dtoa_r+0x48a>
 8007e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e94:	465d      	mov	r5, fp
 8007e96:	ea6f 0a03 	mvn.w	sl, r3
 8007e9a:	f04f 0900 	mov.w	r9, #0
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fa54 	bl	800834e <_Bfree>
 8007ea6:	2e00      	cmp	r6, #0
 8007ea8:	f43f aeb7 	beq.w	8007c1a <_dtoa_r+0x67a>
 8007eac:	f1b9 0f00 	cmp.w	r9, #0
 8007eb0:	d005      	beq.n	8007ebe <_dtoa_r+0x91e>
 8007eb2:	45b1      	cmp	r9, r6
 8007eb4:	d003      	beq.n	8007ebe <_dtoa_r+0x91e>
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fa48 	bl	800834e <_Bfree>
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 fa44 	bl	800834e <_Bfree>
 8007ec6:	e6a8      	b.n	8007c1a <_dtoa_r+0x67a>
 8007ec8:	2700      	movs	r7, #0
 8007eca:	463e      	mov	r6, r7
 8007ecc:	e7e1      	b.n	8007e92 <_dtoa_r+0x8f2>
 8007ece:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007ed2:	463e      	mov	r6, r7
 8007ed4:	e5a9      	b.n	8007a2a <_dtoa_r+0x48a>
 8007ed6:	bf00      	nop
 8007ed8:	40240000 	.word	0x40240000
 8007edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ede:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80fa 	beq.w	80080dc <_dtoa_r+0xb3c>
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	dd05      	ble.n	8007ef8 <_dtoa_r+0x958>
 8007eec:	4631      	mov	r1, r6
 8007eee:	462a      	mov	r2, r5
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fbb9 	bl	8008668 <__lshift>
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	9b07      	ldr	r3, [sp, #28]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d04c      	beq.n	8007f98 <_dtoa_r+0x9f8>
 8007efe:	6871      	ldr	r1, [r6, #4]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f9f0 	bl	80082e6 <_Balloc>
 8007f06:	6932      	ldr	r2, [r6, #16]
 8007f08:	3202      	adds	r2, #2
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	0092      	lsls	r2, r2, #2
 8007f0e:	f106 010c 	add.w	r1, r6, #12
 8007f12:	300c      	adds	r0, #12
 8007f14:	f000 f9dc 	bl	80082d0 <memcpy>
 8007f18:	2201      	movs	r2, #1
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fba3 	bl	8008668 <__lshift>
 8007f22:	9b00      	ldr	r3, [sp, #0]
 8007f24:	f8cd b014 	str.w	fp, [sp, #20]
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	46b1      	mov	r9, r6
 8007f2e:	9307      	str	r3, [sp, #28]
 8007f30:	4606      	mov	r6, r0
 8007f32:	4639      	mov	r1, r7
 8007f34:	9804      	ldr	r0, [sp, #16]
 8007f36:	f7ff faa5 	bl	8007484 <quorem>
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007f42:	9804      	ldr	r0, [sp, #16]
 8007f44:	f000 fbe4 	bl	8008710 <__mcmp>
 8007f48:	4632      	mov	r2, r6
 8007f4a:	9000      	str	r0, [sp, #0]
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 fbf8 	bl	8008744 <__mdiff>
 8007f54:	68c3      	ldr	r3, [r0, #12]
 8007f56:	4602      	mov	r2, r0
 8007f58:	bb03      	cbnz	r3, 8007f9c <_dtoa_r+0x9fc>
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	9008      	str	r0, [sp, #32]
 8007f5e:	9804      	ldr	r0, [sp, #16]
 8007f60:	f000 fbd6 	bl	8008710 <__mcmp>
 8007f64:	9a08      	ldr	r2, [sp, #32]
 8007f66:	4603      	mov	r3, r0
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	9308      	str	r3, [sp, #32]
 8007f6e:	f000 f9ee 	bl	800834e <_Bfree>
 8007f72:	9b08      	ldr	r3, [sp, #32]
 8007f74:	b9a3      	cbnz	r3, 8007fa0 <_dtoa_r+0xa00>
 8007f76:	9a06      	ldr	r2, [sp, #24]
 8007f78:	b992      	cbnz	r2, 8007fa0 <_dtoa_r+0xa00>
 8007f7a:	9a07      	ldr	r2, [sp, #28]
 8007f7c:	b982      	cbnz	r2, 8007fa0 <_dtoa_r+0xa00>
 8007f7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f82:	d029      	beq.n	8007fd8 <_dtoa_r+0xa38>
 8007f84:	9b00      	ldr	r3, [sp, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	dd01      	ble.n	8007f8e <_dtoa_r+0x9ee>
 8007f8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007f8e:	9b05      	ldr	r3, [sp, #20]
 8007f90:	1c5d      	adds	r5, r3, #1
 8007f92:	f883 8000 	strb.w	r8, [r3]
 8007f96:	e782      	b.n	8007e9e <_dtoa_r+0x8fe>
 8007f98:	4630      	mov	r0, r6
 8007f9a:	e7c2      	b.n	8007f22 <_dtoa_r+0x982>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e7e3      	b.n	8007f68 <_dtoa_r+0x9c8>
 8007fa0:	9a00      	ldr	r2, [sp, #0]
 8007fa2:	2a00      	cmp	r2, #0
 8007fa4:	db04      	blt.n	8007fb0 <_dtoa_r+0xa10>
 8007fa6:	d125      	bne.n	8007ff4 <_dtoa_r+0xa54>
 8007fa8:	9a06      	ldr	r2, [sp, #24]
 8007faa:	bb1a      	cbnz	r2, 8007ff4 <_dtoa_r+0xa54>
 8007fac:	9a07      	ldr	r2, [sp, #28]
 8007fae:	bb0a      	cbnz	r2, 8007ff4 <_dtoa_r+0xa54>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	ddec      	ble.n	8007f8e <_dtoa_r+0x9ee>
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	9904      	ldr	r1, [sp, #16]
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 fb55 	bl	8008668 <__lshift>
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	9004      	str	r0, [sp, #16]
 8007fc2:	f000 fba5 	bl	8008710 <__mcmp>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	dc03      	bgt.n	8007fd2 <_dtoa_r+0xa32>
 8007fca:	d1e0      	bne.n	8007f8e <_dtoa_r+0x9ee>
 8007fcc:	f018 0f01 	tst.w	r8, #1
 8007fd0:	d0dd      	beq.n	8007f8e <_dtoa_r+0x9ee>
 8007fd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007fd6:	d1d8      	bne.n	8007f8a <_dtoa_r+0x9ea>
 8007fd8:	9b05      	ldr	r3, [sp, #20]
 8007fda:	9a05      	ldr	r2, [sp, #20]
 8007fdc:	1c5d      	adds	r5, r3, #1
 8007fde:	2339      	movs	r3, #57	; 0x39
 8007fe0:	7013      	strb	r3, [r2, #0]
 8007fe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fe6:	2b39      	cmp	r3, #57	; 0x39
 8007fe8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007fec:	d04f      	beq.n	800808e <_dtoa_r+0xaee>
 8007fee:	3301      	adds	r3, #1
 8007ff0:	7013      	strb	r3, [r2, #0]
 8007ff2:	e754      	b.n	8007e9e <_dtoa_r+0x8fe>
 8007ff4:	9a05      	ldr	r2, [sp, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f102 0501 	add.w	r5, r2, #1
 8007ffc:	dd06      	ble.n	800800c <_dtoa_r+0xa6c>
 8007ffe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008002:	d0e9      	beq.n	8007fd8 <_dtoa_r+0xa38>
 8008004:	f108 0801 	add.w	r8, r8, #1
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	e7c2      	b.n	8007f92 <_dtoa_r+0x9f2>
 800800c:	9a02      	ldr	r2, [sp, #8]
 800800e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008012:	eba5 030b 	sub.w	r3, r5, fp
 8008016:	4293      	cmp	r3, r2
 8008018:	d021      	beq.n	800805e <_dtoa_r+0xabe>
 800801a:	2300      	movs	r3, #0
 800801c:	220a      	movs	r2, #10
 800801e:	9904      	ldr	r1, [sp, #16]
 8008020:	4620      	mov	r0, r4
 8008022:	f000 f9ab 	bl	800837c <__multadd>
 8008026:	45b1      	cmp	r9, r6
 8008028:	9004      	str	r0, [sp, #16]
 800802a:	f04f 0300 	mov.w	r3, #0
 800802e:	f04f 020a 	mov.w	r2, #10
 8008032:	4649      	mov	r1, r9
 8008034:	4620      	mov	r0, r4
 8008036:	d105      	bne.n	8008044 <_dtoa_r+0xaa4>
 8008038:	f000 f9a0 	bl	800837c <__multadd>
 800803c:	4681      	mov	r9, r0
 800803e:	4606      	mov	r6, r0
 8008040:	9505      	str	r5, [sp, #20]
 8008042:	e776      	b.n	8007f32 <_dtoa_r+0x992>
 8008044:	f000 f99a 	bl	800837c <__multadd>
 8008048:	4631      	mov	r1, r6
 800804a:	4681      	mov	r9, r0
 800804c:	2300      	movs	r3, #0
 800804e:	220a      	movs	r2, #10
 8008050:	4620      	mov	r0, r4
 8008052:	f000 f993 	bl	800837c <__multadd>
 8008056:	4606      	mov	r6, r0
 8008058:	e7f2      	b.n	8008040 <_dtoa_r+0xaa0>
 800805a:	f04f 0900 	mov.w	r9, #0
 800805e:	2201      	movs	r2, #1
 8008060:	9904      	ldr	r1, [sp, #16]
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fb00 	bl	8008668 <__lshift>
 8008068:	4639      	mov	r1, r7
 800806a:	9004      	str	r0, [sp, #16]
 800806c:	f000 fb50 	bl	8008710 <__mcmp>
 8008070:	2800      	cmp	r0, #0
 8008072:	dcb6      	bgt.n	8007fe2 <_dtoa_r+0xa42>
 8008074:	d102      	bne.n	800807c <_dtoa_r+0xadc>
 8008076:	f018 0f01 	tst.w	r8, #1
 800807a:	d1b2      	bne.n	8007fe2 <_dtoa_r+0xa42>
 800807c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008080:	2b30      	cmp	r3, #48	; 0x30
 8008082:	f105 32ff 	add.w	r2, r5, #4294967295
 8008086:	f47f af0a 	bne.w	8007e9e <_dtoa_r+0x8fe>
 800808a:	4615      	mov	r5, r2
 800808c:	e7f6      	b.n	800807c <_dtoa_r+0xadc>
 800808e:	4593      	cmp	fp, r2
 8008090:	d105      	bne.n	800809e <_dtoa_r+0xafe>
 8008092:	2331      	movs	r3, #49	; 0x31
 8008094:	f10a 0a01 	add.w	sl, sl, #1
 8008098:	f88b 3000 	strb.w	r3, [fp]
 800809c:	e6ff      	b.n	8007e9e <_dtoa_r+0x8fe>
 800809e:	4615      	mov	r5, r2
 80080a0:	e79f      	b.n	8007fe2 <_dtoa_r+0xa42>
 80080a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008108 <_dtoa_r+0xb68>
 80080a6:	e007      	b.n	80080b8 <_dtoa_r+0xb18>
 80080a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800810c <_dtoa_r+0xb6c>
 80080ae:	b11b      	cbz	r3, 80080b8 <_dtoa_r+0xb18>
 80080b0:	f10b 0308 	add.w	r3, fp, #8
 80080b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	4658      	mov	r0, fp
 80080ba:	b017      	add	sp, #92	; 0x5c
 80080bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c0:	9b06      	ldr	r3, [sp, #24]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	f77f ae35 	ble.w	8007d32 <_dtoa_r+0x792>
 80080c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080ca:	9307      	str	r3, [sp, #28]
 80080cc:	e649      	b.n	8007d62 <_dtoa_r+0x7c2>
 80080ce:	9b02      	ldr	r3, [sp, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dc03      	bgt.n	80080dc <_dtoa_r+0xb3c>
 80080d4:	9b06      	ldr	r3, [sp, #24]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	f73f aecc 	bgt.w	8007e74 <_dtoa_r+0x8d4>
 80080dc:	465d      	mov	r5, fp
 80080de:	4639      	mov	r1, r7
 80080e0:	9804      	ldr	r0, [sp, #16]
 80080e2:	f7ff f9cf 	bl	8007484 <quorem>
 80080e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80080ea:	f805 8b01 	strb.w	r8, [r5], #1
 80080ee:	9a02      	ldr	r2, [sp, #8]
 80080f0:	eba5 030b 	sub.w	r3, r5, fp
 80080f4:	429a      	cmp	r2, r3
 80080f6:	ddb0      	ble.n	800805a <_dtoa_r+0xaba>
 80080f8:	2300      	movs	r3, #0
 80080fa:	220a      	movs	r2, #10
 80080fc:	9904      	ldr	r1, [sp, #16]
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f93c 	bl	800837c <__multadd>
 8008104:	9004      	str	r0, [sp, #16]
 8008106:	e7ea      	b.n	80080de <_dtoa_r+0xb3e>
 8008108:	080095cc 	.word	0x080095cc
 800810c:	080095f0 	.word	0x080095f0

08008110 <std>:
 8008110:	2300      	movs	r3, #0
 8008112:	b510      	push	{r4, lr}
 8008114:	4604      	mov	r4, r0
 8008116:	e9c0 3300 	strd	r3, r3, [r0]
 800811a:	6083      	str	r3, [r0, #8]
 800811c:	8181      	strh	r1, [r0, #12]
 800811e:	6643      	str	r3, [r0, #100]	; 0x64
 8008120:	81c2      	strh	r2, [r0, #14]
 8008122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008126:	6183      	str	r3, [r0, #24]
 8008128:	4619      	mov	r1, r3
 800812a:	2208      	movs	r2, #8
 800812c:	305c      	adds	r0, #92	; 0x5c
 800812e:	f7fe fd0d 	bl	8006b4c <memset>
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <std+0x38>)
 8008134:	6263      	str	r3, [r4, #36]	; 0x24
 8008136:	4b05      	ldr	r3, [pc, #20]	; (800814c <std+0x3c>)
 8008138:	62a3      	str	r3, [r4, #40]	; 0x28
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <std+0x40>)
 800813c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <std+0x44>)
 8008140:	6224      	str	r4, [r4, #32]
 8008142:	6323      	str	r3, [r4, #48]	; 0x30
 8008144:	bd10      	pop	{r4, pc}
 8008146:	bf00      	nop
 8008148:	08008f4d 	.word	0x08008f4d
 800814c:	08008f6f 	.word	0x08008f6f
 8008150:	08008fa7 	.word	0x08008fa7
 8008154:	08008fcb 	.word	0x08008fcb

08008158 <_cleanup_r>:
 8008158:	4901      	ldr	r1, [pc, #4]	; (8008160 <_cleanup_r+0x8>)
 800815a:	f000 b885 	b.w	8008268 <_fwalk_reent>
 800815e:	bf00      	nop
 8008160:	080092a5 	.word	0x080092a5

08008164 <__sfmoreglue>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	1e4a      	subs	r2, r1, #1
 8008168:	2568      	movs	r5, #104	; 0x68
 800816a:	4355      	muls	r5, r2
 800816c:	460e      	mov	r6, r1
 800816e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008172:	f000 fbef 	bl	8008954 <_malloc_r>
 8008176:	4604      	mov	r4, r0
 8008178:	b140      	cbz	r0, 800818c <__sfmoreglue+0x28>
 800817a:	2100      	movs	r1, #0
 800817c:	e9c0 1600 	strd	r1, r6, [r0]
 8008180:	300c      	adds	r0, #12
 8008182:	60a0      	str	r0, [r4, #8]
 8008184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008188:	f7fe fce0 	bl	8006b4c <memset>
 800818c:	4620      	mov	r0, r4
 800818e:	bd70      	pop	{r4, r5, r6, pc}

08008190 <__sinit>:
 8008190:	6983      	ldr	r3, [r0, #24]
 8008192:	b510      	push	{r4, lr}
 8008194:	4604      	mov	r4, r0
 8008196:	bb33      	cbnz	r3, 80081e6 <__sinit+0x56>
 8008198:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800819c:	6503      	str	r3, [r0, #80]	; 0x50
 800819e:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <__sinit+0x58>)
 80081a0:	4a12      	ldr	r2, [pc, #72]	; (80081ec <__sinit+0x5c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6282      	str	r2, [r0, #40]	; 0x28
 80081a6:	4298      	cmp	r0, r3
 80081a8:	bf04      	itt	eq
 80081aa:	2301      	moveq	r3, #1
 80081ac:	6183      	streq	r3, [r0, #24]
 80081ae:	f000 f81f 	bl	80081f0 <__sfp>
 80081b2:	6060      	str	r0, [r4, #4]
 80081b4:	4620      	mov	r0, r4
 80081b6:	f000 f81b 	bl	80081f0 <__sfp>
 80081ba:	60a0      	str	r0, [r4, #8]
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 f817 	bl	80081f0 <__sfp>
 80081c2:	2200      	movs	r2, #0
 80081c4:	60e0      	str	r0, [r4, #12]
 80081c6:	2104      	movs	r1, #4
 80081c8:	6860      	ldr	r0, [r4, #4]
 80081ca:	f7ff ffa1 	bl	8008110 <std>
 80081ce:	2201      	movs	r2, #1
 80081d0:	2109      	movs	r1, #9
 80081d2:	68a0      	ldr	r0, [r4, #8]
 80081d4:	f7ff ff9c 	bl	8008110 <std>
 80081d8:	2202      	movs	r2, #2
 80081da:	2112      	movs	r1, #18
 80081dc:	68e0      	ldr	r0, [r4, #12]
 80081de:	f7ff ff97 	bl	8008110 <std>
 80081e2:	2301      	movs	r3, #1
 80081e4:	61a3      	str	r3, [r4, #24]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	080095b8 	.word	0x080095b8
 80081ec:	08008159 	.word	0x08008159

080081f0 <__sfp>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <__sfp+0x70>)
 80081f4:	681e      	ldr	r6, [r3, #0]
 80081f6:	69b3      	ldr	r3, [r6, #24]
 80081f8:	4607      	mov	r7, r0
 80081fa:	b913      	cbnz	r3, 8008202 <__sfp+0x12>
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7ff ffc7 	bl	8008190 <__sinit>
 8008202:	3648      	adds	r6, #72	; 0x48
 8008204:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008208:	3b01      	subs	r3, #1
 800820a:	d503      	bpl.n	8008214 <__sfp+0x24>
 800820c:	6833      	ldr	r3, [r6, #0]
 800820e:	b133      	cbz	r3, 800821e <__sfp+0x2e>
 8008210:	6836      	ldr	r6, [r6, #0]
 8008212:	e7f7      	b.n	8008204 <__sfp+0x14>
 8008214:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008218:	b16d      	cbz	r5, 8008236 <__sfp+0x46>
 800821a:	3468      	adds	r4, #104	; 0x68
 800821c:	e7f4      	b.n	8008208 <__sfp+0x18>
 800821e:	2104      	movs	r1, #4
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff ff9f 	bl	8008164 <__sfmoreglue>
 8008226:	6030      	str	r0, [r6, #0]
 8008228:	2800      	cmp	r0, #0
 800822a:	d1f1      	bne.n	8008210 <__sfp+0x20>
 800822c:	230c      	movs	r3, #12
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	4604      	mov	r4, r0
 8008232:	4620      	mov	r0, r4
 8008234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <__sfp+0x74>)
 8008238:	6665      	str	r5, [r4, #100]	; 0x64
 800823a:	e9c4 5500 	strd	r5, r5, [r4]
 800823e:	60a5      	str	r5, [r4, #8]
 8008240:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008244:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008248:	2208      	movs	r2, #8
 800824a:	4629      	mov	r1, r5
 800824c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008250:	f7fe fc7c 	bl	8006b4c <memset>
 8008254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800825c:	e7e9      	b.n	8008232 <__sfp+0x42>
 800825e:	bf00      	nop
 8008260:	080095b8 	.word	0x080095b8
 8008264:	ffff0001 	.word	0xffff0001

08008268 <_fwalk_reent>:
 8008268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800826c:	4680      	mov	r8, r0
 800826e:	4689      	mov	r9, r1
 8008270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008274:	2600      	movs	r6, #0
 8008276:	b914      	cbnz	r4, 800827e <_fwalk_reent+0x16>
 8008278:	4630      	mov	r0, r6
 800827a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800827e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008282:	3f01      	subs	r7, #1
 8008284:	d501      	bpl.n	800828a <_fwalk_reent+0x22>
 8008286:	6824      	ldr	r4, [r4, #0]
 8008288:	e7f5      	b.n	8008276 <_fwalk_reent+0xe>
 800828a:	89ab      	ldrh	r3, [r5, #12]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d907      	bls.n	80082a0 <_fwalk_reent+0x38>
 8008290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008294:	3301      	adds	r3, #1
 8008296:	d003      	beq.n	80082a0 <_fwalk_reent+0x38>
 8008298:	4629      	mov	r1, r5
 800829a:	4640      	mov	r0, r8
 800829c:	47c8      	blx	r9
 800829e:	4306      	orrs	r6, r0
 80082a0:	3568      	adds	r5, #104	; 0x68
 80082a2:	e7ee      	b.n	8008282 <_fwalk_reent+0x1a>

080082a4 <_localeconv_r>:
 80082a4:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <_localeconv_r+0x14>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6a18      	ldr	r0, [r3, #32]
 80082aa:	4b04      	ldr	r3, [pc, #16]	; (80082bc <_localeconv_r+0x18>)
 80082ac:	2800      	cmp	r0, #0
 80082ae:	bf08      	it	eq
 80082b0:	4618      	moveq	r0, r3
 80082b2:	30f0      	adds	r0, #240	; 0xf0
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20000020 	.word	0x20000020
 80082bc:	20000084 	.word	0x20000084

080082c0 <malloc>:
 80082c0:	4b02      	ldr	r3, [pc, #8]	; (80082cc <malloc+0xc>)
 80082c2:	4601      	mov	r1, r0
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	f000 bb45 	b.w	8008954 <_malloc_r>
 80082ca:	bf00      	nop
 80082cc:	20000020 	.word	0x20000020

080082d0 <memcpy>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	1e43      	subs	r3, r0, #1
 80082d4:	440a      	add	r2, r1
 80082d6:	4291      	cmp	r1, r2
 80082d8:	d100      	bne.n	80082dc <memcpy+0xc>
 80082da:	bd10      	pop	{r4, pc}
 80082dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082e4:	e7f7      	b.n	80082d6 <memcpy+0x6>

080082e6 <_Balloc>:
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082ea:	4604      	mov	r4, r0
 80082ec:	460e      	mov	r6, r1
 80082ee:	b93d      	cbnz	r5, 8008300 <_Balloc+0x1a>
 80082f0:	2010      	movs	r0, #16
 80082f2:	f7ff ffe5 	bl	80082c0 <malloc>
 80082f6:	6260      	str	r0, [r4, #36]	; 0x24
 80082f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082fc:	6005      	str	r5, [r0, #0]
 80082fe:	60c5      	str	r5, [r0, #12]
 8008300:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008302:	68eb      	ldr	r3, [r5, #12]
 8008304:	b183      	cbz	r3, 8008328 <_Balloc+0x42>
 8008306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800830e:	b9b8      	cbnz	r0, 8008340 <_Balloc+0x5a>
 8008310:	2101      	movs	r1, #1
 8008312:	fa01 f506 	lsl.w	r5, r1, r6
 8008316:	1d6a      	adds	r2, r5, #5
 8008318:	0092      	lsls	r2, r2, #2
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fabe 	bl	800889c <_calloc_r>
 8008320:	b160      	cbz	r0, 800833c <_Balloc+0x56>
 8008322:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008326:	e00e      	b.n	8008346 <_Balloc+0x60>
 8008328:	2221      	movs	r2, #33	; 0x21
 800832a:	2104      	movs	r1, #4
 800832c:	4620      	mov	r0, r4
 800832e:	f000 fab5 	bl	800889c <_calloc_r>
 8008332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008334:	60e8      	str	r0, [r5, #12]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e4      	bne.n	8008306 <_Balloc+0x20>
 800833c:	2000      	movs	r0, #0
 800833e:	bd70      	pop	{r4, r5, r6, pc}
 8008340:	6802      	ldr	r2, [r0, #0]
 8008342:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008346:	2300      	movs	r3, #0
 8008348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800834c:	e7f7      	b.n	800833e <_Balloc+0x58>

0800834e <_Bfree>:
 800834e:	b570      	push	{r4, r5, r6, lr}
 8008350:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008352:	4606      	mov	r6, r0
 8008354:	460d      	mov	r5, r1
 8008356:	b93c      	cbnz	r4, 8008368 <_Bfree+0x1a>
 8008358:	2010      	movs	r0, #16
 800835a:	f7ff ffb1 	bl	80082c0 <malloc>
 800835e:	6270      	str	r0, [r6, #36]	; 0x24
 8008360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008364:	6004      	str	r4, [r0, #0]
 8008366:	60c4      	str	r4, [r0, #12]
 8008368:	b13d      	cbz	r5, 800837a <_Bfree+0x2c>
 800836a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800836c:	686a      	ldr	r2, [r5, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008374:	6029      	str	r1, [r5, #0]
 8008376:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800837a:	bd70      	pop	{r4, r5, r6, pc}

0800837c <__multadd>:
 800837c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008380:	690d      	ldr	r5, [r1, #16]
 8008382:	461f      	mov	r7, r3
 8008384:	4606      	mov	r6, r0
 8008386:	460c      	mov	r4, r1
 8008388:	f101 0c14 	add.w	ip, r1, #20
 800838c:	2300      	movs	r3, #0
 800838e:	f8dc 0000 	ldr.w	r0, [ip]
 8008392:	b281      	uxth	r1, r0
 8008394:	fb02 7101 	mla	r1, r2, r1, r7
 8008398:	0c0f      	lsrs	r7, r1, #16
 800839a:	0c00      	lsrs	r0, r0, #16
 800839c:	fb02 7000 	mla	r0, r2, r0, r7
 80083a0:	b289      	uxth	r1, r1
 80083a2:	3301      	adds	r3, #1
 80083a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80083a8:	429d      	cmp	r5, r3
 80083aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80083ae:	f84c 1b04 	str.w	r1, [ip], #4
 80083b2:	dcec      	bgt.n	800838e <__multadd+0x12>
 80083b4:	b1d7      	cbz	r7, 80083ec <__multadd+0x70>
 80083b6:	68a3      	ldr	r3, [r4, #8]
 80083b8:	42ab      	cmp	r3, r5
 80083ba:	dc12      	bgt.n	80083e2 <__multadd+0x66>
 80083bc:	6861      	ldr	r1, [r4, #4]
 80083be:	4630      	mov	r0, r6
 80083c0:	3101      	adds	r1, #1
 80083c2:	f7ff ff90 	bl	80082e6 <_Balloc>
 80083c6:	6922      	ldr	r2, [r4, #16]
 80083c8:	3202      	adds	r2, #2
 80083ca:	f104 010c 	add.w	r1, r4, #12
 80083ce:	4680      	mov	r8, r0
 80083d0:	0092      	lsls	r2, r2, #2
 80083d2:	300c      	adds	r0, #12
 80083d4:	f7ff ff7c 	bl	80082d0 <memcpy>
 80083d8:	4621      	mov	r1, r4
 80083da:	4630      	mov	r0, r6
 80083dc:	f7ff ffb7 	bl	800834e <_Bfree>
 80083e0:	4644      	mov	r4, r8
 80083e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083e6:	3501      	adds	r5, #1
 80083e8:	615f      	str	r7, [r3, #20]
 80083ea:	6125      	str	r5, [r4, #16]
 80083ec:	4620      	mov	r0, r4
 80083ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083f2 <__hi0bits>:
 80083f2:	0c02      	lsrs	r2, r0, #16
 80083f4:	0412      	lsls	r2, r2, #16
 80083f6:	4603      	mov	r3, r0
 80083f8:	b9b2      	cbnz	r2, 8008428 <__hi0bits+0x36>
 80083fa:	0403      	lsls	r3, r0, #16
 80083fc:	2010      	movs	r0, #16
 80083fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008402:	bf04      	itt	eq
 8008404:	021b      	lsleq	r3, r3, #8
 8008406:	3008      	addeq	r0, #8
 8008408:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800840c:	bf04      	itt	eq
 800840e:	011b      	lsleq	r3, r3, #4
 8008410:	3004      	addeq	r0, #4
 8008412:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008416:	bf04      	itt	eq
 8008418:	009b      	lsleq	r3, r3, #2
 800841a:	3002      	addeq	r0, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	db06      	blt.n	800842e <__hi0bits+0x3c>
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	d503      	bpl.n	800842c <__hi0bits+0x3a>
 8008424:	3001      	adds	r0, #1
 8008426:	4770      	bx	lr
 8008428:	2000      	movs	r0, #0
 800842a:	e7e8      	b.n	80083fe <__hi0bits+0xc>
 800842c:	2020      	movs	r0, #32
 800842e:	4770      	bx	lr

08008430 <__lo0bits>:
 8008430:	6803      	ldr	r3, [r0, #0]
 8008432:	f013 0207 	ands.w	r2, r3, #7
 8008436:	4601      	mov	r1, r0
 8008438:	d00b      	beq.n	8008452 <__lo0bits+0x22>
 800843a:	07da      	lsls	r2, r3, #31
 800843c:	d423      	bmi.n	8008486 <__lo0bits+0x56>
 800843e:	0798      	lsls	r0, r3, #30
 8008440:	bf49      	itett	mi
 8008442:	085b      	lsrmi	r3, r3, #1
 8008444:	089b      	lsrpl	r3, r3, #2
 8008446:	2001      	movmi	r0, #1
 8008448:	600b      	strmi	r3, [r1, #0]
 800844a:	bf5c      	itt	pl
 800844c:	600b      	strpl	r3, [r1, #0]
 800844e:	2002      	movpl	r0, #2
 8008450:	4770      	bx	lr
 8008452:	b298      	uxth	r0, r3
 8008454:	b9a8      	cbnz	r0, 8008482 <__lo0bits+0x52>
 8008456:	0c1b      	lsrs	r3, r3, #16
 8008458:	2010      	movs	r0, #16
 800845a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800845e:	bf04      	itt	eq
 8008460:	0a1b      	lsreq	r3, r3, #8
 8008462:	3008      	addeq	r0, #8
 8008464:	071a      	lsls	r2, r3, #28
 8008466:	bf04      	itt	eq
 8008468:	091b      	lsreq	r3, r3, #4
 800846a:	3004      	addeq	r0, #4
 800846c:	079a      	lsls	r2, r3, #30
 800846e:	bf04      	itt	eq
 8008470:	089b      	lsreq	r3, r3, #2
 8008472:	3002      	addeq	r0, #2
 8008474:	07da      	lsls	r2, r3, #31
 8008476:	d402      	bmi.n	800847e <__lo0bits+0x4e>
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	d006      	beq.n	800848a <__lo0bits+0x5a>
 800847c:	3001      	adds	r0, #1
 800847e:	600b      	str	r3, [r1, #0]
 8008480:	4770      	bx	lr
 8008482:	4610      	mov	r0, r2
 8008484:	e7e9      	b.n	800845a <__lo0bits+0x2a>
 8008486:	2000      	movs	r0, #0
 8008488:	4770      	bx	lr
 800848a:	2020      	movs	r0, #32
 800848c:	4770      	bx	lr

0800848e <__i2b>:
 800848e:	b510      	push	{r4, lr}
 8008490:	460c      	mov	r4, r1
 8008492:	2101      	movs	r1, #1
 8008494:	f7ff ff27 	bl	80082e6 <_Balloc>
 8008498:	2201      	movs	r2, #1
 800849a:	6144      	str	r4, [r0, #20]
 800849c:	6102      	str	r2, [r0, #16]
 800849e:	bd10      	pop	{r4, pc}

080084a0 <__multiply>:
 80084a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	4614      	mov	r4, r2
 80084a6:	690a      	ldr	r2, [r1, #16]
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	bfb8      	it	lt
 80084ae:	460b      	movlt	r3, r1
 80084b0:	4688      	mov	r8, r1
 80084b2:	bfbc      	itt	lt
 80084b4:	46a0      	movlt	r8, r4
 80084b6:	461c      	movlt	r4, r3
 80084b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80084c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084c8:	eb07 0609 	add.w	r6, r7, r9
 80084cc:	42b3      	cmp	r3, r6
 80084ce:	bfb8      	it	lt
 80084d0:	3101      	addlt	r1, #1
 80084d2:	f7ff ff08 	bl	80082e6 <_Balloc>
 80084d6:	f100 0514 	add.w	r5, r0, #20
 80084da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80084de:	462b      	mov	r3, r5
 80084e0:	2200      	movs	r2, #0
 80084e2:	4573      	cmp	r3, lr
 80084e4:	d316      	bcc.n	8008514 <__multiply+0x74>
 80084e6:	f104 0214 	add.w	r2, r4, #20
 80084ea:	f108 0114 	add.w	r1, r8, #20
 80084ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80084f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	9b00      	ldr	r3, [sp, #0]
 80084fa:	9201      	str	r2, [sp, #4]
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d80c      	bhi.n	800851a <__multiply+0x7a>
 8008500:	2e00      	cmp	r6, #0
 8008502:	dd03      	ble.n	800850c <__multiply+0x6c>
 8008504:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008508:	2b00      	cmp	r3, #0
 800850a:	d05d      	beq.n	80085c8 <__multiply+0x128>
 800850c:	6106      	str	r6, [r0, #16]
 800850e:	b003      	add	sp, #12
 8008510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008514:	f843 2b04 	str.w	r2, [r3], #4
 8008518:	e7e3      	b.n	80084e2 <__multiply+0x42>
 800851a:	f8b2 b000 	ldrh.w	fp, [r2]
 800851e:	f1bb 0f00 	cmp.w	fp, #0
 8008522:	d023      	beq.n	800856c <__multiply+0xcc>
 8008524:	4689      	mov	r9, r1
 8008526:	46ac      	mov	ip, r5
 8008528:	f04f 0800 	mov.w	r8, #0
 800852c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008530:	f8dc a000 	ldr.w	sl, [ip]
 8008534:	b2a3      	uxth	r3, r4
 8008536:	fa1f fa8a 	uxth.w	sl, sl
 800853a:	fb0b a303 	mla	r3, fp, r3, sl
 800853e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008542:	f8dc 4000 	ldr.w	r4, [ip]
 8008546:	4443      	add	r3, r8
 8008548:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800854c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008550:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008554:	46e2      	mov	sl, ip
 8008556:	b29b      	uxth	r3, r3
 8008558:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800855c:	454f      	cmp	r7, r9
 800855e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008562:	f84a 3b04 	str.w	r3, [sl], #4
 8008566:	d82b      	bhi.n	80085c0 <__multiply+0x120>
 8008568:	f8cc 8004 	str.w	r8, [ip, #4]
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008572:	3204      	adds	r2, #4
 8008574:	f1ba 0f00 	cmp.w	sl, #0
 8008578:	d020      	beq.n	80085bc <__multiply+0x11c>
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	4689      	mov	r9, r1
 800857e:	46a8      	mov	r8, r5
 8008580:	f04f 0b00 	mov.w	fp, #0
 8008584:	f8b9 c000 	ldrh.w	ip, [r9]
 8008588:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800858c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008590:	445c      	add	r4, fp
 8008592:	46c4      	mov	ip, r8
 8008594:	b29b      	uxth	r3, r3
 8008596:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800859a:	f84c 3b04 	str.w	r3, [ip], #4
 800859e:	f859 3b04 	ldr.w	r3, [r9], #4
 80085a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80085a6:	0c1b      	lsrs	r3, r3, #16
 80085a8:	fb0a b303 	mla	r3, sl, r3, fp
 80085ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80085b0:	454f      	cmp	r7, r9
 80085b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80085b6:	d805      	bhi.n	80085c4 <__multiply+0x124>
 80085b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80085bc:	3504      	adds	r5, #4
 80085be:	e79b      	b.n	80084f8 <__multiply+0x58>
 80085c0:	46d4      	mov	ip, sl
 80085c2:	e7b3      	b.n	800852c <__multiply+0x8c>
 80085c4:	46e0      	mov	r8, ip
 80085c6:	e7dd      	b.n	8008584 <__multiply+0xe4>
 80085c8:	3e01      	subs	r6, #1
 80085ca:	e799      	b.n	8008500 <__multiply+0x60>

080085cc <__pow5mult>:
 80085cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d0:	4615      	mov	r5, r2
 80085d2:	f012 0203 	ands.w	r2, r2, #3
 80085d6:	4606      	mov	r6, r0
 80085d8:	460f      	mov	r7, r1
 80085da:	d007      	beq.n	80085ec <__pow5mult+0x20>
 80085dc:	3a01      	subs	r2, #1
 80085de:	4c21      	ldr	r4, [pc, #132]	; (8008664 <__pow5mult+0x98>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085e6:	f7ff fec9 	bl	800837c <__multadd>
 80085ea:	4607      	mov	r7, r0
 80085ec:	10ad      	asrs	r5, r5, #2
 80085ee:	d035      	beq.n	800865c <__pow5mult+0x90>
 80085f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085f2:	b93c      	cbnz	r4, 8008604 <__pow5mult+0x38>
 80085f4:	2010      	movs	r0, #16
 80085f6:	f7ff fe63 	bl	80082c0 <malloc>
 80085fa:	6270      	str	r0, [r6, #36]	; 0x24
 80085fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008600:	6004      	str	r4, [r0, #0]
 8008602:	60c4      	str	r4, [r0, #12]
 8008604:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800860c:	b94c      	cbnz	r4, 8008622 <__pow5mult+0x56>
 800860e:	f240 2171 	movw	r1, #625	; 0x271
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff ff3b 	bl	800848e <__i2b>
 8008618:	2300      	movs	r3, #0
 800861a:	f8c8 0008 	str.w	r0, [r8, #8]
 800861e:	4604      	mov	r4, r0
 8008620:	6003      	str	r3, [r0, #0]
 8008622:	f04f 0800 	mov.w	r8, #0
 8008626:	07eb      	lsls	r3, r5, #31
 8008628:	d50a      	bpl.n	8008640 <__pow5mult+0x74>
 800862a:	4639      	mov	r1, r7
 800862c:	4622      	mov	r2, r4
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ff36 	bl	80084a0 <__multiply>
 8008634:	4639      	mov	r1, r7
 8008636:	4681      	mov	r9, r0
 8008638:	4630      	mov	r0, r6
 800863a:	f7ff fe88 	bl	800834e <_Bfree>
 800863e:	464f      	mov	r7, r9
 8008640:	106d      	asrs	r5, r5, #1
 8008642:	d00b      	beq.n	800865c <__pow5mult+0x90>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	b938      	cbnz	r0, 8008658 <__pow5mult+0x8c>
 8008648:	4622      	mov	r2, r4
 800864a:	4621      	mov	r1, r4
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff ff27 	bl	80084a0 <__multiply>
 8008652:	6020      	str	r0, [r4, #0]
 8008654:	f8c0 8000 	str.w	r8, [r0]
 8008658:	4604      	mov	r4, r0
 800865a:	e7e4      	b.n	8008626 <__pow5mult+0x5a>
 800865c:	4638      	mov	r0, r7
 800865e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008662:	bf00      	nop
 8008664:	08009750 	.word	0x08009750

08008668 <__lshift>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	6849      	ldr	r1, [r1, #4]
 8008676:	eb0a 0903 	add.w	r9, sl, r3
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	4607      	mov	r7, r0
 800867e:	4616      	mov	r6, r2
 8008680:	f109 0501 	add.w	r5, r9, #1
 8008684:	42ab      	cmp	r3, r5
 8008686:	db32      	blt.n	80086ee <__lshift+0x86>
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff fe2c 	bl	80082e6 <_Balloc>
 800868e:	2300      	movs	r3, #0
 8008690:	4680      	mov	r8, r0
 8008692:	f100 0114 	add.w	r1, r0, #20
 8008696:	461a      	mov	r2, r3
 8008698:	4553      	cmp	r3, sl
 800869a:	db2b      	blt.n	80086f4 <__lshift+0x8c>
 800869c:	6920      	ldr	r0, [r4, #16]
 800869e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086a2:	f104 0314 	add.w	r3, r4, #20
 80086a6:	f016 021f 	ands.w	r2, r6, #31
 80086aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086b2:	d025      	beq.n	8008700 <__lshift+0x98>
 80086b4:	f1c2 0e20 	rsb	lr, r2, #32
 80086b8:	2000      	movs	r0, #0
 80086ba:	681e      	ldr	r6, [r3, #0]
 80086bc:	468a      	mov	sl, r1
 80086be:	4096      	lsls	r6, r2
 80086c0:	4330      	orrs	r0, r6
 80086c2:	f84a 0b04 	str.w	r0, [sl], #4
 80086c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80086ca:	459c      	cmp	ip, r3
 80086cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80086d0:	d814      	bhi.n	80086fc <__lshift+0x94>
 80086d2:	6048      	str	r0, [r1, #4]
 80086d4:	b108      	cbz	r0, 80086da <__lshift+0x72>
 80086d6:	f109 0502 	add.w	r5, r9, #2
 80086da:	3d01      	subs	r5, #1
 80086dc:	4638      	mov	r0, r7
 80086de:	f8c8 5010 	str.w	r5, [r8, #16]
 80086e2:	4621      	mov	r1, r4
 80086e4:	f7ff fe33 	bl	800834e <_Bfree>
 80086e8:	4640      	mov	r0, r8
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	3101      	adds	r1, #1
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	e7c7      	b.n	8008684 <__lshift+0x1c>
 80086f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80086f8:	3301      	adds	r3, #1
 80086fa:	e7cd      	b.n	8008698 <__lshift+0x30>
 80086fc:	4651      	mov	r1, sl
 80086fe:	e7dc      	b.n	80086ba <__lshift+0x52>
 8008700:	3904      	subs	r1, #4
 8008702:	f853 2b04 	ldr.w	r2, [r3], #4
 8008706:	f841 2f04 	str.w	r2, [r1, #4]!
 800870a:	459c      	cmp	ip, r3
 800870c:	d8f9      	bhi.n	8008702 <__lshift+0x9a>
 800870e:	e7e4      	b.n	80086da <__lshift+0x72>

08008710 <__mcmp>:
 8008710:	6903      	ldr	r3, [r0, #16]
 8008712:	690a      	ldr	r2, [r1, #16]
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	b530      	push	{r4, r5, lr}
 8008718:	d10c      	bne.n	8008734 <__mcmp+0x24>
 800871a:	0092      	lsls	r2, r2, #2
 800871c:	3014      	adds	r0, #20
 800871e:	3114      	adds	r1, #20
 8008720:	1884      	adds	r4, r0, r2
 8008722:	4411      	add	r1, r2
 8008724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800872c:	4295      	cmp	r5, r2
 800872e:	d003      	beq.n	8008738 <__mcmp+0x28>
 8008730:	d305      	bcc.n	800873e <__mcmp+0x2e>
 8008732:	2301      	movs	r3, #1
 8008734:	4618      	mov	r0, r3
 8008736:	bd30      	pop	{r4, r5, pc}
 8008738:	42a0      	cmp	r0, r4
 800873a:	d3f3      	bcc.n	8008724 <__mcmp+0x14>
 800873c:	e7fa      	b.n	8008734 <__mcmp+0x24>
 800873e:	f04f 33ff 	mov.w	r3, #4294967295
 8008742:	e7f7      	b.n	8008734 <__mcmp+0x24>

08008744 <__mdiff>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	460d      	mov	r5, r1
 800874a:	4607      	mov	r7, r0
 800874c:	4611      	mov	r1, r2
 800874e:	4628      	mov	r0, r5
 8008750:	4614      	mov	r4, r2
 8008752:	f7ff ffdd 	bl	8008710 <__mcmp>
 8008756:	1e06      	subs	r6, r0, #0
 8008758:	d108      	bne.n	800876c <__mdiff+0x28>
 800875a:	4631      	mov	r1, r6
 800875c:	4638      	mov	r0, r7
 800875e:	f7ff fdc2 	bl	80082e6 <_Balloc>
 8008762:	2301      	movs	r3, #1
 8008764:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876c:	bfa4      	itt	ge
 800876e:	4623      	movge	r3, r4
 8008770:	462c      	movge	r4, r5
 8008772:	4638      	mov	r0, r7
 8008774:	6861      	ldr	r1, [r4, #4]
 8008776:	bfa6      	itte	ge
 8008778:	461d      	movge	r5, r3
 800877a:	2600      	movge	r6, #0
 800877c:	2601      	movlt	r6, #1
 800877e:	f7ff fdb2 	bl	80082e6 <_Balloc>
 8008782:	692b      	ldr	r3, [r5, #16]
 8008784:	60c6      	str	r6, [r0, #12]
 8008786:	6926      	ldr	r6, [r4, #16]
 8008788:	f105 0914 	add.w	r9, r5, #20
 800878c:	f104 0214 	add.w	r2, r4, #20
 8008790:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008794:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008798:	f100 0514 	add.w	r5, r0, #20
 800879c:	f04f 0e00 	mov.w	lr, #0
 80087a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80087a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80087a8:	fa1e f18a 	uxtah	r1, lr, sl
 80087ac:	b2a3      	uxth	r3, r4
 80087ae:	1ac9      	subs	r1, r1, r3
 80087b0:	0c23      	lsrs	r3, r4, #16
 80087b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80087b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80087ba:	b289      	uxth	r1, r1
 80087bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80087c0:	45c8      	cmp	r8, r9
 80087c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80087c6:	4694      	mov	ip, r2
 80087c8:	f845 3b04 	str.w	r3, [r5], #4
 80087cc:	d8e8      	bhi.n	80087a0 <__mdiff+0x5c>
 80087ce:	45bc      	cmp	ip, r7
 80087d0:	d304      	bcc.n	80087dc <__mdiff+0x98>
 80087d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80087d6:	b183      	cbz	r3, 80087fa <__mdiff+0xb6>
 80087d8:	6106      	str	r6, [r0, #16]
 80087da:	e7c5      	b.n	8008768 <__mdiff+0x24>
 80087dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80087e0:	fa1e f381 	uxtah	r3, lr, r1
 80087e4:	141a      	asrs	r2, r3, #16
 80087e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80087f4:	f845 3b04 	str.w	r3, [r5], #4
 80087f8:	e7e9      	b.n	80087ce <__mdiff+0x8a>
 80087fa:	3e01      	subs	r6, #1
 80087fc:	e7e9      	b.n	80087d2 <__mdiff+0x8e>

080087fe <__d2b>:
 80087fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008802:	460e      	mov	r6, r1
 8008804:	2101      	movs	r1, #1
 8008806:	ec59 8b10 	vmov	r8, r9, d0
 800880a:	4615      	mov	r5, r2
 800880c:	f7ff fd6b 	bl	80082e6 <_Balloc>
 8008810:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008814:	4607      	mov	r7, r0
 8008816:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800881a:	bb34      	cbnz	r4, 800886a <__d2b+0x6c>
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	f1b8 0300 	subs.w	r3, r8, #0
 8008822:	d027      	beq.n	8008874 <__d2b+0x76>
 8008824:	a802      	add	r0, sp, #8
 8008826:	f840 3d08 	str.w	r3, [r0, #-8]!
 800882a:	f7ff fe01 	bl	8008430 <__lo0bits>
 800882e:	9900      	ldr	r1, [sp, #0]
 8008830:	b1f0      	cbz	r0, 8008870 <__d2b+0x72>
 8008832:	9a01      	ldr	r2, [sp, #4]
 8008834:	f1c0 0320 	rsb	r3, r0, #32
 8008838:	fa02 f303 	lsl.w	r3, r2, r3
 800883c:	430b      	orrs	r3, r1
 800883e:	40c2      	lsrs	r2, r0
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	9201      	str	r2, [sp, #4]
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	61bb      	str	r3, [r7, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	bf14      	ite	ne
 800884c:	2102      	movne	r1, #2
 800884e:	2101      	moveq	r1, #1
 8008850:	6139      	str	r1, [r7, #16]
 8008852:	b1c4      	cbz	r4, 8008886 <__d2b+0x88>
 8008854:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008858:	4404      	add	r4, r0
 800885a:	6034      	str	r4, [r6, #0]
 800885c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008860:	6028      	str	r0, [r5, #0]
 8008862:	4638      	mov	r0, r7
 8008864:	b003      	add	sp, #12
 8008866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800886a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800886e:	e7d5      	b.n	800881c <__d2b+0x1e>
 8008870:	6179      	str	r1, [r7, #20]
 8008872:	e7e7      	b.n	8008844 <__d2b+0x46>
 8008874:	a801      	add	r0, sp, #4
 8008876:	f7ff fddb 	bl	8008430 <__lo0bits>
 800887a:	9b01      	ldr	r3, [sp, #4]
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	2101      	movs	r1, #1
 8008880:	6139      	str	r1, [r7, #16]
 8008882:	3020      	adds	r0, #32
 8008884:	e7e5      	b.n	8008852 <__d2b+0x54>
 8008886:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800888a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800888e:	6030      	str	r0, [r6, #0]
 8008890:	6918      	ldr	r0, [r3, #16]
 8008892:	f7ff fdae 	bl	80083f2 <__hi0bits>
 8008896:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800889a:	e7e1      	b.n	8008860 <__d2b+0x62>

0800889c <_calloc_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	fb02 f401 	mul.w	r4, r2, r1
 80088a2:	4621      	mov	r1, r4
 80088a4:	f000 f856 	bl	8008954 <_malloc_r>
 80088a8:	4605      	mov	r5, r0
 80088aa:	b118      	cbz	r0, 80088b4 <_calloc_r+0x18>
 80088ac:	4622      	mov	r2, r4
 80088ae:	2100      	movs	r1, #0
 80088b0:	f7fe f94c 	bl	8006b4c <memset>
 80088b4:	4628      	mov	r0, r5
 80088b6:	bd38      	pop	{r3, r4, r5, pc}

080088b8 <_free_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4605      	mov	r5, r0
 80088bc:	2900      	cmp	r1, #0
 80088be:	d045      	beq.n	800894c <_free_r+0x94>
 80088c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c4:	1f0c      	subs	r4, r1, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bfb8      	it	lt
 80088ca:	18e4      	addlt	r4, r4, r3
 80088cc:	f000 fdb5 	bl	800943a <__malloc_lock>
 80088d0:	4a1f      	ldr	r2, [pc, #124]	; (8008950 <_free_r+0x98>)
 80088d2:	6813      	ldr	r3, [r2, #0]
 80088d4:	4610      	mov	r0, r2
 80088d6:	b933      	cbnz	r3, 80088e6 <_free_r+0x2e>
 80088d8:	6063      	str	r3, [r4, #4]
 80088da:	6014      	str	r4, [r2, #0]
 80088dc:	4628      	mov	r0, r5
 80088de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088e2:	f000 bdab 	b.w	800943c <__malloc_unlock>
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	d90c      	bls.n	8008904 <_free_r+0x4c>
 80088ea:	6821      	ldr	r1, [r4, #0]
 80088ec:	1862      	adds	r2, r4, r1
 80088ee:	4293      	cmp	r3, r2
 80088f0:	bf04      	itt	eq
 80088f2:	681a      	ldreq	r2, [r3, #0]
 80088f4:	685b      	ldreq	r3, [r3, #4]
 80088f6:	6063      	str	r3, [r4, #4]
 80088f8:	bf04      	itt	eq
 80088fa:	1852      	addeq	r2, r2, r1
 80088fc:	6022      	streq	r2, [r4, #0]
 80088fe:	6004      	str	r4, [r0, #0]
 8008900:	e7ec      	b.n	80088dc <_free_r+0x24>
 8008902:	4613      	mov	r3, r2
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	b10a      	cbz	r2, 800890c <_free_r+0x54>
 8008908:	42a2      	cmp	r2, r4
 800890a:	d9fa      	bls.n	8008902 <_free_r+0x4a>
 800890c:	6819      	ldr	r1, [r3, #0]
 800890e:	1858      	adds	r0, r3, r1
 8008910:	42a0      	cmp	r0, r4
 8008912:	d10b      	bne.n	800892c <_free_r+0x74>
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	4401      	add	r1, r0
 8008918:	1858      	adds	r0, r3, r1
 800891a:	4282      	cmp	r2, r0
 800891c:	6019      	str	r1, [r3, #0]
 800891e:	d1dd      	bne.n	80088dc <_free_r+0x24>
 8008920:	6810      	ldr	r0, [r2, #0]
 8008922:	6852      	ldr	r2, [r2, #4]
 8008924:	605a      	str	r2, [r3, #4]
 8008926:	4401      	add	r1, r0
 8008928:	6019      	str	r1, [r3, #0]
 800892a:	e7d7      	b.n	80088dc <_free_r+0x24>
 800892c:	d902      	bls.n	8008934 <_free_r+0x7c>
 800892e:	230c      	movs	r3, #12
 8008930:	602b      	str	r3, [r5, #0]
 8008932:	e7d3      	b.n	80088dc <_free_r+0x24>
 8008934:	6820      	ldr	r0, [r4, #0]
 8008936:	1821      	adds	r1, r4, r0
 8008938:	428a      	cmp	r2, r1
 800893a:	bf04      	itt	eq
 800893c:	6811      	ldreq	r1, [r2, #0]
 800893e:	6852      	ldreq	r2, [r2, #4]
 8008940:	6062      	str	r2, [r4, #4]
 8008942:	bf04      	itt	eq
 8008944:	1809      	addeq	r1, r1, r0
 8008946:	6021      	streq	r1, [r4, #0]
 8008948:	605c      	str	r4, [r3, #4]
 800894a:	e7c7      	b.n	80088dc <_free_r+0x24>
 800894c:	bd38      	pop	{r3, r4, r5, pc}
 800894e:	bf00      	nop
 8008950:	20000238 	.word	0x20000238

08008954 <_malloc_r>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	1ccd      	adds	r5, r1, #3
 8008958:	f025 0503 	bic.w	r5, r5, #3
 800895c:	3508      	adds	r5, #8
 800895e:	2d0c      	cmp	r5, #12
 8008960:	bf38      	it	cc
 8008962:	250c      	movcc	r5, #12
 8008964:	2d00      	cmp	r5, #0
 8008966:	4606      	mov	r6, r0
 8008968:	db01      	blt.n	800896e <_malloc_r+0x1a>
 800896a:	42a9      	cmp	r1, r5
 800896c:	d903      	bls.n	8008976 <_malloc_r+0x22>
 800896e:	230c      	movs	r3, #12
 8008970:	6033      	str	r3, [r6, #0]
 8008972:	2000      	movs	r0, #0
 8008974:	bd70      	pop	{r4, r5, r6, pc}
 8008976:	f000 fd60 	bl	800943a <__malloc_lock>
 800897a:	4a21      	ldr	r2, [pc, #132]	; (8008a00 <_malloc_r+0xac>)
 800897c:	6814      	ldr	r4, [r2, #0]
 800897e:	4621      	mov	r1, r4
 8008980:	b991      	cbnz	r1, 80089a8 <_malloc_r+0x54>
 8008982:	4c20      	ldr	r4, [pc, #128]	; (8008a04 <_malloc_r+0xb0>)
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	b91b      	cbnz	r3, 8008990 <_malloc_r+0x3c>
 8008988:	4630      	mov	r0, r6
 800898a:	f000 facf 	bl	8008f2c <_sbrk_r>
 800898e:	6020      	str	r0, [r4, #0]
 8008990:	4629      	mov	r1, r5
 8008992:	4630      	mov	r0, r6
 8008994:	f000 faca 	bl	8008f2c <_sbrk_r>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d124      	bne.n	80089e6 <_malloc_r+0x92>
 800899c:	230c      	movs	r3, #12
 800899e:	6033      	str	r3, [r6, #0]
 80089a0:	4630      	mov	r0, r6
 80089a2:	f000 fd4b 	bl	800943c <__malloc_unlock>
 80089a6:	e7e4      	b.n	8008972 <_malloc_r+0x1e>
 80089a8:	680b      	ldr	r3, [r1, #0]
 80089aa:	1b5b      	subs	r3, r3, r5
 80089ac:	d418      	bmi.n	80089e0 <_malloc_r+0x8c>
 80089ae:	2b0b      	cmp	r3, #11
 80089b0:	d90f      	bls.n	80089d2 <_malloc_r+0x7e>
 80089b2:	600b      	str	r3, [r1, #0]
 80089b4:	50cd      	str	r5, [r1, r3]
 80089b6:	18cc      	adds	r4, r1, r3
 80089b8:	4630      	mov	r0, r6
 80089ba:	f000 fd3f 	bl	800943c <__malloc_unlock>
 80089be:	f104 000b 	add.w	r0, r4, #11
 80089c2:	1d23      	adds	r3, r4, #4
 80089c4:	f020 0007 	bic.w	r0, r0, #7
 80089c8:	1ac3      	subs	r3, r0, r3
 80089ca:	d0d3      	beq.n	8008974 <_malloc_r+0x20>
 80089cc:	425a      	negs	r2, r3
 80089ce:	50e2      	str	r2, [r4, r3]
 80089d0:	e7d0      	b.n	8008974 <_malloc_r+0x20>
 80089d2:	428c      	cmp	r4, r1
 80089d4:	684b      	ldr	r3, [r1, #4]
 80089d6:	bf16      	itet	ne
 80089d8:	6063      	strne	r3, [r4, #4]
 80089da:	6013      	streq	r3, [r2, #0]
 80089dc:	460c      	movne	r4, r1
 80089de:	e7eb      	b.n	80089b8 <_malloc_r+0x64>
 80089e0:	460c      	mov	r4, r1
 80089e2:	6849      	ldr	r1, [r1, #4]
 80089e4:	e7cc      	b.n	8008980 <_malloc_r+0x2c>
 80089e6:	1cc4      	adds	r4, r0, #3
 80089e8:	f024 0403 	bic.w	r4, r4, #3
 80089ec:	42a0      	cmp	r0, r4
 80089ee:	d005      	beq.n	80089fc <_malloc_r+0xa8>
 80089f0:	1a21      	subs	r1, r4, r0
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 fa9a 	bl	8008f2c <_sbrk_r>
 80089f8:	3001      	adds	r0, #1
 80089fa:	d0cf      	beq.n	800899c <_malloc_r+0x48>
 80089fc:	6025      	str	r5, [r4, #0]
 80089fe:	e7db      	b.n	80089b8 <_malloc_r+0x64>
 8008a00:	20000238 	.word	0x20000238
 8008a04:	2000023c 	.word	0x2000023c

08008a08 <__ssputs_r>:
 8008a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0c:	688e      	ldr	r6, [r1, #8]
 8008a0e:	429e      	cmp	r6, r3
 8008a10:	4682      	mov	sl, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	4690      	mov	r8, r2
 8008a16:	4699      	mov	r9, r3
 8008a18:	d837      	bhi.n	8008a8a <__ssputs_r+0x82>
 8008a1a:	898a      	ldrh	r2, [r1, #12]
 8008a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a20:	d031      	beq.n	8008a86 <__ssputs_r+0x7e>
 8008a22:	6825      	ldr	r5, [r4, #0]
 8008a24:	6909      	ldr	r1, [r1, #16]
 8008a26:	1a6f      	subs	r7, r5, r1
 8008a28:	6965      	ldr	r5, [r4, #20]
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a30:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a34:	f109 0301 	add.w	r3, r9, #1
 8008a38:	443b      	add	r3, r7
 8008a3a:	429d      	cmp	r5, r3
 8008a3c:	bf38      	it	cc
 8008a3e:	461d      	movcc	r5, r3
 8008a40:	0553      	lsls	r3, r2, #21
 8008a42:	d530      	bpl.n	8008aa6 <__ssputs_r+0x9e>
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7ff ff85 	bl	8008954 <_malloc_r>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	b950      	cbnz	r0, 8008a64 <__ssputs_r+0x5c>
 8008a4e:	230c      	movs	r3, #12
 8008a50:	f8ca 3000 	str.w	r3, [sl]
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a64:	463a      	mov	r2, r7
 8008a66:	6921      	ldr	r1, [r4, #16]
 8008a68:	f7ff fc32 	bl	80082d0 <memcpy>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	6126      	str	r6, [r4, #16]
 8008a7a:	6165      	str	r5, [r4, #20]
 8008a7c:	443e      	add	r6, r7
 8008a7e:	1bed      	subs	r5, r5, r7
 8008a80:	6026      	str	r6, [r4, #0]
 8008a82:	60a5      	str	r5, [r4, #8]
 8008a84:	464e      	mov	r6, r9
 8008a86:	454e      	cmp	r6, r9
 8008a88:	d900      	bls.n	8008a8c <__ssputs_r+0x84>
 8008a8a:	464e      	mov	r6, r9
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	4641      	mov	r1, r8
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	f000 fcb9 	bl	8009408 <memmove>
 8008a96:	68a3      	ldr	r3, [r4, #8]
 8008a98:	1b9b      	subs	r3, r3, r6
 8008a9a:	60a3      	str	r3, [r4, #8]
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	441e      	add	r6, r3
 8008aa0:	6026      	str	r6, [r4, #0]
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e7dc      	b.n	8008a60 <__ssputs_r+0x58>
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	f000 fcc9 	bl	800943e <_realloc_r>
 8008aac:	4606      	mov	r6, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d1e2      	bne.n	8008a78 <__ssputs_r+0x70>
 8008ab2:	6921      	ldr	r1, [r4, #16]
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	f7ff feff 	bl	80088b8 <_free_r>
 8008aba:	e7c8      	b.n	8008a4e <__ssputs_r+0x46>

08008abc <_svfiprintf_r>:
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	461d      	mov	r5, r3
 8008ac2:	898b      	ldrh	r3, [r1, #12]
 8008ac4:	061f      	lsls	r7, r3, #24
 8008ac6:	b09d      	sub	sp, #116	; 0x74
 8008ac8:	4680      	mov	r8, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	4616      	mov	r6, r2
 8008ace:	d50f      	bpl.n	8008af0 <_svfiprintf_r+0x34>
 8008ad0:	690b      	ldr	r3, [r1, #16]
 8008ad2:	b96b      	cbnz	r3, 8008af0 <_svfiprintf_r+0x34>
 8008ad4:	2140      	movs	r1, #64	; 0x40
 8008ad6:	f7ff ff3d 	bl	8008954 <_malloc_r>
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	6120      	str	r0, [r4, #16]
 8008ade:	b928      	cbnz	r0, 8008aec <_svfiprintf_r+0x30>
 8008ae0:	230c      	movs	r3, #12
 8008ae2:	f8c8 3000 	str.w	r3, [r8]
 8008ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aea:	e0c8      	b.n	8008c7e <_svfiprintf_r+0x1c2>
 8008aec:	2340      	movs	r3, #64	; 0x40
 8008aee:	6163      	str	r3, [r4, #20]
 8008af0:	2300      	movs	r3, #0
 8008af2:	9309      	str	r3, [sp, #36]	; 0x24
 8008af4:	2320      	movs	r3, #32
 8008af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008afa:	2330      	movs	r3, #48	; 0x30
 8008afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b00:	9503      	str	r5, [sp, #12]
 8008b02:	f04f 0b01 	mov.w	fp, #1
 8008b06:	4637      	mov	r7, r6
 8008b08:	463d      	mov	r5, r7
 8008b0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b0e:	b10b      	cbz	r3, 8008b14 <_svfiprintf_r+0x58>
 8008b10:	2b25      	cmp	r3, #37	; 0x25
 8008b12:	d13e      	bne.n	8008b92 <_svfiprintf_r+0xd6>
 8008b14:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b18:	d00b      	beq.n	8008b32 <_svfiprintf_r+0x76>
 8008b1a:	4653      	mov	r3, sl
 8008b1c:	4632      	mov	r2, r6
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4640      	mov	r0, r8
 8008b22:	f7ff ff71 	bl	8008a08 <__ssputs_r>
 8008b26:	3001      	adds	r0, #1
 8008b28:	f000 80a4 	beq.w	8008c74 <_svfiprintf_r+0x1b8>
 8008b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2e:	4453      	add	r3, sl
 8008b30:	9309      	str	r3, [sp, #36]	; 0x24
 8008b32:	783b      	ldrb	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 809d 	beq.w	8008c74 <_svfiprintf_r+0x1b8>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b44:	9304      	str	r3, [sp, #16]
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b4e:	462f      	mov	r7, r5
 8008b50:	2205      	movs	r2, #5
 8008b52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b56:	4850      	ldr	r0, [pc, #320]	; (8008c98 <_svfiprintf_r+0x1dc>)
 8008b58:	f7f7 fb42 	bl	80001e0 <memchr>
 8008b5c:	9b04      	ldr	r3, [sp, #16]
 8008b5e:	b9d0      	cbnz	r0, 8008b96 <_svfiprintf_r+0xda>
 8008b60:	06d9      	lsls	r1, r3, #27
 8008b62:	bf44      	itt	mi
 8008b64:	2220      	movmi	r2, #32
 8008b66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b6a:	071a      	lsls	r2, r3, #28
 8008b6c:	bf44      	itt	mi
 8008b6e:	222b      	movmi	r2, #43	; 0x2b
 8008b70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b74:	782a      	ldrb	r2, [r5, #0]
 8008b76:	2a2a      	cmp	r2, #42	; 0x2a
 8008b78:	d015      	beq.n	8008ba6 <_svfiprintf_r+0xea>
 8008b7a:	9a07      	ldr	r2, [sp, #28]
 8008b7c:	462f      	mov	r7, r5
 8008b7e:	2000      	movs	r0, #0
 8008b80:	250a      	movs	r5, #10
 8008b82:	4639      	mov	r1, r7
 8008b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b88:	3b30      	subs	r3, #48	; 0x30
 8008b8a:	2b09      	cmp	r3, #9
 8008b8c:	d94d      	bls.n	8008c2a <_svfiprintf_r+0x16e>
 8008b8e:	b1b8      	cbz	r0, 8008bc0 <_svfiprintf_r+0x104>
 8008b90:	e00f      	b.n	8008bb2 <_svfiprintf_r+0xf6>
 8008b92:	462f      	mov	r7, r5
 8008b94:	e7b8      	b.n	8008b08 <_svfiprintf_r+0x4c>
 8008b96:	4a40      	ldr	r2, [pc, #256]	; (8008c98 <_svfiprintf_r+0x1dc>)
 8008b98:	1a80      	subs	r0, r0, r2
 8008b9a:	fa0b f000 	lsl.w	r0, fp, r0
 8008b9e:	4318      	orrs	r0, r3
 8008ba0:	9004      	str	r0, [sp, #16]
 8008ba2:	463d      	mov	r5, r7
 8008ba4:	e7d3      	b.n	8008b4e <_svfiprintf_r+0x92>
 8008ba6:	9a03      	ldr	r2, [sp, #12]
 8008ba8:	1d11      	adds	r1, r2, #4
 8008baa:	6812      	ldr	r2, [r2, #0]
 8008bac:	9103      	str	r1, [sp, #12]
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	db01      	blt.n	8008bb6 <_svfiprintf_r+0xfa>
 8008bb2:	9207      	str	r2, [sp, #28]
 8008bb4:	e004      	b.n	8008bc0 <_svfiprintf_r+0x104>
 8008bb6:	4252      	negs	r2, r2
 8008bb8:	f043 0302 	orr.w	r3, r3, #2
 8008bbc:	9207      	str	r2, [sp, #28]
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	783b      	ldrb	r3, [r7, #0]
 8008bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc4:	d10c      	bne.n	8008be0 <_svfiprintf_r+0x124>
 8008bc6:	787b      	ldrb	r3, [r7, #1]
 8008bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bca:	d133      	bne.n	8008c34 <_svfiprintf_r+0x178>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	9203      	str	r2, [sp, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bfb8      	it	lt
 8008bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bdc:	3702      	adds	r7, #2
 8008bde:	9305      	str	r3, [sp, #20]
 8008be0:	4d2e      	ldr	r5, [pc, #184]	; (8008c9c <_svfiprintf_r+0x1e0>)
 8008be2:	7839      	ldrb	r1, [r7, #0]
 8008be4:	2203      	movs	r2, #3
 8008be6:	4628      	mov	r0, r5
 8008be8:	f7f7 fafa 	bl	80001e0 <memchr>
 8008bec:	b138      	cbz	r0, 8008bfe <_svfiprintf_r+0x142>
 8008bee:	2340      	movs	r3, #64	; 0x40
 8008bf0:	1b40      	subs	r0, r0, r5
 8008bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	4303      	orrs	r3, r0
 8008bfa:	3701      	adds	r7, #1
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	7839      	ldrb	r1, [r7, #0]
 8008c00:	4827      	ldr	r0, [pc, #156]	; (8008ca0 <_svfiprintf_r+0x1e4>)
 8008c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c06:	2206      	movs	r2, #6
 8008c08:	1c7e      	adds	r6, r7, #1
 8008c0a:	f7f7 fae9 	bl	80001e0 <memchr>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d038      	beq.n	8008c84 <_svfiprintf_r+0x1c8>
 8008c12:	4b24      	ldr	r3, [pc, #144]	; (8008ca4 <_svfiprintf_r+0x1e8>)
 8008c14:	bb13      	cbnz	r3, 8008c5c <_svfiprintf_r+0x1a0>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	3307      	adds	r3, #7
 8008c1a:	f023 0307 	bic.w	r3, r3, #7
 8008c1e:	3308      	adds	r3, #8
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c24:	444b      	add	r3, r9
 8008c26:	9309      	str	r3, [sp, #36]	; 0x24
 8008c28:	e76d      	b.n	8008b06 <_svfiprintf_r+0x4a>
 8008c2a:	fb05 3202 	mla	r2, r5, r2, r3
 8008c2e:	2001      	movs	r0, #1
 8008c30:	460f      	mov	r7, r1
 8008c32:	e7a6      	b.n	8008b82 <_svfiprintf_r+0xc6>
 8008c34:	2300      	movs	r3, #0
 8008c36:	3701      	adds	r7, #1
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	250a      	movs	r5, #10
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c44:	3a30      	subs	r2, #48	; 0x30
 8008c46:	2a09      	cmp	r2, #9
 8008c48:	d903      	bls.n	8008c52 <_svfiprintf_r+0x196>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0c8      	beq.n	8008be0 <_svfiprintf_r+0x124>
 8008c4e:	9105      	str	r1, [sp, #20]
 8008c50:	e7c6      	b.n	8008be0 <_svfiprintf_r+0x124>
 8008c52:	fb05 2101 	mla	r1, r5, r1, r2
 8008c56:	2301      	movs	r3, #1
 8008c58:	4607      	mov	r7, r0
 8008c5a:	e7f0      	b.n	8008c3e <_svfiprintf_r+0x182>
 8008c5c:	ab03      	add	r3, sp, #12
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	4622      	mov	r2, r4
 8008c62:	4b11      	ldr	r3, [pc, #68]	; (8008ca8 <_svfiprintf_r+0x1ec>)
 8008c64:	a904      	add	r1, sp, #16
 8008c66:	4640      	mov	r0, r8
 8008c68:	f7fe f80c 	bl	8006c84 <_printf_float>
 8008c6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c70:	4681      	mov	r9, r0
 8008c72:	d1d6      	bne.n	8008c22 <_svfiprintf_r+0x166>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	065b      	lsls	r3, r3, #25
 8008c78:	f53f af35 	bmi.w	8008ae6 <_svfiprintf_r+0x2a>
 8008c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c7e:	b01d      	add	sp, #116	; 0x74
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c84:	ab03      	add	r3, sp, #12
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4622      	mov	r2, r4
 8008c8a:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <_svfiprintf_r+0x1ec>)
 8008c8c:	a904      	add	r1, sp, #16
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7fe faae 	bl	80071f0 <_printf_i>
 8008c94:	e7ea      	b.n	8008c6c <_svfiprintf_r+0x1b0>
 8008c96:	bf00      	nop
 8008c98:	0800975c 	.word	0x0800975c
 8008c9c:	08009762 	.word	0x08009762
 8008ca0:	08009766 	.word	0x08009766
 8008ca4:	08006c85 	.word	0x08006c85
 8008ca8:	08008a09 	.word	0x08008a09

08008cac <__sfputc_r>:
 8008cac:	6893      	ldr	r3, [r2, #8]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	b410      	push	{r4}
 8008cb4:	6093      	str	r3, [r2, #8]
 8008cb6:	da08      	bge.n	8008cca <__sfputc_r+0x1e>
 8008cb8:	6994      	ldr	r4, [r2, #24]
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	db01      	blt.n	8008cc2 <__sfputc_r+0x16>
 8008cbe:	290a      	cmp	r1, #10
 8008cc0:	d103      	bne.n	8008cca <__sfputc_r+0x1e>
 8008cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc6:	f000 b985 	b.w	8008fd4 <__swbuf_r>
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	1c58      	adds	r0, r3, #1
 8008cce:	6010      	str	r0, [r2, #0]
 8008cd0:	7019      	strb	r1, [r3, #0]
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <__sfputs_r>:
 8008cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	18d5      	adds	r5, r2, r3
 8008ce4:	42ac      	cmp	r4, r5
 8008ce6:	d101      	bne.n	8008cec <__sfputs_r+0x12>
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e007      	b.n	8008cfc <__sfputs_r+0x22>
 8008cec:	463a      	mov	r2, r7
 8008cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff ffda 	bl	8008cac <__sfputc_r>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d1f3      	bne.n	8008ce4 <__sfputs_r+0xa>
 8008cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d00 <_vfiprintf_r>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	460c      	mov	r4, r1
 8008d06:	b09d      	sub	sp, #116	; 0x74
 8008d08:	4617      	mov	r7, r2
 8008d0a:	461d      	mov	r5, r3
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	b118      	cbz	r0, 8008d18 <_vfiprintf_r+0x18>
 8008d10:	6983      	ldr	r3, [r0, #24]
 8008d12:	b90b      	cbnz	r3, 8008d18 <_vfiprintf_r+0x18>
 8008d14:	f7ff fa3c 	bl	8008190 <__sinit>
 8008d18:	4b7c      	ldr	r3, [pc, #496]	; (8008f0c <_vfiprintf_r+0x20c>)
 8008d1a:	429c      	cmp	r4, r3
 8008d1c:	d158      	bne.n	8008dd0 <_vfiprintf_r+0xd0>
 8008d1e:	6874      	ldr	r4, [r6, #4]
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	0718      	lsls	r0, r3, #28
 8008d24:	d55e      	bpl.n	8008de4 <_vfiprintf_r+0xe4>
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d05b      	beq.n	8008de4 <_vfiprintf_r+0xe4>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d30:	2320      	movs	r3, #32
 8008d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d36:	2330      	movs	r3, #48	; 0x30
 8008d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d3c:	9503      	str	r5, [sp, #12]
 8008d3e:	f04f 0b01 	mov.w	fp, #1
 8008d42:	46b8      	mov	r8, r7
 8008d44:	4645      	mov	r5, r8
 8008d46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d4a:	b10b      	cbz	r3, 8008d50 <_vfiprintf_r+0x50>
 8008d4c:	2b25      	cmp	r3, #37	; 0x25
 8008d4e:	d154      	bne.n	8008dfa <_vfiprintf_r+0xfa>
 8008d50:	ebb8 0a07 	subs.w	sl, r8, r7
 8008d54:	d00b      	beq.n	8008d6e <_vfiprintf_r+0x6e>
 8008d56:	4653      	mov	r3, sl
 8008d58:	463a      	mov	r2, r7
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff ffbc 	bl	8008cda <__sfputs_r>
 8008d62:	3001      	adds	r0, #1
 8008d64:	f000 80c2 	beq.w	8008eec <_vfiprintf_r+0x1ec>
 8008d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6a:	4453      	add	r3, sl
 8008d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d6e:	f898 3000 	ldrb.w	r3, [r8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80ba 	beq.w	8008eec <_vfiprintf_r+0x1ec>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	9307      	str	r3, [sp, #28]
 8008d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d8c:	46a8      	mov	r8, r5
 8008d8e:	2205      	movs	r2, #5
 8008d90:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008d94:	485e      	ldr	r0, [pc, #376]	; (8008f10 <_vfiprintf_r+0x210>)
 8008d96:	f7f7 fa23 	bl	80001e0 <memchr>
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	bb78      	cbnz	r0, 8008dfe <_vfiprintf_r+0xfe>
 8008d9e:	06d9      	lsls	r1, r3, #27
 8008da0:	bf44      	itt	mi
 8008da2:	2220      	movmi	r2, #32
 8008da4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008da8:	071a      	lsls	r2, r3, #28
 8008daa:	bf44      	itt	mi
 8008dac:	222b      	movmi	r2, #43	; 0x2b
 8008dae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008db2:	782a      	ldrb	r2, [r5, #0]
 8008db4:	2a2a      	cmp	r2, #42	; 0x2a
 8008db6:	d02a      	beq.n	8008e0e <_vfiprintf_r+0x10e>
 8008db8:	9a07      	ldr	r2, [sp, #28]
 8008dba:	46a8      	mov	r8, r5
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	250a      	movs	r5, #10
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dc6:	3b30      	subs	r3, #48	; 0x30
 8008dc8:	2b09      	cmp	r3, #9
 8008dca:	d969      	bls.n	8008ea0 <_vfiprintf_r+0x1a0>
 8008dcc:	b360      	cbz	r0, 8008e28 <_vfiprintf_r+0x128>
 8008dce:	e024      	b.n	8008e1a <_vfiprintf_r+0x11a>
 8008dd0:	4b50      	ldr	r3, [pc, #320]	; (8008f14 <_vfiprintf_r+0x214>)
 8008dd2:	429c      	cmp	r4, r3
 8008dd4:	d101      	bne.n	8008dda <_vfiprintf_r+0xda>
 8008dd6:	68b4      	ldr	r4, [r6, #8]
 8008dd8:	e7a2      	b.n	8008d20 <_vfiprintf_r+0x20>
 8008dda:	4b4f      	ldr	r3, [pc, #316]	; (8008f18 <_vfiprintf_r+0x218>)
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	bf08      	it	eq
 8008de0:	68f4      	ldreq	r4, [r6, #12]
 8008de2:	e79d      	b.n	8008d20 <_vfiprintf_r+0x20>
 8008de4:	4621      	mov	r1, r4
 8008de6:	4630      	mov	r0, r6
 8008de8:	f000 f958 	bl	800909c <__swsetup_r>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d09d      	beq.n	8008d2c <_vfiprintf_r+0x2c>
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	b01d      	add	sp, #116	; 0x74
 8008df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfa:	46a8      	mov	r8, r5
 8008dfc:	e7a2      	b.n	8008d44 <_vfiprintf_r+0x44>
 8008dfe:	4a44      	ldr	r2, [pc, #272]	; (8008f10 <_vfiprintf_r+0x210>)
 8008e00:	1a80      	subs	r0, r0, r2
 8008e02:	fa0b f000 	lsl.w	r0, fp, r0
 8008e06:	4318      	orrs	r0, r3
 8008e08:	9004      	str	r0, [sp, #16]
 8008e0a:	4645      	mov	r5, r8
 8008e0c:	e7be      	b.n	8008d8c <_vfiprintf_r+0x8c>
 8008e0e:	9a03      	ldr	r2, [sp, #12]
 8008e10:	1d11      	adds	r1, r2, #4
 8008e12:	6812      	ldr	r2, [r2, #0]
 8008e14:	9103      	str	r1, [sp, #12]
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	db01      	blt.n	8008e1e <_vfiprintf_r+0x11e>
 8008e1a:	9207      	str	r2, [sp, #28]
 8008e1c:	e004      	b.n	8008e28 <_vfiprintf_r+0x128>
 8008e1e:	4252      	negs	r2, r2
 8008e20:	f043 0302 	orr.w	r3, r3, #2
 8008e24:	9207      	str	r2, [sp, #28]
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	f898 3000 	ldrb.w	r3, [r8]
 8008e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e2e:	d10e      	bne.n	8008e4e <_vfiprintf_r+0x14e>
 8008e30:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008e34:	2b2a      	cmp	r3, #42	; 0x2a
 8008e36:	d138      	bne.n	8008eaa <_vfiprintf_r+0x1aa>
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	1d1a      	adds	r2, r3, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	9203      	str	r2, [sp, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	bfb8      	it	lt
 8008e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e48:	f108 0802 	add.w	r8, r8, #2
 8008e4c:	9305      	str	r3, [sp, #20]
 8008e4e:	4d33      	ldr	r5, [pc, #204]	; (8008f1c <_vfiprintf_r+0x21c>)
 8008e50:	f898 1000 	ldrb.w	r1, [r8]
 8008e54:	2203      	movs	r2, #3
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7f7 f9c2 	bl	80001e0 <memchr>
 8008e5c:	b140      	cbz	r0, 8008e70 <_vfiprintf_r+0x170>
 8008e5e:	2340      	movs	r3, #64	; 0x40
 8008e60:	1b40      	subs	r0, r0, r5
 8008e62:	fa03 f000 	lsl.w	r0, r3, r0
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	4303      	orrs	r3, r0
 8008e6a:	f108 0801 	add.w	r8, r8, #1
 8008e6e:	9304      	str	r3, [sp, #16]
 8008e70:	f898 1000 	ldrb.w	r1, [r8]
 8008e74:	482a      	ldr	r0, [pc, #168]	; (8008f20 <_vfiprintf_r+0x220>)
 8008e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e7a:	2206      	movs	r2, #6
 8008e7c:	f108 0701 	add.w	r7, r8, #1
 8008e80:	f7f7 f9ae 	bl	80001e0 <memchr>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d037      	beq.n	8008ef8 <_vfiprintf_r+0x1f8>
 8008e88:	4b26      	ldr	r3, [pc, #152]	; (8008f24 <_vfiprintf_r+0x224>)
 8008e8a:	bb1b      	cbnz	r3, 8008ed4 <_vfiprintf_r+0x1d4>
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	3307      	adds	r3, #7
 8008e90:	f023 0307 	bic.w	r3, r3, #7
 8008e94:	3308      	adds	r3, #8
 8008e96:	9303      	str	r3, [sp, #12]
 8008e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9a:	444b      	add	r3, r9
 8008e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9e:	e750      	b.n	8008d42 <_vfiprintf_r+0x42>
 8008ea0:	fb05 3202 	mla	r2, r5, r2, r3
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	4688      	mov	r8, r1
 8008ea8:	e78a      	b.n	8008dc0 <_vfiprintf_r+0xc0>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f108 0801 	add.w	r8, r8, #1
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	250a      	movs	r5, #10
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ebc:	3a30      	subs	r2, #48	; 0x30
 8008ebe:	2a09      	cmp	r2, #9
 8008ec0:	d903      	bls.n	8008eca <_vfiprintf_r+0x1ca>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0c3      	beq.n	8008e4e <_vfiprintf_r+0x14e>
 8008ec6:	9105      	str	r1, [sp, #20]
 8008ec8:	e7c1      	b.n	8008e4e <_vfiprintf_r+0x14e>
 8008eca:	fb05 2101 	mla	r1, r5, r1, r2
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	e7f0      	b.n	8008eb6 <_vfiprintf_r+0x1b6>
 8008ed4:	ab03      	add	r3, sp, #12
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4622      	mov	r2, r4
 8008eda:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <_vfiprintf_r+0x228>)
 8008edc:	a904      	add	r1, sp, #16
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f7fd fed0 	bl	8006c84 <_printf_float>
 8008ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ee8:	4681      	mov	r9, r0
 8008eea:	d1d5      	bne.n	8008e98 <_vfiprintf_r+0x198>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	065b      	lsls	r3, r3, #25
 8008ef0:	f53f af7e 	bmi.w	8008df0 <_vfiprintf_r+0xf0>
 8008ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ef6:	e77d      	b.n	8008df4 <_vfiprintf_r+0xf4>
 8008ef8:	ab03      	add	r3, sp, #12
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	4622      	mov	r2, r4
 8008efe:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <_vfiprintf_r+0x228>)
 8008f00:	a904      	add	r1, sp, #16
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7fe f974 	bl	80071f0 <_printf_i>
 8008f08:	e7ec      	b.n	8008ee4 <_vfiprintf_r+0x1e4>
 8008f0a:	bf00      	nop
 8008f0c:	08009620 	.word	0x08009620
 8008f10:	0800975c 	.word	0x0800975c
 8008f14:	08009640 	.word	0x08009640
 8008f18:	08009600 	.word	0x08009600
 8008f1c:	08009762 	.word	0x08009762
 8008f20:	08009766 	.word	0x08009766
 8008f24:	08006c85 	.word	0x08006c85
 8008f28:	08008cdb 	.word	0x08008cdb

08008f2c <_sbrk_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4c06      	ldr	r4, [pc, #24]	; (8008f48 <_sbrk_r+0x1c>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	4605      	mov	r5, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	f7f9 fb84 	bl	8002644 <_sbrk>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_sbrk_r+0x1a>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_sbrk_r+0x1a>
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	20002644 	.word	0x20002644

08008f4c <__sread>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	460c      	mov	r4, r1
 8008f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f54:	f000 fa9a 	bl	800948c <_read_r>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	bfab      	itete	ge
 8008f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f60:	181b      	addge	r3, r3, r0
 8008f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f66:	bfac      	ite	ge
 8008f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f6a:	81a3      	strhlt	r3, [r4, #12]
 8008f6c:	bd10      	pop	{r4, pc}

08008f6e <__swrite>:
 8008f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f72:	461f      	mov	r7, r3
 8008f74:	898b      	ldrh	r3, [r1, #12]
 8008f76:	05db      	lsls	r3, r3, #23
 8008f78:	4605      	mov	r5, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	4616      	mov	r6, r2
 8008f7e:	d505      	bpl.n	8008f8c <__swrite+0x1e>
 8008f80:	2302      	movs	r3, #2
 8008f82:	2200      	movs	r2, #0
 8008f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f88:	f000 f9b6 	bl	80092f8 <_lseek_r>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	4632      	mov	r2, r6
 8008f9a:	463b      	mov	r3, r7
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa2:	f000 b869 	b.w	8009078 <_write_r>

08008fa6 <__sseek>:
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	460c      	mov	r4, r1
 8008faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fae:	f000 f9a3 	bl	80092f8 <_lseek_r>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	bf15      	itete	ne
 8008fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fc2:	81a3      	strheq	r3, [r4, #12]
 8008fc4:	bf18      	it	ne
 8008fc6:	81a3      	strhne	r3, [r4, #12]
 8008fc8:	bd10      	pop	{r4, pc}

08008fca <__sclose>:
 8008fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fce:	f000 b8d3 	b.w	8009178 <_close_r>
	...

08008fd4 <__swbuf_r>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	460e      	mov	r6, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	4605      	mov	r5, r0
 8008fdc:	b118      	cbz	r0, 8008fe6 <__swbuf_r+0x12>
 8008fde:	6983      	ldr	r3, [r0, #24]
 8008fe0:	b90b      	cbnz	r3, 8008fe6 <__swbuf_r+0x12>
 8008fe2:	f7ff f8d5 	bl	8008190 <__sinit>
 8008fe6:	4b21      	ldr	r3, [pc, #132]	; (800906c <__swbuf_r+0x98>)
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	d12a      	bne.n	8009042 <__swbuf_r+0x6e>
 8008fec:	686c      	ldr	r4, [r5, #4]
 8008fee:	69a3      	ldr	r3, [r4, #24]
 8008ff0:	60a3      	str	r3, [r4, #8]
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	071a      	lsls	r2, r3, #28
 8008ff6:	d52e      	bpl.n	8009056 <__swbuf_r+0x82>
 8008ff8:	6923      	ldr	r3, [r4, #16]
 8008ffa:	b363      	cbz	r3, 8009056 <__swbuf_r+0x82>
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	6820      	ldr	r0, [r4, #0]
 8009000:	1ac0      	subs	r0, r0, r3
 8009002:	6963      	ldr	r3, [r4, #20]
 8009004:	b2f6      	uxtb	r6, r6
 8009006:	4283      	cmp	r3, r0
 8009008:	4637      	mov	r7, r6
 800900a:	dc04      	bgt.n	8009016 <__swbuf_r+0x42>
 800900c:	4621      	mov	r1, r4
 800900e:	4628      	mov	r0, r5
 8009010:	f000 f948 	bl	80092a4 <_fflush_r>
 8009014:	bb28      	cbnz	r0, 8009062 <__swbuf_r+0x8e>
 8009016:	68a3      	ldr	r3, [r4, #8]
 8009018:	3b01      	subs	r3, #1
 800901a:	60a3      	str	r3, [r4, #8]
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	6022      	str	r2, [r4, #0]
 8009022:	701e      	strb	r6, [r3, #0]
 8009024:	6963      	ldr	r3, [r4, #20]
 8009026:	3001      	adds	r0, #1
 8009028:	4283      	cmp	r3, r0
 800902a:	d004      	beq.n	8009036 <__swbuf_r+0x62>
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	07db      	lsls	r3, r3, #31
 8009030:	d519      	bpl.n	8009066 <__swbuf_r+0x92>
 8009032:	2e0a      	cmp	r6, #10
 8009034:	d117      	bne.n	8009066 <__swbuf_r+0x92>
 8009036:	4621      	mov	r1, r4
 8009038:	4628      	mov	r0, r5
 800903a:	f000 f933 	bl	80092a4 <_fflush_r>
 800903e:	b190      	cbz	r0, 8009066 <__swbuf_r+0x92>
 8009040:	e00f      	b.n	8009062 <__swbuf_r+0x8e>
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <__swbuf_r+0x9c>)
 8009044:	429c      	cmp	r4, r3
 8009046:	d101      	bne.n	800904c <__swbuf_r+0x78>
 8009048:	68ac      	ldr	r4, [r5, #8]
 800904a:	e7d0      	b.n	8008fee <__swbuf_r+0x1a>
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <__swbuf_r+0xa0>)
 800904e:	429c      	cmp	r4, r3
 8009050:	bf08      	it	eq
 8009052:	68ec      	ldreq	r4, [r5, #12]
 8009054:	e7cb      	b.n	8008fee <__swbuf_r+0x1a>
 8009056:	4621      	mov	r1, r4
 8009058:	4628      	mov	r0, r5
 800905a:	f000 f81f 	bl	800909c <__swsetup_r>
 800905e:	2800      	cmp	r0, #0
 8009060:	d0cc      	beq.n	8008ffc <__swbuf_r+0x28>
 8009062:	f04f 37ff 	mov.w	r7, #4294967295
 8009066:	4638      	mov	r0, r7
 8009068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906a:	bf00      	nop
 800906c:	08009620 	.word	0x08009620
 8009070:	08009640 	.word	0x08009640
 8009074:	08009600 	.word	0x08009600

08009078 <_write_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4c07      	ldr	r4, [pc, #28]	; (8009098 <_write_r+0x20>)
 800907c:	4605      	mov	r5, r0
 800907e:	4608      	mov	r0, r1
 8009080:	4611      	mov	r1, r2
 8009082:	2200      	movs	r2, #0
 8009084:	6022      	str	r2, [r4, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	f7f8 ff11 	bl	8001eae <_write>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_write_r+0x1e>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	b103      	cbz	r3, 8009096 <_write_r+0x1e>
 8009094:	602b      	str	r3, [r5, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	20002644 	.word	0x20002644

0800909c <__swsetup_r>:
 800909c:	4b32      	ldr	r3, [pc, #200]	; (8009168 <__swsetup_r+0xcc>)
 800909e:	b570      	push	{r4, r5, r6, lr}
 80090a0:	681d      	ldr	r5, [r3, #0]
 80090a2:	4606      	mov	r6, r0
 80090a4:	460c      	mov	r4, r1
 80090a6:	b125      	cbz	r5, 80090b2 <__swsetup_r+0x16>
 80090a8:	69ab      	ldr	r3, [r5, #24]
 80090aa:	b913      	cbnz	r3, 80090b2 <__swsetup_r+0x16>
 80090ac:	4628      	mov	r0, r5
 80090ae:	f7ff f86f 	bl	8008190 <__sinit>
 80090b2:	4b2e      	ldr	r3, [pc, #184]	; (800916c <__swsetup_r+0xd0>)
 80090b4:	429c      	cmp	r4, r3
 80090b6:	d10f      	bne.n	80090d8 <__swsetup_r+0x3c>
 80090b8:	686c      	ldr	r4, [r5, #4]
 80090ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	0715      	lsls	r5, r2, #28
 80090c2:	d42c      	bmi.n	800911e <__swsetup_r+0x82>
 80090c4:	06d0      	lsls	r0, r2, #27
 80090c6:	d411      	bmi.n	80090ec <__swsetup_r+0x50>
 80090c8:	2209      	movs	r2, #9
 80090ca:	6032      	str	r2, [r6, #0]
 80090cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	f04f 30ff 	mov.w	r0, #4294967295
 80090d6:	e03e      	b.n	8009156 <__swsetup_r+0xba>
 80090d8:	4b25      	ldr	r3, [pc, #148]	; (8009170 <__swsetup_r+0xd4>)
 80090da:	429c      	cmp	r4, r3
 80090dc:	d101      	bne.n	80090e2 <__swsetup_r+0x46>
 80090de:	68ac      	ldr	r4, [r5, #8]
 80090e0:	e7eb      	b.n	80090ba <__swsetup_r+0x1e>
 80090e2:	4b24      	ldr	r3, [pc, #144]	; (8009174 <__swsetup_r+0xd8>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	bf08      	it	eq
 80090e8:	68ec      	ldreq	r4, [r5, #12]
 80090ea:	e7e6      	b.n	80090ba <__swsetup_r+0x1e>
 80090ec:	0751      	lsls	r1, r2, #29
 80090ee:	d512      	bpl.n	8009116 <__swsetup_r+0x7a>
 80090f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090f2:	b141      	cbz	r1, 8009106 <__swsetup_r+0x6a>
 80090f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d002      	beq.n	8009102 <__swsetup_r+0x66>
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7ff fbdb 	bl	80088b8 <_free_r>
 8009102:	2300      	movs	r3, #0
 8009104:	6363      	str	r3, [r4, #52]	; 0x34
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800910c:	81a3      	strh	r3, [r4, #12]
 800910e:	2300      	movs	r3, #0
 8009110:	6063      	str	r3, [r4, #4]
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	f043 0308 	orr.w	r3, r3, #8
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	b94b      	cbnz	r3, 8009136 <__swsetup_r+0x9a>
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800912c:	d003      	beq.n	8009136 <__swsetup_r+0x9a>
 800912e:	4621      	mov	r1, r4
 8009130:	4630      	mov	r0, r6
 8009132:	f000 f917 	bl	8009364 <__smakebuf_r>
 8009136:	89a2      	ldrh	r2, [r4, #12]
 8009138:	f012 0301 	ands.w	r3, r2, #1
 800913c:	d00c      	beq.n	8009158 <__swsetup_r+0xbc>
 800913e:	2300      	movs	r3, #0
 8009140:	60a3      	str	r3, [r4, #8]
 8009142:	6963      	ldr	r3, [r4, #20]
 8009144:	425b      	negs	r3, r3
 8009146:	61a3      	str	r3, [r4, #24]
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	b953      	cbnz	r3, 8009162 <__swsetup_r+0xc6>
 800914c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009150:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009154:	d1ba      	bne.n	80090cc <__swsetup_r+0x30>
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	0792      	lsls	r2, r2, #30
 800915a:	bf58      	it	pl
 800915c:	6963      	ldrpl	r3, [r4, #20]
 800915e:	60a3      	str	r3, [r4, #8]
 8009160:	e7f2      	b.n	8009148 <__swsetup_r+0xac>
 8009162:	2000      	movs	r0, #0
 8009164:	e7f7      	b.n	8009156 <__swsetup_r+0xba>
 8009166:	bf00      	nop
 8009168:	20000020 	.word	0x20000020
 800916c:	08009620 	.word	0x08009620
 8009170:	08009640 	.word	0x08009640
 8009174:	08009600 	.word	0x08009600

08009178 <_close_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4c06      	ldr	r4, [pc, #24]	; (8009194 <_close_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4605      	mov	r5, r0
 8009180:	4608      	mov	r0, r1
 8009182:	6023      	str	r3, [r4, #0]
 8009184:	f7f9 fa29 	bl	80025da <_close>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_close_r+0x1a>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	b103      	cbz	r3, 8009192 <_close_r+0x1a>
 8009190:	602b      	str	r3, [r5, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20002644 	.word	0x20002644

08009198 <__sflush_r>:
 8009198:	898a      	ldrh	r2, [r1, #12]
 800919a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	4605      	mov	r5, r0
 80091a0:	0710      	lsls	r0, r2, #28
 80091a2:	460c      	mov	r4, r1
 80091a4:	d458      	bmi.n	8009258 <__sflush_r+0xc0>
 80091a6:	684b      	ldr	r3, [r1, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dc05      	bgt.n	80091b8 <__sflush_r+0x20>
 80091ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dc02      	bgt.n	80091b8 <__sflush_r+0x20>
 80091b2:	2000      	movs	r0, #0
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	d0f9      	beq.n	80091b2 <__sflush_r+0x1a>
 80091be:	2300      	movs	r3, #0
 80091c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091c4:	682f      	ldr	r7, [r5, #0]
 80091c6:	6a21      	ldr	r1, [r4, #32]
 80091c8:	602b      	str	r3, [r5, #0]
 80091ca:	d032      	beq.n	8009232 <__sflush_r+0x9a>
 80091cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	075a      	lsls	r2, r3, #29
 80091d2:	d505      	bpl.n	80091e0 <__sflush_r+0x48>
 80091d4:	6863      	ldr	r3, [r4, #4]
 80091d6:	1ac0      	subs	r0, r0, r3
 80091d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091da:	b10b      	cbz	r3, 80091e0 <__sflush_r+0x48>
 80091dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091de:	1ac0      	subs	r0, r0, r3
 80091e0:	2300      	movs	r3, #0
 80091e2:	4602      	mov	r2, r0
 80091e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091e6:	6a21      	ldr	r1, [r4, #32]
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b0      	blx	r6
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	d106      	bne.n	8009200 <__sflush_r+0x68>
 80091f2:	6829      	ldr	r1, [r5, #0]
 80091f4:	291d      	cmp	r1, #29
 80091f6:	d848      	bhi.n	800928a <__sflush_r+0xf2>
 80091f8:	4a29      	ldr	r2, [pc, #164]	; (80092a0 <__sflush_r+0x108>)
 80091fa:	40ca      	lsrs	r2, r1
 80091fc:	07d6      	lsls	r6, r2, #31
 80091fe:	d544      	bpl.n	800928a <__sflush_r+0xf2>
 8009200:	2200      	movs	r2, #0
 8009202:	6062      	str	r2, [r4, #4]
 8009204:	04d9      	lsls	r1, r3, #19
 8009206:	6922      	ldr	r2, [r4, #16]
 8009208:	6022      	str	r2, [r4, #0]
 800920a:	d504      	bpl.n	8009216 <__sflush_r+0x7e>
 800920c:	1c42      	adds	r2, r0, #1
 800920e:	d101      	bne.n	8009214 <__sflush_r+0x7c>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b903      	cbnz	r3, 8009216 <__sflush_r+0x7e>
 8009214:	6560      	str	r0, [r4, #84]	; 0x54
 8009216:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009218:	602f      	str	r7, [r5, #0]
 800921a:	2900      	cmp	r1, #0
 800921c:	d0c9      	beq.n	80091b2 <__sflush_r+0x1a>
 800921e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009222:	4299      	cmp	r1, r3
 8009224:	d002      	beq.n	800922c <__sflush_r+0x94>
 8009226:	4628      	mov	r0, r5
 8009228:	f7ff fb46 	bl	80088b8 <_free_r>
 800922c:	2000      	movs	r0, #0
 800922e:	6360      	str	r0, [r4, #52]	; 0x34
 8009230:	e7c0      	b.n	80091b4 <__sflush_r+0x1c>
 8009232:	2301      	movs	r3, #1
 8009234:	4628      	mov	r0, r5
 8009236:	47b0      	blx	r6
 8009238:	1c41      	adds	r1, r0, #1
 800923a:	d1c8      	bne.n	80091ce <__sflush_r+0x36>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0c5      	beq.n	80091ce <__sflush_r+0x36>
 8009242:	2b1d      	cmp	r3, #29
 8009244:	d001      	beq.n	800924a <__sflush_r+0xb2>
 8009246:	2b16      	cmp	r3, #22
 8009248:	d101      	bne.n	800924e <__sflush_r+0xb6>
 800924a:	602f      	str	r7, [r5, #0]
 800924c:	e7b1      	b.n	80091b2 <__sflush_r+0x1a>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	e7ad      	b.n	80091b4 <__sflush_r+0x1c>
 8009258:	690f      	ldr	r7, [r1, #16]
 800925a:	2f00      	cmp	r7, #0
 800925c:	d0a9      	beq.n	80091b2 <__sflush_r+0x1a>
 800925e:	0793      	lsls	r3, r2, #30
 8009260:	680e      	ldr	r6, [r1, #0]
 8009262:	bf08      	it	eq
 8009264:	694b      	ldreq	r3, [r1, #20]
 8009266:	600f      	str	r7, [r1, #0]
 8009268:	bf18      	it	ne
 800926a:	2300      	movne	r3, #0
 800926c:	eba6 0807 	sub.w	r8, r6, r7
 8009270:	608b      	str	r3, [r1, #8]
 8009272:	f1b8 0f00 	cmp.w	r8, #0
 8009276:	dd9c      	ble.n	80091b2 <__sflush_r+0x1a>
 8009278:	4643      	mov	r3, r8
 800927a:	463a      	mov	r2, r7
 800927c:	6a21      	ldr	r1, [r4, #32]
 800927e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009280:	4628      	mov	r0, r5
 8009282:	47b0      	blx	r6
 8009284:	2800      	cmp	r0, #0
 8009286:	dc06      	bgt.n	8009296 <__sflush_r+0xfe>
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	f04f 30ff 	mov.w	r0, #4294967295
 8009294:	e78e      	b.n	80091b4 <__sflush_r+0x1c>
 8009296:	4407      	add	r7, r0
 8009298:	eba8 0800 	sub.w	r8, r8, r0
 800929c:	e7e9      	b.n	8009272 <__sflush_r+0xda>
 800929e:	bf00      	nop
 80092a0:	20400001 	.word	0x20400001

080092a4 <_fflush_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	690b      	ldr	r3, [r1, #16]
 80092a8:	4605      	mov	r5, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	b1db      	cbz	r3, 80092e6 <_fflush_r+0x42>
 80092ae:	b118      	cbz	r0, 80092b8 <_fflush_r+0x14>
 80092b0:	6983      	ldr	r3, [r0, #24]
 80092b2:	b90b      	cbnz	r3, 80092b8 <_fflush_r+0x14>
 80092b4:	f7fe ff6c 	bl	8008190 <__sinit>
 80092b8:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <_fflush_r+0x48>)
 80092ba:	429c      	cmp	r4, r3
 80092bc:	d109      	bne.n	80092d2 <_fflush_r+0x2e>
 80092be:	686c      	ldr	r4, [r5, #4]
 80092c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c4:	b17b      	cbz	r3, 80092e6 <_fflush_r+0x42>
 80092c6:	4621      	mov	r1, r4
 80092c8:	4628      	mov	r0, r5
 80092ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ce:	f7ff bf63 	b.w	8009198 <__sflush_r>
 80092d2:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <_fflush_r+0x4c>)
 80092d4:	429c      	cmp	r4, r3
 80092d6:	d101      	bne.n	80092dc <_fflush_r+0x38>
 80092d8:	68ac      	ldr	r4, [r5, #8]
 80092da:	e7f1      	b.n	80092c0 <_fflush_r+0x1c>
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <_fflush_r+0x50>)
 80092de:	429c      	cmp	r4, r3
 80092e0:	bf08      	it	eq
 80092e2:	68ec      	ldreq	r4, [r5, #12]
 80092e4:	e7ec      	b.n	80092c0 <_fflush_r+0x1c>
 80092e6:	2000      	movs	r0, #0
 80092e8:	bd38      	pop	{r3, r4, r5, pc}
 80092ea:	bf00      	nop
 80092ec:	08009620 	.word	0x08009620
 80092f0:	08009640 	.word	0x08009640
 80092f4:	08009600 	.word	0x08009600

080092f8 <_lseek_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4c07      	ldr	r4, [pc, #28]	; (8009318 <_lseek_r+0x20>)
 80092fc:	4605      	mov	r5, r0
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	2200      	movs	r2, #0
 8009304:	6022      	str	r2, [r4, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f7f9 f98e 	bl	8002628 <_lseek>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_lseek_r+0x1e>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	b103      	cbz	r3, 8009316 <_lseek_r+0x1e>
 8009314:	602b      	str	r3, [r5, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	20002644 	.word	0x20002644

0800931c <__swhatbuf_r>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	460e      	mov	r6, r1
 8009320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009324:	2900      	cmp	r1, #0
 8009326:	b096      	sub	sp, #88	; 0x58
 8009328:	4614      	mov	r4, r2
 800932a:	461d      	mov	r5, r3
 800932c:	da07      	bge.n	800933e <__swhatbuf_r+0x22>
 800932e:	2300      	movs	r3, #0
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	89b3      	ldrh	r3, [r6, #12]
 8009334:	061a      	lsls	r2, r3, #24
 8009336:	d410      	bmi.n	800935a <__swhatbuf_r+0x3e>
 8009338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800933c:	e00e      	b.n	800935c <__swhatbuf_r+0x40>
 800933e:	466a      	mov	r2, sp
 8009340:	f000 f8c4 	bl	80094cc <_fstat_r>
 8009344:	2800      	cmp	r0, #0
 8009346:	dbf2      	blt.n	800932e <__swhatbuf_r+0x12>
 8009348:	9a01      	ldr	r2, [sp, #4]
 800934a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800934e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009352:	425a      	negs	r2, r3
 8009354:	415a      	adcs	r2, r3
 8009356:	602a      	str	r2, [r5, #0]
 8009358:	e7ee      	b.n	8009338 <__swhatbuf_r+0x1c>
 800935a:	2340      	movs	r3, #64	; 0x40
 800935c:	2000      	movs	r0, #0
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	b016      	add	sp, #88	; 0x58
 8009362:	bd70      	pop	{r4, r5, r6, pc}

08009364 <__smakebuf_r>:
 8009364:	898b      	ldrh	r3, [r1, #12]
 8009366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009368:	079d      	lsls	r5, r3, #30
 800936a:	4606      	mov	r6, r0
 800936c:	460c      	mov	r4, r1
 800936e:	d507      	bpl.n	8009380 <__smakebuf_r+0x1c>
 8009370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	2301      	movs	r3, #1
 800937a:	6163      	str	r3, [r4, #20]
 800937c:	b002      	add	sp, #8
 800937e:	bd70      	pop	{r4, r5, r6, pc}
 8009380:	ab01      	add	r3, sp, #4
 8009382:	466a      	mov	r2, sp
 8009384:	f7ff ffca 	bl	800931c <__swhatbuf_r>
 8009388:	9900      	ldr	r1, [sp, #0]
 800938a:	4605      	mov	r5, r0
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff fae1 	bl	8008954 <_malloc_r>
 8009392:	b948      	cbnz	r0, 80093a8 <__smakebuf_r+0x44>
 8009394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009398:	059a      	lsls	r2, r3, #22
 800939a:	d4ef      	bmi.n	800937c <__smakebuf_r+0x18>
 800939c:	f023 0303 	bic.w	r3, r3, #3
 80093a0:	f043 0302 	orr.w	r3, r3, #2
 80093a4:	81a3      	strh	r3, [r4, #12]
 80093a6:	e7e3      	b.n	8009370 <__smakebuf_r+0xc>
 80093a8:	4b0d      	ldr	r3, [pc, #52]	; (80093e0 <__smakebuf_r+0x7c>)
 80093aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	6020      	str	r0, [r4, #0]
 80093b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	9b00      	ldr	r3, [sp, #0]
 80093b8:	6163      	str	r3, [r4, #20]
 80093ba:	9b01      	ldr	r3, [sp, #4]
 80093bc:	6120      	str	r0, [r4, #16]
 80093be:	b15b      	cbz	r3, 80093d8 <__smakebuf_r+0x74>
 80093c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093c4:	4630      	mov	r0, r6
 80093c6:	f000 f893 	bl	80094f0 <_isatty_r>
 80093ca:	b128      	cbz	r0, 80093d8 <__smakebuf_r+0x74>
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	f023 0303 	bic.w	r3, r3, #3
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	81a3      	strh	r3, [r4, #12]
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	431d      	orrs	r5, r3
 80093dc:	81a5      	strh	r5, [r4, #12]
 80093de:	e7cd      	b.n	800937c <__smakebuf_r+0x18>
 80093e0:	08008159 	.word	0x08008159

080093e4 <__ascii_mbtowc>:
 80093e4:	b082      	sub	sp, #8
 80093e6:	b901      	cbnz	r1, 80093ea <__ascii_mbtowc+0x6>
 80093e8:	a901      	add	r1, sp, #4
 80093ea:	b142      	cbz	r2, 80093fe <__ascii_mbtowc+0x1a>
 80093ec:	b14b      	cbz	r3, 8009402 <__ascii_mbtowc+0x1e>
 80093ee:	7813      	ldrb	r3, [r2, #0]
 80093f0:	600b      	str	r3, [r1, #0]
 80093f2:	7812      	ldrb	r2, [r2, #0]
 80093f4:	1c10      	adds	r0, r2, #0
 80093f6:	bf18      	it	ne
 80093f8:	2001      	movne	r0, #1
 80093fa:	b002      	add	sp, #8
 80093fc:	4770      	bx	lr
 80093fe:	4610      	mov	r0, r2
 8009400:	e7fb      	b.n	80093fa <__ascii_mbtowc+0x16>
 8009402:	f06f 0001 	mvn.w	r0, #1
 8009406:	e7f8      	b.n	80093fa <__ascii_mbtowc+0x16>

08009408 <memmove>:
 8009408:	4288      	cmp	r0, r1
 800940a:	b510      	push	{r4, lr}
 800940c:	eb01 0302 	add.w	r3, r1, r2
 8009410:	d807      	bhi.n	8009422 <memmove+0x1a>
 8009412:	1e42      	subs	r2, r0, #1
 8009414:	4299      	cmp	r1, r3
 8009416:	d00a      	beq.n	800942e <memmove+0x26>
 8009418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009420:	e7f8      	b.n	8009414 <memmove+0xc>
 8009422:	4283      	cmp	r3, r0
 8009424:	d9f5      	bls.n	8009412 <memmove+0xa>
 8009426:	1881      	adds	r1, r0, r2
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	42d3      	cmn	r3, r2
 800942c:	d100      	bne.n	8009430 <memmove+0x28>
 800942e:	bd10      	pop	{r4, pc}
 8009430:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009434:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009438:	e7f7      	b.n	800942a <memmove+0x22>

0800943a <__malloc_lock>:
 800943a:	4770      	bx	lr

0800943c <__malloc_unlock>:
 800943c:	4770      	bx	lr

0800943e <_realloc_r>:
 800943e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009440:	4607      	mov	r7, r0
 8009442:	4614      	mov	r4, r2
 8009444:	460e      	mov	r6, r1
 8009446:	b921      	cbnz	r1, 8009452 <_realloc_r+0x14>
 8009448:	4611      	mov	r1, r2
 800944a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800944e:	f7ff ba81 	b.w	8008954 <_malloc_r>
 8009452:	b922      	cbnz	r2, 800945e <_realloc_r+0x20>
 8009454:	f7ff fa30 	bl	80088b8 <_free_r>
 8009458:	4625      	mov	r5, r4
 800945a:	4628      	mov	r0, r5
 800945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800945e:	f000 f857 	bl	8009510 <_malloc_usable_size_r>
 8009462:	42a0      	cmp	r0, r4
 8009464:	d20f      	bcs.n	8009486 <_realloc_r+0x48>
 8009466:	4621      	mov	r1, r4
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff fa73 	bl	8008954 <_malloc_r>
 800946e:	4605      	mov	r5, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d0f2      	beq.n	800945a <_realloc_r+0x1c>
 8009474:	4631      	mov	r1, r6
 8009476:	4622      	mov	r2, r4
 8009478:	f7fe ff2a 	bl	80082d0 <memcpy>
 800947c:	4631      	mov	r1, r6
 800947e:	4638      	mov	r0, r7
 8009480:	f7ff fa1a 	bl	80088b8 <_free_r>
 8009484:	e7e9      	b.n	800945a <_realloc_r+0x1c>
 8009486:	4635      	mov	r5, r6
 8009488:	e7e7      	b.n	800945a <_realloc_r+0x1c>
	...

0800948c <_read_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4c07      	ldr	r4, [pc, #28]	; (80094ac <_read_r+0x20>)
 8009490:	4605      	mov	r5, r0
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	6022      	str	r2, [r4, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7f9 f880 	bl	80025a0 <_read>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_read_r+0x1e>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_read_r+0x1e>
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20002644 	.word	0x20002644

080094b0 <__ascii_wctomb>:
 80094b0:	b149      	cbz	r1, 80094c6 <__ascii_wctomb+0x16>
 80094b2:	2aff      	cmp	r2, #255	; 0xff
 80094b4:	bf85      	ittet	hi
 80094b6:	238a      	movhi	r3, #138	; 0x8a
 80094b8:	6003      	strhi	r3, [r0, #0]
 80094ba:	700a      	strbls	r2, [r1, #0]
 80094bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80094c0:	bf98      	it	ls
 80094c2:	2001      	movls	r0, #1
 80094c4:	4770      	bx	lr
 80094c6:	4608      	mov	r0, r1
 80094c8:	4770      	bx	lr
	...

080094cc <_fstat_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4c07      	ldr	r4, [pc, #28]	; (80094ec <_fstat_r+0x20>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4605      	mov	r5, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	f7f9 f88a 	bl	80025f2 <_fstat>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d102      	bne.n	80094e8 <_fstat_r+0x1c>
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	b103      	cbz	r3, 80094e8 <_fstat_r+0x1c>
 80094e6:	602b      	str	r3, [r5, #0]
 80094e8:	bd38      	pop	{r3, r4, r5, pc}
 80094ea:	bf00      	nop
 80094ec:	20002644 	.word	0x20002644

080094f0 <_isatty_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4c06      	ldr	r4, [pc, #24]	; (800950c <_isatty_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4605      	mov	r5, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	f7f9 f889 	bl	8002612 <_isatty>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_isatty_r+0x1a>
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	b103      	cbz	r3, 800950a <_isatty_r+0x1a>
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20002644 	.word	0x20002644

08009510 <_malloc_usable_size_r>:
 8009510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009514:	1f18      	subs	r0, r3, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	bfbc      	itt	lt
 800951a:	580b      	ldrlt	r3, [r1, r0]
 800951c:	18c0      	addlt	r0, r0, r3
 800951e:	4770      	bx	lr

08009520 <_init>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr

0800952c <_fini>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr
