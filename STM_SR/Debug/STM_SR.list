
STM_SR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005320  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a4  080055a4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055ac  080055ac  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ac  080055ac  000155ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055b0  080055b0  000155b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080055b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002358  20000084  08005638  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023dc  08005638  000223dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e733  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d58  00000000  00000000  0003e7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00042540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00043be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4d0  00000000  00000000  000450a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cce5  00000000  00000000  00070578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff699  00000000  00000000  0008d25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018c8f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006570  00000000  00000000  0018c94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005498 	.word	0x08005498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005498 	.word	0x08005498

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b40      	ldr	r3, [pc, #256]	; (8000680 <MX_GPIO_Init+0x118>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a3f      	ldr	r2, [pc, #252]	; (8000680 <MX_GPIO_Init+0x118>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <MX_GPIO_Init+0x118>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <MX_GPIO_Init+0x118>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a39      	ldr	r2, [pc, #228]	; (8000680 <MX_GPIO_Init+0x118>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b37      	ldr	r3, [pc, #220]	; (8000680 <MX_GPIO_Init+0x118>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b34      	ldr	r3, [pc, #208]	; (8000680 <MX_GPIO_Init+0x118>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a33      	ldr	r2, [pc, #204]	; (8000680 <MX_GPIO_Init+0x118>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <MX_GPIO_Init+0x118>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <MX_GPIO_Init+0x118>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a2d      	ldr	r2, [pc, #180]	; (8000680 <MX_GPIO_Init+0x118>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <MX_GPIO_Init+0x118>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_DIODE_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2111      	movs	r1, #17
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f001 f94d 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_GPIO_Init+0x11c>)
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4822      	ldr	r0, [pc, #136]	; (8000688 <MX_GPIO_Init+0x120>)
 8000600:	f000 ff7e 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_DIODE_Pin;
 8000604:	2301      	movs	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_DIODE_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f000 ff6f 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 ff60 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_SENSOR_Pin;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 ff52 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HS711_out_Pin|HS711_SCK_Pin;
 800065c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_GPIO_Init+0x120>)
 8000672:	f000 ff45 	bl	8001500 <HAL_GPIO_Init>

}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	10210000 	.word	0x10210000
 8000688:	48000800 	.word	0x48000800

0800068c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_I2C1_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_I2C1_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_I2C1_Init+0x74>)
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <MX_I2C1_Init+0x7c>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_I2C1_Init+0x74>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_I2C1_Init+0x74>)
 80006c8:	f001 f8f4 	bl	80018b4 <HAL_I2C_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006d2:	f000 f96d 	bl	80009b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <MX_I2C1_Init+0x74>)
 80006da:	f001 f97a 	bl	80019d2 <HAL_I2CEx_ConfigAnalogFilter>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 f964 	bl	80009b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_I2C1_Init+0x74>)
 80006ec:	f001 f9bc 	bl	8001a68 <HAL_I2CEx_ConfigDigitalFilter>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f000 f95b 	bl	80009b0 <Error_Handler>
  }

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000b8 	.word	0x200000b8
 8000704:	40005400 	.word	0x40005400
 8000708:	10909cec 	.word	0x10909cec

0800070c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a17      	ldr	r2, [pc, #92]	; (8000788 <HAL_I2C_MspInit+0x7c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d127      	bne.n	800077e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_I2C_MspInit+0x80>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <HAL_I2C_MspInit+0x80>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_I2C_MspInit+0x80>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000746:	23c0      	movs	r3, #192	; 0xc0
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074e:	2301      	movs	r3, #1
 8000750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000756:	2304      	movs	r3, #4
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <HAL_I2C_MspInit+0x84>)
 8000762:	f000 fecd 	bl	8001500 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_I2C_MspInit+0x80>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_I2C_MspInit+0x80>)
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000770:	6593      	str	r3, [r2, #88]	; 0x58
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_I2C_MspInit+0x80>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40005400 	.word	0x40005400
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800079c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d013      	beq.n	80007d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00b      	beq.n	80007d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007bc:	e000      	b.n	80007c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f9      	beq.n	80007be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007d4:	687b      	ldr	r3, [r7, #4]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e009      	b.n	8000808 <_write+0x26>
		ITM_SendChar(*ptr++);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffc9 	bl	8000794 <ITM_SendChar>
	for(int i = 0; i < len; i++){
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf1      	blt.n	80007f4 <_write+0x12>
	}
	return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f000 fc7b 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 f83f 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f7ff fe9d 	bl	8000568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800082e:	f000 fb35 	bl	8000e9c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000832:	f7ff ff2b 	bl	800068c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000836:	f000 f907 	bl	8000a48 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800083a:	f000 faff 	bl	8000e3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800083e:	f000 fb5d 	bl	8000efc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000842:	f003 fddb 	bl	80043fc <MX_FATFS_Init>
  MX_RTC_Init();
 8000846:	f000 f8bb 	bl	80009c0 <MX_RTC_Init>
  MX_TIM6_Init();
 800084a:	f000 faa1 	bl	8000d90 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2101      	movs	r1, #1
 8000856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085a:	f001 f813 	bl	8001884 <HAL_GPIO_WritePin>
  while (1)
  {
	  if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
 800085e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 fff5 	bl	8001854 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d106      	bne.n	800087e <main+0x62>
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2101      	movs	r1, #1
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f001 f804 	bl	8001884 <HAL_GPIO_WritePin>
 800087c:	e005      	b.n	800088a <main+0x6e>
	  else
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2101      	movs	r1, #1
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f000 fffd 	bl	8001884 <HAL_GPIO_WritePin>
	  printf("printf dziala: %d\n", count++);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <main+0x88>)
 8000894:	f003 feaa 	bl	80045ec <iprintf>
	  HAL_Delay(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089c:	f000 fcba 	bl	8001214 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
 80008a0:	e7dd      	b.n	800085e <main+0x42>
 80008a2:	bf00      	nop
 80008a4:	080054b0 	.word	0x080054b0

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0b8      	sub	sp, #224	; 0xe0
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b2:	2244      	movs	r2, #68	; 0x44
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fe90 	bl	80045dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2288      	movs	r2, #136	; 0x88
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fe82 	bl	80045dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008d8:	230a      	movs	r3, #10
 80008da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e6:	2310      	movs	r3, #16
 80008e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000904:	230a      	movs	r3, #10
 8000906:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800090a:	2307      	movs	r3, #7
 800090c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000920:	4618      	mov	r0, r3
 8000922:	f001 f951 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800092c:	f000 f840 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800094e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000952:	2104      	movs	r1, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fd1d 	bl	8002394 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000960:	f000 f826 	bl	80009b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <SystemClock_Config+0x104>)
 8000966:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000968:	2300      	movs	r3, #0
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000970:	2300      	movs	r3, #0
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000974:	2300      	movs	r3, #0
 8000976:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4618      	mov	r0, r3
 8000984:	f001 ff0c 	bl	80027a0 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800098e:	f000 f80f 	bl	80009b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000996:	f001 f8c1 	bl	8001b1c <HAL_PWREx_ControlVoltageScaling>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80009a0:	f000 f806 	bl	80009b0 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	37e0      	adds	r7, #224	; 0xe0
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	00020047 	.word	0x00020047

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_RTC_Init+0x48>)
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <MX_RTC_Init+0x4c>)
 80009c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_RTC_Init+0x48>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_RTC_Init+0x48>)
 80009d2:	227f      	movs	r2, #127	; 0x7f
 80009d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_RTC_Init+0x48>)
 80009d8:	22ff      	movs	r2, #255	; 0xff
 80009da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_RTC_Init+0x48>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_RTC_Init+0x48>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_RTC_Init+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_RTC_Init+0x48>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_RTC_Init+0x48>)
 80009f6:	f002 fb8f 	bl	8003118 <HAL_RTC_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a00:	f7ff ffd6 	bl	80009b0 <Error_Handler>
  }

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000104 	.word	0x20000104
 8000a0c:	40002800 	.word	0x40002800

08000a10 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_RTC_MspInit+0x30>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d107      	bne.n	8000a32 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_RTC_MspInit+0x34>)
 8000a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_RTC_MspInit+0x34>)
 8000a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40002800 	.word	0x40002800
 8000a44:	40021000 	.word	0x40021000

08000a48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <MX_SPI1_Init+0x78>)
 8000a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a96:	2207      	movs	r2, #7
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_SPI1_Init+0x74>)
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_SPI1_Init+0x74>)
 8000aa8:	f002 fc48 	bl	800333c <HAL_SPI_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ab2:	f7ff ff7d 	bl	80009b0 <Error_Handler>
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000128 	.word	0x20000128
 8000ac0:	40013000 	.word	0x40013000

08000ac4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_SPI_MspInit+0x7c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d128      	bne.n	8000b38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b16:	23e0      	movs	r3, #224	; 0xe0
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b26:	2305      	movs	r3, #5
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fce4 	bl	8001500 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40013000 	.word	0x40013000
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6593      	str	r3, [r2, #88]	; 0x58
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 faf6 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <USART1_IRQHandler+0x10>)
 8000bf2:	f002 fe63 	bl	80038bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000258 	.word	0x20000258

08000c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <USART2_IRQHandler+0x10>)
 8000c06:	f002 fe59 	bl	80038bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200002d8 	.word	0x200002d8

08000c14 <_read>:
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <_read+0x28>
 8000c26:	f3af 8000 	nop.w
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf0      	blt.n	8000c26 <_read+0x12>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_close>:
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_fstat>:
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_isatty>:
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_lseek>:
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <_sbrk>:
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <_sbrk+0x5c>)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <_sbrk+0x60>)
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <_sbrk+0x22>
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <_sbrk+0x64>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <_sbrk+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d207      	bcs.n	8000cf8 <_sbrk+0x40>
 8000ce8:	f003 fc4e 	bl	8004588 <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x54>
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20018000 	.word	0x20018000
 8000d18:	00000400 	.word	0x00000400
 8000d1c:	200000a0 	.word	0x200000a0
 8000d20:	200023e0 	.word	0x200023e0

08000d24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <SystemInit+0x64>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <SystemInit+0x64>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <SystemInit+0x68>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <SystemInit+0x68>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <SystemInit+0x68>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <SystemInit+0x68>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <SystemInit+0x68>)
 8000d50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <SystemInit+0x68>)
 8000d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <SystemInit+0x68>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <SystemInit+0x68>)
 8000d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <SystemInit+0x68>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SystemInit+0x64>)
 8000d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	40021000 	.word	0x40021000

08000d90 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_TIM6_Init+0x64>)
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <MX_TIM6_Init+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_TIM6_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_TIM6_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_TIM6_Init+0x64>)
 8000db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_TIM6_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_TIM6_Init+0x64>)
 8000dc2:	f002 fb5e 	bl	8003482 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000dcc:	f7ff fdf0 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_TIM6_Init+0x64>)
 8000dde:	f002 fc41 	bl	8003664 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000de8:	f7ff fde2 	bl	80009b0 <Error_Handler>
  }

}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000018c 	.word	0x2000018c
 8000df8:	40001000 	.word	0x40001000

08000dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_TIM_Base_MspInit+0x38>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10b      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40001000 	.word	0x40001000
 8000e38:	40021000 	.word	0x40021000

08000e3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <MX_USART1_UART_Init+0x5c>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_USART1_UART_Init+0x58>)
 8000e80:	f002 fcc6 	bl	8003810 <HAL_HalfDuplex_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e8a:	f7ff fd91 	bl	80009b0 <Error_Handler>
  }

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000258 	.word	0x20000258
 8000e98:	40013800 	.word	0x40013800

08000e9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <MX_USART2_UART_Init+0x5c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART2_UART_Init+0x58>)
 8000ee0:	f002 fc48 	bl	8003774 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eea:	f7ff fd61 	bl	80009b0 <Error_Handler>
  }

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200002d8 	.word	0x200002d8
 8000ef8:	40004400 	.word	0x40004400

08000efc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f02:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <MX_USART3_UART_Init+0x5c>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_USART3_UART_Init+0x58>)
 8000f40:	f002 fc18 	bl	8003774 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f7ff fd31 	bl	80009b0 <Error_Handler>
  }

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001d8 	.word	0x200001d8
 8000f58:	40004800 	.word	0x40004800

08000f5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <HAL_UART_MspInit+0x158>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d132      	bne.n	8000fe4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8a:	4b4b      	ldr	r3, [pc, #300]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	623b      	str	r3, [r7, #32]
 8000f94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DS18B20_ONE_WIRE_Pin;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DS18B20_ONE_WIRE_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f000 fa97 	bl	8001500 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2025      	movs	r0, #37	; 0x25
 8000fd8:	f000 fa1b 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fdc:	2025      	movs	r0, #37	; 0x25
 8000fde:	f000 fa34 	bl	800144a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fe2:	e063      	b.n	80010ac <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a34      	ldr	r2, [pc, #208]	; (80010bc <HAL_UART_MspInit+0x160>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d131      	bne.n	8001052 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 800101e:	230c      	movs	r3, #12
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102e:	2307      	movs	r3, #7
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f000 fa60 	bl	8001500 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2026      	movs	r0, #38	; 0x26
 8001046:	f000 f9e4 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800104a:	2026      	movs	r0, #38	; 0x26
 800104c:	f000 f9fd 	bl	800144a <HAL_NVIC_EnableIRQ>
}
 8001050:	e02c      	b.n	80010ac <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART3)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <HAL_UART_MspInit+0x164>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d127      	bne.n	80010ac <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8001062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001066:	6593      	str	r3, [r2, #88]	; 0x58
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_UART_MspInit+0x15c>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HC_05_TX_Pin|HC_05_RX_Pin;
 800108c:	2330      	movs	r3, #48	; 0x30
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800109c:	2307      	movs	r3, #7
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <HAL_UART_MspInit+0x168>)
 80010a8:	f000 fa2a 	bl	8001500 <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40004400 	.word	0x40004400
 80010c0:	40004800 	.word	0x40004800
 80010c4:	48000800 	.word	0x48000800

080010c8 <Reset_Handler>:
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopForever+0x2>
 80010cc:	f7ff fe2a 	bl	8000d24 <SystemInit>
 80010d0:	2100      	movs	r1, #0
 80010d2:	e003      	b.n	80010dc <LoopCopyDataInit>

080010d4 <CopyDataInit>:
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <LoopForever+0x6>)
 80010d6:	585b      	ldr	r3, [r3, r1]
 80010d8:	5043      	str	r3, [r0, r1]
 80010da:	3104      	adds	r1, #4

080010dc <LoopCopyDataInit>:
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <LoopForever+0xa>)
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <LoopForever+0xe>)
 80010e0:	1842      	adds	r2, r0, r1
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d3f6      	bcc.n	80010d4 <CopyDataInit>
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopForever+0x12>)
 80010e8:	e002      	b.n	80010f0 <LoopFillZerobss>

080010ea <FillZerobss>:
 80010ea:	2300      	movs	r3, #0
 80010ec:	f842 3b04 	str.w	r3, [r2], #4

080010f0 <LoopFillZerobss>:
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LoopForever+0x16>)
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3f9      	bcc.n	80010ea <FillZerobss>
 80010f6:	f003 fa4d 	bl	8004594 <__libc_init_array>
 80010fa:	f7ff fb8f 	bl	800081c <main>

080010fe <LoopForever>:
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
 8001100:	20018000 	.word	0x20018000
 8001104:	080055b4 	.word	0x080055b4
 8001108:	20000000 	.word	0x20000000
 800110c:	20000084 	.word	0x20000084
 8001110:	20000084 	.word	0x20000084
 8001114:	200023dc 	.word	0x200023dc

08001118 <ADC1_2_IRQHandler>:
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>
	...

0800111c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_Init+0x3c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_Init+0x3c>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f962 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001138:	2000      	movs	r0, #0
 800113a:	f000 f80f 	bl	800115c <HAL_InitTick>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	e001      	b.n	800114e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800114a:	f7ff fcfd 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800114e:	79fb      	ldrb	r3, [r7, #7]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40022000 	.word	0x40022000

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_InitTick+0x6c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d023      	beq.n	80011b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_InitTick+0x70>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f96d 	bl	8001466 <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d809      	bhi.n	80011ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f937 	bl	8001412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_InitTick+0x74>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e007      	b.n	80011bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e001      	b.n	80011bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000358 	.word	0x20000358

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000358 	.word	0x20000358

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff3e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff8e 	bl	8001350 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d005      	beq.n	80014a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2204      	movs	r2, #4
 800149a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e029      	b.n	80014f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 020e 	bic.w	r2, r2, #14
 80014b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 021c 	and.w	r2, r3, #28
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	4798      	blx	r3
    }
  }
  return status;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	e17f      	b.n	8001810 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8171 	beq.w	800180a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d00b      	beq.n	8001548 <HAL_GPIO_Init+0x48>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800153c:	2b11      	cmp	r3, #17
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b12      	cmp	r3, #18
 8001546:	d130      	bne.n	80015aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157e:	2201      	movs	r2, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f003 0201 	and.w	r2, r3, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d118      	bne.n	80015e8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x128>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b12      	cmp	r3, #18
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	6939      	ldr	r1, [r7, #16]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80ac 	beq.w	800180a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <HAL_GPIO_Init+0x330>)
 80016b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b6:	4a5e      	ldr	r2, [pc, #376]	; (8001830 <HAL_GPIO_Init+0x330>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6613      	str	r3, [r2, #96]	; 0x60
 80016be:	4b5c      	ldr	r3, [pc, #368]	; (8001830 <HAL_GPIO_Init+0x330>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016ca:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HAL_GPIO_Init+0x334>)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x242>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4f      	ldr	r2, [pc, #316]	; (8001838 <HAL_GPIO_Init+0x338>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x23e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_GPIO_Init+0x33c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x23a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4d      	ldr	r2, [pc, #308]	; (8001840 <HAL_GPIO_Init+0x340>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x236>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <HAL_GPIO_Init+0x344>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x232>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4b      	ldr	r2, [pc, #300]	; (8001848 <HAL_GPIO_Init+0x348>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x22e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4a      	ldr	r2, [pc, #296]	; (800184c <HAL_GPIO_Init+0x34c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x22a>
 8001726:	2306      	movs	r3, #6
 8001728:	e00c      	b.n	8001744 <HAL_GPIO_Init+0x244>
 800172a:	2307      	movs	r3, #7
 800172c:	e00a      	b.n	8001744 <HAL_GPIO_Init+0x244>
 800172e:	2305      	movs	r3, #5
 8001730:	e008      	b.n	8001744 <HAL_GPIO_Init+0x244>
 8001732:	2304      	movs	r3, #4
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x244>
 8001736:	2303      	movs	r3, #3
 8001738:	e004      	b.n	8001744 <HAL_GPIO_Init+0x244>
 800173a:	2302      	movs	r3, #2
 800173c:	e002      	b.n	8001744 <HAL_GPIO_Init+0x244>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_GPIO_Init+0x244>
 8001742:	2300      	movs	r3, #0
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	f002 0203 	and.w	r2, r2, #3
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	4093      	lsls	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001754:	4937      	ldr	r1, [pc, #220]	; (8001834 <HAL_GPIO_Init+0x334>)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_GPIO_Init+0x350>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001786:	4a32      	ldr	r2, [pc, #200]	; (8001850 <HAL_GPIO_Init+0x350>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_GPIO_Init+0x350>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_GPIO_Init+0x350>)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_GPIO_Init+0x350>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_GPIO_Init+0x350>)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_GPIO_Init+0x350>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_GPIO_Init+0x350>)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	f47f ae78 	bne.w	8001510 <HAL_GPIO_Init+0x10>
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	48000400 	.word	0x48000400
 800183c:	48000800 	.word	0x48000800
 8001840:	48000c00 	.word	0x48000c00
 8001844:	48001000 	.word	0x48001000
 8001848:	48001400 	.word	0x48001400
 800184c:	48001800 	.word	0x48001800
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e001      	b.n	8001876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e081      	b.n	80019ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe ff16 	bl	800070c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2224      	movs	r2, #36	; 0x24
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001904:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001914:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	e006      	b.n	800193c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800193a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d104      	bne.n	800194e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800194c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800195c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001960:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001970:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	ea42 0103 	orr.w	r1, r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	021a      	lsls	r2, r3, #8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69d9      	ldr	r1, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1a      	ldr	r2, [r3, #32]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2220      	movs	r2, #32
 80019b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d138      	bne.n	8001a5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e032      	b.n	8001a5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2224      	movs	r2, #36	; 0x24
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
  }
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d139      	bne.n	8001af2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e033      	b.n	8001af4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40007000 	.word	0x40007000

08001b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2a:	d130      	bne.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b38:	d038      	beq.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2232      	movs	r2, #50	; 0x32
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0c9b      	lsrs	r3, r3, #18
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b60:	e002      	b.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b74:	d102      	bne.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f2      	bne.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b88:	d110      	bne.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e00f      	b.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9a:	d007      	beq.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001baa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e3d4      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bda:	4ba1      	ldr	r3, [pc, #644]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be4:	4b9e      	ldr	r3, [pc, #632]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80e4 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_RCC_OscConfig+0x4a>
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	f040 808b 	bne.w	8001d20 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	f040 8087 	bne.w	8001d20 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c12:	4b93      	ldr	r3, [pc, #588]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x62>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e3ac      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1a      	ldr	r2, [r3, #32]
 8001c2e:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d004      	beq.n	8001c44 <HAL_RCC_OscConfig+0x7c>
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c42:	e005      	b.n	8001c50 <HAL_RCC_OscConfig+0x88>
 8001c44:	4b86      	ldr	r3, [pc, #536]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d223      	bcs.n	8001c9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fd41 	bl	80026e0 <RCC_SetFlashLatencyFromMSIRange>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e38d      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c68:	4b7d      	ldr	r3, [pc, #500]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a7c      	ldr	r2, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4977      	ldr	r1, [pc, #476]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c86:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	4972      	ldr	r1, [pc, #456]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
 8001c9a:	e025      	b.n	8001ce8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6f      	ldr	r2, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	496a      	ldr	r1, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cba:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4965      	ldr	r1, [pc, #404]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fd01 	bl	80026e0 <RCC_SetFlashLatencyFromMSIRange>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e34d      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce8:	f000 fc36 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b5c      	ldr	r3, [pc, #368]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	495a      	ldr	r1, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x29c>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_OscConfig+0x2a0>)
 8001d06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x2a4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fa25 	bl	800115c <HAL_InitTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d052      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	e331      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d032      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa62 	bl	80011fc <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fa5e 	bl	80011fc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e31a      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5a:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a40      	ldr	r2, [pc, #256]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b3e      	ldr	r3, [pc, #248]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	493b      	ldr	r1, [pc, #236]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	4936      	ldr	r1, [pc, #216]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e01a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d8e:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a33      	ldr	r2, [pc, #204]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa2f 	bl	80011fc <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da2:	f7ff fa2b 	bl	80011fc <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e2e7      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x1da>
 8001dc0:	e000      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d074      	beq.n	8001eba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x21a>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d10e      	bne.n	8001dfa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d10b      	bne.n	8001dfa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d064      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d160      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e2c4      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x24a>
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e01d      	b.n	8001e4e <HAL_RCC_OscConfig+0x286>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x26e>
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e00b      	b.n	8001e4e <HAL_RCC_OscConfig+0x286>
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7ff f9d1 	bl	80011fc <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5c:	e011      	b.n	8001e82 <HAL_RCC_OscConfig+0x2ba>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	080054c4 	.word	0x080054c4
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff f9c4 	bl	80011fc <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e280      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	4baf      	ldr	r3, [pc, #700]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x2a8>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f9b4 	bl	80011fc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f9b0 	bl	80011fc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e26c      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	4ba5      	ldr	r3, [pc, #660]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2d0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d060      	beq.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x310>
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d119      	bne.n	8001f06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d116      	bne.n	8001f06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed8:	4b99      	ldr	r3, [pc, #612]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x328>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e249      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	4b93      	ldr	r3, [pc, #588]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	4990      	ldr	r1, [pc, #576]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f04:	e040      	b.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d023      	beq.n	8001f56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0e:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a8b      	ldr	r2, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f96f 	bl	80011fc <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f22:	f7ff f96b 	bl	80011fc <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e227      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	497c      	ldr	r1, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e018      	b.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b7a      	ldr	r3, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a79      	ldr	r2, [pc, #484]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff f94b 	bl	80011fc <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f947 	bl	80011fc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e203      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f7c:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d03c      	beq.n	800200e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	4a67      	ldr	r2, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7ff f926 	bl	80011fc <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7ff f922 	bl	80011fc <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1de      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc6:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x3ec>
 8001fd4:	e01b      	b.n	800200e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe6:	f7ff f909 	bl	80011fc <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fee:	f7ff f905 	bl	80011fc <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1c1      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ef      	bne.n	8001fee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80a6 	beq.w	8002168 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002020:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a43      	ldr	r2, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002044:	2301      	movs	r3, #1
 8002046:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_OscConfig+0x57c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d118      	bne.n	8002086 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x57c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a3a      	ldr	r2, [pc, #232]	; (8002144 <HAL_RCC_OscConfig+0x57c>)
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002060:	f7ff f8cc 	bl	80011fc <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002068:	f7ff f8c8 	bl	80011fc <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e184      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCC_OscConfig+0x57c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d108      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4d8>
 800208e:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800209e:	e024      	b.n	80020ea <HAL_RCC_OscConfig+0x522>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d110      	bne.n	80020ca <HAL_RCC_OscConfig+0x502>
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a24      	ldr	r2, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a20      	ldr	r2, [pc, #128]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c8:	e00f      	b.n	80020ea <HAL_RCC_OscConfig+0x522>
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	4a17      	ldr	r2, [pc, #92]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020e2:	f023 0304 	bic.w	r3, r3, #4
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff f883 	bl	80011fc <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff f87f 	bl	80011fc <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e139      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ed      	beq.n	80020fa <HAL_RCC_OscConfig+0x532>
 800211e:	e01a      	b.n	8002156 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7ff f86c 	bl	80011fc <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002126:	e00f      	b.n	8002148 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff f868 	bl	80011fc <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d906      	bls.n	8002148 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e122      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002148:	4b90      	ldr	r3, [pc, #576]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1e8      	bne.n	8002128 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002156:	7ffb      	ldrb	r3, [r7, #31]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215c:	4b8b      	ldr	r3, [pc, #556]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a8a      	ldr	r2, [pc, #552]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8108 	beq.w	8002382 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	2b02      	cmp	r3, #2
 8002178:	f040 80d0 	bne.w	800231c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800217c:	4b83      	ldr	r3, [pc, #524]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	429a      	cmp	r2, r3
 800218e:	d130      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	3b01      	subs	r3, #1
 800219c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d127      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d11f      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021bc:	2a07      	cmp	r2, #7
 80021be:	bf14      	ite	ne
 80021c0:	2201      	movne	r2, #1
 80021c2:	2200      	moveq	r2, #0
 80021c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d113      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d06e      	beq.n	80022d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2b0c      	cmp	r3, #12
 80021f6:	d069      	beq.n	80022cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021f8:	4b64      	ldr	r3, [pc, #400]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b7      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002214:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5c      	ldr	r2, [pc, #368]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800221a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002220:	f7fe ffec 	bl	80011fc <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe ffe8 	bl	80011fc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e0a4      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223a:	4b54      	ldr	r3, [pc, #336]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002246:	4b51      	ldr	r3, [pc, #324]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	4b51      	ldr	r3, [pc, #324]	; (8002390 <HAL_RCC_OscConfig+0x7c8>)
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002256:	3a01      	subs	r2, #1
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	4311      	orrs	r1, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002260:	0212      	lsls	r2, r2, #8
 8002262:	4311      	orrs	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002268:	0852      	lsrs	r2, r2, #1
 800226a:	3a01      	subs	r2, #1
 800226c:	0552      	lsls	r2, r2, #21
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002274:	0852      	lsrs	r2, r2, #1
 8002276:	3a01      	subs	r2, #1
 8002278:	0652      	lsls	r2, r2, #25
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002280:	0912      	lsrs	r2, r2, #4
 8002282:	0452      	lsls	r2, r2, #17
 8002284:	430a      	orrs	r2, r1
 8002286:	4941      	ldr	r1, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3e      	ldr	r2, [pc, #248]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002296:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002298:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a4:	f7fe ffaa 	bl	80011fc <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe ffa6 	bl	80011fc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e062      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ca:	e05a      	b.n	8002382 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e059      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d152      	bne.n	8002382 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2a      	ldr	r2, [pc, #168]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022f4:	f7fe ff82 	bl	80011fc <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe ff7e 	bl	80011fc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e03a      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x734>
 800231a:	e032      	b.n	8002382 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d02d      	beq.n	800237e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800232c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002340:	f023 0303 	bic.w	r3, r3, #3
 8002344:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 800234c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002354:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe ff51 	bl	80011fc <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe ff4d 	bl	80011fc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e009      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_RCC_OscConfig+0x7c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x796>
 800237c:	e001      	b.n	8002382 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	f99d808c 	.word	0xf99d808c

08002394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0c8      	b.n	800253a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b66      	ldr	r3, [pc, #408]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d910      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4961      	ldr	r1, [pc, #388]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0b0      	b.n	800253a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d04c      	beq.n	800247e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ec:	4b56      	ldr	r3, [pc, #344]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d121      	bne.n	800243c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e09e      	b.n	800253a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d107      	bne.n	8002414 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d115      	bne.n	800243c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e092      	b.n	800253a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241c:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e086      	b.n	800253a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242c:	4b46      	ldr	r3, [pc, #280]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e07e      	b.n	800253a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800243c:	4b42      	ldr	r3, [pc, #264]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f023 0203 	bic.w	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	493f      	ldr	r1, [pc, #252]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244e:	f7fe fed5 	bl	80011fc <HAL_GetTick>
 8002452:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002454:	e00a      	b.n	800246c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002456:	f7fe fed1 	bl	80011fc <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e066      	b.n	800253a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 020c 	and.w	r2, r3, #12
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	429a      	cmp	r2, r3
 800247c:	d1eb      	bne.n	8002456 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	492c      	ldr	r1, [pc, #176]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d210      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4924      	ldr	r1, [pc, #144]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e036      	b.n	800253a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4918      	ldr	r1, [pc, #96]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4910      	ldr	r1, [pc, #64]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800250a:	f000 f825 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_RCC_ClockConfig+0x1b4>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	490c      	ldr	r1, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fe14 	bl	800115c <HAL_InitTick>
 8002534:	4603      	mov	r3, r0
 8002536:	72fb      	strb	r3, [r7, #11]

  return status;
 8002538:	7afb      	ldrb	r3, [r7, #11]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40022000 	.word	0x40022000
 8002548:	40021000 	.word	0x40021000
 800254c:	080054c4 	.word	0x080054c4
 8002550:	20000000 	.word	0x20000000
 8002554:	20000004 	.word	0x20000004

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002566:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002570:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x34>
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d121      	bne.n	80025ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d11e      	bne.n	80025ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002598:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 800259a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e005      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025b4:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10d      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d102      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_RCC_GetSysClockFreq+0x110>)
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	e004      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_RCC_GetSysClockFreq+0x114>)
 80025de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d134      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0xa6>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d003      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0xac>
 80025fc:	e005      	b.n	800260a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_RCC_GetSysClockFreq+0x110>)
 8002600:	617b      	str	r3, [r7, #20]
      break;
 8002602:	e005      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_RCC_GetSysClockFreq+0x114>)
 8002606:	617b      	str	r3, [r7, #20]
      break;
 8002608:	e002      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	617b      	str	r3, [r7, #20]
      break;
 800260e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002610:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	3301      	adds	r3, #1
 800261c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	fb02 f203 	mul.w	r2, r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_RCC_GetSysClockFreq+0x108>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	0e5b      	lsrs	r3, r3, #25
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	3301      	adds	r3, #1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002650:	69bb      	ldr	r3, [r7, #24]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	080054dc 	.word	0x080054dc
 8002668:	00f42400 	.word	0x00f42400
 800266c:	007a1200 	.word	0x007a1200

08002670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_RCC_GetHCLKFreq+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000000 	.word	0x20000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800268c:	f7ff fff0 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	080054d4 	.word	0x080054d4

080026b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026b8:	f7ff ffda 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0adb      	lsrs	r3, r3, #11
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4904      	ldr	r1, [pc, #16]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	080054d4 	.word	0x080054d4

080026e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026f8:	f7ff fa02 	bl	8001b00 <HAL_PWREx_GetVoltageRange>
 80026fc:	6178      	str	r0, [r7, #20]
 80026fe:	e014      	b.n	800272a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	4a24      	ldr	r2, [pc, #144]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270a:	6593      	str	r3, [r2, #88]	; 0x58
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002718:	f7ff f9f2 	bl	8001b00 <HAL_PWREx_GetVoltageRange>
 800271c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002728:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002730:	d10b      	bne.n	800274a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b80      	cmp	r3, #128	; 0x80
 8002736:	d919      	bls.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2ba0      	cmp	r3, #160	; 0xa0
 800273c:	d902      	bls.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800273e:	2302      	movs	r3, #2
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	e013      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002744:	2301      	movs	r3, #1
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	e010      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d902      	bls.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002750:	2303      	movs	r3, #3
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	e00a      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d102      	bne.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800275c:	2302      	movs	r3, #2
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e004      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b70      	cmp	r3, #112	; 0x70
 8002766:	d101      	bne.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002768:	2301      	movs	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 0207 	bic.w	r2, r3, #7
 8002774:	4909      	ldr	r1, [pc, #36]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	40022000 	.word	0x40022000

080027a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027a8:	2300      	movs	r3, #0
 80027aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ac:	2300      	movs	r3, #0
 80027ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d041      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027c4:	d02a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ca:	d824      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027d6:	d81e      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e0:	d010      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027e2:	e018      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027e4:	4b86      	ldr	r3, [pc, #536]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a85      	ldr	r2, [pc, #532]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f0:	e015      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fabb 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002802:	e00c      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3320      	adds	r3, #32
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fba6 	bl	8002f5c <RCCEx_PLLSAI2_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002814:	e003      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	74fb      	strb	r3, [r7, #19]
      break;
 800281a:	e000      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800281c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002824:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002832:	4973      	ldr	r1, [pc, #460]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800283a:	e001      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d041      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002850:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002854:	d02a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002856:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800285a:	d824      	bhi.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800285c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002860:	d008      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002866:	d81e      	bhi.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002870:	d010      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002872:	e018      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002874:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a61      	ldr	r2, [pc, #388]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002880:	e015      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fa73 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002892:	e00c      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3320      	adds	r3, #32
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fb5e 	bl	8002f5c <RCCEx_PLLSAI2_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028a4:	e003      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	74fb      	strb	r3, [r7, #19]
      break;
 80028aa:	e000      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028b4:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c2:	494f      	ldr	r1, [pc, #316]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ca:	e001      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a0 	beq.w	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028f2:	2300      	movs	r3, #0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002902:	6593      	str	r3, [r2, #88]	; 0x58
 8002904:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002910:	2301      	movs	r3, #1
 8002912:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002914:	4b3b      	ldr	r3, [pc, #236]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3a      	ldr	r2, [pc, #232]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002920:	f7fe fc6c 	bl	80011fc <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002926:	e009      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002928:	f7fe fc68 	bl	80011fc <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d902      	bls.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	74fb      	strb	r3, [r7, #19]
        break;
 800293a:	e005      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800293c:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ef      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d15c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002958:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01f      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	d019      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800296c:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002976:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fc27 	bl	80011fc <HAL_GetTick>
 80029ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b0:	e00b      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7fe fc23 	bl	80011fc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d902      	bls.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	74fb      	strb	r3, [r7, #19]
            break;
 80029c8:	e006      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ec      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ee:	4904      	ldr	r1, [pc, #16]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029f6:	e009      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	74bb      	strb	r3, [r7, #18]
 80029fc:	e006      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0c:	7c7b      	ldrb	r3, [r7, #17]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d105      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a12:	4b9e      	ldr	r3, [pc, #632]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	4a9d      	ldr	r2, [pc, #628]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a2a:	4b98      	ldr	r3, [pc, #608]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f023 0203 	bic.w	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	4994      	ldr	r1, [pc, #592]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a4c:	4b8f      	ldr	r3, [pc, #572]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 020c 	bic.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	498c      	ldr	r1, [pc, #560]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a6e:	4b87      	ldr	r3, [pc, #540]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	4983      	ldr	r1, [pc, #524]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a90:	4b7e      	ldr	r3, [pc, #504]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	497b      	ldr	r1, [pc, #492]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ab2:	4b76      	ldr	r3, [pc, #472]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac0:	4972      	ldr	r1, [pc, #456]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ad4:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	496a      	ldr	r1, [pc, #424]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002af6:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	4961      	ldr	r1, [pc, #388]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b18:	4b5c      	ldr	r3, [pc, #368]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	4959      	ldr	r1, [pc, #356]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b48:	4950      	ldr	r1, [pc, #320]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	4948      	ldr	r1, [pc, #288]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b7e:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	493f      	ldr	r1, [pc, #252]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d028      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bae:	4937      	ldr	r1, [pc, #220]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bbe:	d106      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc0:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a31      	ldr	r2, [pc, #196]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bca:	60d3      	str	r3, [r2, #12]
 8002bcc:	e011      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f8c8 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d028      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bfe:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	491f      	ldr	r1, [pc, #124]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c28:	60d3      	str	r3, [r2, #12]
 8002c2a:	e011      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f899 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6a:	4908      	ldr	r1, [pc, #32]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a02      	ldr	r2, [pc, #8]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c86:	60d3      	str	r3, [r2, #12]
 8002c88:	e014      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f867 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d02f      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cce:	4928      	ldr	r1, [pc, #160]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cde:	d10d      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f844 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d014      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	74bb      	strb	r3, [r7, #18]
 8002cfa:	e011      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3320      	adds	r3, #32
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f925 	bl	8002f5c <RCCEx_PLLSAI2_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3a:	490d      	ldr	r1, [pc, #52]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d5e:	4904      	ldr	r1, [pc, #16]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d66:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000

08002d74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d82:	4b75      	ldr	r3, [pc, #468]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d018      	beq.n	8002dc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d8e:	4b72      	ldr	r3, [pc, #456]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0203 	and.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d10d      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
       ||
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002da6:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
       ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d047      	beq.n	8002e4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e044      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d018      	beq.n	8002dfa <RCCEx_PLLSAI1_Config+0x86>
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d825      	bhi.n	8002e18 <RCCEx_PLLSAI1_Config+0xa4>
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d002      	beq.n	8002dd6 <RCCEx_PLLSAI1_Config+0x62>
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d009      	beq.n	8002de8 <RCCEx_PLLSAI1_Config+0x74>
 8002dd4:	e020      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dd6:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11d      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de6:	e01a      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de8:	4b5b      	ldr	r3, [pc, #364]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d116      	bne.n	8002e22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df8:	e013      	b.n	8002e22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dfa:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e06:	4b54      	ldr	r3, [pc, #336]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e16:	e006      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1c:	e004      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	430b      	orrs	r3, r1
 8002e44:	4944      	ldr	r1, [pc, #272]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d17d      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e50:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a40      	ldr	r2, [pc, #256]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7fe f9ce 	bl	80011fc <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e62:	e009      	b.n	8002e78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e64:	f7fe f9ca 	bl	80011fc <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	73fb      	strb	r3, [r7, #15]
        break;
 8002e76:	e005      	b.n	8002e84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e78:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ef      	bne.n	8002e64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d160      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e90:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6892      	ldr	r2, [r2, #8]
 8002ea0:	0211      	lsls	r1, r2, #8
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68d2      	ldr	r2, [r2, #12]
 8002ea6:	0912      	lsrs	r2, r2, #4
 8002ea8:	0452      	lsls	r2, r2, #17
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	492a      	ldr	r1, [pc, #168]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	610b      	str	r3, [r1, #16]
 8002eb2:	e027      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d112      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eba:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ec2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	0211      	lsls	r1, r2, #8
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6912      	ldr	r2, [r2, #16]
 8002ed0:	0852      	lsrs	r2, r2, #1
 8002ed2:	3a01      	subs	r2, #1
 8002ed4:	0552      	lsls	r2, r2, #21
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	491f      	ldr	r1, [pc, #124]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	610b      	str	r3, [r1, #16]
 8002ede:	e011      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ee8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6892      	ldr	r2, [r2, #8]
 8002ef0:	0211      	lsls	r1, r2, #8
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6952      	ldr	r2, [r2, #20]
 8002ef6:	0852      	lsrs	r2, r2, #1
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	0652      	lsls	r2, r2, #25
 8002efc:	430a      	orrs	r2, r1
 8002efe:	4916      	ldr	r1, [pc, #88]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7fe f974 	bl	80011fc <HAL_GetTick>
 8002f14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f16:	e009      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f18:	f7fe f970 	bl	80011fc <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d902      	bls.n	8002f2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	73fb      	strb	r3, [r7, #15]
          break;
 8002f2a:	e005      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ef      	beq.n	8002f18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	4904      	ldr	r1, [pc, #16]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000

08002f5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f6a:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d018      	beq.n	8002fa8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f76:	4b67      	ldr	r3, [pc, #412]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0203 	and.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d10d      	bne.n	8002fa2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
       ||
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f8e:	4b61      	ldr	r3, [pc, #388]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d047      	beq.n	8003032 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e044      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d018      	beq.n	8002fe2 <RCCEx_PLLSAI2_Config+0x86>
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d825      	bhi.n	8003000 <RCCEx_PLLSAI2_Config+0xa4>
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d002      	beq.n	8002fbe <RCCEx_PLLSAI2_Config+0x62>
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d009      	beq.n	8002fd0 <RCCEx_PLLSAI2_Config+0x74>
 8002fbc:	e020      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fbe:	4b55      	ldr	r3, [pc, #340]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11d      	bne.n	8003006 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fce:	e01a      	b.n	8003006 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d116      	bne.n	800300a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe0:	e013      	b.n	800300a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fee:	4b49      	ldr	r3, [pc, #292]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ffe:	e006      	b.n	800300e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e004      	b.n	8003010 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003006:	bf00      	nop
 8003008:	e002      	b.n	8003010 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800300e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003016:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	430b      	orrs	r3, r1
 800302c:	4939      	ldr	r1, [pc, #228]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d167      	bne.n	8003108 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a35      	ldr	r2, [pc, #212]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fe f8da 	bl	80011fc <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800304a:	e009      	b.n	8003060 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800304c:	f7fe f8d6 	bl	80011fc <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d902      	bls.n	8003060 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	73fb      	strb	r3, [r7, #15]
        break;
 800305e:	e005      	b.n	800306c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003060:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ef      	bne.n	800304c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d14a      	bne.n	8003108 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d111      	bne.n	800309c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003078:	4b26      	ldr	r3, [pc, #152]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6892      	ldr	r2, [r2, #8]
 8003088:	0211      	lsls	r1, r2, #8
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	0912      	lsrs	r2, r2, #4
 8003090:	0452      	lsls	r2, r2, #17
 8003092:	430a      	orrs	r2, r1
 8003094:	491f      	ldr	r1, [pc, #124]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	614b      	str	r3, [r1, #20]
 800309a:	e011      	b.n	80030c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
 80030ac:	0211      	lsls	r1, r2, #8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6912      	ldr	r2, [r2, #16]
 80030b2:	0852      	lsrs	r2, r2, #1
 80030b4:	3a01      	subs	r2, #1
 80030b6:	0652      	lsls	r2, r2, #25
 80030b8:	430a      	orrs	r2, r1
 80030ba:	4916      	ldr	r1, [pc, #88]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe f896 	bl	80011fc <HAL_GetTick>
 80030d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030d2:	e009      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030d4:	f7fe f892 	bl	80011fc <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d902      	bls.n	80030e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	73fb      	strb	r3, [r7, #15]
          break;
 80030e6:	e005      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ef      	beq.n	80030d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	4904      	ldr	r1, [pc, #16]	; (8003114 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003104:	4313      	orrs	r3, r2
 8003106:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000

08003118 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fc66 	bl	8000a10 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	22ca      	movs	r2, #202	; 0xca
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2253      	movs	r2, #83	; 0x53
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f87c 	bl	800325a <RTC_EnterInitMode>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d14b      	bne.n	8003204 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800317a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6919      	ldr	r1, [r3, #16]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f87f 	bl	80032c0 <RTC_ExitInitMode>
 80031c2:	4603      	mov	r3, r0
 80031c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11b      	bne.n	8003204 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0203 	bic.w	r2, r2, #3
 80031da:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	22ff      	movs	r2, #255	; 0xff
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003224:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003226:	f7fd ffe9 	bl	80011fc <HAL_GetTick>
 800322a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800322c:	e009      	b.n	8003242 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800322e:	f7fd ffe5 	bl	80011fc <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800323c:	d901      	bls.n	8003242 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e007      	b.n	8003252 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ee      	beq.n	800322e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d120      	bne.n	80032b6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800327e:	f7fd ffbd 	bl	80011fc <HAL_GetTick>
 8003282:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003284:	e00d      	b.n	80032a2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003286:	f7fd ffb9 	bl	80011fc <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003294:	d905      	bls.n	80032a2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2203      	movs	r2, #3
 800329e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <RTC_EnterInitMode+0x5c>
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d1e7      	bne.n	8003286 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <RTC_ExitInitMode+0x78>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <RTC_ExitInitMode+0x78>)
 80032d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <RTC_ExitInitMode+0x78>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10c      	bne.n	80032fe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff92 	bl	800320e <HAL_RTC_WaitForSynchro>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01e      	beq.n	800332e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2203      	movs	r2, #3
 80032f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e017      	b.n	800332e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <RTC_ExitInitMode+0x78>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <RTC_ExitInitMode+0x78>)
 8003304:	f023 0320 	bic.w	r3, r3, #32
 8003308:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff7f 	bl	800320e <HAL_RTC_WaitForSynchro>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2203      	movs	r2, #3
 800331a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <RTC_ExitInitMode+0x78>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <RTC_ExitInitMode+0x78>)
 8003328:	f043 0320 	orr.w	r3, r3, #32
 800332c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40002800 	.word	0x40002800

0800333c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e095      	b.n	800347a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335e:	d009      	beq.n	8003374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
 8003366:	e005      	b.n	8003374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fb98 	bl	8000ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033b4:	d902      	bls.n	80033bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e002      	b.n	80033c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80033ca:	d007      	beq.n	80033dc <HAL_SPI_Init+0xa0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033d4:	d002      	beq.n	80033dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	ea42 0103 	orr.w	r1, r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	f003 0204 	and.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003458:	ea42 0103 	orr.w	r1, r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e049      	b.n	8003528 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fd fca7 	bl	8000dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f000 f835 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a40      	ldr	r2, [pc, #256]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d00f      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a3d      	ldr	r2, [pc, #244]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a3c      	ldr	r2, [pc, #240]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3b      	ldr	r2, [pc, #236]	; (8003650 <TIM_Base_SetConfig+0x120>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3a      	ldr	r2, [pc, #232]	; (8003654 <TIM_Base_SetConfig+0x124>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01f      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d01b      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d017      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <TIM_Base_SetConfig+0x120>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00f      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a29      	ldr	r2, [pc, #164]	; (8003654 <TIM_Base_SetConfig+0x124>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a28      	ldr	r2, [pc, #160]	; (8003658 <TIM_Base_SetConfig+0x128>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <TIM_Base_SetConfig+0x12c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a26      	ldr	r2, [pc, #152]	; (8003660 <TIM_Base_SetConfig+0x130>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a10      	ldr	r2, [pc, #64]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00f      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <TIM_Base_SetConfig+0x124>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a11      	ldr	r2, [pc, #68]	; (8003658 <TIM_Base_SetConfig+0x128>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <TIM_Base_SetConfig+0x12c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <TIM_Base_SetConfig+0x130>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d103      	bne.n	8003630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	615a      	str	r2, [r3, #20]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40013400 	.word	0x40013400
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800

08003664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003678:	2302      	movs	r3, #2
 800367a:	e068      	b.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2e      	ldr	r2, [pc, #184]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d108      	bne.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d018      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a18      	ldr	r2, [pc, #96]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a13      	ldr	r2, [pc, #76]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10c      	bne.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40013400 	.word	0x40013400
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40014000 	.word	0x40014000

08003774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e040      	b.n	8003808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fbe0 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9dc 	bl	8003b70 <UART_SetConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e022      	b.n	8003808 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fc5a 	bl	8004084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fce1 	bl	80041c8 <UART_CheckIdleState>
 8003806:	4603      	mov	r3, r0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e048      	b.n	80038b4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fb92 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f98e 	bl	8003b70 <UART_SetConfig>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e02a      	b.n	80038b4 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fc0c 	bl	8004084 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800388a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0208 	orr.w	r2, r2, #8
 800389a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fc8b 	bl	80041c8 <UART_CheckIdleState>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	f640 030f 	movw	r3, #2063	; 0x80f
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d113      	bne.n	8003914 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8113 	beq.w	8003b30 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
      }
      return;
 8003912:	e10d      	b.n	8003b30 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80d6 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_UART_IRQHandler+0x284>)
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80cb 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <HAL_UART_IRQHandler+0x9e>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2201      	movs	r2, #1
 800394c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <HAL_UART_IRQHandler+0xc6>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2202      	movs	r2, #2
 8003974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <HAL_UART_IRQHandler+0xee>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2204      	movs	r2, #4
 800399c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a2:	f043 0202 	orr.w	r2, r3, #2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d009      	beq.n	80039dc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d4:	f043 0208 	orr.w	r2, r3, #8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00f      	beq.n	8003a06 <HAL_UART_IRQHandler+0x14a>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8092 	beq.w	8003b34 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d004      	beq.n	8003a52 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d031      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fc78 	bl	8004348 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d123      	bne.n	8003aae <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a74:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d013      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a82:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <HAL_UART_IRQHandler+0x288>)
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd fcf7 	bl	800147e <HAL_DMA_Abort_IT>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e00e      	b.n	8003ac4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f858 	bl	8003b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e00a      	b.n	8003ac4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f854 	bl	8003b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	e006      	b.n	8003ac4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f850 	bl	8003b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003ac2:	e037      	b.n	8003b34 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	bf00      	nop
    return;
 8003ac6:	e035      	b.n	8003b34 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <HAL_UART_IRQHandler+0x232>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fc7d 	bl	80043e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aec:	e025      	b.n	8003b3a <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
    }
    return;
 8003b12:	e011      	b.n	8003b38 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <HAL_UART_IRQHandler+0x27e>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fc43 	bl	80043b4 <UART_EndTransmit_IT>
    return;
 8003b2e:	e004      	b.n	8003b3a <HAL_UART_IRQHandler+0x27e>
      return;
 8003b30:	bf00      	nop
 8003b32:	e002      	b.n	8003b3a <HAL_UART_IRQHandler+0x27e>
    return;
 8003b34:	bf00      	nop
 8003b36:	e000      	b.n	8003b3a <HAL_UART_IRQHandler+0x27e>
    return;
 8003b38:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	04000120 	.word	0x04000120
 8003b44:	08004389 	.word	0x08004389

08003b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b5b0      	push	{r4, r5, r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4bad      	ldr	r3, [pc, #692]	; (8003e50 <UART_SetConfig+0x2e0>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	69f9      	ldr	r1, [r7, #28]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4aa2      	ldr	r2, [pc, #648]	; (8003e54 <UART_SetConfig+0x2e4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a99      	ldr	r2, [pc, #612]	; (8003e58 <UART_SetConfig+0x2e8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d121      	bne.n	8003c3a <UART_SetConfig+0xca>
 8003bf6:	4b99      	ldr	r3, [pc, #612]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d817      	bhi.n	8003c34 <UART_SetConfig+0xc4>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <UART_SetConfig+0x9c>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003c23 	.word	0x08003c23
 8003c18:	08003c2f 	.word	0x08003c2f
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	76fb      	strb	r3, [r7, #27]
 8003c20:	e0e7      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c22:	2302      	movs	r3, #2
 8003c24:	76fb      	strb	r3, [r7, #27]
 8003c26:	e0e4      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	76fb      	strb	r3, [r7, #27]
 8003c2c:	e0e1      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	76fb      	strb	r3, [r7, #27]
 8003c32:	e0de      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c34:	2310      	movs	r3, #16
 8003c36:	76fb      	strb	r3, [r7, #27]
 8003c38:	e0db      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a88      	ldr	r2, [pc, #544]	; (8003e60 <UART_SetConfig+0x2f0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d132      	bne.n	8003caa <UART_SetConfig+0x13a>
 8003c44:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d828      	bhi.n	8003ca4 <UART_SetConfig+0x134>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0xe8>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003ca5 	.word	0x08003ca5
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003c99 	.word	0x08003c99
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003c93 	.word	0x08003c93
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003ca5 	.word	0x08003ca5
 8003c88:	08003c9f 	.word	0x08003c9f
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	76fb      	strb	r3, [r7, #27]
 8003c90:	e0af      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c92:	2302      	movs	r3, #2
 8003c94:	76fb      	strb	r3, [r7, #27]
 8003c96:	e0ac      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	76fb      	strb	r3, [r7, #27]
 8003c9c:	e0a9      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	76fb      	strb	r3, [r7, #27]
 8003ca2:	e0a6      	b.n	8003df2 <UART_SetConfig+0x282>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	76fb      	strb	r3, [r7, #27]
 8003ca8:	e0a3      	b.n	8003df2 <UART_SetConfig+0x282>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6d      	ldr	r2, [pc, #436]	; (8003e64 <UART_SetConfig+0x2f4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d120      	bne.n	8003cf6 <UART_SetConfig+0x186>
 8003cb4:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cbe:	2b30      	cmp	r3, #48	; 0x30
 8003cc0:	d013      	beq.n	8003cea <UART_SetConfig+0x17a>
 8003cc2:	2b30      	cmp	r3, #48	; 0x30
 8003cc4:	d814      	bhi.n	8003cf0 <UART_SetConfig+0x180>
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d009      	beq.n	8003cde <UART_SetConfig+0x16e>
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d810      	bhi.n	8003cf0 <UART_SetConfig+0x180>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <UART_SetConfig+0x168>
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d006      	beq.n	8003ce4 <UART_SetConfig+0x174>
 8003cd6:	e00b      	b.n	8003cf0 <UART_SetConfig+0x180>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	76fb      	strb	r3, [r7, #27]
 8003cdc:	e089      	b.n	8003df2 <UART_SetConfig+0x282>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	76fb      	strb	r3, [r7, #27]
 8003ce2:	e086      	b.n	8003df2 <UART_SetConfig+0x282>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	76fb      	strb	r3, [r7, #27]
 8003ce8:	e083      	b.n	8003df2 <UART_SetConfig+0x282>
 8003cea:	2308      	movs	r3, #8
 8003cec:	76fb      	strb	r3, [r7, #27]
 8003cee:	e080      	b.n	8003df2 <UART_SetConfig+0x282>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	76fb      	strb	r3, [r7, #27]
 8003cf4:	e07d      	b.n	8003df2 <UART_SetConfig+0x282>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a5b      	ldr	r2, [pc, #364]	; (8003e68 <UART_SetConfig+0x2f8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d120      	bne.n	8003d42 <UART_SetConfig+0x1d2>
 8003d00:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d0c:	d013      	beq.n	8003d36 <UART_SetConfig+0x1c6>
 8003d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d10:	d814      	bhi.n	8003d3c <UART_SetConfig+0x1cc>
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d009      	beq.n	8003d2a <UART_SetConfig+0x1ba>
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d810      	bhi.n	8003d3c <UART_SetConfig+0x1cc>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <UART_SetConfig+0x1b4>
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d006      	beq.n	8003d30 <UART_SetConfig+0x1c0>
 8003d22:	e00b      	b.n	8003d3c <UART_SetConfig+0x1cc>
 8003d24:	2300      	movs	r3, #0
 8003d26:	76fb      	strb	r3, [r7, #27]
 8003d28:	e063      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	76fb      	strb	r3, [r7, #27]
 8003d2e:	e060      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d30:	2304      	movs	r3, #4
 8003d32:	76fb      	strb	r3, [r7, #27]
 8003d34:	e05d      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d36:	2308      	movs	r3, #8
 8003d38:	76fb      	strb	r3, [r7, #27]
 8003d3a:	e05a      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	76fb      	strb	r3, [r7, #27]
 8003d40:	e057      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a49      	ldr	r2, [pc, #292]	; (8003e6c <UART_SetConfig+0x2fc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d125      	bne.n	8003d98 <UART_SetConfig+0x228>
 8003d4c:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5a:	d017      	beq.n	8003d8c <UART_SetConfig+0x21c>
 8003d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d60:	d817      	bhi.n	8003d92 <UART_SetConfig+0x222>
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d00b      	beq.n	8003d80 <UART_SetConfig+0x210>
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d811      	bhi.n	8003d92 <UART_SetConfig+0x222>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <UART_SetConfig+0x20a>
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d006      	beq.n	8003d86 <UART_SetConfig+0x216>
 8003d78:	e00b      	b.n	8003d92 <UART_SetConfig+0x222>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	76fb      	strb	r3, [r7, #27]
 8003d7e:	e038      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d80:	2302      	movs	r3, #2
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	e035      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d86:	2304      	movs	r3, #4
 8003d88:	76fb      	strb	r3, [r7, #27]
 8003d8a:	e032      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e02f      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d92:	2310      	movs	r3, #16
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e02c      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <UART_SetConfig+0x2e4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d125      	bne.n	8003dee <UART_SetConfig+0x27e>
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db0:	d017      	beq.n	8003de2 <UART_SetConfig+0x272>
 8003db2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db6:	d817      	bhi.n	8003de8 <UART_SetConfig+0x278>
 8003db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbc:	d00b      	beq.n	8003dd6 <UART_SetConfig+0x266>
 8003dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc2:	d811      	bhi.n	8003de8 <UART_SetConfig+0x278>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <UART_SetConfig+0x260>
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d006      	beq.n	8003ddc <UART_SetConfig+0x26c>
 8003dce:	e00b      	b.n	8003de8 <UART_SetConfig+0x278>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	76fb      	strb	r3, [r7, #27]
 8003dd4:	e00d      	b.n	8003df2 <UART_SetConfig+0x282>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	76fb      	strb	r3, [r7, #27]
 8003dda:	e00a      	b.n	8003df2 <UART_SetConfig+0x282>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	76fb      	strb	r3, [r7, #27]
 8003de0:	e007      	b.n	8003df2 <UART_SetConfig+0x282>
 8003de2:	2308      	movs	r3, #8
 8003de4:	76fb      	strb	r3, [r7, #27]
 8003de6:	e004      	b.n	8003df2 <UART_SetConfig+0x282>
 8003de8:	2310      	movs	r3, #16
 8003dea:	76fb      	strb	r3, [r7, #27]
 8003dec:	e001      	b.n	8003df2 <UART_SetConfig+0x282>
 8003dee:	2310      	movs	r3, #16
 8003df0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <UART_SetConfig+0x2e4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	f040 8087 	bne.w	8003f0c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dfe:	7efb      	ldrb	r3, [r7, #27]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d837      	bhi.n	8003e74 <UART_SetConfig+0x304>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0x29c>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e75 	.word	0x08003e75
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	08003e75 	.word	0x08003e75
 8003e1c:	08003e3f 	.word	0x08003e3f
 8003e20:	08003e75 	.word	0x08003e75
 8003e24:	08003e75 	.word	0x08003e75
 8003e28:	08003e75 	.word	0x08003e75
 8003e2c:	08003e47 	.word	0x08003e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7fe fc2a 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8003e34:	6178      	str	r0, [r7, #20]
        break;
 8003e36:	e022      	b.n	8003e7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <UART_SetConfig+0x300>)
 8003e3a:	617b      	str	r3, [r7, #20]
        break;
 8003e3c:	e01f      	b.n	8003e7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3e:	f7fe fb8b 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8003e42:	6178      	str	r0, [r7, #20]
        break;
 8003e44:	e01b      	b.n	8003e7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4a:	617b      	str	r3, [r7, #20]
        break;
 8003e4c:	e017      	b.n	8003e7e <UART_SetConfig+0x30e>
 8003e4e:	bf00      	nop
 8003e50:	efff69f3 	.word	0xefff69f3
 8003e54:	40008000 	.word	0x40008000
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40004400 	.word	0x40004400
 8003e64:	40004800 	.word	0x40004800
 8003e68:	40004c00 	.word	0x40004c00
 8003e6c:	40005000 	.word	0x40005000
 8003e70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	76bb      	strb	r3, [r7, #26]
        break;
 8003e7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80f1 	beq.w	8004068 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d305      	bcc.n	8003ea2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d902      	bls.n	8003ea8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	76bb      	strb	r3, [r7, #26]
 8003ea6:	e0df      	b.n	8004068 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	020b      	lsls	r3, r1, #8
 8003eba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ebe:	0202      	lsls	r2, r0, #8
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	6849      	ldr	r1, [r1, #4]
 8003ec4:	0849      	lsrs	r1, r1, #1
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	1814      	adds	r4, r2, r0
 8003ece:	eb43 0501 	adc.w	r5, r3, r1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc f9c6 	bl	8000270 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef2:	d308      	bcc.n	8003f06 <UART_SetConfig+0x396>
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efa:	d204      	bcs.n	8003f06 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	e0b0      	b.n	8004068 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	76bb      	strb	r3, [r7, #26]
 8003f0a:	e0ad      	b.n	8004068 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f14:	d15c      	bne.n	8003fd0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003f16:	7efb      	ldrb	r3, [r7, #27]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d828      	bhi.n	8003f6e <UART_SetConfig+0x3fe>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x3b4>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08003f6f 	.word	0x08003f6f
 8003f34:	08003f5f 	.word	0x08003f5f
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f6f 	.word	0x08003f6f
 8003f40:	08003f6f 	.word	0x08003f6f
 8003f44:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe fb9e 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	6178      	str	r0, [r7, #20]
        break;
 8003f4e:	e013      	b.n	8003f78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe fbb0 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 8003f54:	6178      	str	r0, [r7, #20]
        break;
 8003f56:	e00f      	b.n	8003f78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b49      	ldr	r3, [pc, #292]	; (8004080 <UART_SetConfig+0x510>)
 8003f5a:	617b      	str	r3, [r7, #20]
        break;
 8003f5c:	e00c      	b.n	8003f78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7fe fafb 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8003f62:	6178      	str	r0, [r7, #20]
        break;
 8003f64:	e008      	b.n	8003f78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6a:	617b      	str	r3, [r7, #20]
        break;
 8003f6c:	e004      	b.n	8003f78 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	76bb      	strb	r3, [r7, #26]
        break;
 8003f76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d074      	beq.n	8004068 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005a      	lsls	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	441a      	add	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b0f      	cmp	r3, #15
 8003f9a:	d916      	bls.n	8003fca <UART_SetConfig+0x45a>
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	d212      	bcs.n	8003fca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f023 030f 	bic.w	r3, r3, #15
 8003fac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	89fa      	ldrh	r2, [r7, #14]
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	e04e      	b.n	8004068 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	76bb      	strb	r3, [r7, #26]
 8003fce:	e04b      	b.n	8004068 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd0:	7efb      	ldrb	r3, [r7, #27]
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d827      	bhi.n	8004026 <UART_SetConfig+0x4b6>
 8003fd6:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <UART_SetConfig+0x46c>)
 8003fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fdc:	08004001 	.word	0x08004001
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	08004011 	.word	0x08004011
 8003fe8:	08004027 	.word	0x08004027
 8003fec:	08004017 	.word	0x08004017
 8003ff0:	08004027 	.word	0x08004027
 8003ff4:	08004027 	.word	0x08004027
 8003ff8:	08004027 	.word	0x08004027
 8003ffc:	0800401f 	.word	0x0800401f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004000:	f7fe fb42 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8004004:	6178      	str	r0, [r7, #20]
        break;
 8004006:	e013      	b.n	8004030 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004008:	f7fe fb54 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 800400c:	6178      	str	r0, [r7, #20]
        break;
 800400e:	e00f      	b.n	8004030 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <UART_SetConfig+0x510>)
 8004012:	617b      	str	r3, [r7, #20]
        break;
 8004014:	e00c      	b.n	8004030 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004016:	f7fe fa9f 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 800401a:	6178      	str	r0, [r7, #20]
        break;
 800401c:	e008      	b.n	8004030 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004022:	617b      	str	r3, [r7, #20]
        break;
 8004024:	e004      	b.n	8004030 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	76bb      	strb	r3, [r7, #26]
        break;
 800402e:	bf00      	nop
    }

    if (pclk != 0U)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	085a      	lsrs	r2, r3, #1
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	441a      	add	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	b29b      	uxth	r3, r3
 800404a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	d908      	bls.n	8004064 <UART_SetConfig+0x4f4>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d204      	bcs.n	8004064 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	e001      	b.n	8004068 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004074:	7ebb      	ldrb	r3, [r7, #26]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bdb0      	pop	{r4, r5, r7, pc}
 800407e:	bf00      	nop
 8004080:	00f42400 	.word	0x00f42400

08004084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004182:	d10a      	bne.n	800419a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80041d6:	f7fd f811 	bl	80011fc <HAL_GetTick>
 80041da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d10e      	bne.n	8004208 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f82a 	bl	8004252 <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e020      	b.n	800424a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d10e      	bne.n	8004234 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004216:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f814 	bl	8004252 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e00a      	b.n	800424a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004262:	e05d      	b.n	8004320 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d059      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426c:	f7fc ffc6 	bl	80011fc <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <UART_WaitOnFlagUntilTimeout+0x30>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11b      	bne.n	80042ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004290:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e042      	b.n	8004340 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02b      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d6:	d123      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042f0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e00f      	b.n	8004340 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d092      	beq.n	8004264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800435e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fbd8 	bl	8003b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fbb5 	bl	8003b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004400:	4904      	ldr	r1, [pc, #16]	; (8004414 <MX_FATFS_Init+0x18>)
 8004402:	4805      	ldr	r0, [pc, #20]	; (8004418 <MX_FATFS_Init+0x1c>)
 8004404:	f000 f8b0 	bl	8004568 <FATFS_LinkDriver>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <MX_FATFS_Init+0x20>)
 800440e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}
 8004414:	2000035c 	.word	0x2000035c
 8004418:	2000000c 	.word	0x2000000c
 800441c:	20000360 	.word	0x20000360

08004420 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <USER_initialize+0x24>)
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <USER_initialize+0x24>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000009 	.word	0x20000009

08004448 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <USER_status+0x24>)
 8004454:	2201      	movs	r2, #1
 8004456:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <USER_status+0x24>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000009 	.word	0x20000009

08004470 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004480:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4603      	mov	r3, r0
 800449c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800449e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	603a      	str	r2, [r7, #0]
 80044b6:	71fb      	strb	r3, [r7, #7]
 80044b8:	460b      	mov	r3, r1
 80044ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
    return res;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 80044e8:	7a5b      	ldrb	r3, [r3, #9]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d131      	bne.n	8004554 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80044f0:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 80044f2:	7a5b      	ldrb	r3, [r3, #9]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80044fe:	4b19      	ldr	r3, [pc, #100]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 8004500:	7a5b      	ldrb	r3, [r3, #9]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 8004510:	7a5b      	ldrb	r3, [r3, #9]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 8004518:	4413      	add	r3, r2
 800451a:	79fa      	ldrb	r2, [r7, #7]
 800451c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 8004520:	7a5b      	ldrb	r3, [r3, #9]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	b2d1      	uxtb	r1, r2
 8004528:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <FATFS_LinkDriverEx+0x94>)
 800452a:	7251      	strb	r1, [r2, #9]
 800452c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800452e:	7dbb      	ldrb	r3, [r7, #22]
 8004530:	3330      	adds	r3, #48	; 0x30
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3301      	adds	r3, #1
 800453c:	223a      	movs	r2, #58	; 0x3a
 800453e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3302      	adds	r3, #2
 8004544:	222f      	movs	r2, #47	; 0x2f
 8004546:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	3303      	adds	r3, #3
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	200000a4 	.word	0x200000a4

08004568 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004572:	2200      	movs	r2, #0
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ffaa 	bl	80044d0 <FATFS_LinkDriverEx>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <__errno>:
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <__errno+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000020 	.word	0x20000020

08004594 <__libc_init_array>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4d0d      	ldr	r5, [pc, #52]	; (80045cc <__libc_init_array+0x38>)
 8004598:	4c0d      	ldr	r4, [pc, #52]	; (80045d0 <__libc_init_array+0x3c>)
 800459a:	1b64      	subs	r4, r4, r5
 800459c:	10a4      	asrs	r4, r4, #2
 800459e:	2600      	movs	r6, #0
 80045a0:	42a6      	cmp	r6, r4
 80045a2:	d109      	bne.n	80045b8 <__libc_init_array+0x24>
 80045a4:	4d0b      	ldr	r5, [pc, #44]	; (80045d4 <__libc_init_array+0x40>)
 80045a6:	4c0c      	ldr	r4, [pc, #48]	; (80045d8 <__libc_init_array+0x44>)
 80045a8:	f000 ff76 	bl	8005498 <_init>
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	2600      	movs	r6, #0
 80045b2:	42a6      	cmp	r6, r4
 80045b4:	d105      	bne.n	80045c2 <__libc_init_array+0x2e>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045bc:	4798      	blx	r3
 80045be:	3601      	adds	r6, #1
 80045c0:	e7ee      	b.n	80045a0 <__libc_init_array+0xc>
 80045c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c6:	4798      	blx	r3
 80045c8:	3601      	adds	r6, #1
 80045ca:	e7f2      	b.n	80045b2 <__libc_init_array+0x1e>
 80045cc:	080055ac 	.word	0x080055ac
 80045d0:	080055ac 	.word	0x080055ac
 80045d4:	080055ac 	.word	0x080055ac
 80045d8:	080055b0 	.word	0x080055b0

080045dc <memset>:
 80045dc:	4402      	add	r2, r0
 80045de:	4603      	mov	r3, r0
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d100      	bne.n	80045e6 <memset+0xa>
 80045e4:	4770      	bx	lr
 80045e6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ea:	e7f9      	b.n	80045e0 <memset+0x4>

080045ec <iprintf>:
 80045ec:	b40f      	push	{r0, r1, r2, r3}
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <iprintf+0x2c>)
 80045f0:	b513      	push	{r0, r1, r4, lr}
 80045f2:	681c      	ldr	r4, [r3, #0]
 80045f4:	b124      	cbz	r4, 8004600 <iprintf+0x14>
 80045f6:	69a3      	ldr	r3, [r4, #24]
 80045f8:	b913      	cbnz	r3, 8004600 <iprintf+0x14>
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 f866 	bl	80046cc <__sinit>
 8004600:	ab05      	add	r3, sp, #20
 8004602:	9a04      	ldr	r2, [sp, #16]
 8004604:	68a1      	ldr	r1, [r4, #8]
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	4620      	mov	r0, r4
 800460a:	f000 f983 	bl	8004914 <_vfiprintf_r>
 800460e:	b002      	add	sp, #8
 8004610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004614:	b004      	add	sp, #16
 8004616:	4770      	bx	lr
 8004618:	20000020 	.word	0x20000020

0800461c <std>:
 800461c:	2300      	movs	r3, #0
 800461e:	b510      	push	{r4, lr}
 8004620:	4604      	mov	r4, r0
 8004622:	e9c0 3300 	strd	r3, r3, [r0]
 8004626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800462a:	6083      	str	r3, [r0, #8]
 800462c:	8181      	strh	r1, [r0, #12]
 800462e:	6643      	str	r3, [r0, #100]	; 0x64
 8004630:	81c2      	strh	r2, [r0, #14]
 8004632:	6183      	str	r3, [r0, #24]
 8004634:	4619      	mov	r1, r3
 8004636:	2208      	movs	r2, #8
 8004638:	305c      	adds	r0, #92	; 0x5c
 800463a:	f7ff ffcf 	bl	80045dc <memset>
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <std+0x38>)
 8004640:	6263      	str	r3, [r4, #36]	; 0x24
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <std+0x3c>)
 8004644:	62a3      	str	r3, [r4, #40]	; 0x28
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <std+0x40>)
 8004648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <std+0x44>)
 800464c:	6224      	str	r4, [r4, #32]
 800464e:	6323      	str	r3, [r4, #48]	; 0x30
 8004650:	bd10      	pop	{r4, pc}
 8004652:	bf00      	nop
 8004654:	08004ebd 	.word	0x08004ebd
 8004658:	08004edf 	.word	0x08004edf
 800465c:	08004f17 	.word	0x08004f17
 8004660:	08004f3b 	.word	0x08004f3b

08004664 <_cleanup_r>:
 8004664:	4901      	ldr	r1, [pc, #4]	; (800466c <_cleanup_r+0x8>)
 8004666:	f000 b8af 	b.w	80047c8 <_fwalk_reent>
 800466a:	bf00      	nop
 800466c:	08005215 	.word	0x08005215

08004670 <__sfmoreglue>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	1e4a      	subs	r2, r1, #1
 8004674:	2568      	movs	r5, #104	; 0x68
 8004676:	4355      	muls	r5, r2
 8004678:	460e      	mov	r6, r1
 800467a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800467e:	f000 f8c5 	bl	800480c <_malloc_r>
 8004682:	4604      	mov	r4, r0
 8004684:	b140      	cbz	r0, 8004698 <__sfmoreglue+0x28>
 8004686:	2100      	movs	r1, #0
 8004688:	e9c0 1600 	strd	r1, r6, [r0]
 800468c:	300c      	adds	r0, #12
 800468e:	60a0      	str	r0, [r4, #8]
 8004690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004694:	f7ff ffa2 	bl	80045dc <memset>
 8004698:	4620      	mov	r0, r4
 800469a:	bd70      	pop	{r4, r5, r6, pc}

0800469c <__sfp_lock_acquire>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__sfp_lock_acquire+0x8>)
 800469e:	f000 b8b3 	b.w	8004808 <__retarget_lock_acquire_recursive>
 80046a2:	bf00      	nop
 80046a4:	200023d4 	.word	0x200023d4

080046a8 <__sfp_lock_release>:
 80046a8:	4801      	ldr	r0, [pc, #4]	; (80046b0 <__sfp_lock_release+0x8>)
 80046aa:	f000 b8ae 	b.w	800480a <__retarget_lock_release_recursive>
 80046ae:	bf00      	nop
 80046b0:	200023d4 	.word	0x200023d4

080046b4 <__sinit_lock_acquire>:
 80046b4:	4801      	ldr	r0, [pc, #4]	; (80046bc <__sinit_lock_acquire+0x8>)
 80046b6:	f000 b8a7 	b.w	8004808 <__retarget_lock_acquire_recursive>
 80046ba:	bf00      	nop
 80046bc:	200023cf 	.word	0x200023cf

080046c0 <__sinit_lock_release>:
 80046c0:	4801      	ldr	r0, [pc, #4]	; (80046c8 <__sinit_lock_release+0x8>)
 80046c2:	f000 b8a2 	b.w	800480a <__retarget_lock_release_recursive>
 80046c6:	bf00      	nop
 80046c8:	200023cf 	.word	0x200023cf

080046cc <__sinit>:
 80046cc:	b510      	push	{r4, lr}
 80046ce:	4604      	mov	r4, r0
 80046d0:	f7ff fff0 	bl	80046b4 <__sinit_lock_acquire>
 80046d4:	69a3      	ldr	r3, [r4, #24]
 80046d6:	b11b      	cbz	r3, 80046e0 <__sinit+0x14>
 80046d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046dc:	f7ff bff0 	b.w	80046c0 <__sinit_lock_release>
 80046e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046e4:	6523      	str	r3, [r4, #80]	; 0x50
 80046e6:	4b13      	ldr	r3, [pc, #76]	; (8004734 <__sinit+0x68>)
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <__sinit+0x6c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80046ee:	42a3      	cmp	r3, r4
 80046f0:	bf04      	itt	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	61a3      	streq	r3, [r4, #24]
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 f820 	bl	800473c <__sfp>
 80046fc:	6060      	str	r0, [r4, #4]
 80046fe:	4620      	mov	r0, r4
 8004700:	f000 f81c 	bl	800473c <__sfp>
 8004704:	60a0      	str	r0, [r4, #8]
 8004706:	4620      	mov	r0, r4
 8004708:	f000 f818 	bl	800473c <__sfp>
 800470c:	2200      	movs	r2, #0
 800470e:	60e0      	str	r0, [r4, #12]
 8004710:	2104      	movs	r1, #4
 8004712:	6860      	ldr	r0, [r4, #4]
 8004714:	f7ff ff82 	bl	800461c <std>
 8004718:	68a0      	ldr	r0, [r4, #8]
 800471a:	2201      	movs	r2, #1
 800471c:	2109      	movs	r1, #9
 800471e:	f7ff ff7d 	bl	800461c <std>
 8004722:	68e0      	ldr	r0, [r4, #12]
 8004724:	2202      	movs	r2, #2
 8004726:	2112      	movs	r1, #18
 8004728:	f7ff ff78 	bl	800461c <std>
 800472c:	2301      	movs	r3, #1
 800472e:	61a3      	str	r3, [r4, #24]
 8004730:	e7d2      	b.n	80046d8 <__sinit+0xc>
 8004732:	bf00      	nop
 8004734:	0800550c 	.word	0x0800550c
 8004738:	08004665 	.word	0x08004665

0800473c <__sfp>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	4607      	mov	r7, r0
 8004740:	f7ff ffac 	bl	800469c <__sfp_lock_acquire>
 8004744:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <__sfp+0x84>)
 8004746:	681e      	ldr	r6, [r3, #0]
 8004748:	69b3      	ldr	r3, [r6, #24]
 800474a:	b913      	cbnz	r3, 8004752 <__sfp+0x16>
 800474c:	4630      	mov	r0, r6
 800474e:	f7ff ffbd 	bl	80046cc <__sinit>
 8004752:	3648      	adds	r6, #72	; 0x48
 8004754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004758:	3b01      	subs	r3, #1
 800475a:	d503      	bpl.n	8004764 <__sfp+0x28>
 800475c:	6833      	ldr	r3, [r6, #0]
 800475e:	b30b      	cbz	r3, 80047a4 <__sfp+0x68>
 8004760:	6836      	ldr	r6, [r6, #0]
 8004762:	e7f7      	b.n	8004754 <__sfp+0x18>
 8004764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004768:	b9d5      	cbnz	r5, 80047a0 <__sfp+0x64>
 800476a:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <__sfp+0x88>)
 800476c:	60e3      	str	r3, [r4, #12]
 800476e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004772:	6665      	str	r5, [r4, #100]	; 0x64
 8004774:	f000 f847 	bl	8004806 <__retarget_lock_init_recursive>
 8004778:	f7ff ff96 	bl	80046a8 <__sfp_lock_release>
 800477c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004784:	6025      	str	r5, [r4, #0]
 8004786:	61a5      	str	r5, [r4, #24]
 8004788:	2208      	movs	r2, #8
 800478a:	4629      	mov	r1, r5
 800478c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004790:	f7ff ff24 	bl	80045dc <memset>
 8004794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800479c:	4620      	mov	r0, r4
 800479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a0:	3468      	adds	r4, #104	; 0x68
 80047a2:	e7d9      	b.n	8004758 <__sfp+0x1c>
 80047a4:	2104      	movs	r1, #4
 80047a6:	4638      	mov	r0, r7
 80047a8:	f7ff ff62 	bl	8004670 <__sfmoreglue>
 80047ac:	4604      	mov	r4, r0
 80047ae:	6030      	str	r0, [r6, #0]
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d1d5      	bne.n	8004760 <__sfp+0x24>
 80047b4:	f7ff ff78 	bl	80046a8 <__sfp_lock_release>
 80047b8:	230c      	movs	r3, #12
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	e7ee      	b.n	800479c <__sfp+0x60>
 80047be:	bf00      	nop
 80047c0:	0800550c 	.word	0x0800550c
 80047c4:	ffff0001 	.word	0xffff0001

080047c8 <_fwalk_reent>:
 80047c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047cc:	4606      	mov	r6, r0
 80047ce:	4688      	mov	r8, r1
 80047d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047d4:	2700      	movs	r7, #0
 80047d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047da:	f1b9 0901 	subs.w	r9, r9, #1
 80047de:	d505      	bpl.n	80047ec <_fwalk_reent+0x24>
 80047e0:	6824      	ldr	r4, [r4, #0]
 80047e2:	2c00      	cmp	r4, #0
 80047e4:	d1f7      	bne.n	80047d6 <_fwalk_reent+0xe>
 80047e6:	4638      	mov	r0, r7
 80047e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ec:	89ab      	ldrh	r3, [r5, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d907      	bls.n	8004802 <_fwalk_reent+0x3a>
 80047f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047f6:	3301      	adds	r3, #1
 80047f8:	d003      	beq.n	8004802 <_fwalk_reent+0x3a>
 80047fa:	4629      	mov	r1, r5
 80047fc:	4630      	mov	r0, r6
 80047fe:	47c0      	blx	r8
 8004800:	4307      	orrs	r7, r0
 8004802:	3568      	adds	r5, #104	; 0x68
 8004804:	e7e9      	b.n	80047da <_fwalk_reent+0x12>

08004806 <__retarget_lock_init_recursive>:
 8004806:	4770      	bx	lr

08004808 <__retarget_lock_acquire_recursive>:
 8004808:	4770      	bx	lr

0800480a <__retarget_lock_release_recursive>:
 800480a:	4770      	bx	lr

0800480c <_malloc_r>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	1ccd      	adds	r5, r1, #3
 8004810:	f025 0503 	bic.w	r5, r5, #3
 8004814:	3508      	adds	r5, #8
 8004816:	2d0c      	cmp	r5, #12
 8004818:	bf38      	it	cc
 800481a:	250c      	movcc	r5, #12
 800481c:	2d00      	cmp	r5, #0
 800481e:	4606      	mov	r6, r0
 8004820:	db01      	blt.n	8004826 <_malloc_r+0x1a>
 8004822:	42a9      	cmp	r1, r5
 8004824:	d903      	bls.n	800482e <_malloc_r+0x22>
 8004826:	230c      	movs	r3, #12
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	2000      	movs	r0, #0
 800482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800482e:	f000 fda3 	bl	8005378 <__malloc_lock>
 8004832:	4921      	ldr	r1, [pc, #132]	; (80048b8 <_malloc_r+0xac>)
 8004834:	680a      	ldr	r2, [r1, #0]
 8004836:	4614      	mov	r4, r2
 8004838:	b99c      	cbnz	r4, 8004862 <_malloc_r+0x56>
 800483a:	4f20      	ldr	r7, [pc, #128]	; (80048bc <_malloc_r+0xb0>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	b923      	cbnz	r3, 800484a <_malloc_r+0x3e>
 8004840:	4621      	mov	r1, r4
 8004842:	4630      	mov	r0, r6
 8004844:	f000 fb2a 	bl	8004e9c <_sbrk_r>
 8004848:	6038      	str	r0, [r7, #0]
 800484a:	4629      	mov	r1, r5
 800484c:	4630      	mov	r0, r6
 800484e:	f000 fb25 	bl	8004e9c <_sbrk_r>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	d123      	bne.n	800489e <_malloc_r+0x92>
 8004856:	230c      	movs	r3, #12
 8004858:	6033      	str	r3, [r6, #0]
 800485a:	4630      	mov	r0, r6
 800485c:	f000 fd92 	bl	8005384 <__malloc_unlock>
 8004860:	e7e3      	b.n	800482a <_malloc_r+0x1e>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	1b5b      	subs	r3, r3, r5
 8004866:	d417      	bmi.n	8004898 <_malloc_r+0x8c>
 8004868:	2b0b      	cmp	r3, #11
 800486a:	d903      	bls.n	8004874 <_malloc_r+0x68>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	441c      	add	r4, r3
 8004870:	6025      	str	r5, [r4, #0]
 8004872:	e004      	b.n	800487e <_malloc_r+0x72>
 8004874:	6863      	ldr	r3, [r4, #4]
 8004876:	42a2      	cmp	r2, r4
 8004878:	bf0c      	ite	eq
 800487a:	600b      	streq	r3, [r1, #0]
 800487c:	6053      	strne	r3, [r2, #4]
 800487e:	4630      	mov	r0, r6
 8004880:	f000 fd80 	bl	8005384 <__malloc_unlock>
 8004884:	f104 000b 	add.w	r0, r4, #11
 8004888:	1d23      	adds	r3, r4, #4
 800488a:	f020 0007 	bic.w	r0, r0, #7
 800488e:	1ac2      	subs	r2, r0, r3
 8004890:	d0cc      	beq.n	800482c <_malloc_r+0x20>
 8004892:	1a1b      	subs	r3, r3, r0
 8004894:	50a3      	str	r3, [r4, r2]
 8004896:	e7c9      	b.n	800482c <_malloc_r+0x20>
 8004898:	4622      	mov	r2, r4
 800489a:	6864      	ldr	r4, [r4, #4]
 800489c:	e7cc      	b.n	8004838 <_malloc_r+0x2c>
 800489e:	1cc4      	adds	r4, r0, #3
 80048a0:	f024 0403 	bic.w	r4, r4, #3
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d0e3      	beq.n	8004870 <_malloc_r+0x64>
 80048a8:	1a21      	subs	r1, r4, r0
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 faf6 	bl	8004e9c <_sbrk_r>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d1dd      	bne.n	8004870 <_malloc_r+0x64>
 80048b4:	e7cf      	b.n	8004856 <_malloc_r+0x4a>
 80048b6:	bf00      	nop
 80048b8:	200000b0 	.word	0x200000b0
 80048bc:	200000b4 	.word	0x200000b4

080048c0 <__sfputc_r>:
 80048c0:	6893      	ldr	r3, [r2, #8]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	b410      	push	{r4}
 80048c8:	6093      	str	r3, [r2, #8]
 80048ca:	da08      	bge.n	80048de <__sfputc_r+0x1e>
 80048cc:	6994      	ldr	r4, [r2, #24]
 80048ce:	42a3      	cmp	r3, r4
 80048d0:	db01      	blt.n	80048d6 <__sfputc_r+0x16>
 80048d2:	290a      	cmp	r1, #10
 80048d4:	d103      	bne.n	80048de <__sfputc_r+0x1e>
 80048d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048da:	f000 bb33 	b.w	8004f44 <__swbuf_r>
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	1c58      	adds	r0, r3, #1
 80048e2:	6010      	str	r0, [r2, #0]
 80048e4:	7019      	strb	r1, [r3, #0]
 80048e6:	4608      	mov	r0, r1
 80048e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <__sfputs_r>:
 80048ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f0:	4606      	mov	r6, r0
 80048f2:	460f      	mov	r7, r1
 80048f4:	4614      	mov	r4, r2
 80048f6:	18d5      	adds	r5, r2, r3
 80048f8:	42ac      	cmp	r4, r5
 80048fa:	d101      	bne.n	8004900 <__sfputs_r+0x12>
 80048fc:	2000      	movs	r0, #0
 80048fe:	e007      	b.n	8004910 <__sfputs_r+0x22>
 8004900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004904:	463a      	mov	r2, r7
 8004906:	4630      	mov	r0, r6
 8004908:	f7ff ffda 	bl	80048c0 <__sfputc_r>
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d1f3      	bne.n	80048f8 <__sfputs_r+0xa>
 8004910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004914 <_vfiprintf_r>:
 8004914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004918:	460d      	mov	r5, r1
 800491a:	b09d      	sub	sp, #116	; 0x74
 800491c:	4614      	mov	r4, r2
 800491e:	4698      	mov	r8, r3
 8004920:	4606      	mov	r6, r0
 8004922:	b118      	cbz	r0, 800492c <_vfiprintf_r+0x18>
 8004924:	6983      	ldr	r3, [r0, #24]
 8004926:	b90b      	cbnz	r3, 800492c <_vfiprintf_r+0x18>
 8004928:	f7ff fed0 	bl	80046cc <__sinit>
 800492c:	4b89      	ldr	r3, [pc, #548]	; (8004b54 <_vfiprintf_r+0x240>)
 800492e:	429d      	cmp	r5, r3
 8004930:	d11b      	bne.n	800496a <_vfiprintf_r+0x56>
 8004932:	6875      	ldr	r5, [r6, #4]
 8004934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004936:	07d9      	lsls	r1, r3, #31
 8004938:	d405      	bmi.n	8004946 <_vfiprintf_r+0x32>
 800493a:	89ab      	ldrh	r3, [r5, #12]
 800493c:	059a      	lsls	r2, r3, #22
 800493e:	d402      	bmi.n	8004946 <_vfiprintf_r+0x32>
 8004940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004942:	f7ff ff61 	bl	8004808 <__retarget_lock_acquire_recursive>
 8004946:	89ab      	ldrh	r3, [r5, #12]
 8004948:	071b      	lsls	r3, r3, #28
 800494a:	d501      	bpl.n	8004950 <_vfiprintf_r+0x3c>
 800494c:	692b      	ldr	r3, [r5, #16]
 800494e:	b9eb      	cbnz	r3, 800498c <_vfiprintf_r+0x78>
 8004950:	4629      	mov	r1, r5
 8004952:	4630      	mov	r0, r6
 8004954:	f000 fb5a 	bl	800500c <__swsetup_r>
 8004958:	b1c0      	cbz	r0, 800498c <_vfiprintf_r+0x78>
 800495a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800495c:	07dc      	lsls	r4, r3, #31
 800495e:	d50e      	bpl.n	800497e <_vfiprintf_r+0x6a>
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	b01d      	add	sp, #116	; 0x74
 8004966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496a:	4b7b      	ldr	r3, [pc, #492]	; (8004b58 <_vfiprintf_r+0x244>)
 800496c:	429d      	cmp	r5, r3
 800496e:	d101      	bne.n	8004974 <_vfiprintf_r+0x60>
 8004970:	68b5      	ldr	r5, [r6, #8]
 8004972:	e7df      	b.n	8004934 <_vfiprintf_r+0x20>
 8004974:	4b79      	ldr	r3, [pc, #484]	; (8004b5c <_vfiprintf_r+0x248>)
 8004976:	429d      	cmp	r5, r3
 8004978:	bf08      	it	eq
 800497a:	68f5      	ldreq	r5, [r6, #12]
 800497c:	e7da      	b.n	8004934 <_vfiprintf_r+0x20>
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	0598      	lsls	r0, r3, #22
 8004982:	d4ed      	bmi.n	8004960 <_vfiprintf_r+0x4c>
 8004984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004986:	f7ff ff40 	bl	800480a <__retarget_lock_release_recursive>
 800498a:	e7e9      	b.n	8004960 <_vfiprintf_r+0x4c>
 800498c:	2300      	movs	r3, #0
 800498e:	9309      	str	r3, [sp, #36]	; 0x24
 8004990:	2320      	movs	r3, #32
 8004992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004996:	f8cd 800c 	str.w	r8, [sp, #12]
 800499a:	2330      	movs	r3, #48	; 0x30
 800499c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b60 <_vfiprintf_r+0x24c>
 80049a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049a4:	f04f 0901 	mov.w	r9, #1
 80049a8:	4623      	mov	r3, r4
 80049aa:	469a      	mov	sl, r3
 80049ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b0:	b10a      	cbz	r2, 80049b6 <_vfiprintf_r+0xa2>
 80049b2:	2a25      	cmp	r2, #37	; 0x25
 80049b4:	d1f9      	bne.n	80049aa <_vfiprintf_r+0x96>
 80049b6:	ebba 0b04 	subs.w	fp, sl, r4
 80049ba:	d00b      	beq.n	80049d4 <_vfiprintf_r+0xc0>
 80049bc:	465b      	mov	r3, fp
 80049be:	4622      	mov	r2, r4
 80049c0:	4629      	mov	r1, r5
 80049c2:	4630      	mov	r0, r6
 80049c4:	f7ff ff93 	bl	80048ee <__sfputs_r>
 80049c8:	3001      	adds	r0, #1
 80049ca:	f000 80aa 	beq.w	8004b22 <_vfiprintf_r+0x20e>
 80049ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049d0:	445a      	add	r2, fp
 80049d2:	9209      	str	r2, [sp, #36]	; 0x24
 80049d4:	f89a 3000 	ldrb.w	r3, [sl]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80a2 	beq.w	8004b22 <_vfiprintf_r+0x20e>
 80049de:	2300      	movs	r3, #0
 80049e0:	f04f 32ff 	mov.w	r2, #4294967295
 80049e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049e8:	f10a 0a01 	add.w	sl, sl, #1
 80049ec:	9304      	str	r3, [sp, #16]
 80049ee:	9307      	str	r3, [sp, #28]
 80049f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049f4:	931a      	str	r3, [sp, #104]	; 0x68
 80049f6:	4654      	mov	r4, sl
 80049f8:	2205      	movs	r2, #5
 80049fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049fe:	4858      	ldr	r0, [pc, #352]	; (8004b60 <_vfiprintf_r+0x24c>)
 8004a00:	f7fb fbe6 	bl	80001d0 <memchr>
 8004a04:	9a04      	ldr	r2, [sp, #16]
 8004a06:	b9d8      	cbnz	r0, 8004a40 <_vfiprintf_r+0x12c>
 8004a08:	06d1      	lsls	r1, r2, #27
 8004a0a:	bf44      	itt	mi
 8004a0c:	2320      	movmi	r3, #32
 8004a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a12:	0713      	lsls	r3, r2, #28
 8004a14:	bf44      	itt	mi
 8004a16:	232b      	movmi	r3, #43	; 0x2b
 8004a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a20:	2b2a      	cmp	r3, #42	; 0x2a
 8004a22:	d015      	beq.n	8004a50 <_vfiprintf_r+0x13c>
 8004a24:	9a07      	ldr	r2, [sp, #28]
 8004a26:	4654      	mov	r4, sl
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f04f 0c0a 	mov.w	ip, #10
 8004a2e:	4621      	mov	r1, r4
 8004a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a34:	3b30      	subs	r3, #48	; 0x30
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	d94e      	bls.n	8004ad8 <_vfiprintf_r+0x1c4>
 8004a3a:	b1b0      	cbz	r0, 8004a6a <_vfiprintf_r+0x156>
 8004a3c:	9207      	str	r2, [sp, #28]
 8004a3e:	e014      	b.n	8004a6a <_vfiprintf_r+0x156>
 8004a40:	eba0 0308 	sub.w	r3, r0, r8
 8004a44:	fa09 f303 	lsl.w	r3, r9, r3
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	9304      	str	r3, [sp, #16]
 8004a4c:	46a2      	mov	sl, r4
 8004a4e:	e7d2      	b.n	80049f6 <_vfiprintf_r+0xe2>
 8004a50:	9b03      	ldr	r3, [sp, #12]
 8004a52:	1d19      	adds	r1, r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	9103      	str	r1, [sp, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bfbb      	ittet	lt
 8004a5c:	425b      	neglt	r3, r3
 8004a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8004a62:	9307      	strge	r3, [sp, #28]
 8004a64:	9307      	strlt	r3, [sp, #28]
 8004a66:	bfb8      	it	lt
 8004a68:	9204      	strlt	r2, [sp, #16]
 8004a6a:	7823      	ldrb	r3, [r4, #0]
 8004a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a6e:	d10c      	bne.n	8004a8a <_vfiprintf_r+0x176>
 8004a70:	7863      	ldrb	r3, [r4, #1]
 8004a72:	2b2a      	cmp	r3, #42	; 0x2a
 8004a74:	d135      	bne.n	8004ae2 <_vfiprintf_r+0x1ce>
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	1d1a      	adds	r2, r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	9203      	str	r2, [sp, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfb8      	it	lt
 8004a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a86:	3402      	adds	r4, #2
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b70 <_vfiprintf_r+0x25c>
 8004a8e:	7821      	ldrb	r1, [r4, #0]
 8004a90:	2203      	movs	r2, #3
 8004a92:	4650      	mov	r0, sl
 8004a94:	f7fb fb9c 	bl	80001d0 <memchr>
 8004a98:	b140      	cbz	r0, 8004aac <_vfiprintf_r+0x198>
 8004a9a:	2340      	movs	r3, #64	; 0x40
 8004a9c:	eba0 000a 	sub.w	r0, r0, sl
 8004aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8004aa4:	9b04      	ldr	r3, [sp, #16]
 8004aa6:	4303      	orrs	r3, r0
 8004aa8:	3401      	adds	r4, #1
 8004aaa:	9304      	str	r3, [sp, #16]
 8004aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab0:	482c      	ldr	r0, [pc, #176]	; (8004b64 <_vfiprintf_r+0x250>)
 8004ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ab6:	2206      	movs	r2, #6
 8004ab8:	f7fb fb8a 	bl	80001d0 <memchr>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d03f      	beq.n	8004b40 <_vfiprintf_r+0x22c>
 8004ac0:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <_vfiprintf_r+0x254>)
 8004ac2:	bb1b      	cbnz	r3, 8004b0c <_vfiprintf_r+0x1f8>
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	3307      	adds	r3, #7
 8004ac8:	f023 0307 	bic.w	r3, r3, #7
 8004acc:	3308      	adds	r3, #8
 8004ace:	9303      	str	r3, [sp, #12]
 8004ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad2:	443b      	add	r3, r7
 8004ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad6:	e767      	b.n	80049a8 <_vfiprintf_r+0x94>
 8004ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004adc:	460c      	mov	r4, r1
 8004ade:	2001      	movs	r0, #1
 8004ae0:	e7a5      	b.n	8004a2e <_vfiprintf_r+0x11a>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	3401      	adds	r4, #1
 8004ae6:	9305      	str	r3, [sp, #20]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f04f 0c0a 	mov.w	ip, #10
 8004aee:	4620      	mov	r0, r4
 8004af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004af4:	3a30      	subs	r2, #48	; 0x30
 8004af6:	2a09      	cmp	r2, #9
 8004af8:	d903      	bls.n	8004b02 <_vfiprintf_r+0x1ee>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0c5      	beq.n	8004a8a <_vfiprintf_r+0x176>
 8004afe:	9105      	str	r1, [sp, #20]
 8004b00:	e7c3      	b.n	8004a8a <_vfiprintf_r+0x176>
 8004b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b06:	4604      	mov	r4, r0
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e7f0      	b.n	8004aee <_vfiprintf_r+0x1da>
 8004b0c:	ab03      	add	r3, sp, #12
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	462a      	mov	r2, r5
 8004b12:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <_vfiprintf_r+0x258>)
 8004b14:	a904      	add	r1, sp, #16
 8004b16:	4630      	mov	r0, r6
 8004b18:	f3af 8000 	nop.w
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	1c78      	adds	r0, r7, #1
 8004b20:	d1d6      	bne.n	8004ad0 <_vfiprintf_r+0x1bc>
 8004b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b24:	07d9      	lsls	r1, r3, #31
 8004b26:	d405      	bmi.n	8004b34 <_vfiprintf_r+0x220>
 8004b28:	89ab      	ldrh	r3, [r5, #12]
 8004b2a:	059a      	lsls	r2, r3, #22
 8004b2c:	d402      	bmi.n	8004b34 <_vfiprintf_r+0x220>
 8004b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b30:	f7ff fe6b 	bl	800480a <__retarget_lock_release_recursive>
 8004b34:	89ab      	ldrh	r3, [r5, #12]
 8004b36:	065b      	lsls	r3, r3, #25
 8004b38:	f53f af12 	bmi.w	8004960 <_vfiprintf_r+0x4c>
 8004b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b3e:	e711      	b.n	8004964 <_vfiprintf_r+0x50>
 8004b40:	ab03      	add	r3, sp, #12
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	462a      	mov	r2, r5
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <_vfiprintf_r+0x258>)
 8004b48:	a904      	add	r1, sp, #16
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f000 f880 	bl	8004c50 <_printf_i>
 8004b50:	e7e4      	b.n	8004b1c <_vfiprintf_r+0x208>
 8004b52:	bf00      	nop
 8004b54:	08005530 	.word	0x08005530
 8004b58:	08005550 	.word	0x08005550
 8004b5c:	08005510 	.word	0x08005510
 8004b60:	08005570 	.word	0x08005570
 8004b64:	0800557a 	.word	0x0800557a
 8004b68:	00000000 	.word	0x00000000
 8004b6c:	080048ef 	.word	0x080048ef
 8004b70:	08005576 	.word	0x08005576

08004b74 <_printf_common>:
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	4616      	mov	r6, r2
 8004b7a:	4699      	mov	r9, r3
 8004b7c:	688a      	ldr	r2, [r1, #8]
 8004b7e:	690b      	ldr	r3, [r1, #16]
 8004b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b84:	4293      	cmp	r3, r2
 8004b86:	bfb8      	it	lt
 8004b88:	4613      	movlt	r3, r2
 8004b8a:	6033      	str	r3, [r6, #0]
 8004b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b90:	4607      	mov	r7, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	b10a      	cbz	r2, 8004b9a <_printf_common+0x26>
 8004b96:	3301      	adds	r3, #1
 8004b98:	6033      	str	r3, [r6, #0]
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	0699      	lsls	r1, r3, #26
 8004b9e:	bf42      	ittt	mi
 8004ba0:	6833      	ldrmi	r3, [r6, #0]
 8004ba2:	3302      	addmi	r3, #2
 8004ba4:	6033      	strmi	r3, [r6, #0]
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	f015 0506 	ands.w	r5, r5, #6
 8004bac:	d106      	bne.n	8004bbc <_printf_common+0x48>
 8004bae:	f104 0a19 	add.w	sl, r4, #25
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	6832      	ldr	r2, [r6, #0]
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dc26      	bgt.n	8004c0a <_printf_common+0x96>
 8004bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc0:	1e13      	subs	r3, r2, #0
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	0692      	lsls	r2, r2, #26
 8004bca:	d42b      	bmi.n	8004c24 <_printf_common+0xb0>
 8004bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d01e      	beq.n	8004c18 <_printf_common+0xa4>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	68e5      	ldr	r5, [r4, #12]
 8004bde:	6832      	ldr	r2, [r6, #0]
 8004be0:	f003 0306 	and.w	r3, r3, #6
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	bf08      	it	eq
 8004be8:	1aad      	subeq	r5, r5, r2
 8004bea:	68a3      	ldr	r3, [r4, #8]
 8004bec:	6922      	ldr	r2, [r4, #16]
 8004bee:	bf0c      	ite	eq
 8004bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf4:	2500      	movne	r5, #0
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bfc4      	itt	gt
 8004bfa:	1a9b      	subgt	r3, r3, r2
 8004bfc:	18ed      	addgt	r5, r5, r3
 8004bfe:	2600      	movs	r6, #0
 8004c00:	341a      	adds	r4, #26
 8004c02:	42b5      	cmp	r5, r6
 8004c04:	d11a      	bne.n	8004c3c <_printf_common+0xc8>
 8004c06:	2000      	movs	r0, #0
 8004c08:	e008      	b.n	8004c1c <_printf_common+0xa8>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4649      	mov	r1, r9
 8004c10:	4638      	mov	r0, r7
 8004c12:	47c0      	blx	r8
 8004c14:	3001      	adds	r0, #1
 8004c16:	d103      	bne.n	8004c20 <_printf_common+0xac>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c20:	3501      	adds	r5, #1
 8004c22:	e7c6      	b.n	8004bb2 <_printf_common+0x3e>
 8004c24:	18e1      	adds	r1, r4, r3
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	2030      	movs	r0, #48	; 0x30
 8004c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c2e:	4422      	add	r2, r4
 8004c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c38:	3302      	adds	r3, #2
 8004c3a:	e7c7      	b.n	8004bcc <_printf_common+0x58>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4622      	mov	r2, r4
 8004c40:	4649      	mov	r1, r9
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d0e6      	beq.n	8004c18 <_printf_common+0xa4>
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7d9      	b.n	8004c02 <_printf_common+0x8e>
	...

08004c50 <_printf_i>:
 8004c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	460c      	mov	r4, r1
 8004c56:	4691      	mov	r9, r2
 8004c58:	7e27      	ldrb	r7, [r4, #24]
 8004c5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c5c:	2f78      	cmp	r7, #120	; 0x78
 8004c5e:	4680      	mov	r8, r0
 8004c60:	469a      	mov	sl, r3
 8004c62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c66:	d807      	bhi.n	8004c78 <_printf_i+0x28>
 8004c68:	2f62      	cmp	r7, #98	; 0x62
 8004c6a:	d80a      	bhi.n	8004c82 <_printf_i+0x32>
 8004c6c:	2f00      	cmp	r7, #0
 8004c6e:	f000 80d8 	beq.w	8004e22 <_printf_i+0x1d2>
 8004c72:	2f58      	cmp	r7, #88	; 0x58
 8004c74:	f000 80a3 	beq.w	8004dbe <_printf_i+0x16e>
 8004c78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c80:	e03a      	b.n	8004cf8 <_printf_i+0xa8>
 8004c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c86:	2b15      	cmp	r3, #21
 8004c88:	d8f6      	bhi.n	8004c78 <_printf_i+0x28>
 8004c8a:	a001      	add	r0, pc, #4	; (adr r0, 8004c90 <_printf_i+0x40>)
 8004c8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c90:	08004ce9 	.word	0x08004ce9
 8004c94:	08004cfd 	.word	0x08004cfd
 8004c98:	08004c79 	.word	0x08004c79
 8004c9c:	08004c79 	.word	0x08004c79
 8004ca0:	08004c79 	.word	0x08004c79
 8004ca4:	08004c79 	.word	0x08004c79
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004c79 	.word	0x08004c79
 8004cb0:	08004c79 	.word	0x08004c79
 8004cb4:	08004c79 	.word	0x08004c79
 8004cb8:	08004c79 	.word	0x08004c79
 8004cbc:	08004e09 	.word	0x08004e09
 8004cc0:	08004d2d 	.word	0x08004d2d
 8004cc4:	08004deb 	.word	0x08004deb
 8004cc8:	08004c79 	.word	0x08004c79
 8004ccc:	08004c79 	.word	0x08004c79
 8004cd0:	08004e2b 	.word	0x08004e2b
 8004cd4:	08004c79 	.word	0x08004c79
 8004cd8:	08004d2d 	.word	0x08004d2d
 8004cdc:	08004c79 	.word	0x08004c79
 8004ce0:	08004c79 	.word	0x08004c79
 8004ce4:	08004df3 	.word	0x08004df3
 8004ce8:	680b      	ldr	r3, [r1, #0]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	600a      	str	r2, [r1, #0]
 8004cf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0a3      	b.n	8004e44 <_printf_i+0x1f4>
 8004cfc:	6825      	ldr	r5, [r4, #0]
 8004cfe:	6808      	ldr	r0, [r1, #0]
 8004d00:	062e      	lsls	r6, r5, #24
 8004d02:	f100 0304 	add.w	r3, r0, #4
 8004d06:	d50a      	bpl.n	8004d1e <_printf_i+0xce>
 8004d08:	6805      	ldr	r5, [r0, #0]
 8004d0a:	600b      	str	r3, [r1, #0]
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	da03      	bge.n	8004d18 <_printf_i+0xc8>
 8004d10:	232d      	movs	r3, #45	; 0x2d
 8004d12:	426d      	negs	r5, r5
 8004d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d18:	485e      	ldr	r0, [pc, #376]	; (8004e94 <_printf_i+0x244>)
 8004d1a:	230a      	movs	r3, #10
 8004d1c:	e019      	b.n	8004d52 <_printf_i+0x102>
 8004d1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d22:	6805      	ldr	r5, [r0, #0]
 8004d24:	600b      	str	r3, [r1, #0]
 8004d26:	bf18      	it	ne
 8004d28:	b22d      	sxthne	r5, r5
 8004d2a:	e7ef      	b.n	8004d0c <_printf_i+0xbc>
 8004d2c:	680b      	ldr	r3, [r1, #0]
 8004d2e:	6825      	ldr	r5, [r4, #0]
 8004d30:	1d18      	adds	r0, r3, #4
 8004d32:	6008      	str	r0, [r1, #0]
 8004d34:	0628      	lsls	r0, r5, #24
 8004d36:	d501      	bpl.n	8004d3c <_printf_i+0xec>
 8004d38:	681d      	ldr	r5, [r3, #0]
 8004d3a:	e002      	b.n	8004d42 <_printf_i+0xf2>
 8004d3c:	0669      	lsls	r1, r5, #25
 8004d3e:	d5fb      	bpl.n	8004d38 <_printf_i+0xe8>
 8004d40:	881d      	ldrh	r5, [r3, #0]
 8004d42:	4854      	ldr	r0, [pc, #336]	; (8004e94 <_printf_i+0x244>)
 8004d44:	2f6f      	cmp	r7, #111	; 0x6f
 8004d46:	bf0c      	ite	eq
 8004d48:	2308      	moveq	r3, #8
 8004d4a:	230a      	movne	r3, #10
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d52:	6866      	ldr	r6, [r4, #4]
 8004d54:	60a6      	str	r6, [r4, #8]
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	bfa2      	ittt	ge
 8004d5a:	6821      	ldrge	r1, [r4, #0]
 8004d5c:	f021 0104 	bicge.w	r1, r1, #4
 8004d60:	6021      	strge	r1, [r4, #0]
 8004d62:	b90d      	cbnz	r5, 8004d68 <_printf_i+0x118>
 8004d64:	2e00      	cmp	r6, #0
 8004d66:	d04d      	beq.n	8004e04 <_printf_i+0x1b4>
 8004d68:	4616      	mov	r6, r2
 8004d6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d6e:	fb03 5711 	mls	r7, r3, r1, r5
 8004d72:	5dc7      	ldrb	r7, [r0, r7]
 8004d74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d78:	462f      	mov	r7, r5
 8004d7a:	42bb      	cmp	r3, r7
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	d9f4      	bls.n	8004d6a <_printf_i+0x11a>
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d10b      	bne.n	8004d9c <_printf_i+0x14c>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	07df      	lsls	r7, r3, #31
 8004d88:	d508      	bpl.n	8004d9c <_printf_i+0x14c>
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	6861      	ldr	r1, [r4, #4]
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	bfde      	ittt	le
 8004d92:	2330      	movle	r3, #48	; 0x30
 8004d94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d9c:	1b92      	subs	r2, r2, r6
 8004d9e:	6122      	str	r2, [r4, #16]
 8004da0:	f8cd a000 	str.w	sl, [sp]
 8004da4:	464b      	mov	r3, r9
 8004da6:	aa03      	add	r2, sp, #12
 8004da8:	4621      	mov	r1, r4
 8004daa:	4640      	mov	r0, r8
 8004dac:	f7ff fee2 	bl	8004b74 <_printf_common>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d14c      	bne.n	8004e4e <_printf_i+0x1fe>
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	b004      	add	sp, #16
 8004dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbe:	4835      	ldr	r0, [pc, #212]	; (8004e94 <_printf_i+0x244>)
 8004dc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	680e      	ldr	r6, [r1, #0]
 8004dc8:	061f      	lsls	r7, r3, #24
 8004dca:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dce:	600e      	str	r6, [r1, #0]
 8004dd0:	d514      	bpl.n	8004dfc <_printf_i+0x1ac>
 8004dd2:	07d9      	lsls	r1, r3, #31
 8004dd4:	bf44      	itt	mi
 8004dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dda:	6023      	strmi	r3, [r4, #0]
 8004ddc:	b91d      	cbnz	r5, 8004de6 <_printf_i+0x196>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f023 0320 	bic.w	r3, r3, #32
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	2310      	movs	r3, #16
 8004de8:	e7b0      	b.n	8004d4c <_printf_i+0xfc>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	f043 0320 	orr.w	r3, r3, #32
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	2378      	movs	r3, #120	; 0x78
 8004df4:	4828      	ldr	r0, [pc, #160]	; (8004e98 <_printf_i+0x248>)
 8004df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfa:	e7e3      	b.n	8004dc4 <_printf_i+0x174>
 8004dfc:	065e      	lsls	r6, r3, #25
 8004dfe:	bf48      	it	mi
 8004e00:	b2ad      	uxthmi	r5, r5
 8004e02:	e7e6      	b.n	8004dd2 <_printf_i+0x182>
 8004e04:	4616      	mov	r6, r2
 8004e06:	e7bb      	b.n	8004d80 <_printf_i+0x130>
 8004e08:	680b      	ldr	r3, [r1, #0]
 8004e0a:	6826      	ldr	r6, [r4, #0]
 8004e0c:	6960      	ldr	r0, [r4, #20]
 8004e0e:	1d1d      	adds	r5, r3, #4
 8004e10:	600d      	str	r5, [r1, #0]
 8004e12:	0635      	lsls	r5, r6, #24
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	d501      	bpl.n	8004e1c <_printf_i+0x1cc>
 8004e18:	6018      	str	r0, [r3, #0]
 8004e1a:	e002      	b.n	8004e22 <_printf_i+0x1d2>
 8004e1c:	0671      	lsls	r1, r6, #25
 8004e1e:	d5fb      	bpl.n	8004e18 <_printf_i+0x1c8>
 8004e20:	8018      	strh	r0, [r3, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	6123      	str	r3, [r4, #16]
 8004e26:	4616      	mov	r6, r2
 8004e28:	e7ba      	b.n	8004da0 <_printf_i+0x150>
 8004e2a:	680b      	ldr	r3, [r1, #0]
 8004e2c:	1d1a      	adds	r2, r3, #4
 8004e2e:	600a      	str	r2, [r1, #0]
 8004e30:	681e      	ldr	r6, [r3, #0]
 8004e32:	6862      	ldr	r2, [r4, #4]
 8004e34:	2100      	movs	r1, #0
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7fb f9ca 	bl	80001d0 <memchr>
 8004e3c:	b108      	cbz	r0, 8004e42 <_printf_i+0x1f2>
 8004e3e:	1b80      	subs	r0, r0, r6
 8004e40:	6060      	str	r0, [r4, #4]
 8004e42:	6863      	ldr	r3, [r4, #4]
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	2300      	movs	r3, #0
 8004e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e4c:	e7a8      	b.n	8004da0 <_printf_i+0x150>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	4632      	mov	r2, r6
 8004e52:	4649      	mov	r1, r9
 8004e54:	4640      	mov	r0, r8
 8004e56:	47d0      	blx	sl
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d0ab      	beq.n	8004db4 <_printf_i+0x164>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	079b      	lsls	r3, r3, #30
 8004e60:	d413      	bmi.n	8004e8a <_printf_i+0x23a>
 8004e62:	68e0      	ldr	r0, [r4, #12]
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	4298      	cmp	r0, r3
 8004e68:	bfb8      	it	lt
 8004e6a:	4618      	movlt	r0, r3
 8004e6c:	e7a4      	b.n	8004db8 <_printf_i+0x168>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4632      	mov	r2, r6
 8004e72:	4649      	mov	r1, r9
 8004e74:	4640      	mov	r0, r8
 8004e76:	47d0      	blx	sl
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d09b      	beq.n	8004db4 <_printf_i+0x164>
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	68e3      	ldr	r3, [r4, #12]
 8004e80:	9903      	ldr	r1, [sp, #12]
 8004e82:	1a5b      	subs	r3, r3, r1
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	dcf2      	bgt.n	8004e6e <_printf_i+0x21e>
 8004e88:	e7eb      	b.n	8004e62 <_printf_i+0x212>
 8004e8a:	2500      	movs	r5, #0
 8004e8c:	f104 0619 	add.w	r6, r4, #25
 8004e90:	e7f5      	b.n	8004e7e <_printf_i+0x22e>
 8004e92:	bf00      	nop
 8004e94:	08005581 	.word	0x08005581
 8004e98:	08005592 	.word	0x08005592

08004e9c <_sbrk_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4d06      	ldr	r5, [pc, #24]	; (8004eb8 <_sbrk_r+0x1c>)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	602b      	str	r3, [r5, #0]
 8004ea8:	f7fb ff06 	bl	8000cb8 <_sbrk>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_sbrk_r+0x1a>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_sbrk_r+0x1a>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	200023d8 	.word	0x200023d8

08004ebc <__sread>:
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec4:	f000 fab4 	bl	8005430 <_read_r>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	bfab      	itete	ge
 8004ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ece:	89a3      	ldrhlt	r3, [r4, #12]
 8004ed0:	181b      	addge	r3, r3, r0
 8004ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ed6:	bfac      	ite	ge
 8004ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eda:	81a3      	strhlt	r3, [r4, #12]
 8004edc:	bd10      	pop	{r4, pc}

08004ede <__swrite>:
 8004ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee2:	461f      	mov	r7, r3
 8004ee4:	898b      	ldrh	r3, [r1, #12]
 8004ee6:	05db      	lsls	r3, r3, #23
 8004ee8:	4605      	mov	r5, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	4616      	mov	r6, r2
 8004eee:	d505      	bpl.n	8004efc <__swrite+0x1e>
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f000 f9c8 	bl	800528c <_lseek_r>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	4632      	mov	r2, r6
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f12:	f000 b869 	b.w	8004fe8 <_write_r>

08004f16 <__sseek>:
 8004f16:	b510      	push	{r4, lr}
 8004f18:	460c      	mov	r4, r1
 8004f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1e:	f000 f9b5 	bl	800528c <_lseek_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	bf15      	itete	ne
 8004f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f32:	81a3      	strheq	r3, [r4, #12]
 8004f34:	bf18      	it	ne
 8004f36:	81a3      	strhne	r3, [r4, #12]
 8004f38:	bd10      	pop	{r4, pc}

08004f3a <__sclose>:
 8004f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3e:	f000 b8d3 	b.w	80050e8 <_close_r>
	...

08004f44 <__swbuf_r>:
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	460e      	mov	r6, r1
 8004f48:	4614      	mov	r4, r2
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	b118      	cbz	r0, 8004f56 <__swbuf_r+0x12>
 8004f4e:	6983      	ldr	r3, [r0, #24]
 8004f50:	b90b      	cbnz	r3, 8004f56 <__swbuf_r+0x12>
 8004f52:	f7ff fbbb 	bl	80046cc <__sinit>
 8004f56:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <__swbuf_r+0x98>)
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	d12b      	bne.n	8004fb4 <__swbuf_r+0x70>
 8004f5c:	686c      	ldr	r4, [r5, #4]
 8004f5e:	69a3      	ldr	r3, [r4, #24]
 8004f60:	60a3      	str	r3, [r4, #8]
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	071a      	lsls	r2, r3, #28
 8004f66:	d52f      	bpl.n	8004fc8 <__swbuf_r+0x84>
 8004f68:	6923      	ldr	r3, [r4, #16]
 8004f6a:	b36b      	cbz	r3, 8004fc8 <__swbuf_r+0x84>
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	1ac0      	subs	r0, r0, r3
 8004f72:	6963      	ldr	r3, [r4, #20]
 8004f74:	b2f6      	uxtb	r6, r6
 8004f76:	4283      	cmp	r3, r0
 8004f78:	4637      	mov	r7, r6
 8004f7a:	dc04      	bgt.n	8004f86 <__swbuf_r+0x42>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 f948 	bl	8005214 <_fflush_r>
 8004f84:	bb30      	cbnz	r0, 8004fd4 <__swbuf_r+0x90>
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60a3      	str	r3, [r4, #8]
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	6022      	str	r2, [r4, #0]
 8004f92:	701e      	strb	r6, [r3, #0]
 8004f94:	6963      	ldr	r3, [r4, #20]
 8004f96:	3001      	adds	r0, #1
 8004f98:	4283      	cmp	r3, r0
 8004f9a:	d004      	beq.n	8004fa6 <__swbuf_r+0x62>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	07db      	lsls	r3, r3, #31
 8004fa0:	d506      	bpl.n	8004fb0 <__swbuf_r+0x6c>
 8004fa2:	2e0a      	cmp	r6, #10
 8004fa4:	d104      	bne.n	8004fb0 <__swbuf_r+0x6c>
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f000 f933 	bl	8005214 <_fflush_r>
 8004fae:	b988      	cbnz	r0, 8004fd4 <__swbuf_r+0x90>
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <__swbuf_r+0x9c>)
 8004fb6:	429c      	cmp	r4, r3
 8004fb8:	d101      	bne.n	8004fbe <__swbuf_r+0x7a>
 8004fba:	68ac      	ldr	r4, [r5, #8]
 8004fbc:	e7cf      	b.n	8004f5e <__swbuf_r+0x1a>
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <__swbuf_r+0xa0>)
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	bf08      	it	eq
 8004fc4:	68ec      	ldreq	r4, [r5, #12]
 8004fc6:	e7ca      	b.n	8004f5e <__swbuf_r+0x1a>
 8004fc8:	4621      	mov	r1, r4
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f000 f81e 	bl	800500c <__swsetup_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d0cb      	beq.n	8004f6c <__swbuf_r+0x28>
 8004fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8004fd8:	e7ea      	b.n	8004fb0 <__swbuf_r+0x6c>
 8004fda:	bf00      	nop
 8004fdc:	08005530 	.word	0x08005530
 8004fe0:	08005550 	.word	0x08005550
 8004fe4:	08005510 	.word	0x08005510

08004fe8 <_write_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d07      	ldr	r5, [pc, #28]	; (8005008 <_write_r+0x20>)
 8004fec:	4604      	mov	r4, r0
 8004fee:	4608      	mov	r0, r1
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	602a      	str	r2, [r5, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f7fb fbf3 	bl	80007e2 <_write>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_write_r+0x1e>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_write_r+0x1e>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	200023d8 	.word	0x200023d8

0800500c <__swsetup_r>:
 800500c:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <__swsetup_r+0xcc>)
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	681d      	ldr	r5, [r3, #0]
 8005012:	4606      	mov	r6, r0
 8005014:	460c      	mov	r4, r1
 8005016:	b125      	cbz	r5, 8005022 <__swsetup_r+0x16>
 8005018:	69ab      	ldr	r3, [r5, #24]
 800501a:	b913      	cbnz	r3, 8005022 <__swsetup_r+0x16>
 800501c:	4628      	mov	r0, r5
 800501e:	f7ff fb55 	bl	80046cc <__sinit>
 8005022:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <__swsetup_r+0xd0>)
 8005024:	429c      	cmp	r4, r3
 8005026:	d10f      	bne.n	8005048 <__swsetup_r+0x3c>
 8005028:	686c      	ldr	r4, [r5, #4]
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005030:	0719      	lsls	r1, r3, #28
 8005032:	d42c      	bmi.n	800508e <__swsetup_r+0x82>
 8005034:	06dd      	lsls	r5, r3, #27
 8005036:	d411      	bmi.n	800505c <__swsetup_r+0x50>
 8005038:	2309      	movs	r3, #9
 800503a:	6033      	str	r3, [r6, #0]
 800503c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	e03e      	b.n	80050c6 <__swsetup_r+0xba>
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <__swsetup_r+0xd4>)
 800504a:	429c      	cmp	r4, r3
 800504c:	d101      	bne.n	8005052 <__swsetup_r+0x46>
 800504e:	68ac      	ldr	r4, [r5, #8]
 8005050:	e7eb      	b.n	800502a <__swsetup_r+0x1e>
 8005052:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <__swsetup_r+0xd8>)
 8005054:	429c      	cmp	r4, r3
 8005056:	bf08      	it	eq
 8005058:	68ec      	ldreq	r4, [r5, #12]
 800505a:	e7e6      	b.n	800502a <__swsetup_r+0x1e>
 800505c:	0758      	lsls	r0, r3, #29
 800505e:	d512      	bpl.n	8005086 <__swsetup_r+0x7a>
 8005060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005062:	b141      	cbz	r1, 8005076 <__swsetup_r+0x6a>
 8005064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005068:	4299      	cmp	r1, r3
 800506a:	d002      	beq.n	8005072 <__swsetup_r+0x66>
 800506c:	4630      	mov	r0, r6
 800506e:	f000 f98f 	bl	8005390 <_free_r>
 8005072:	2300      	movs	r3, #0
 8005074:	6363      	str	r3, [r4, #52]	; 0x34
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	2300      	movs	r3, #0
 8005080:	6063      	str	r3, [r4, #4]
 8005082:	6923      	ldr	r3, [r4, #16]
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f043 0308 	orr.w	r3, r3, #8
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	b94b      	cbnz	r3, 80050a6 <__swsetup_r+0x9a>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509c:	d003      	beq.n	80050a6 <__swsetup_r+0x9a>
 800509e:	4621      	mov	r1, r4
 80050a0:	4630      	mov	r0, r6
 80050a2:	f000 f929 	bl	80052f8 <__smakebuf_r>
 80050a6:	89a0      	ldrh	r0, [r4, #12]
 80050a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050ac:	f010 0301 	ands.w	r3, r0, #1
 80050b0:	d00a      	beq.n	80050c8 <__swsetup_r+0xbc>
 80050b2:	2300      	movs	r3, #0
 80050b4:	60a3      	str	r3, [r4, #8]
 80050b6:	6963      	ldr	r3, [r4, #20]
 80050b8:	425b      	negs	r3, r3
 80050ba:	61a3      	str	r3, [r4, #24]
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	b943      	cbnz	r3, 80050d2 <__swsetup_r+0xc6>
 80050c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050c4:	d1ba      	bne.n	800503c <__swsetup_r+0x30>
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
 80050c8:	0781      	lsls	r1, r0, #30
 80050ca:	bf58      	it	pl
 80050cc:	6963      	ldrpl	r3, [r4, #20]
 80050ce:	60a3      	str	r3, [r4, #8]
 80050d0:	e7f4      	b.n	80050bc <__swsetup_r+0xb0>
 80050d2:	2000      	movs	r0, #0
 80050d4:	e7f7      	b.n	80050c6 <__swsetup_r+0xba>
 80050d6:	bf00      	nop
 80050d8:	20000020 	.word	0x20000020
 80050dc:	08005530 	.word	0x08005530
 80050e0:	08005550 	.word	0x08005550
 80050e4:	08005510 	.word	0x08005510

080050e8 <_close_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d06      	ldr	r5, [pc, #24]	; (8005104 <_close_r+0x1c>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	f7fb fdab 	bl	8000c4e <_close>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_close_r+0x1a>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_close_r+0x1a>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200023d8 	.word	0x200023d8

08005108 <__sflush_r>:
 8005108:	898a      	ldrh	r2, [r1, #12]
 800510a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510e:	4605      	mov	r5, r0
 8005110:	0710      	lsls	r0, r2, #28
 8005112:	460c      	mov	r4, r1
 8005114:	d458      	bmi.n	80051c8 <__sflush_r+0xc0>
 8005116:	684b      	ldr	r3, [r1, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	dc05      	bgt.n	8005128 <__sflush_r+0x20>
 800511c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	dc02      	bgt.n	8005128 <__sflush_r+0x20>
 8005122:	2000      	movs	r0, #0
 8005124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800512a:	2e00      	cmp	r6, #0
 800512c:	d0f9      	beq.n	8005122 <__sflush_r+0x1a>
 800512e:	2300      	movs	r3, #0
 8005130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005134:	682f      	ldr	r7, [r5, #0]
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	d032      	beq.n	80051a0 <__sflush_r+0x98>
 800513a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	075a      	lsls	r2, r3, #29
 8005140:	d505      	bpl.n	800514e <__sflush_r+0x46>
 8005142:	6863      	ldr	r3, [r4, #4]
 8005144:	1ac0      	subs	r0, r0, r3
 8005146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005148:	b10b      	cbz	r3, 800514e <__sflush_r+0x46>
 800514a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800514c:	1ac0      	subs	r0, r0, r3
 800514e:	2300      	movs	r3, #0
 8005150:	4602      	mov	r2, r0
 8005152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005154:	6a21      	ldr	r1, [r4, #32]
 8005156:	4628      	mov	r0, r5
 8005158:	47b0      	blx	r6
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	d106      	bne.n	800516e <__sflush_r+0x66>
 8005160:	6829      	ldr	r1, [r5, #0]
 8005162:	291d      	cmp	r1, #29
 8005164:	d82c      	bhi.n	80051c0 <__sflush_r+0xb8>
 8005166:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <__sflush_r+0x108>)
 8005168:	40ca      	lsrs	r2, r1
 800516a:	07d6      	lsls	r6, r2, #31
 800516c:	d528      	bpl.n	80051c0 <__sflush_r+0xb8>
 800516e:	2200      	movs	r2, #0
 8005170:	6062      	str	r2, [r4, #4]
 8005172:	04d9      	lsls	r1, r3, #19
 8005174:	6922      	ldr	r2, [r4, #16]
 8005176:	6022      	str	r2, [r4, #0]
 8005178:	d504      	bpl.n	8005184 <__sflush_r+0x7c>
 800517a:	1c42      	adds	r2, r0, #1
 800517c:	d101      	bne.n	8005182 <__sflush_r+0x7a>
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	b903      	cbnz	r3, 8005184 <__sflush_r+0x7c>
 8005182:	6560      	str	r0, [r4, #84]	; 0x54
 8005184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005186:	602f      	str	r7, [r5, #0]
 8005188:	2900      	cmp	r1, #0
 800518a:	d0ca      	beq.n	8005122 <__sflush_r+0x1a>
 800518c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005190:	4299      	cmp	r1, r3
 8005192:	d002      	beq.n	800519a <__sflush_r+0x92>
 8005194:	4628      	mov	r0, r5
 8005196:	f000 f8fb 	bl	8005390 <_free_r>
 800519a:	2000      	movs	r0, #0
 800519c:	6360      	str	r0, [r4, #52]	; 0x34
 800519e:	e7c1      	b.n	8005124 <__sflush_r+0x1c>
 80051a0:	6a21      	ldr	r1, [r4, #32]
 80051a2:	2301      	movs	r3, #1
 80051a4:	4628      	mov	r0, r5
 80051a6:	47b0      	blx	r6
 80051a8:	1c41      	adds	r1, r0, #1
 80051aa:	d1c7      	bne.n	800513c <__sflush_r+0x34>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0c4      	beq.n	800513c <__sflush_r+0x34>
 80051b2:	2b1d      	cmp	r3, #29
 80051b4:	d001      	beq.n	80051ba <__sflush_r+0xb2>
 80051b6:	2b16      	cmp	r3, #22
 80051b8:	d101      	bne.n	80051be <__sflush_r+0xb6>
 80051ba:	602f      	str	r7, [r5, #0]
 80051bc:	e7b1      	b.n	8005122 <__sflush_r+0x1a>
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c4:	81a3      	strh	r3, [r4, #12]
 80051c6:	e7ad      	b.n	8005124 <__sflush_r+0x1c>
 80051c8:	690f      	ldr	r7, [r1, #16]
 80051ca:	2f00      	cmp	r7, #0
 80051cc:	d0a9      	beq.n	8005122 <__sflush_r+0x1a>
 80051ce:	0793      	lsls	r3, r2, #30
 80051d0:	680e      	ldr	r6, [r1, #0]
 80051d2:	bf08      	it	eq
 80051d4:	694b      	ldreq	r3, [r1, #20]
 80051d6:	600f      	str	r7, [r1, #0]
 80051d8:	bf18      	it	ne
 80051da:	2300      	movne	r3, #0
 80051dc:	eba6 0807 	sub.w	r8, r6, r7
 80051e0:	608b      	str	r3, [r1, #8]
 80051e2:	f1b8 0f00 	cmp.w	r8, #0
 80051e6:	dd9c      	ble.n	8005122 <__sflush_r+0x1a>
 80051e8:	6a21      	ldr	r1, [r4, #32]
 80051ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051ec:	4643      	mov	r3, r8
 80051ee:	463a      	mov	r2, r7
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b0      	blx	r6
 80051f4:	2800      	cmp	r0, #0
 80051f6:	dc06      	bgt.n	8005206 <__sflush_r+0xfe>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	e78e      	b.n	8005124 <__sflush_r+0x1c>
 8005206:	4407      	add	r7, r0
 8005208:	eba8 0800 	sub.w	r8, r8, r0
 800520c:	e7e9      	b.n	80051e2 <__sflush_r+0xda>
 800520e:	bf00      	nop
 8005210:	20400001 	.word	0x20400001

08005214 <_fflush_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	690b      	ldr	r3, [r1, #16]
 8005218:	4605      	mov	r5, r0
 800521a:	460c      	mov	r4, r1
 800521c:	b913      	cbnz	r3, 8005224 <_fflush_r+0x10>
 800521e:	2500      	movs	r5, #0
 8005220:	4628      	mov	r0, r5
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	b118      	cbz	r0, 800522e <_fflush_r+0x1a>
 8005226:	6983      	ldr	r3, [r0, #24]
 8005228:	b90b      	cbnz	r3, 800522e <_fflush_r+0x1a>
 800522a:	f7ff fa4f 	bl	80046cc <__sinit>
 800522e:	4b14      	ldr	r3, [pc, #80]	; (8005280 <_fflush_r+0x6c>)
 8005230:	429c      	cmp	r4, r3
 8005232:	d11b      	bne.n	800526c <_fflush_r+0x58>
 8005234:	686c      	ldr	r4, [r5, #4]
 8005236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0ef      	beq.n	800521e <_fflush_r+0xa>
 800523e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005240:	07d0      	lsls	r0, r2, #31
 8005242:	d404      	bmi.n	800524e <_fflush_r+0x3a>
 8005244:	0599      	lsls	r1, r3, #22
 8005246:	d402      	bmi.n	800524e <_fflush_r+0x3a>
 8005248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800524a:	f7ff fadd 	bl	8004808 <__retarget_lock_acquire_recursive>
 800524e:	4628      	mov	r0, r5
 8005250:	4621      	mov	r1, r4
 8005252:	f7ff ff59 	bl	8005108 <__sflush_r>
 8005256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005258:	07da      	lsls	r2, r3, #31
 800525a:	4605      	mov	r5, r0
 800525c:	d4e0      	bmi.n	8005220 <_fflush_r+0xc>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	059b      	lsls	r3, r3, #22
 8005262:	d4dd      	bmi.n	8005220 <_fflush_r+0xc>
 8005264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005266:	f7ff fad0 	bl	800480a <__retarget_lock_release_recursive>
 800526a:	e7d9      	b.n	8005220 <_fflush_r+0xc>
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <_fflush_r+0x70>)
 800526e:	429c      	cmp	r4, r3
 8005270:	d101      	bne.n	8005276 <_fflush_r+0x62>
 8005272:	68ac      	ldr	r4, [r5, #8]
 8005274:	e7df      	b.n	8005236 <_fflush_r+0x22>
 8005276:	4b04      	ldr	r3, [pc, #16]	; (8005288 <_fflush_r+0x74>)
 8005278:	429c      	cmp	r4, r3
 800527a:	bf08      	it	eq
 800527c:	68ec      	ldreq	r4, [r5, #12]
 800527e:	e7da      	b.n	8005236 <_fflush_r+0x22>
 8005280:	08005530 	.word	0x08005530
 8005284:	08005550 	.word	0x08005550
 8005288:	08005510 	.word	0x08005510

0800528c <_lseek_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d07      	ldr	r5, [pc, #28]	; (80052ac <_lseek_r+0x20>)
 8005290:	4604      	mov	r4, r0
 8005292:	4608      	mov	r0, r1
 8005294:	4611      	mov	r1, r2
 8005296:	2200      	movs	r2, #0
 8005298:	602a      	str	r2, [r5, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	f7fb fcfe 	bl	8000c9c <_lseek>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_lseek_r+0x1e>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_lseek_r+0x1e>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	200023d8 	.word	0x200023d8

080052b0 <__swhatbuf_r>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	460e      	mov	r6, r1
 80052b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b8:	2900      	cmp	r1, #0
 80052ba:	b096      	sub	sp, #88	; 0x58
 80052bc:	4614      	mov	r4, r2
 80052be:	461d      	mov	r5, r3
 80052c0:	da07      	bge.n	80052d2 <__swhatbuf_r+0x22>
 80052c2:	2300      	movs	r3, #0
 80052c4:	602b      	str	r3, [r5, #0]
 80052c6:	89b3      	ldrh	r3, [r6, #12]
 80052c8:	061a      	lsls	r2, r3, #24
 80052ca:	d410      	bmi.n	80052ee <__swhatbuf_r+0x3e>
 80052cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d0:	e00e      	b.n	80052f0 <__swhatbuf_r+0x40>
 80052d2:	466a      	mov	r2, sp
 80052d4:	f000 f8be 	bl	8005454 <_fstat_r>
 80052d8:	2800      	cmp	r0, #0
 80052da:	dbf2      	blt.n	80052c2 <__swhatbuf_r+0x12>
 80052dc:	9a01      	ldr	r2, [sp, #4]
 80052de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052e6:	425a      	negs	r2, r3
 80052e8:	415a      	adcs	r2, r3
 80052ea:	602a      	str	r2, [r5, #0]
 80052ec:	e7ee      	b.n	80052cc <__swhatbuf_r+0x1c>
 80052ee:	2340      	movs	r3, #64	; 0x40
 80052f0:	2000      	movs	r0, #0
 80052f2:	6023      	str	r3, [r4, #0]
 80052f4:	b016      	add	sp, #88	; 0x58
 80052f6:	bd70      	pop	{r4, r5, r6, pc}

080052f8 <__smakebuf_r>:
 80052f8:	898b      	ldrh	r3, [r1, #12]
 80052fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052fc:	079d      	lsls	r5, r3, #30
 80052fe:	4606      	mov	r6, r0
 8005300:	460c      	mov	r4, r1
 8005302:	d507      	bpl.n	8005314 <__smakebuf_r+0x1c>
 8005304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	6123      	str	r3, [r4, #16]
 800530c:	2301      	movs	r3, #1
 800530e:	6163      	str	r3, [r4, #20]
 8005310:	b002      	add	sp, #8
 8005312:	bd70      	pop	{r4, r5, r6, pc}
 8005314:	ab01      	add	r3, sp, #4
 8005316:	466a      	mov	r2, sp
 8005318:	f7ff ffca 	bl	80052b0 <__swhatbuf_r>
 800531c:	9900      	ldr	r1, [sp, #0]
 800531e:	4605      	mov	r5, r0
 8005320:	4630      	mov	r0, r6
 8005322:	f7ff fa73 	bl	800480c <_malloc_r>
 8005326:	b948      	cbnz	r0, 800533c <__smakebuf_r+0x44>
 8005328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532c:	059a      	lsls	r2, r3, #22
 800532e:	d4ef      	bmi.n	8005310 <__smakebuf_r+0x18>
 8005330:	f023 0303 	bic.w	r3, r3, #3
 8005334:	f043 0302 	orr.w	r3, r3, #2
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	e7e3      	b.n	8005304 <__smakebuf_r+0xc>
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <__smakebuf_r+0x7c>)
 800533e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	6020      	str	r0, [r4, #0]
 8005344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005348:	81a3      	strh	r3, [r4, #12]
 800534a:	9b00      	ldr	r3, [sp, #0]
 800534c:	6163      	str	r3, [r4, #20]
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	6120      	str	r0, [r4, #16]
 8005352:	b15b      	cbz	r3, 800536c <__smakebuf_r+0x74>
 8005354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005358:	4630      	mov	r0, r6
 800535a:	f000 f88d 	bl	8005478 <_isatty_r>
 800535e:	b128      	cbz	r0, 800536c <__smakebuf_r+0x74>
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	89a0      	ldrh	r0, [r4, #12]
 800536e:	4305      	orrs	r5, r0
 8005370:	81a5      	strh	r5, [r4, #12]
 8005372:	e7cd      	b.n	8005310 <__smakebuf_r+0x18>
 8005374:	08004665 	.word	0x08004665

08005378 <__malloc_lock>:
 8005378:	4801      	ldr	r0, [pc, #4]	; (8005380 <__malloc_lock+0x8>)
 800537a:	f7ff ba45 	b.w	8004808 <__retarget_lock_acquire_recursive>
 800537e:	bf00      	nop
 8005380:	200023d0 	.word	0x200023d0

08005384 <__malloc_unlock>:
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <__malloc_unlock+0x8>)
 8005386:	f7ff ba40 	b.w	800480a <__retarget_lock_release_recursive>
 800538a:	bf00      	nop
 800538c:	200023d0 	.word	0x200023d0

08005390 <_free_r>:
 8005390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005392:	2900      	cmp	r1, #0
 8005394:	d048      	beq.n	8005428 <_free_r+0x98>
 8005396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539a:	9001      	str	r0, [sp, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f1a1 0404 	sub.w	r4, r1, #4
 80053a2:	bfb8      	it	lt
 80053a4:	18e4      	addlt	r4, r4, r3
 80053a6:	f7ff ffe7 	bl	8005378 <__malloc_lock>
 80053aa:	4a20      	ldr	r2, [pc, #128]	; (800542c <_free_r+0x9c>)
 80053ac:	9801      	ldr	r0, [sp, #4]
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	4615      	mov	r5, r2
 80053b2:	b933      	cbnz	r3, 80053c2 <_free_r+0x32>
 80053b4:	6063      	str	r3, [r4, #4]
 80053b6:	6014      	str	r4, [r2, #0]
 80053b8:	b003      	add	sp, #12
 80053ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053be:	f7ff bfe1 	b.w	8005384 <__malloc_unlock>
 80053c2:	42a3      	cmp	r3, r4
 80053c4:	d90b      	bls.n	80053de <_free_r+0x4e>
 80053c6:	6821      	ldr	r1, [r4, #0]
 80053c8:	1862      	adds	r2, r4, r1
 80053ca:	4293      	cmp	r3, r2
 80053cc:	bf04      	itt	eq
 80053ce:	681a      	ldreq	r2, [r3, #0]
 80053d0:	685b      	ldreq	r3, [r3, #4]
 80053d2:	6063      	str	r3, [r4, #4]
 80053d4:	bf04      	itt	eq
 80053d6:	1852      	addeq	r2, r2, r1
 80053d8:	6022      	streq	r2, [r4, #0]
 80053da:	602c      	str	r4, [r5, #0]
 80053dc:	e7ec      	b.n	80053b8 <_free_r+0x28>
 80053de:	461a      	mov	r2, r3
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	b10b      	cbz	r3, 80053e8 <_free_r+0x58>
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	d9fa      	bls.n	80053de <_free_r+0x4e>
 80053e8:	6811      	ldr	r1, [r2, #0]
 80053ea:	1855      	adds	r5, r2, r1
 80053ec:	42a5      	cmp	r5, r4
 80053ee:	d10b      	bne.n	8005408 <_free_r+0x78>
 80053f0:	6824      	ldr	r4, [r4, #0]
 80053f2:	4421      	add	r1, r4
 80053f4:	1854      	adds	r4, r2, r1
 80053f6:	42a3      	cmp	r3, r4
 80053f8:	6011      	str	r1, [r2, #0]
 80053fa:	d1dd      	bne.n	80053b8 <_free_r+0x28>
 80053fc:	681c      	ldr	r4, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	6053      	str	r3, [r2, #4]
 8005402:	4421      	add	r1, r4
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	e7d7      	b.n	80053b8 <_free_r+0x28>
 8005408:	d902      	bls.n	8005410 <_free_r+0x80>
 800540a:	230c      	movs	r3, #12
 800540c:	6003      	str	r3, [r0, #0]
 800540e:	e7d3      	b.n	80053b8 <_free_r+0x28>
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	1961      	adds	r1, r4, r5
 8005414:	428b      	cmp	r3, r1
 8005416:	bf04      	itt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	6063      	str	r3, [r4, #4]
 800541e:	bf04      	itt	eq
 8005420:	1949      	addeq	r1, r1, r5
 8005422:	6021      	streq	r1, [r4, #0]
 8005424:	6054      	str	r4, [r2, #4]
 8005426:	e7c7      	b.n	80053b8 <_free_r+0x28>
 8005428:	b003      	add	sp, #12
 800542a:	bd30      	pop	{r4, r5, pc}
 800542c:	200000b0 	.word	0x200000b0

08005430 <_read_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d07      	ldr	r5, [pc, #28]	; (8005450 <_read_r+0x20>)
 8005434:	4604      	mov	r4, r0
 8005436:	4608      	mov	r0, r1
 8005438:	4611      	mov	r1, r2
 800543a:	2200      	movs	r2, #0
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fb fbe8 	bl	8000c14 <_read>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_read_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_read_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200023d8 	.word	0x200023d8

08005454 <_fstat_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	; (8005474 <_fstat_r+0x20>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	602b      	str	r3, [r5, #0]
 8005462:	f7fb fc00 	bl	8000c66 <_fstat>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d102      	bne.n	8005470 <_fstat_r+0x1c>
 800546a:	682b      	ldr	r3, [r5, #0]
 800546c:	b103      	cbz	r3, 8005470 <_fstat_r+0x1c>
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	bf00      	nop
 8005474:	200023d8 	.word	0x200023d8

08005478 <_isatty_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	; (8005494 <_isatty_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fb fbff 	bl	8000c86 <_isatty>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_isatty_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_isatty_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	200023d8 	.word	0x200023d8

08005498 <_init>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr

080054a4 <_fini>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr
