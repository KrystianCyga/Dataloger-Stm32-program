
STM_SR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004398  08004398  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043a0  080043a0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080043a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000233c  20000020  080043c8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000235c  080043c8  0002235c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca9b  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384a  00000000  00000000  0003caeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00040338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  00041908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a015  00000000  00000000  00042d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be99  00000000  00000000  0006cd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd06d  00000000  00000000  00088bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00185c2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a80  00000000  00000000  00185c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004338 	.word	0x08004338

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004338 	.word	0x08004338

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b40      	ldr	r3, [pc, #256]	; (80005d8 <MX_GPIO_Init+0x118>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a3f      	ldr	r2, [pc, #252]	; (80005d8 <MX_GPIO_Init+0x118>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b3d      	ldr	r3, [pc, #244]	; (80005d8 <MX_GPIO_Init+0x118>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <MX_GPIO_Init+0x118>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a39      	ldr	r2, [pc, #228]	; (80005d8 <MX_GPIO_Init+0x118>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b37      	ldr	r3, [pc, #220]	; (80005d8 <MX_GPIO_Init+0x118>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b34      	ldr	r3, [pc, #208]	; (80005d8 <MX_GPIO_Init+0x118>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a33      	ldr	r2, [pc, #204]	; (80005d8 <MX_GPIO_Init+0x118>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <MX_GPIO_Init+0x118>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <MX_GPIO_Init+0x118>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <MX_GPIO_Init+0x118>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <MX_GPIO_Init+0x118>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_DIODE_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2111      	movs	r1, #17
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f001 f84d 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <MX_GPIO_Init+0x11c>)
 800054a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	4822      	ldr	r0, [pc, #136]	; (80005e0 <MX_GPIO_Init+0x120>)
 8000558:	f000 fe7e 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_DIODE_Pin;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_DIODE_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 fe6f 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800057a:	2310      	movs	r3, #16
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f000 fe60 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_SENSOR_Pin;
 8000598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f000 fe52 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HS711_out_Pin|HS711_SCK_Pin;
 80005b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_GPIO_Init+0x120>)
 80005ca:	f000 fe45 	bl	8001258 <HAL_GPIO_Init>

}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	10210000 	.word	0x10210000
 80005e0:	48000800 	.word	0x48000800

080005e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_I2C1_Init+0x74>)
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <MX_I2C1_Init+0x78>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_I2C1_Init+0x74>)
 80005f0:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <MX_I2C1_Init+0x7c>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_I2C1_Init+0x74>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_I2C1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <MX_I2C1_Init+0x74>)
 8000620:	f000 fff4 	bl	800160c <HAL_I2C_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800062a:	f000 f919 	bl	8000860 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062e:	2100      	movs	r1, #0
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <MX_I2C1_Init+0x74>)
 8000632:	f001 f87a 	bl	800172a <HAL_I2CEx_ConfigAnalogFilter>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800063c:	f000 f910 	bl	8000860 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000640:	2100      	movs	r1, #0
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_I2C1_Init+0x74>)
 8000644:	f001 f8bc 	bl	80017c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800064e:	f000 f907 	bl	8000860 <Error_Handler>
  }

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000048 	.word	0x20000048
 800065c:	40005400 	.word	0x40005400
 8000660:	10909cec 	.word	0x10909cec

08000664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <HAL_I2C_MspInit+0x7c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d127      	bne.n	80006d6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 800069e:	23c0      	movs	r3, #192	; 0xc0
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a2:	2312      	movs	r3, #18
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ae:	2304      	movs	r3, #4
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <HAL_I2C_MspInit+0x84>)
 80006ba:	f000 fdcd 	bl	8001258 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40005400 	.word	0x40005400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 fbe4 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f830 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f7ff fee2 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fc:	f000 fa9e 	bl	8000c3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000700:	f7ff ff70 	bl	80005e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000704:	f000 f8f8 	bl	80008f8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000708:	f000 fa68 	bl	8000bdc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800070c:	f000 fac6 	bl	8000c9c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000710:	f003 fd20 	bl	8004154 <MX_FATFS_Init>
  MX_RTC_Init();
 8000714:	f000 f8ac 	bl	8000870 <MX_RTC_Init>
  MX_TIM6_Init();
 8000718:	f000 fa0a 	bl	8000b30 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2101      	movs	r1, #1
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f000 ff5a 	bl	80015dc <HAL_GPIO_WritePin>
  while (1)
  {
	  if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
 8000728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f000 ff3c 	bl	80015ac <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d106      	bne.n	8000748 <main+0x5c>
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2101      	movs	r1, #1
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f000 ff4b 	bl	80015dc <HAL_GPIO_WritePin>
 8000746:	e7ef      	b.n	8000728 <main+0x3c>
	  else
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f000 ff44 	bl	80015dc <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
 8000754:	e7e8      	b.n	8000728 <main+0x3c>
	...

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b0b8      	sub	sp, #224	; 0xe0
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000762:	2244      	movs	r2, #68	; 0x44
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fdde 	bl	8004328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2288      	movs	r2, #136	; 0x88
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fdd0 	bl	8004328 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000788:	230a      	movs	r3, #10
 800078a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000792:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2310      	movs	r3, #16
 8000798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007b4:	230a      	movs	r3, #10
 80007b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 f8a5 	bl	8001920 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007dc:	f000 f840 	bl	8000860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000802:	2104      	movs	r1, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fc71 	bl	80020ec <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000810:	f000 f826 	bl	8000860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <SystemClock_Config+0x104>)
 8000816:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800081c:	2300      	movs	r3, #0
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000820:	2300      	movs	r3, #0
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000824:	2300      	movs	r3, #0
 8000826:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fe60 	bl	80024f8 <HAL_RCCEx_PeriphCLKConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800083e:	f000 f80f 	bl	8000860 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000842:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000846:	f001 f815 	bl	8001874 <HAL_PWREx_ControlVoltageScaling>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000850:	f000 f806 	bl	8000860 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	37e0      	adds	r7, #224	; 0xe0
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	00020047 	.word	0x00020047

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_RTC_Init+0x48>)
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MX_RTC_Init+0x4c>)
 8000878:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_RTC_Init+0x48>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_RTC_Init+0x48>)
 8000882:	227f      	movs	r2, #127	; 0x7f
 8000884:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_RTC_Init+0x48>)
 8000888:	22ff      	movs	r2, #255	; 0xff
 800088a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_RTC_Init+0x48>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_RTC_Init+0x48>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_RTC_Init+0x48>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_RTC_Init+0x48>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_RTC_Init+0x48>)
 80008a6:	f002 fae3 	bl	8002e70 <HAL_RTC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80008b0:	f7ff ffd6 	bl	8000860 <Error_Handler>
  }

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000094 	.word	0x20000094
 80008bc:	40002800 	.word	0x40002800

080008c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_RTC_MspInit+0x30>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d107      	bne.n	80008e2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_RTC_MspInit+0x34>)
 80008d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_RTC_MspInit+0x34>)
 80008da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40002800 	.word	0x40002800
 80008f4:	40021000 	.word	0x40021000

080008f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_SPI1_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_SPI1_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_SPI1_Init+0x74>)
 8000904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_SPI1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI1_Init+0x74>)
 8000912:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000916:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI1_Init+0x74>)
 8000926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_SPI1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI1_Init+0x74>)
 8000946:	2207      	movs	r2, #7
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_SPI1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI1_Init+0x74>)
 8000952:	2208      	movs	r2, #8
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_SPI1_Init+0x74>)
 8000958:	f002 fb9c 	bl	8003094 <HAL_SPI_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000962:	f7ff ff7d 	bl	8000860 <Error_Handler>
  }

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000b8 	.word	0x200000b8
 8000970:	40013000 	.word	0x40013000

08000974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_SPI_MspInit+0x7c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d128      	bne.n	80009e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_SPI_MspInit+0x80>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <HAL_SPI_MspInit+0x80>)
 800099c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_SPI_MspInit+0x80>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_SPI_MspInit+0x80>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_SPI_MspInit+0x80>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_SPI_MspInit+0x80>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009c6:	23e0      	movs	r3, #224	; 0xe0
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d6:	2305      	movs	r3, #5
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f000 fc38 	bl	8001258 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40013000 	.word	0x40013000
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_MspInit+0x44>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_MspInit+0x44>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_MspInit+0x44>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x44>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x44>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6593      	str	r3, [r2, #88]	; 0x58
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x44>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 fa6e 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <USART1_IRQHandler+0x10>)
 8000aa2:	f002 fdb7 	bl	8003614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001e8 	.word	0x200001e8

08000ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <USART2_IRQHandler+0x10>)
 8000ab6:	f002 fdad 	bl	8003614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000268 	.word	0x20000268

08000ac4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <SystemInit+0x64>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <SystemInit+0x64>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <SystemInit+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <SystemInit+0x68>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <SystemInit+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <SystemInit+0x68>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <SystemInit+0x68>)
 8000af0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <SystemInit+0x68>)
 8000afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <SystemInit+0x68>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <SystemInit+0x68>)
 8000b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <SystemInit+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SystemInit+0x64>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00
 8000b2c:	40021000 	.word	0x40021000

08000b30 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_TIM6_Init+0x64>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_TIM6_Init+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_TIM6_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_TIM6_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_TIM6_Init+0x64>)
 8000b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_TIM6_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM6_Init+0x64>)
 8000b62:	f002 fb3a 	bl	80031da <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b6c:	f7ff fe78 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_TIM6_Init+0x64>)
 8000b7e:	f002 fc1d 	bl	80033bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f7ff fe6a 	bl	8000860 <Error_Handler>
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000011c 	.word	0x2000011c
 8000b98:	40001000 	.word	0x40001000

08000b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_TIM_Base_MspInit+0x38>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d10b      	bne.n	8000bc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40001000 	.word	0x40001000
 8000bd8:	40021000 	.word	0x40021000

08000bdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <MX_USART1_UART_Init+0x5c>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USART1_UART_Init+0x58>)
 8000c20:	f002 fca2 	bl	8003568 <HAL_HalfDuplex_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c2a:	f7ff fe19 	bl	8000860 <Error_Handler>
  }

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001e8 	.word	0x200001e8
 8000c38:	40013800 	.word	0x40013800

08000c3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <MX_USART2_UART_Init+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c80:	f002 fc24 	bl	80034cc <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f7ff fde9 	bl	8000860 <Error_Handler>
  }

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000268 	.word	0x20000268
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART3_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ce0:	f002 fbf4 	bl	80034cc <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f7ff fdb9 	bl	8000860 <Error_Handler>
  }

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000168 	.word	0x20000168
 8000cf8:	40004800 	.word	0x40004800

08000cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	; 0x38
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a4e      	ldr	r2, [pc, #312]	; (8000e54 <HAL_UART_MspInit+0x158>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d132      	bne.n	8000d84 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1e:	4b4e      	ldr	r3, [pc, #312]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a4d      	ldr	r2, [pc, #308]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	623b      	str	r3, [r7, #32]
 8000d34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a47      	ldr	r2, [pc, #284]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DS18B20_ONE_WIRE_Pin;
 8000d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d60:	2307      	movs	r3, #7
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DS18B20_ONE_WIRE_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f000 fa73 	bl	8001258 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2025      	movs	r0, #37	; 0x25
 8000d78:	f000 f9f7 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d7c:	2025      	movs	r0, #37	; 0x25
 8000d7e:	f000 fa10 	bl	80011a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d82:	e063      	b.n	8000e4c <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a34      	ldr	r2, [pc, #208]	; (8000e5c <HAL_UART_MspInit+0x160>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d131      	bne.n	8000df2 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a2b      	ldr	r2, [pc, #172]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f000 fa3c 	bl	8001258 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2026      	movs	r0, #38	; 0x26
 8000de6:	f000 f9c0 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dea:	2026      	movs	r0, #38	; 0x26
 8000dec:	f000 f9d9 	bl	80011a2 <HAL_NVIC_EnableIRQ>
}
 8000df0:	e02c      	b.n	8000e4c <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART3)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d127      	bne.n	8000e4c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e00:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	6593      	str	r3, [r2, #88]	; 0x58
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_UART_MspInit+0x15c>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HC_05_TX_Pin|HC_05_RX_Pin;
 8000e2c:	2330      	movs	r3, #48	; 0x30
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <HAL_UART_MspInit+0x168>)
 8000e48:	f000 fa06 	bl	8001258 <HAL_GPIO_Init>
}
 8000e4c:	bf00      	nop
 8000e4e:	3738      	adds	r7, #56	; 0x38
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40004800 	.word	0x40004800
 8000e64:	48000800 	.word	0x48000800

08000e68 <Reset_Handler>:
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopForever+0x2>
 8000e6c:	f7ff fe2a 	bl	8000ac4 <SystemInit>
 8000e70:	2100      	movs	r1, #0
 8000e72:	e003      	b.n	8000e7c <LoopCopyDataInit>

08000e74 <CopyDataInit>:
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <LoopForever+0x6>)
 8000e76:	585b      	ldr	r3, [r3, r1]
 8000e78:	5043      	str	r3, [r0, r1]
 8000e7a:	3104      	adds	r1, #4

08000e7c <LoopCopyDataInit>:
 8000e7c:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <LoopForever+0xa>)
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <LoopForever+0xe>)
 8000e80:	1842      	adds	r2, r0, r1
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d3f6      	bcc.n	8000e74 <CopyDataInit>
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <LoopForever+0x12>)
 8000e88:	e002      	b.n	8000e90 <LoopFillZerobss>

08000e8a <FillZerobss>:
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f842 3b04 	str.w	r3, [r2], #4

08000e90 <LoopFillZerobss>:
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LoopForever+0x16>)
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d3f9      	bcc.n	8000e8a <FillZerobss>
 8000e96:	f003 fa23 	bl	80042e0 <__libc_init_array>
 8000e9a:	f7ff fc27 	bl	80006ec <main>

08000e9e <LoopForever>:
 8000e9e:	e7fe      	b.n	8000e9e <LoopForever>
 8000ea0:	20018000 	.word	0x20018000
 8000ea4:	080043a8 	.word	0x080043a8
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000020 	.word	0x20000020
 8000eb0:	20000020 	.word	0x20000020
 8000eb4:	2000235c 	.word	0x2000235c

08000eb8 <ADC1_2_IRQHandler>:
 8000eb8:	e7fe      	b.n	8000eb8 <ADC1_2_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_Init+0x3c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_Init+0x3c>)
 8000ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f93e 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 f80f 	bl	8000efc <HAL_InitTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	e001      	b.n	8000eee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eea:	f7ff fd85 	bl	80009f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40022000 	.word	0x40022000

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_InitTick+0x6c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d023      	beq.n	8000f58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_InitTick+0x70>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_InitTick+0x6c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f949 	bl	80011be <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10f      	bne.n	8000f52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d809      	bhi.n	8000f4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f913 	bl	800116a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_InitTick+0x74>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e007      	b.n	8000f5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e004      	b.n	8000f5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e001      	b.n	8000f5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	200002e8 	.word	0x200002e8

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200002e8 	.word	0x200002e8

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d005      	beq.n	80011fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2204      	movs	r2, #4
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e029      	b.n	800124e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 020e 	bic.w	r2, r2, #14
 8001208:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f003 021c 	and.w	r2, r3, #28
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2101      	movs	r1, #1
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
    }
  }
  return status;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001266:	e17f      	b.n	8001568 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8171 	beq.w	8001562 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d00b      	beq.n	80012a0 <HAL_GPIO_Init+0x48>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d007      	beq.n	80012a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001294:	2b11      	cmp	r3, #17
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b12      	cmp	r3, #18
 800129e:	d130      	bne.n	8001302 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012d6:	2201      	movs	r2, #1
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f003 0201 	and.w	r2, r3, #1
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b03      	cmp	r3, #3
 800130c:	d118      	bne.n	8001340 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x128>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b12      	cmp	r3, #18
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	6939      	ldr	r1, [r7, #16]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80ac 	beq.w	8001562 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b5f      	ldr	r3, [pc, #380]	; (8001588 <HAL_GPIO_Init+0x330>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	4a5e      	ldr	r2, [pc, #376]	; (8001588 <HAL_GPIO_Init+0x330>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6613      	str	r3, [r2, #96]	; 0x60
 8001416:	4b5c      	ldr	r3, [pc, #368]	; (8001588 <HAL_GPIO_Init+0x330>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001422:	4a5a      	ldr	r2, [pc, #360]	; (800158c <HAL_GPIO_Init+0x334>)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800144c:	d025      	beq.n	800149a <HAL_GPIO_Init+0x242>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4f      	ldr	r2, [pc, #316]	; (8001590 <HAL_GPIO_Init+0x338>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d01f      	beq.n	8001496 <HAL_GPIO_Init+0x23e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4e      	ldr	r2, [pc, #312]	; (8001594 <HAL_GPIO_Init+0x33c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x23a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4d      	ldr	r2, [pc, #308]	; (8001598 <HAL_GPIO_Init+0x340>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x236>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4c      	ldr	r2, [pc, #304]	; (800159c <HAL_GPIO_Init+0x344>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x232>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4b      	ldr	r2, [pc, #300]	; (80015a0 <HAL_GPIO_Init+0x348>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x22e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4a      	ldr	r2, [pc, #296]	; (80015a4 <HAL_GPIO_Init+0x34c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x22a>
 800147e:	2306      	movs	r3, #6
 8001480:	e00c      	b.n	800149c <HAL_GPIO_Init+0x244>
 8001482:	2307      	movs	r3, #7
 8001484:	e00a      	b.n	800149c <HAL_GPIO_Init+0x244>
 8001486:	2305      	movs	r3, #5
 8001488:	e008      	b.n	800149c <HAL_GPIO_Init+0x244>
 800148a:	2304      	movs	r3, #4
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x244>
 800148e:	2303      	movs	r3, #3
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x244>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x244>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x244>
 800149a:	2300      	movs	r3, #0
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	f002 0203 	and.w	r2, r2, #3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4093      	lsls	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ac:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_GPIO_Init+0x334>)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_GPIO_Init+0x350>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014de:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <HAL_GPIO_Init+0x350>)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_GPIO_Init+0x350>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001508:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <HAL_GPIO_Init+0x350>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_GPIO_Init+0x350>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001532:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_GPIO_Init+0x350>)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_GPIO_Init+0x350>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800155c:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <HAL_GPIO_Init+0x350>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	f47f ae78 	bne.w	8001268 <HAL_GPIO_Init+0x10>
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	48001800 	.word	0x48001800
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e001      	b.n	80015ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e081      	b.n	8001722 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff f816 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800165c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800166c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e006      	b.n	8001694 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001692:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d104      	bne.n	80016a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ea42 0103 	orr.w	r1, r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	021a      	lsls	r2, r3, #8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69d9      	ldr	r1, [r3, #28]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b20      	cmp	r3, #32
 800173e:	d138      	bne.n	80017b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800174a:	2302      	movs	r3, #2
 800174c:	e032      	b.n	80017b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2224      	movs	r2, #36	; 0x24
 800175a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800177c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017b2:	2302      	movs	r3, #2
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	d139      	bne.n	800184a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e033      	b.n	800184c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2224      	movs	r2, #36	; 0x24
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001812:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800184a:	2302      	movs	r3, #2
  }
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <HAL_PWREx_GetVoltageRange+0x18>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001882:	d130      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800188c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001890:	d038      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2232      	movs	r2, #50	; 0x32
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b8:	e002      	b.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018cc:	d102      	bne.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f2      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e0:	d110      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e00f      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f2:	d007      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018fc:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000
 8001918:	20000000 	.word	0x20000000
 800191c:	431bde83 	.word	0x431bde83

08001920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e3d4      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001932:	4ba1      	ldr	r3, [pc, #644]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193c:	4b9e      	ldr	r3, [pc, #632]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80e4 	beq.w	8001b1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_RCC_OscConfig+0x4a>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	f040 808b 	bne.w	8001a78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 8087 	bne.w	8001a78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196a:	4b93      	ldr	r3, [pc, #588]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x62>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e3ac      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_RCC_OscConfig+0x7c>
 8001992:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199a:	e005      	b.n	80019a8 <HAL_RCC_OscConfig+0x88>
 800199c:	4b86      	ldr	r3, [pc, #536]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d223      	bcs.n	80019f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fd41 	bl	8002438 <RCC_SetFlashLatencyFromMSIRange>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e38d      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c0:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a7c      	ldr	r2, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b7a      	ldr	r3, [pc, #488]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4977      	ldr	r1, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019de:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	4972      	ldr	r1, [pc, #456]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
 80019f2:	e025      	b.n	8001a40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6f      	ldr	r2, [pc, #444]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b6d      	ldr	r3, [pc, #436]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	496a      	ldr	r1, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a12:	4b69      	ldr	r3, [pc, #420]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	4965      	ldr	r1, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fd01 	bl	8002438 <RCC_SetFlashLatencyFromMSIRange>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e34d      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a40:	f000 fc36 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	495a      	ldr	r1, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x29c>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_OscConfig+0x2a0>)
 8001a5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a60:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_RCC_OscConfig+0x2a4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fa49 	bl	8000efc <HAL_InitTick>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d052      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	e331      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d032      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a4c      	ldr	r2, [pc, #304]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fa86 	bl	8000f9c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a94:	f7ff fa82 	bl	8000f9c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e31a      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa6:	4b44      	ldr	r3, [pc, #272]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a40      	ldr	r2, [pc, #256]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	493b      	ldr	r1, [pc, #236]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad0:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	4936      	ldr	r1, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e01a      	b.n	8001b1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a33      	ldr	r2, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fa53 	bl	8000f9c <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afa:	f7ff fa4f 	bl	8000f9c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e2e7      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x1da>
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d074      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x21a>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d10e      	bne.n	8001b52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d10b      	bne.n	8001b52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d064      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d160      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e2c4      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x24a>
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e01d      	b.n	8001ba6 <HAL_RCC_OscConfig+0x286>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b72:	d10c      	bne.n	8001b8e <HAL_RCC_OscConfig+0x26e>
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e00b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x286>
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x298>)
 8001ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f9f5 	bl	8000f9c <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb4:	e011      	b.n	8001bda <HAL_RCC_OscConfig+0x2ba>
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08004350 	.word	0x08004350
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f9e8 	bl	8000f9c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e280      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4baf      	ldr	r3, [pc, #700]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2a8>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f9d8 	bl	8000f9c <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff f9d4 	bl	8000f9c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e26c      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c02:	4ba5      	ldr	r3, [pc, #660]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2d0>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d060      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x310>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d116      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c30:	4b99      	ldr	r3, [pc, #612]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x328>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e249      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b93      	ldr	r3, [pc, #588]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	4990      	ldr	r1, [pc, #576]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	e040      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d023      	beq.n	8001cae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c66:	4b8c      	ldr	r3, [pc, #560]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a8b      	ldr	r2, [pc, #556]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff f993 	bl	8000f9c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f98f 	bl	8000f9c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e227      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8c:	4b82      	ldr	r3, [pc, #520]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b7f      	ldr	r3, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	497c      	ldr	r1, [pc, #496]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e018      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b7a      	ldr	r3, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a79      	ldr	r2, [pc, #484]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff f96f 	bl	8000f9c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff f96b 	bl	8000f9c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e203      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd4:	4b70      	ldr	r3, [pc, #448]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d03c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff f94a 	bl	8000f9c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff f946 	bl	8000f9c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1de      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1e:	4b5e      	ldr	r3, [pc, #376]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ef      	beq.n	8001d0c <HAL_RCC_OscConfig+0x3ec>
 8001d2c:	e01b      	b.n	8001d66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d34:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f92d 	bl	8000f9c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff f929 	bl	8000f9c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1c1      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d58:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ef      	bne.n	8001d46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a6 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d78:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	4a43      	ldr	r2, [pc, #268]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d90:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <HAL_RCC_OscConfig+0x57c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d118      	bne.n	8001dde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <HAL_RCC_OscConfig+0x57c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3a      	ldr	r2, [pc, #232]	; (8001e9c <HAL_RCC_OscConfig+0x57c>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db8:	f7ff f8f0 	bl	8000f9c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7ff f8ec 	bl	8000f9c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e184      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <HAL_RCC_OscConfig+0x57c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d8>
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df6:	e024      	b.n	8001e42 <HAL_RCC_OscConfig+0x522>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d110      	bne.n	8001e22 <HAL_RCC_OscConfig+0x502>
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e20:	e00f      	b.n	8001e42 <HAL_RCC_OscConfig+0x522>
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e2a:	f023 0301 	bic.w	r3, r3, #1
 8001e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f8a7 	bl	8000f9c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff f8a3 	bl	8000f9c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e139      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x578>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ed      	beq.n	8001e52 <HAL_RCC_OscConfig+0x532>
 8001e76:	e01a      	b.n	8001eae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff f890 	bl	8000f9c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff f88c 	bl	8000f9c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d906      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e122      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b90      	ldr	r3, [pc, #576]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e8      	bne.n	8001e80 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a8a      	ldr	r2, [pc, #552]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8108 	beq.w	80020da <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	f040 80d0 	bne.w	8002074 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ed4:	4b83      	ldr	r3, [pc, #524]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d130      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d127      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d11f      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f14:	2a07      	cmp	r2, #7
 8001f16:	bf14      	ite	ne
 8001f18:	2201      	movne	r2, #1
 8001f1a:	2200      	moveq	r2, #0
 8001f1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d113      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	3b01      	subs	r3, #1
 8001f44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d06e      	beq.n	8002028 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d069      	beq.n	8002024 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f50:	4b64      	ldr	r3, [pc, #400]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f5c:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b7      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f6c:	4b5d      	ldr	r3, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5c      	ldr	r2, [pc, #368]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f78:	f7ff f810 	bl	8000f9c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f80c 	bl	8000f9c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0a4      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f92:	4b54      	ldr	r3, [pc, #336]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9e:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_RCC_OscConfig+0x7c8>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fb8:	0212      	lsls	r2, r2, #8
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fc0:	0852      	lsrs	r2, r2, #1
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	0552      	lsls	r2, r2, #21
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fcc:	0852      	lsrs	r2, r2, #1
 8001fce:	3a01      	subs	r2, #1
 8001fd0:	0652      	lsls	r2, r2, #25
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fd8:	0912      	lsrs	r2, r2, #4
 8001fda:	0452      	lsls	r2, r2, #17
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	4941      	ldr	r1, [pc, #260]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a3e      	ldr	r2, [pc, #248]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ffc:	f7fe ffce 	bl	8000f9c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe ffca 	bl	8000f9c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e062      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002022:	e05a      	b.n	80020da <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e059      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d152      	bne.n	80020da <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800204c:	f7fe ffa6 	bl	8000f9c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe ffa2 	bl	8000f9c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e03a      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x734>
 8002072:	e032      	b.n	80020da <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d02d      	beq.n	80020d6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002084:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 8002098:	f023 0303 	bic.w	r3, r3, #3
 800209c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 80020a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7fe ff75 	bl	8000f9c <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7fe ff71 	bl	8000f9c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e009      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCC_OscConfig+0x796>
 80020d4:	e001      	b.n	80020da <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	f99d808c 	.word	0xf99d808c

080020ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0c8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b66      	ldr	r3, [pc, #408]	; (800229c <HAL_RCC_ClockConfig+0x1b0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_ClockConfig+0x1b0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4961      	ldr	r1, [pc, #388]	; (800229c <HAL_RCC_ClockConfig+0x1b0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_ClockConfig+0x1b0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b0      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d04c      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d107      	bne.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002144:	4b56      	ldr	r3, [pc, #344]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d121      	bne.n	8002194 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e09e      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d107      	bne.n	800216c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d115      	bne.n	8002194 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e092      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002174:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e086      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002184:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e07e      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002194:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 0203 	bic.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	493f      	ldr	r1, [pc, #252]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a6:	f7fe fef9 	bl	8000f9c <HAL_GetTick>
 80021aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ae:	f7fe fef5 	bl	8000f9c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e066      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 020c 	and.w	r2, r3, #12
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d1eb      	bne.n	80021ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	492c      	ldr	r1, [pc, #176]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_ClockConfig+0x1b0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d210      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_ClockConfig+0x1b0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	4924      	ldr	r1, [pc, #144]	; (800229c <HAL_RCC_ClockConfig+0x1b0>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x1b0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e036      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4918      	ldr	r1, [pc, #96]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4910      	ldr	r1, [pc, #64]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002262:	f000 f825 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_RCC_ClockConfig+0x1b4>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	490c      	ldr	r1, [pc, #48]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	5ccb      	ldrb	r3, [r1, r3]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fe38 	bl	8000efc <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002290:	7afb      	ldrb	r3, [r7, #11]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08004350 	.word	0x08004350
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022be:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x34>
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d121      	bne.n	8002322 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d11e      	bne.n	8002322 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022f0:	4b31      	ldr	r3, [pc, #196]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e005      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002300:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800230c:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10d      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d102      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	e004      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d101      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002336:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d134      	bne.n	80023a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0xa6>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d003      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0xac>
 8002354:	e005      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002358:	617b      	str	r3, [r7, #20]
      break;
 800235a:	e005      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800235e:	617b      	str	r3, [r7, #20]
      break;
 8002360:	e002      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	617b      	str	r3, [r7, #20]
      break;
 8002366:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	3301      	adds	r3, #1
 8002374:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	fb02 f203 	mul.w	r2, r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	0e5b      	lsrs	r3, r3, #25
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	3301      	adds	r3, #1
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023a8:	69bb      	ldr	r3, [r7, #24]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08004368 	.word	0x08004368
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4904      	ldr	r1, [pc, #16]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	08004360 	.word	0x08004360

0800240c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002410:	f7ff ffda 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0adb      	lsrs	r3, r3, #11
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4904      	ldr	r1, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	08004360 	.word	0x08004360

08002438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002444:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002450:	f7ff fa02 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 8002454:	6178      	str	r0, [r7, #20]
 8002456:	e014      	b.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6593      	str	r3, [r2, #88]	; 0x58
 8002464:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002470:	f7ff f9f2 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 8002474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d10b      	bne.n	80024a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d919      	bls.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2ba0      	cmp	r3, #160	; 0xa0
 8002494:	d902      	bls.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002496:	2302      	movs	r3, #2
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	e013      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800249c:	2301      	movs	r3, #1
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	e010      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b80      	cmp	r3, #128	; 0x80
 80024a6:	d902      	bls.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024a8:	2303      	movs	r3, #3
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e00a      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d102      	bne.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024b4:	2302      	movs	r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e004      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b70      	cmp	r3, #112	; 0x70
 80024be:	d101      	bne.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c0:	2301      	movs	r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 0207 	bic.w	r2, r3, #7
 80024cc:	4909      	ldr	r1, [pc, #36]	; (80024f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40022000 	.word	0x40022000

080024f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002500:	2300      	movs	r3, #0
 8002502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002504:	2300      	movs	r3, #0
 8002506:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002510:	2b00      	cmp	r3, #0
 8002512:	d041      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002518:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800251c:	d02a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800251e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002522:	d824      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002528:	d008      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800252a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800252e:	d81e      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d010      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800253a:	e018      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800253c:	4b86      	ldr	r3, [pc, #536]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a85      	ldr	r2, [pc, #532]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002546:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002548:	e015      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fabb 	bl	8002acc <RCCEx_PLLSAI1_Config>
 8002556:	4603      	mov	r3, r0
 8002558:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800255a:	e00c      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3320      	adds	r3, #32
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fba6 	bl	8002cb4 <RCCEx_PLLSAI2_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800256c:	e003      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	74fb      	strb	r3, [r7, #19]
      break;
 8002572:	e000      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800257c:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800258a:	4973      	ldr	r1, [pc, #460]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002592:	e001      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d041      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025ac:	d02a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025b2:	d824      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025be:	d81e      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c8:	d010      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ca:	e018      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025cc:	4b62      	ldr	r3, [pc, #392]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a61      	ldr	r2, [pc, #388]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d8:	e015      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fa73 	bl	8002acc <RCCEx_PLLSAI1_Config>
 80025e6:	4603      	mov	r3, r0
 80025e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ea:	e00c      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3320      	adds	r3, #32
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fb5e 	bl	8002cb4 <RCCEx_PLLSAI2_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025fc:	e003      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	74fb      	strb	r3, [r7, #19]
      break;
 8002602:	e000      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800260c:	4b52      	ldr	r3, [pc, #328]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800261a:	494f      	ldr	r1, [pc, #316]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002622:	e001      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a0 	beq.w	8002776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	4a40      	ldr	r2, [pc, #256]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265a:	6593      	str	r3, [r2, #88]	; 0x58
 800265c:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002668:	2301      	movs	r3, #1
 800266a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800266c:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3a      	ldr	r2, [pc, #232]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002678:	f7fe fc90 	bl	8000f9c <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267e:	e009      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002680:	f7fe fc8c 	bl	8000f9c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d902      	bls.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	74fb      	strb	r3, [r7, #19]
        break;
 8002692:	e005      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ef      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d15c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01f      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d019      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fc4b 	bl	8000f9c <HAL_GetTick>
 8002706:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002708:	e00b      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe fc47 	bl	8000f9c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d902      	bls.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	74fb      	strb	r3, [r7, #19]
            break;
 8002720:	e006      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ec      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002746:	4904      	ldr	r1, [pc, #16]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800274e:	e009      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002764:	7c7b      	ldrb	r3, [r7, #17]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d105      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276a:	4b9e      	ldr	r3, [pc, #632]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	4a9d      	ldr	r2, [pc, #628]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002782:	4b98      	ldr	r3, [pc, #608]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	f023 0203 	bic.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	4994      	ldr	r1, [pc, #592]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a4:	4b8f      	ldr	r3, [pc, #572]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 020c 	bic.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	498c      	ldr	r1, [pc, #560]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027c6:	4b87      	ldr	r3, [pc, #540]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4983      	ldr	r1, [pc, #524]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027e8:	4b7e      	ldr	r3, [pc, #504]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	497b      	ldr	r1, [pc, #492]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800280a:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	4972      	ldr	r1, [pc, #456]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800282c:	4b6d      	ldr	r3, [pc, #436]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	496a      	ldr	r1, [pc, #424]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800284e:	4b65      	ldr	r3, [pc, #404]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	4961      	ldr	r1, [pc, #388]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002870:	4b5c      	ldr	r3, [pc, #368]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287e:	4959      	ldr	r1, [pc, #356]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002892:	4b54      	ldr	r3, [pc, #336]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a0:	4950      	ldr	r1, [pc, #320]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b4:	4b4b      	ldr	r3, [pc, #300]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	4948      	ldr	r1, [pc, #288]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d6:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	493f      	ldr	r1, [pc, #252]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d028      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002906:	4937      	ldr	r1, [pc, #220]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002916:	d106      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002922:	60d3      	str	r3, [r2, #12]
 8002924:	e011      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800292e:	d10c      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f8c8 	bl	8002acc <RCCEx_PLLSAI1_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	491f      	ldr	r1, [pc, #124]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002974:	d106      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002980:	60d3      	str	r3, [r2, #12]
 8002982:	e011      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2101      	movs	r1, #1
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f899 	bl	8002acc <RCCEx_PLLSAI1_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d02b      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d2:	d109      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a02      	ldr	r2, [pc, #8]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029de:	60d3      	str	r3, [r2, #12]
 80029e0:	e014      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2101      	movs	r1, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f867 	bl	8002acc <RCCEx_PLLSAI1_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a26:	4928      	ldr	r1, [pc, #160]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a36:	d10d      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f844 	bl	8002acc <RCCEx_PLLSAI1_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d014      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	74bb      	strb	r3, [r7, #18]
 8002a52:	e011      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3320      	adds	r3, #32
 8002a62:	2102      	movs	r1, #2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f925 	bl	8002cb4 <RCCEx_PLLSAI2_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a84:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a92:	490d      	ldr	r1, [pc, #52]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab6:	4904      	ldr	r1, [pc, #16]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002abe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000

08002acc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ada:	4b75      	ldr	r3, [pc, #468]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d018      	beq.n	8002b18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ae6:	4b72      	ldr	r3, [pc, #456]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0203 	and.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d10d      	bne.n	8002b12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
       ||
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002afe:	4b6c      	ldr	r3, [pc, #432]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d047      	beq.n	8002ba2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e044      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d018      	beq.n	8002b52 <RCCEx_PLLSAI1_Config+0x86>
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d825      	bhi.n	8002b70 <RCCEx_PLLSAI1_Config+0xa4>
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d002      	beq.n	8002b2e <RCCEx_PLLSAI1_Config+0x62>
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d009      	beq.n	8002b40 <RCCEx_PLLSAI1_Config+0x74>
 8002b2c:	e020      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b2e:	4b60      	ldr	r3, [pc, #384]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11d      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3e:	e01a      	b.n	8002b76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b40:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d116      	bne.n	8002b7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e013      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b52:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b6e:	e006      	b.n	8002b7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e004      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b86:	4b4a      	ldr	r3, [pc, #296]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6819      	ldr	r1, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	4944      	ldr	r1, [pc, #272]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d17d      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ba8:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a40      	ldr	r2, [pc, #256]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb4:	f7fe f9f2 	bl	8000f9c <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bba:	e009      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bbc:	f7fe f9ee 	bl	8000f9c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d902      	bls.n	8002bd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8002bce:	e005      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ef      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d160      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6892      	ldr	r2, [r2, #8]
 8002bf8:	0211      	lsls	r1, r2, #8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	0912      	lsrs	r2, r2, #4
 8002c00:	0452      	lsls	r2, r2, #17
 8002c02:	430a      	orrs	r2, r1
 8002c04:	492a      	ldr	r1, [pc, #168]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	610b      	str	r3, [r1, #16]
 8002c0a:	e027      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d112      	bne.n	8002c38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c12:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6892      	ldr	r2, [r2, #8]
 8002c22:	0211      	lsls	r1, r2, #8
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6912      	ldr	r2, [r2, #16]
 8002c28:	0852      	lsrs	r2, r2, #1
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	0552      	lsls	r2, r2, #21
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	491f      	ldr	r1, [pc, #124]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	610b      	str	r3, [r1, #16]
 8002c36:	e011      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6952      	ldr	r2, [r2, #20]
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0652      	lsls	r2, r2, #25
 8002c54:	430a      	orrs	r2, r1
 8002c56:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe f998 	bl	8000f9c <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c6e:	e009      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c70:	f7fe f994 	bl	8000f9c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d902      	bls.n	8002c84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	73fb      	strb	r3, [r7, #15]
          break;
 8002c82:	e005      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ef      	beq.n	8002c70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	4904      	ldr	r1, [pc, #16]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d018      	beq.n	8002d00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cce:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0203 	and.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d10d      	bne.n	8002cfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ce6:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
       ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d047      	beq.n	8002d8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	e044      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d018      	beq.n	8002d3a <RCCEx_PLLSAI2_Config+0x86>
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d825      	bhi.n	8002d58 <RCCEx_PLLSAI2_Config+0xa4>
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d002      	beq.n	8002d16 <RCCEx_PLLSAI2_Config+0x62>
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d009      	beq.n	8002d28 <RCCEx_PLLSAI2_Config+0x74>
 8002d14:	e020      	b.n	8002d58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d16:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11d      	bne.n	8002d5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d26:	e01a      	b.n	8002d5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d28:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d116      	bne.n	8002d62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d38:	e013      	b.n	8002d62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10f      	bne.n	8002d66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d46:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d56:	e006      	b.n	8002d66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e004      	b.n	8002d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e002      	b.n	8002d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	430b      	orrs	r3, r1
 8002d84:	4939      	ldr	r1, [pc, #228]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d167      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d90:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a35      	ldr	r2, [pc, #212]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9c:	f7fe f8fe 	bl	8000f9c <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002da2:	e009      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002da4:	f7fe f8fa 	bl	8000f9c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d902      	bls.n	8002db8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	73fb      	strb	r3, [r7, #15]
        break;
 8002db6:	e005      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002db8:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ef      	bne.n	8002da4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d14a      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d111      	bne.n	8002df4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dd0:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6892      	ldr	r2, [r2, #8]
 8002de0:	0211      	lsls	r1, r2, #8
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	0912      	lsrs	r2, r2, #4
 8002de8:	0452      	lsls	r2, r2, #17
 8002dea:	430a      	orrs	r2, r1
 8002dec:	491f      	ldr	r1, [pc, #124]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	614b      	str	r3, [r1, #20]
 8002df2:	e011      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	0211      	lsls	r1, r2, #8
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6912      	ldr	r2, [r2, #16]
 8002e0a:	0852      	lsrs	r2, r2, #1
 8002e0c:	3a01      	subs	r2, #1
 8002e0e:	0652      	lsls	r2, r2, #25
 8002e10:	430a      	orrs	r2, r1
 8002e12:	4916      	ldr	r1, [pc, #88]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe f8ba 	bl	8000f9c <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e2a:	e009      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e2c:	f7fe f8b6 	bl	8000f9c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d902      	bls.n	8002e40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e3e:	e005      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ef      	beq.n	8002e2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4904      	ldr	r1, [pc, #16]	; (8002e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d06c      	beq.n	8002f5c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fd12 	bl	80008c0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	22ca      	movs	r2, #202	; 0xca
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2253      	movs	r2, #83	; 0x53
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f87c 	bl	8002fb2 <RTC_EnterInitMode>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d14b      	bne.n	8002f5c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68d2      	ldr	r2, [r2, #12]
 8002efe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6919      	ldr	r1, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	041a      	lsls	r2, r3, #16
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f87f 	bl	8003018 <RTC_ExitInitMode>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11b      	bne.n	8002f5c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0203 	bic.w	r2, r2, #3
 8002f32:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f7c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002f7e:	f7fe f80d 	bl	8000f9c <HAL_GetTick>
 8002f82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f84:	e009      	b.n	8002f9a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f86:	f7fe f809 	bl	8000f9c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f94:	d901      	bls.n	8002f9a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e007      	b.n	8002faa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ee      	beq.n	8002f86 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d120      	bne.n	800300e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002fd6:	f7fd ffe1 	bl	8000f9c <HAL_GetTick>
 8002fda:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002fdc:	e00d      	b.n	8002ffa <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002fde:	f7fd ffdd 	bl	8000f9c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fec:	d905      	bls.n	8002ffa <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <RTC_EnterInitMode+0x5c>
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d1e7      	bne.n	8002fde <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <RTC_ExitInitMode+0x78>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <RTC_ExitInitMode+0x78>)
 800302a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <RTC_ExitInitMode+0x78>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10c      	bne.n	8003056 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff92 	bl	8002f66 <HAL_RTC_WaitForSynchro>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01e      	beq.n	8003086 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2203      	movs	r2, #3
 800304c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	e017      	b.n	8003086 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <RTC_ExitInitMode+0x78>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <RTC_ExitInitMode+0x78>)
 800305c:	f023 0320 	bic.w	r3, r3, #32
 8003060:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff7f 	bl	8002f66 <HAL_RTC_WaitForSynchro>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <RTC_ExitInitMode+0x78>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4a04      	ldr	r2, [pc, #16]	; (8003090 <RTC_ExitInitMode+0x78>)
 8003080:	f043 0320 	orr.w	r3, r3, #32
 8003084:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40002800 	.word	0x40002800

08003094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e095      	b.n	80031d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b6:	d009      	beq.n	80030cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	61da      	str	r2, [r3, #28]
 80030be:	e005      	b.n	80030cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fc44 	bl	8000974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003102:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800310c:	d902      	bls.n	8003114 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e002      	b.n	800311a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003118:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003122:	d007      	beq.n	8003134 <HAL_SPI_Init+0xa0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800312c:	d002      	beq.n	8003134 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	ea42 0103 	orr.w	r1, r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	0c1b      	lsrs	r3, r3, #16
 8003190:	f003 0204 	and.w	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031b0:	ea42 0103 	orr.w	r1, r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e049      	b.n	8003280 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fd fccb 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 f835 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <TIM_Base_SetConfig+0x114>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d00f      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3d      	ldr	r2, [pc, #244]	; (80033a0 <TIM_Base_SetConfig+0x118>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <TIM_Base_SetConfig+0x11c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <TIM_Base_SetConfig+0x120>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <TIM_Base_SetConfig+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <TIM_Base_SetConfig+0x114>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01f      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d01b      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <TIM_Base_SetConfig+0x118>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d017      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <TIM_Base_SetConfig+0x11c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <TIM_Base_SetConfig+0x120>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00f      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a29      	ldr	r2, [pc, #164]	; (80033ac <TIM_Base_SetConfig+0x124>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00b      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <TIM_Base_SetConfig+0x128>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <TIM_Base_SetConfig+0x12c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <TIM_Base_SetConfig+0x130>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d108      	bne.n	8003334 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a10      	ldr	r2, [pc, #64]	; (800339c <TIM_Base_SetConfig+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00f      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <TIM_Base_SetConfig+0x124>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <TIM_Base_SetConfig+0x128>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <TIM_Base_SetConfig+0x12c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <TIM_Base_SetConfig+0x130>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	615a      	str	r2, [r3, #20]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40013400 	.word	0x40013400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800

080033bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e068      	b.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2e      	ldr	r2, [pc, #184]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800340e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003420:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1e      	ldr	r2, [pc, #120]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01d      	beq.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d018      	beq.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d10c      	bne.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4313      	orrs	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40013400 	.word	0x40013400
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40014000 	.word	0x40014000

080034cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e040      	b.n	8003560 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fc04 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2224      	movs	r2, #36	; 0x24
 80034f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f9dc 	bl	80038c8 <UART_SetConfig>
 8003510:	4603      	mov	r3, r0
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e022      	b.n	8003560 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fc5a 	bl	8003ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fce1 	bl	8003f20 <UART_CheckIdleState>
 800355e:	4603      	mov	r3, r0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e048      	b.n	800360c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fbb6 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f98e 	bl	80038c8 <UART_SetConfig>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e02a      	b.n	800360c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fc0c 	bl	8003ddc <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80035e2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0208 	orr.w	r2, r2, #8
 80035f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fc8b 	bl	8003f20 <UART_CheckIdleState>
 800360a:	4603      	mov	r3, r0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f640 030f 	movw	r3, #2063	; 0x80f
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d113      	bne.n	800366c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00e      	beq.n	800366c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8113 	beq.w	8003888 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
      }
      return;
 800366a:	e10d      	b.n	8003888 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80d6 	beq.w	8003820 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_UART_IRQHandler+0x284>)
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80cb 	beq.w	8003820 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <HAL_UART_IRQHandler+0x9e>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2201      	movs	r2, #1
 80036a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00e      	beq.n	80036da <HAL_UART_IRQHandler+0xc6>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2202      	movs	r2, #2
 80036cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <HAL_UART_IRQHandler+0xee>
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2204      	movs	r2, #4
 80036f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2208      	movs	r2, #8
 8003726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372c:	f043 0208 	orr.w	r2, r3, #8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00f      	beq.n	800375e <HAL_UART_IRQHandler+0x14a>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8092 	beq.w	800388c <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003790:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d004      	beq.n	80037aa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d031      	beq.n	800380e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fc78 	bl	80040a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d123      	bne.n	8003806 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	4a30      	ldr	r2, [pc, #192]	; (800389c <HAL_UART_IRQHandler+0x288>)
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fcf7 	bl	80011d6 <HAL_DMA_Abort_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e00e      	b.n	800381c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f858 	bl	80038b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e00a      	b.n	800381c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f854 	bl	80038b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e006      	b.n	800381c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f850 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800381a:	e037      	b.n	800388c <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	bf00      	nop
    return;
 800381e:	e035      	b.n	800388c <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_UART_IRQHandler+0x232>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800383c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fc7d 	bl	800413e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003844:	e025      	b.n	8003892 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
    }
    return;
 800386a:	e011      	b.n	8003890 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <HAL_UART_IRQHandler+0x27e>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fc43 	bl	800410c <UART_EndTransmit_IT>
    return;
 8003886:	e004      	b.n	8003892 <HAL_UART_IRQHandler+0x27e>
      return;
 8003888:	bf00      	nop
 800388a:	e002      	b.n	8003892 <HAL_UART_IRQHandler+0x27e>
    return;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <HAL_UART_IRQHandler+0x27e>
    return;
 8003890:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	04000120 	.word	0x04000120
 800389c:	080040e1 	.word	0x080040e1

080038a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c8:	b5b0      	push	{r4, r5, r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4bad      	ldr	r3, [pc, #692]	; (8003ba8 <UART_SetConfig+0x2e0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4aa2      	ldr	r2, [pc, #648]	; (8003bac <UART_SetConfig+0x2e4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	4313      	orrs	r3, r2
 800392e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	430a      	orrs	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a99      	ldr	r2, [pc, #612]	; (8003bb0 <UART_SetConfig+0x2e8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d121      	bne.n	8003992 <UART_SetConfig+0xca>
 800394e:	4b99      	ldr	r3, [pc, #612]	; (8003bb4 <UART_SetConfig+0x2ec>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b03      	cmp	r3, #3
 800395a:	d817      	bhi.n	800398c <UART_SetConfig+0xc4>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <UART_SetConfig+0x9c>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003975 	.word	0x08003975
 8003968:	08003981 	.word	0x08003981
 800396c:	0800397b 	.word	0x0800397b
 8003970:	08003987 	.word	0x08003987
 8003974:	2301      	movs	r3, #1
 8003976:	76fb      	strb	r3, [r7, #27]
 8003978:	e0e7      	b.n	8003b4a <UART_SetConfig+0x282>
 800397a:	2302      	movs	r3, #2
 800397c:	76fb      	strb	r3, [r7, #27]
 800397e:	e0e4      	b.n	8003b4a <UART_SetConfig+0x282>
 8003980:	2304      	movs	r3, #4
 8003982:	76fb      	strb	r3, [r7, #27]
 8003984:	e0e1      	b.n	8003b4a <UART_SetConfig+0x282>
 8003986:	2308      	movs	r3, #8
 8003988:	76fb      	strb	r3, [r7, #27]
 800398a:	e0de      	b.n	8003b4a <UART_SetConfig+0x282>
 800398c:	2310      	movs	r3, #16
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	e0db      	b.n	8003b4a <UART_SetConfig+0x282>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a88      	ldr	r2, [pc, #544]	; (8003bb8 <UART_SetConfig+0x2f0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d132      	bne.n	8003a02 <UART_SetConfig+0x13a>
 800399c:	4b85      	ldr	r3, [pc, #532]	; (8003bb4 <UART_SetConfig+0x2ec>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d828      	bhi.n	80039fc <UART_SetConfig+0x134>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0xe8>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	080039fd 	.word	0x080039fd
 80039b8:	080039fd 	.word	0x080039fd
 80039bc:	080039fd 	.word	0x080039fd
 80039c0:	080039f1 	.word	0x080039f1
 80039c4:	080039fd 	.word	0x080039fd
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	080039fd 	.word	0x080039fd
 80039d0:	080039eb 	.word	0x080039eb
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	080039fd 	.word	0x080039fd
 80039dc:	080039fd 	.word	0x080039fd
 80039e0:	080039f7 	.word	0x080039f7
 80039e4:	2300      	movs	r3, #0
 80039e6:	76fb      	strb	r3, [r7, #27]
 80039e8:	e0af      	b.n	8003b4a <UART_SetConfig+0x282>
 80039ea:	2302      	movs	r3, #2
 80039ec:	76fb      	strb	r3, [r7, #27]
 80039ee:	e0ac      	b.n	8003b4a <UART_SetConfig+0x282>
 80039f0:	2304      	movs	r3, #4
 80039f2:	76fb      	strb	r3, [r7, #27]
 80039f4:	e0a9      	b.n	8003b4a <UART_SetConfig+0x282>
 80039f6:	2308      	movs	r3, #8
 80039f8:	76fb      	strb	r3, [r7, #27]
 80039fa:	e0a6      	b.n	8003b4a <UART_SetConfig+0x282>
 80039fc:	2310      	movs	r3, #16
 80039fe:	76fb      	strb	r3, [r7, #27]
 8003a00:	e0a3      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6d      	ldr	r2, [pc, #436]	; (8003bbc <UART_SetConfig+0x2f4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d120      	bne.n	8003a4e <UART_SetConfig+0x186>
 8003a0c:	4b69      	ldr	r3, [pc, #420]	; (8003bb4 <UART_SetConfig+0x2ec>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a16:	2b30      	cmp	r3, #48	; 0x30
 8003a18:	d013      	beq.n	8003a42 <UART_SetConfig+0x17a>
 8003a1a:	2b30      	cmp	r3, #48	; 0x30
 8003a1c:	d814      	bhi.n	8003a48 <UART_SetConfig+0x180>
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d009      	beq.n	8003a36 <UART_SetConfig+0x16e>
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d810      	bhi.n	8003a48 <UART_SetConfig+0x180>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <UART_SetConfig+0x168>
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d006      	beq.n	8003a3c <UART_SetConfig+0x174>
 8003a2e:	e00b      	b.n	8003a48 <UART_SetConfig+0x180>
 8003a30:	2300      	movs	r3, #0
 8003a32:	76fb      	strb	r3, [r7, #27]
 8003a34:	e089      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a36:	2302      	movs	r3, #2
 8003a38:	76fb      	strb	r3, [r7, #27]
 8003a3a:	e086      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	76fb      	strb	r3, [r7, #27]
 8003a40:	e083      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a42:	2308      	movs	r3, #8
 8003a44:	76fb      	strb	r3, [r7, #27]
 8003a46:	e080      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	76fb      	strb	r3, [r7, #27]
 8003a4c:	e07d      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5b      	ldr	r2, [pc, #364]	; (8003bc0 <UART_SetConfig+0x2f8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d120      	bne.n	8003a9a <UART_SetConfig+0x1d2>
 8003a58:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <UART_SetConfig+0x2ec>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a62:	2bc0      	cmp	r3, #192	; 0xc0
 8003a64:	d013      	beq.n	8003a8e <UART_SetConfig+0x1c6>
 8003a66:	2bc0      	cmp	r3, #192	; 0xc0
 8003a68:	d814      	bhi.n	8003a94 <UART_SetConfig+0x1cc>
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d009      	beq.n	8003a82 <UART_SetConfig+0x1ba>
 8003a6e:	2b80      	cmp	r3, #128	; 0x80
 8003a70:	d810      	bhi.n	8003a94 <UART_SetConfig+0x1cc>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <UART_SetConfig+0x1b4>
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d006      	beq.n	8003a88 <UART_SetConfig+0x1c0>
 8003a7a:	e00b      	b.n	8003a94 <UART_SetConfig+0x1cc>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	76fb      	strb	r3, [r7, #27]
 8003a80:	e063      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a82:	2302      	movs	r3, #2
 8003a84:	76fb      	strb	r3, [r7, #27]
 8003a86:	e060      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	76fb      	strb	r3, [r7, #27]
 8003a8c:	e05d      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	76fb      	strb	r3, [r7, #27]
 8003a92:	e05a      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a94:	2310      	movs	r3, #16
 8003a96:	76fb      	strb	r3, [r7, #27]
 8003a98:	e057      	b.n	8003b4a <UART_SetConfig+0x282>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a49      	ldr	r2, [pc, #292]	; (8003bc4 <UART_SetConfig+0x2fc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d125      	bne.n	8003af0 <UART_SetConfig+0x228>
 8003aa4:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <UART_SetConfig+0x2ec>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab2:	d017      	beq.n	8003ae4 <UART_SetConfig+0x21c>
 8003ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab8:	d817      	bhi.n	8003aea <UART_SetConfig+0x222>
 8003aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abe:	d00b      	beq.n	8003ad8 <UART_SetConfig+0x210>
 8003ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac4:	d811      	bhi.n	8003aea <UART_SetConfig+0x222>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <UART_SetConfig+0x20a>
 8003aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ace:	d006      	beq.n	8003ade <UART_SetConfig+0x216>
 8003ad0:	e00b      	b.n	8003aea <UART_SetConfig+0x222>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	76fb      	strb	r3, [r7, #27]
 8003ad6:	e038      	b.n	8003b4a <UART_SetConfig+0x282>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	76fb      	strb	r3, [r7, #27]
 8003adc:	e035      	b.n	8003b4a <UART_SetConfig+0x282>
 8003ade:	2304      	movs	r3, #4
 8003ae0:	76fb      	strb	r3, [r7, #27]
 8003ae2:	e032      	b.n	8003b4a <UART_SetConfig+0x282>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	76fb      	strb	r3, [r7, #27]
 8003ae8:	e02f      	b.n	8003b4a <UART_SetConfig+0x282>
 8003aea:	2310      	movs	r3, #16
 8003aec:	76fb      	strb	r3, [r7, #27]
 8003aee:	e02c      	b.n	8003b4a <UART_SetConfig+0x282>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <UART_SetConfig+0x2e4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d125      	bne.n	8003b46 <UART_SetConfig+0x27e>
 8003afa:	4b2e      	ldr	r3, [pc, #184]	; (8003bb4 <UART_SetConfig+0x2ec>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b08:	d017      	beq.n	8003b3a <UART_SetConfig+0x272>
 8003b0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b0e:	d817      	bhi.n	8003b40 <UART_SetConfig+0x278>
 8003b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b14:	d00b      	beq.n	8003b2e <UART_SetConfig+0x266>
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1a:	d811      	bhi.n	8003b40 <UART_SetConfig+0x278>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <UART_SetConfig+0x260>
 8003b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b24:	d006      	beq.n	8003b34 <UART_SetConfig+0x26c>
 8003b26:	e00b      	b.n	8003b40 <UART_SetConfig+0x278>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	76fb      	strb	r3, [r7, #27]
 8003b2c:	e00d      	b.n	8003b4a <UART_SetConfig+0x282>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	76fb      	strb	r3, [r7, #27]
 8003b32:	e00a      	b.n	8003b4a <UART_SetConfig+0x282>
 8003b34:	2304      	movs	r3, #4
 8003b36:	76fb      	strb	r3, [r7, #27]
 8003b38:	e007      	b.n	8003b4a <UART_SetConfig+0x282>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	76fb      	strb	r3, [r7, #27]
 8003b3e:	e004      	b.n	8003b4a <UART_SetConfig+0x282>
 8003b40:	2310      	movs	r3, #16
 8003b42:	76fb      	strb	r3, [r7, #27]
 8003b44:	e001      	b.n	8003b4a <UART_SetConfig+0x282>
 8003b46:	2310      	movs	r3, #16
 8003b48:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <UART_SetConfig+0x2e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	f040 8087 	bne.w	8003c64 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b56:	7efb      	ldrb	r3, [r7, #27]
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d837      	bhi.n	8003bcc <UART_SetConfig+0x304>
 8003b5c:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <UART_SetConfig+0x29c>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b89 	.word	0x08003b89
 8003b68:	08003bcd 	.word	0x08003bcd
 8003b6c:	08003b91 	.word	0x08003b91
 8003b70:	08003bcd 	.word	0x08003bcd
 8003b74:	08003b97 	.word	0x08003b97
 8003b78:	08003bcd 	.word	0x08003bcd
 8003b7c:	08003bcd 	.word	0x08003bcd
 8003b80:	08003bcd 	.word	0x08003bcd
 8003b84:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b88:	f7fe fc2a 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8003b8c:	6178      	str	r0, [r7, #20]
        break;
 8003b8e:	e022      	b.n	8003bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <UART_SetConfig+0x300>)
 8003b92:	617b      	str	r3, [r7, #20]
        break;
 8003b94:	e01f      	b.n	8003bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe fb8b 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8003b9a:	6178      	str	r0, [r7, #20]
        break;
 8003b9c:	e01b      	b.n	8003bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	617b      	str	r3, [r7, #20]
        break;
 8003ba4:	e017      	b.n	8003bd6 <UART_SetConfig+0x30e>
 8003ba6:	bf00      	nop
 8003ba8:	efff69f3 	.word	0xefff69f3
 8003bac:	40008000 	.word	0x40008000
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	40004800 	.word	0x40004800
 8003bc0:	40004c00 	.word	0x40004c00
 8003bc4:	40005000 	.word	0x40005000
 8003bc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	76bb      	strb	r3, [r7, #26]
        break;
 8003bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80f1 	beq.w	8003dc0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d305      	bcc.n	8003bfa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d902      	bls.n	8003c00 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	76bb      	strb	r3, [r7, #26]
 8003bfe:	e0df      	b.n	8003dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	020b      	lsls	r3, r1, #8
 8003c12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c16:	0202      	lsls	r2, r0, #8
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	6849      	ldr	r1, [r1, #4]
 8003c1c:	0849      	lsrs	r1, r1, #1
 8003c1e:	4608      	mov	r0, r1
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	1814      	adds	r4, r2, r0
 8003c26:	eb43 0501 	adc.w	r5, r3, r1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	4629      	mov	r1, r5
 8003c38:	f7fc fac6 	bl	80001c8 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4a:	d308      	bcc.n	8003c5e <UART_SetConfig+0x396>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d204      	bcs.n	8003c5e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	e0b0      	b.n	8003dc0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	76bb      	strb	r3, [r7, #26]
 8003c62:	e0ad      	b.n	8003dc0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6c:	d15c      	bne.n	8003d28 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003c6e:	7efb      	ldrb	r3, [r7, #27]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d828      	bhi.n	8003cc6 <UART_SetConfig+0x3fe>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <UART_SetConfig+0x3b4>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003ca1 	.word	0x08003ca1
 8003c80:	08003ca9 	.word	0x08003ca9
 8003c84:	08003cb1 	.word	0x08003cb1
 8003c88:	08003cc7 	.word	0x08003cc7
 8003c8c:	08003cb7 	.word	0x08003cb7
 8003c90:	08003cc7 	.word	0x08003cc7
 8003c94:	08003cc7 	.word	0x08003cc7
 8003c98:	08003cc7 	.word	0x08003cc7
 8003c9c:	08003cbf 	.word	0x08003cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca0:	f7fe fb9e 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8003ca4:	6178      	str	r0, [r7, #20]
        break;
 8003ca6:	e013      	b.n	8003cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca8:	f7fe fbb0 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 8003cac:	6178      	str	r0, [r7, #20]
        break;
 8003cae:	e00f      	b.n	8003cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb0:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <UART_SetConfig+0x510>)
 8003cb2:	617b      	str	r3, [r7, #20]
        break;
 8003cb4:	e00c      	b.n	8003cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb6:	f7fe fafb 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8003cba:	6178      	str	r0, [r7, #20]
        break;
 8003cbc:	e008      	b.n	8003cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	617b      	str	r3, [r7, #20]
        break;
 8003cc4:	e004      	b.n	8003cd0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	76bb      	strb	r3, [r7, #26]
        break;
 8003cce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d074      	beq.n	8003dc0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	005a      	lsls	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	441a      	add	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d916      	bls.n	8003d22 <UART_SetConfig+0x45a>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfa:	d212      	bcs.n	8003d22 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f023 030f 	bic.w	r3, r3, #15
 8003d04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	89fb      	ldrh	r3, [r7, #14]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	89fa      	ldrh	r2, [r7, #14]
 8003d1e:	60da      	str	r2, [r3, #12]
 8003d20:	e04e      	b.n	8003dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	76bb      	strb	r3, [r7, #26]
 8003d26:	e04b      	b.n	8003dc0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d28:	7efb      	ldrb	r3, [r7, #27]
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d827      	bhi.n	8003d7e <UART_SetConfig+0x4b6>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <UART_SetConfig+0x46c>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d61 	.word	0x08003d61
 8003d3c:	08003d69 	.word	0x08003d69
 8003d40:	08003d7f 	.word	0x08003d7f
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003d7f 	.word	0x08003d7f
 8003d4c:	08003d7f 	.word	0x08003d7f
 8003d50:	08003d7f 	.word	0x08003d7f
 8003d54:	08003d77 	.word	0x08003d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7fe fb42 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8003d5c:	6178      	str	r0, [r7, #20]
        break;
 8003d5e:	e013      	b.n	8003d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d60:	f7fe fb54 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 8003d64:	6178      	str	r0, [r7, #20]
        break;
 8003d66:	e00f      	b.n	8003d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <UART_SetConfig+0x510>)
 8003d6a:	617b      	str	r3, [r7, #20]
        break;
 8003d6c:	e00c      	b.n	8003d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6e:	f7fe fa9f 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8003d72:	6178      	str	r0, [r7, #20]
        break;
 8003d74:	e008      	b.n	8003d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7a:	617b      	str	r3, [r7, #20]
        break;
 8003d7c:	e004      	b.n	8003d88 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	76bb      	strb	r3, [r7, #26]
        break;
 8003d86:	bf00      	nop
    }

    if (pclk != 0U)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d018      	beq.n	8003dc0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	085a      	lsrs	r2, r3, #1
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	441a      	add	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b0f      	cmp	r3, #15
 8003da8:	d908      	bls.n	8003dbc <UART_SetConfig+0x4f4>
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d204      	bcs.n	8003dbc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	e001      	b.n	8003dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003dcc:	7ebb      	ldrb	r3, [r7, #26]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	00f42400 	.word	0x00f42400

08003ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01a      	beq.n	8003ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eda:	d10a      	bne.n	8003ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
  }
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f2e:	f7fd f835 	bl	8000f9c <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d10e      	bne.n	8003f60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f82a 	bl	8003faa <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e020      	b.n	8003fa2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d10e      	bne.n	8003f8c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f814 	bl	8003faa <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e00a      	b.n	8003fa2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	e05d      	b.n	8004078 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d059      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fc ffea 	bl	8000f9c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11b      	bne.n	8004012 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fe8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e042      	b.n	8004098 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02b      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d123      	bne.n	8004078 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004038:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004048:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e00f      	b.n	8004098 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4013      	ands	r3, r2
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	429a      	cmp	r2, r3
 8004094:	d092      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff fbd8 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004122:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fbb5 	bl	80038a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004158:	4904      	ldr	r1, [pc, #16]	; (800416c <MX_FATFS_Init+0x18>)
 800415a:	4805      	ldr	r0, [pc, #20]	; (8004170 <MX_FATFS_Init+0x1c>)
 800415c:	f000 f8b0 	bl	80042c0 <FATFS_LinkDriver>
 8004160:	4603      	mov	r3, r0
 8004162:	461a      	mov	r2, r3
 8004164:	4b03      	ldr	r3, [pc, #12]	; (8004174 <MX_FATFS_Init+0x20>)
 8004166:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	200002ec 	.word	0x200002ec
 8004170:	2000000c 	.word	0x2000000c
 8004174:	200002f0 	.word	0x200002f0

08004178 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <USER_initialize+0x24>)
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <USER_initialize+0x24>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000009 	.word	0x20000009

080041a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <USER_status+0x24>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
    return Stat;
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <USER_status+0x24>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000009 	.word	0x20000009

080041c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4603      	mov	r3, r0
 80041d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80041d8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	4603      	mov	r3, r0
 80041f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80041f6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	603a      	str	r2, [r7, #0]
 800420e:	71fb      	strb	r3, [r7, #7]
 8004210:	460b      	mov	r3, r1
 8004212:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
    return res;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	4613      	mov	r3, r2
 8004234:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800423e:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 8004240:	7a5b      	ldrb	r3, [r3, #9]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d131      	bne.n	80042ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004248:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 800424a:	7a5b      	ldrb	r3, [r3, #9]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 8004252:	2100      	movs	r1, #0
 8004254:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004256:	4b19      	ldr	r3, [pc, #100]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 8004258:	7a5b      	ldrb	r3, [r3, #9]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	4a17      	ldr	r2, [pc, #92]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 8004268:	7a5b      	ldrb	r3, [r3, #9]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 8004270:	4413      	add	r3, r2
 8004272:	79fa      	ldrb	r2, [r7, #7]
 8004274:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 8004278:	7a5b      	ldrb	r3, [r3, #9]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	b2d1      	uxtb	r1, r2
 8004280:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <FATFS_LinkDriverEx+0x94>)
 8004282:	7251      	strb	r1, [r2, #9]
 8004284:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004286:	7dbb      	ldrb	r3, [r7, #22]
 8004288:	3330      	adds	r3, #48	; 0x30
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3301      	adds	r3, #1
 8004294:	223a      	movs	r2, #58	; 0x3a
 8004296:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3302      	adds	r3, #2
 800429c:	222f      	movs	r2, #47	; 0x2f
 800429e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3303      	adds	r3, #3
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	2000003c 	.word	0x2000003c

080042c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ffaa 	bl	8004228 <FATFS_LinkDriverEx>
 80042d4:	4603      	mov	r3, r0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4d0d      	ldr	r5, [pc, #52]	; (8004318 <__libc_init_array+0x38>)
 80042e4:	4c0d      	ldr	r4, [pc, #52]	; (800431c <__libc_init_array+0x3c>)
 80042e6:	1b64      	subs	r4, r4, r5
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	2600      	movs	r6, #0
 80042ec:	42a6      	cmp	r6, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	4d0b      	ldr	r5, [pc, #44]	; (8004320 <__libc_init_array+0x40>)
 80042f2:	4c0c      	ldr	r4, [pc, #48]	; (8004324 <__libc_init_array+0x44>)
 80042f4:	f000 f820 	bl	8004338 <_init>
 80042f8:	1b64      	subs	r4, r4, r5
 80042fa:	10a4      	asrs	r4, r4, #2
 80042fc:	2600      	movs	r6, #0
 80042fe:	42a6      	cmp	r6, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	f855 3b04 	ldr.w	r3, [r5], #4
 8004308:	4798      	blx	r3
 800430a:	3601      	adds	r6, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004312:	4798      	blx	r3
 8004314:	3601      	adds	r6, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	080043a0 	.word	0x080043a0
 800431c:	080043a0 	.word	0x080043a0
 8004320:	080043a0 	.word	0x080043a0
 8004324:	080043a4 	.word	0x080043a4

08004328 <memset>:
 8004328:	4402      	add	r2, r0
 800432a:	4603      	mov	r3, r0
 800432c:	4293      	cmp	r3, r2
 800432e:	d100      	bne.n	8004332 <memset+0xa>
 8004330:	4770      	bx	lr
 8004332:	f803 1b01 	strb.w	r1, [r3], #1
 8004336:	e7f9      	b.n	800432c <memset+0x4>

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
