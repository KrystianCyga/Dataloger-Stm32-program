
STM_SR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a174  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a308  0800a308  0001a308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a714  0800a714  000209d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a714  0800a714  0001a714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a71c  0800a71c  000209d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a71c  0800a71c  0001a71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a724  0800a724  0001a724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009d0  20000000  0800a728  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e4  200009d0  0800b0f8  000209d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002db4  0800b0f8  00022db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f9ef  00000000  00000000  00020a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004125  00000000  00000000  000403ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00044518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  00045c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6d9  00000000  00000000  000471d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d376  00000000  00000000  000728a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff36d  00000000  00000000  0008fc1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018ef8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073e4  00000000  00000000  0018efe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009d0 	.word	0x200009d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2ec 	.word	0x0800a2ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009d4 	.word	0x200009d4
 80001cc:	0800a2ec 	.word	0x0800a2ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9b9 	b.w	8000f3c <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a4d      	ldr	r2, [pc, #308]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b4b      	ldr	r3, [pc, #300]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	4b48      	ldr	r3, [pc, #288]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a47      	ldr	r2, [pc, #284]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b45      	ldr	r3, [pc, #276]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b42      	ldr	r3, [pc, #264]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a41      	ldr	r2, [pc, #260]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <MX_GPIO_Init+0x150>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <MX_GPIO_Init+0x150>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	; (8001090 <MX_GPIO_Init+0x150>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <MX_GPIO_Init+0x150>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_DIODE_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2111      	movs	r1, #17
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f001 fbeb 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc8:	4832      	ldr	r0, [pc, #200]	; (8001094 <MX_GPIO_Init+0x154>)
 8000fca:	f001 fbe5 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <MX_GPIO_Init+0x158>)
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	482c      	ldr	r0, [pc, #176]	; (8001094 <MX_GPIO_Init+0x154>)
 8000fe4:	f001 fa16 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_DIODE_Pin;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_DIODE_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f001 fa07 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001006:	2310      	movs	r3, #16
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f001 f9f8 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_SENSOR_Pin;
 8001024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_GPIO_Init+0x158>)
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f001 f9ea 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_DAT_Pin;
 8001040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711_DAT_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <MX_GPIO_Init+0x154>)
 8001056:	f001 f9dd 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_CLK_Pin;
 800105a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HX711_CLK_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4808      	ldr	r0, [pc, #32]	; (8001094 <MX_GPIO_Init+0x154>)
 8001074:	f001 f9ce 	bl	8002414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2017      	movs	r0, #23
 800107e:	f001 f952 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001082:	2017      	movs	r0, #23
 8001084:	f001 f96b 	bl	800235e <HAL_NVIC_EnableIRQ>

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000
 8001094:	48000800 	.word	0x48000800
 8001098:	10210000 	.word	0x10210000

0800109c <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 80010a2:	2304      	movs	r3, #4
 80010a4:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 80010a6:	e006      	b.n	80010b6 <hx711_delay_us+0x1a>
  {
    delay--;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
    __NOP(); __NOP(); __NOP(); __NOP();
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
  while (delay > 0)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f5      	bne.n	80010a8 <hx711_delay_us+0xc>
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 80010d2:	e002      	b.n	80010da <hx711_lock+0x10>
    hx711_delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f001 f827 	bl	8002128 <HAL_Delay>
  while (hx711->lock)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7d1b      	ldrb	r3, [r3, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f8      	bne.n	80010d4 <hx711_lock+0xa>
  hx711->lock = 1;      
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	751a      	strb	r2, [r3, #20]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b08a      	sub	sp, #40	; 0x28
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4613      	mov	r3, r2
 8001118:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff ffd5 	bl	80010ca <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	88fa      	ldrh	r2, [r7, #6]
 800112a:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001136:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	68b8      	ldr	r0, [r7, #8]
 8001160:	f001 f958 	bl	8002414 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8001170:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001172:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f001 f94a 	bl	8002414 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	891b      	ldrh	r3, [r3, #8]
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	f001 fb04 	bl	8002798 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001190:	200a      	movs	r0, #10
 8001192:	f000 ffc9 	bl	8002128 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	891b      	ldrh	r3, [r3, #8]
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	f001 faf9 	bl	8002798 <HAL_GPIO_WritePin>
  hx711_delay(10);  
 80011a6:	200a      	movs	r0, #10
 80011a8:	f000 ffbe 	bl	8002128 <HAL_Delay>
  hx711_value(hx711);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f000 f80a 	bl	80011c6 <hx711_value>
  hx711_value(hx711);
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f000 f807 	bl	80011c6 <hx711_value>
  hx711_unlock(hx711); 
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff ff99 	bl	80010f0 <hx711_unlock>
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 80011d2:	f000 ff9d 	bl	8002110 <HAL_GetTick>
 80011d6:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80011d8:	e00b      	b.n	80011f2 <hx711_value+0x2c>
  {
    hx711_delay(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 ffa4 	bl	8002128 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 80011e0:	f000 ff96 	bl	8002110 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b96      	cmp	r3, #150	; 0x96
 80011ec:	d901      	bls.n	80011f2 <hx711_value+0x2c>
      return 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e055      	b.n	800129e <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	895b      	ldrh	r3, [r3, #10]
 80011fa:	4619      	mov	r1, r3
 80011fc:	4610      	mov	r0, r2
 80011fe:	f001 fab3 	bl	8002768 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d0e8      	beq.n	80011da <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8001208:	2300      	movs	r3, #0
 800120a:	74fb      	strb	r3, [r7, #19]
 800120c:	e02a      	b.n	8001264 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	891b      	ldrh	r3, [r3, #8]
 8001216:	2201      	movs	r2, #1
 8001218:	4619      	mov	r1, r3
 800121a:	f001 fabd 	bl	8002798 <HAL_GPIO_WritePin>
    hx711_delay_us();
 800121e:	f7ff ff3d 	bl	800109c <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	891b      	ldrh	r3, [r3, #8]
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	f001 fab3 	bl	8002798 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001232:	f7ff ff33 	bl	800109c <hx711_delay_us>
    data = data << 1;    
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	895b      	ldrh	r3, [r3, #10]
 8001244:	4619      	mov	r1, r3
 8001246:	4610      	mov	r0, r2
 8001248:	f001 fa8e 	bl	8002768 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <hx711_value+0x92>
      data ++;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8001258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3301      	adds	r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	74fb      	strb	r3, [r7, #19]
 8001264:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001268:	2b17      	cmp	r3, #23
 800126a:	ddd0      	ble.n	800120e <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001272:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	891b      	ldrh	r3, [r3, #8]
 800127c:	2201      	movs	r2, #1
 800127e:	4619      	mov	r1, r3
 8001280:	f001 fa8a 	bl	8002798 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001284:	f7ff ff0a 	bl	800109c <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	f001 fa80 	bl	8002798 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001298:	f7ff ff00 	bl	800109c <hx711_delay_us>
  return data;    
 800129c:	697b      	ldr	r3, [r7, #20]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 80012a6:	b5b0      	push	{r4, r5, r7, lr}
 80012a8:	b088      	sub	sp, #32
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff09 	bl	80010ca <hx711_lock>
  int64_t  ave = 0;
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	82fb      	strh	r3, [r7, #22]
 80012c8:	e013      	b.n	80012f2 <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff7b 	bl	80011c6 <hx711_value>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012dc:	1884      	adds	r4, r0, r2
 80012de:	eb41 0503 	adc.w	r5, r1, r3
 80012e2:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 80012e6:	2005      	movs	r0, #5
 80012e8:	f000 ff1e 	bl	8002128 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80012ec:	8afb      	ldrh	r3, [r7, #22]
 80012ee:	3301      	adds	r3, #1
 80012f0:	82fb      	strh	r3, [r7, #22]
 80012f2:	8afa      	ldrh	r2, [r7, #22]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3e7      	bcc.n	80012ca <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001304:	f7ff fc50 	bl	8000ba8 <__aeabi_ldivmod>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4613      	mov	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 7a04 	vldr	s14, [r3, #16]
 8001326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132a:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fede 	bl	80010f0 <hx711_unlock>
  return answer;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	ee07 3a90 	vmov	s15, r3
}
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bdb0      	pop	{r4, r5, r7, pc}

08001344 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_I2C1_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_I2C1_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <MX_I2C1_Init+0x7c>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_I2C1_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001380:	f001 fa3a 	bl	80027f8 <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 fa25 	bl	80017d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001392:	f001 fac0 	bl	8002916 <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 fa1c 	bl	80017d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_I2C1_Init+0x74>)
 80013a4:	f001 fb02 	bl	80029ac <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 fa13 	bl	80017d8 <Error_Handler>
  }

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000a44 	.word	0x20000a44
 80013bc:	40005400 	.word	0x40005400
 80013c0:	10909cec 	.word	0x10909cec

080013c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0x7c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d127      	bne.n	8001436 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 80013fe:	23c0      	movs	r3, #192	; 0xc0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001402:	2312      	movs	r3, #18
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001406:	2301      	movs	r3, #1
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800140e:	2304      	movs	r3, #4
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <HAL_I2C_MspInit+0x84>)
 800141a:	f000 fffb 	bl	8002414 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_I2C_MspInit+0x80>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_I2C_MspInit+0x80>)
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	6593      	str	r3, [r2, #88]	; 0x58
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_I2C_MspInit+0x80>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40005400 	.word	0x40005400
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001454:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001458:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001464:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001468:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800146c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001474:	e000      	b.n	8001478 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001476:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001478:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f9      	beq.n	8001476 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001482:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// for debugging purposes
int _write(int file, char *ptr, int len)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e009      	b.n	80014c0 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60ba      	str	r2, [r7, #8]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffc9 	bl	800144c <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf1      	blt.n	80014ac <_write+0x12>
	}
	return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == RPM_SENSOR_Pin)
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e4:	d126      	bne.n	8001534 <HAL_GPIO_EXTI_Callback+0x60>
  {
	  uint32_t now = TIM16->CNT; // Get current timer count + compensation
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_GPIO_EXTI_Callback+0x6c>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	617b      	str	r3, [r7, #20]
	  uint32_t tmp_compensation = compensation;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_GPIO_EXTI_Callback+0x70>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
	  compensation = 0; // zero compensation value
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_GPIO_EXTI_Callback+0x70>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
	  uint32_t delta = now + tmp_compensation - lastCapture; // Calculate time difference
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	441a      	add	r2, r3
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_GPIO_EXTI_Callback+0x74>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	60fb      	str	r3, [r7, #12]
	  lastCapture = now;
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_GPIO_EXTI_Callback+0x74>)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	6013      	str	r3, [r2, #0]
	  capturedBuffer[bufferIndex] = delta; // Store time difference in buffer
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_GPIO_EXTI_Callback+0x78>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  bufferIndex = (bufferIndex + 1) % 2; // Wrap buffer index
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_GPIO_EXTI_Callback+0x78>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3301      	adds	r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	bfb8      	it	lt
 800152c:	425b      	neglt	r3, r3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_GPIO_EXTI_Callback+0x78>)
 8001532:	701a      	strb	r2, [r3, #0]
  }
}
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40014400 	.word	0x40014400
 8001544:	200009fc 	.word	0x200009fc
 8001548:	200009ec 	.word	0x200009ec
 800154c:	200009f8 	.word	0x200009f8
 8001550:	200009f0 	.word	0x200009f0

08001554 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d106      	bne.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		compensation += 0xFFFF; // compensate for timer overflow
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800156c:	33ff      	adds	r3, #255	; 0xff
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001570:	6013      	str	r3, [r2, #0]
	}
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000b64 	.word	0x20000b64
 8001584:	200009fc 	.word	0x200009fc

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158e:	f000 fd4f 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001592:	f000 f857 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001596:	f7ff fcd3 	bl	8000f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800159a:	f000 fc09 	bl	8001db0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800159e:	f7ff fed1 	bl	8001344 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015a2:	f000 f965 	bl	8001870 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015a6:	f000 fbd3 	bl	8001d50 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80015aa:	f000 fc31 	bl	8001e10 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80015ae:	f004 f89d 	bl	80056ec <MX_FATFS_Init>
  MX_RTC_Init();
 80015b2:	f000 f919 	bl	80017e8 <MX_RTC_Init>
  MX_TIM6_Init();
 80015b6:	f000 fb33 	bl	8001c20 <MX_TIM6_Init>
  MX_TIM16_Init();
 80015ba:	f000 fb67 	bl	8001c8c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  hx711_t loadcell = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]
  uint32_t rpm;
  float weight;
  hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_CLK_Pin, HX711_DAT_GPIO_Port, HX711_DAT_Pin);
 80015ce:	4638      	mov	r0, r7
 80015d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <main+0xac>)
 80015d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015dc:	4915      	ldr	r1, [pc, #84]	; (8001634 <main+0xac>)
 80015de:	f7ff fd94 	bl	800110a <hx711_init>
  //hx711_coef_set(&loadcell, 354.5); // read after calibration
  //hx711_tare(&loadcell, 10);
  loadcell.coef = 1;
 80015e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015e6:	613b      	str	r3, [r7, #16]
  loadcell.offset = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  HAL_TIM_Base_Start_IT(&htim16);
 80015ec:	4812      	ldr	r0, [pc, #72]	; (8001638 <main+0xb0>)
 80015ee:	f002 ff41 	bl	8004474 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f001 f8cd 	bl	8002798 <HAL_GPIO_WritePin>
  {
	  /*if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_SET);
	  else
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);*/
	  rpm = measure_RPM();
 80015fe:	f000 f8a5 	bl	800174c <measure_RPM>
 8001602:	61f8      	str	r0, [r7, #28]
	  if(rpm > 0) printf("RPM value: %lu\n", rpm);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <main+0x8a>
 800160a:	69f9      	ldr	r1, [r7, #28]
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <main+0xb4>)
 800160e:	f004 f965 	bl	80058dc <printf>
	  weight = hx711_weight(&loadcell, 1);
 8001612:	463b      	mov	r3, r7
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fe45 	bl	80012a6 <hx711_weight>
 800161c:	ed87 0a06 	vstr	s0, [r7, #24]
	  printf("Weight value : %f\n", weight);
 8001620:	69b8      	ldr	r0, [r7, #24]
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <main+0xb8>)
 800162c:	f004 f956 	bl	80058dc <printf>
	  rpm = measure_RPM();
 8001630:	e7e5      	b.n	80015fe <main+0x76>
 8001632:	bf00      	nop
 8001634:	48000800 	.word	0x48000800
 8001638:	20000b64 	.word	0x20000b64
 800163c:	0800a308 	.word	0x0800a308
 8001640:	0800a318 	.word	0x0800a318

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0b8      	sub	sp, #224	; 0xe0
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800164e:	2244      	movs	r2, #68	; 0x44
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f004 f93a 	bl	80058cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2288      	movs	r2, #136	; 0x88
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f004 f92c 	bl	80058cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001674:	230a      	movs	r3, #10
 8001676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001682:	2310      	movs	r3, #16
 8001684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001688:	2301      	movs	r3, #1
 800168a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016a0:	230a      	movs	r3, #10
 80016a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016a6:	2307      	movs	r3, #7
 80016a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fa25 	bl	8002b0c <HAL_RCC_OscConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80016c8:	f000 f886 	bl	80017d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	230f      	movs	r3, #15
 80016ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016ee:	2104      	movs	r1, #4
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fdf1 	bl	80032d8 <HAL_RCC_ClockConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80016fc:	f000 f86c 	bl	80017d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <SystemClock_Config+0x104>)
 8001702:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001704:	2300      	movs	r3, #0
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001708:	2300      	movs	r3, #0
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001710:	2300      	movs	r3, #0
 8001712:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	4618      	mov	r0, r3
 8001720:	f001 ffe0 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800172a:	f000 f855 	bl	80017d8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800172e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001732:	f001 f995 	bl	8002a60 <HAL_PWREx_ControlVoltageScaling>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800173c:	f000 f84c 	bl	80017d8 <Error_Handler>
  }
}
 8001740:	bf00      	nop
 8001742:	37e0      	adds	r7, #224	; 0xe0
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	00020047 	.word	0x00020047

0800174c <measure_RPM>:

/* USER CODE BEGIN 4 */
uint32_t measure_RPM(){
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
	uint32_t delta1 = capturedBuffer[0];
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <measure_RPM+0x80>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	617b      	str	r3, [r7, #20]
	uint32_t delta2 = capturedBuffer[1];
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <measure_RPM+0x80>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
	if (delta1 > 0 && delta2 > 0) {
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d02c      	beq.n	80017be <measure_RPM+0x72>
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d029      	beq.n	80017be <measure_RPM+0x72>
		uint32_t delta = delta1 + delta2;
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
		float frequency = 1.0f / (delta / 2.0f / 10000.0f ); // Calculate frequency in Hz
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800177c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001784:	eddf 6a12 	vldr	s13, [pc, #72]	; 80017d0 <measure_RPM+0x84>
 8001788:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800178c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001794:	edc7 7a02 	vstr	s15, [r7, #8]
		uint32_t rpm = frequency * 60.0f; // Calculate RPM
 8001798:	edd7 7a02 	vldr	s15, [r7, #8]
 800179c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80017d4 <measure_RPM+0x88>
 80017a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a8:	ee17 3a90 	vmov	r3, s15
 80017ac:	607b      	str	r3, [r7, #4]
		capturedBuffer[0] = 0;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <measure_RPM+0x80>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
		capturedBuffer[1] = 0;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <measure_RPM+0x80>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]
		return rpm;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	e000      	b.n	80017c0 <measure_RPM+0x74>
	}
	else return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	200009f0 	.word	0x200009f0
 80017d0:	461c4000 	.word	0x461c4000
 80017d4:	42700000 	.word	0x42700000

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_RTC_Init+0x48>)
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <MX_RTC_Init+0x4c>)
 80017f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_RTC_Init+0x48>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <MX_RTC_Init+0x48>)
 80017fa:	227f      	movs	r2, #127	; 0x7f
 80017fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_RTC_Init+0x48>)
 8001800:	22ff      	movs	r2, #255	; 0xff
 8001802:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <MX_RTC_Init+0x48>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_RTC_Init+0x48>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <MX_RTC_Init+0x48>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_RTC_Init+0x48>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_RTC_Init+0x48>)
 800181e:	f002 fc1d 	bl	800405c <HAL_RTC_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001828:	f7ff ffd6 	bl	80017d8 <Error_Handler>
  }

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000a90 	.word	0x20000a90
 8001834:	40002800 	.word	0x40002800

08001838 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_RTC_MspInit+0x30>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d107      	bne.n	800185a <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_RTC_MspInit+0x34>)
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_RTC_MspInit+0x34>)
 8001852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40002800 	.word	0x40002800
 800186c:	40021000 	.word	0x40021000

08001870 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <MX_SPI1_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_SPI1_Init+0x74>)
 800187c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_SPI1_Init+0x74>)
 800188a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800188e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SPI1_Init+0x74>)
 800189e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018be:	2207      	movs	r2, #7
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018ca:	2208      	movs	r2, #8
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018d0:	f002 fcd6 	bl	8004280 <HAL_SPI_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018da:	f7ff ff7d 	bl	80017d8 <Error_Handler>
  }

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000ab4 	.word	0x20000ab4
 80018e8:	40013000 	.word	0x40013000

080018ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_SPI_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d128      	bne.n	8001960 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_SPI_MspInit+0x80>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_SPI_MspInit+0x80>)
 8001914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001918:	6613      	str	r3, [r2, #96]	; 0x60
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_SPI_MspInit+0x80>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_SPI_MspInit+0x80>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_SPI_MspInit+0x80>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_SPI_MspInit+0x80>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800193e:	23e0      	movs	r3, #224	; 0xe0
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194e:	2305      	movs	r3, #5
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195c:	f000 fd5a 	bl	8002414 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40013000 	.word	0x40013000
 800196c:	40021000 	.word	0x40021000

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_MspInit+0x44>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6613      	str	r3, [r2, #96]	; 0x60
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x44>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 fb6c 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a1c:	f000 fed4 	bl	80027c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a2a:	f002 fd93 	bl	8004554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000b64 	.word	0x20000b64

08001a38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <USART1_IRQHandler+0x10>)
 8001a3e:	f003 f8b5 	bl	8004bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000c30 	.word	0x20000c30

08001a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <USART2_IRQHandler+0x10>)
 8001a52:	f003 f8ab 	bl	8004bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000cb0 	.word	0x20000cb0

08001a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_kill>:

int _kill(int pid, int sig)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a7a:	f003 fefd 	bl	8005878 <__errno>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2216      	movs	r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
	return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_exit>:

void _exit (int status)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe7 	bl	8001a70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aa2:	e7fe      	b.n	8001aa2 <_exit+0x12>

08001aa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e00a      	b.n	8001acc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ab6:	f3af 8000 	nop.w
 8001aba:	4601      	mov	r1, r0
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dbf0      	blt.n	8001ab6 <_read+0x12>
	}

return len;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b06:	605a      	str	r2, [r3, #4]
	return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_isatty>:

int _isatty(int file)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f003 fe7e 	bl	8005878 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20018000 	.word	0x20018000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	20000a00 	.word	0x20000a00
 8001bb0:	20002db8 	.word	0x20002db8

08001bb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <SystemInit+0x64>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <SystemInit+0x64>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <SystemInit+0x68>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <SystemInit+0x68>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <SystemInit+0x68>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <SystemInit+0x68>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <SystemInit+0x68>)
 8001be0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001be4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001be8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <SystemInit+0x68>)
 8001bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <SystemInit+0x68>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <SystemInit+0x68>)
 8001bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <SystemInit+0x68>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SystemInit+0x64>)
 8001c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	40021000 	.word	0x40021000

08001c20 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <MX_TIM6_Init+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c48:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c52:	f002 fbb8 	bl	80043c6 <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c5c:	f7ff fdbc 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c6e:	f002 fe53 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c78:	f7ff fdae 	bl	80017d8 <Error_Handler>
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000b18 	.word	0x20000b18
 8001c88:	40001000 	.word	0x40001000

08001c8c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <MX_TIM16_Init+0x48>)
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <MX_TIM16_Init+0x4c>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_TIM16_Init+0x48>)
 8001c98:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c9c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <MX_TIM16_Init+0x48>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_TIM16_Init+0x48>)
 8001ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001caa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_TIM16_Init+0x48>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_TIM16_Init+0x48>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_TIM16_Init+0x48>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_TIM16_Init+0x48>)
 8001cc0:	f002 fb81 	bl	80043c6 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001cca:	f7ff fd85 	bl	80017d8 <Error_Handler>
  }

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000b64 	.word	0x20000b64
 8001cd8:	40014400 	.word	0x40014400

08001cdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_TIM_Base_MspInit+0x68>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10c      	bne.n	8001d08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_TIM_Base_MspInit+0x6c>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <HAL_TIM_Base_MspInit+0x6c>)
 8001cf4:	f043 0310 	orr.w	r3, r3, #16
 8001cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_TIM_Base_MspInit+0x6c>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001d06:	e018      	b.n	8001d3a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_TIM_Base_MspInit+0x70>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d113      	bne.n	8001d3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_TIM_Base_MspInit+0x6c>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_TIM_Base_MspInit+0x6c>)
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_TIM_Base_MspInit+0x6c>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2019      	movs	r0, #25
 8001d30:	f000 faf9 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d34:	2019      	movs	r0, #25
 8001d36:	f000 fb12 	bl	800235e <HAL_NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40001000 	.word	0x40001000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40014400 	.word	0x40014400

08001d50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <MX_USART1_UART_Init+0x5c>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d94:	f002 feb4 	bl	8004b00 <HAL_HalfDuplex_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f7ff fd1b 	bl	80017d8 <Error_Handler>
  }

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000c30 	.word	0x20000c30
 8001dac:	40013800 	.word	0x40013800

08001db0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <MX_USART2_UART_Init+0x5c>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001df4:	f002 fe36 	bl	8004a64 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dfe:	f7ff fceb 	bl	80017d8 <Error_Handler>
  }

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000cb0 	.word	0x20000cb0
 8001e0c:	40004400 	.word	0x40004400

08001e10 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <MX_USART3_UART_Init+0x5c>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_USART3_UART_Init+0x58>)
 8001e54:	f002 fe06 	bl	8004a64 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e5e:	f7ff fcbb 	bl	80017d8 <Error_Handler>
  }

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000bb0 	.word	0x20000bb0
 8001e6c:	40004800 	.word	0x40004800

08001e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08e      	sub	sp, #56	; 0x38
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <HAL_UART_MspInit+0x158>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d132      	bne.n	8001ef8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e96:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb6:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DS18B20_ONE_WIRE_Pin;
 8001ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DS18B20_ONE_WIRE_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee2:	f000 fa97 	bl	8002414 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2025      	movs	r0, #37	; 0x25
 8001eec:	f000 fa1b 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ef0:	2025      	movs	r0, #37	; 0x25
 8001ef2:	f000 fa34 	bl	800235e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ef6:	e063      	b.n	8001fc0 <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <HAL_UART_MspInit+0x160>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d131      	bne.n	8001f66 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	4a31      	ldr	r2, [pc, #196]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 8001f32:	230c      	movs	r3, #12
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f42:	2307      	movs	r3, #7
 8001f44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f000 fa60 	bl	8002414 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	2026      	movs	r0, #38	; 0x26
 8001f5a:	f000 f9e4 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f5e:	2026      	movs	r0, #38	; 0x26
 8001f60:	f000 f9fd 	bl	800235e <HAL_NVIC_EnableIRQ>
}
 8001f64:	e02c      	b.n	8001fc0 <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART3)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_UART_MspInit+0x164>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d127      	bne.n	8001fc0 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_UART_MspInit+0x15c>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HC_05_TX_Pin|HC_05_RX_Pin;
 8001fa0:	2330      	movs	r3, #48	; 0x30
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fb0:	2307      	movs	r3, #7
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <HAL_UART_MspInit+0x168>)
 8001fbc:	f000 fa2a 	bl	8002414 <HAL_GPIO_Init>
}
 8001fc0:	bf00      	nop
 8001fc2:	3738      	adds	r7, #56	; 0x38
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	40004800 	.word	0x40004800
 8001fd8:	48000800 	.word	0x48000800

08001fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe0:	f7ff fde8 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fe4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fe6:	e003      	b.n	8001ff0 <LoopCopyDataInit>

08001fe8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fee:	3104      	adds	r1, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ff0:	480a      	ldr	r0, [pc, #40]	; (800201c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ff4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ff6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ff8:	d3f6      	bcc.n	8001fe8 <CopyDataInit>
	ldr	r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ffc:	e002      	b.n	8002004 <LoopFillZerobss>

08001ffe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ffe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002000:	f842 3b04 	str.w	r3, [r2], #4

08002004 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <LoopForever+0x16>)
	cmp	r2, r3
 8002006:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002008:	d3f9      	bcc.n	8001ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200a:	f003 fc3b 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800200e:	f7ff fabb 	bl	8001588 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002014:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002018:	0800a728 	.word	0x0800a728
	ldr	r0, =_sdata
 800201c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002020:	200009d0 	.word	0x200009d0
	ldr	r2, =_sbss
 8002024:	200009d0 	.word	0x200009d0
	ldr	r3, = _ebss
 8002028:	20002db4 	.word	0x20002db4

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>
	...

08002030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_Init+0x3c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_Init+0x3c>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002046:	2003      	movs	r0, #3
 8002048:	f000 f962 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800204c:	2000      	movs	r0, #0
 800204e:	f000 f80f 	bl	8002070 <HAL_InitTick>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	71fb      	strb	r3, [r7, #7]
 800205c:	e001      	b.n	8002062 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800205e:	f7ff fc87 	bl	8001970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002062:	79fb      	ldrb	r3, [r7, #7]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40022000 	.word	0x40022000

08002070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_InitTick+0x6c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_InitTick+0x70>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_InitTick+0x6c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	fbb3 f3f1 	udiv	r3, r3, r1
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f96d 	bl	800237a <HAL_SYSTICK_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d809      	bhi.n	80020c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 f937 	bl	8002326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_InitTick+0x74>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e007      	b.n	80020d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e004      	b.n	80020d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	e001      	b.n	80020d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000008 	.word	0x20000008
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000008 	.word	0x20000008
 800210c:	20000d30 	.word	0x20000d30

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000d30 	.word	0x20000d30

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000008 	.word	0x20000008

08002170 <__NVIC_SetPriorityGrouping>:
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff29 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff3e 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff8e 	bl	8002264 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff31 	bl	80021d4 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ffa2 	bl	80022cc <SysTick_Config>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d005      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2204      	movs	r2, #4
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e029      	b.n	800240a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 020e 	bic.w	r2, r2, #14
 80023c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f003 021c 	and.w	r2, r3, #28
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
    }
  }
  return status;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	e17f      	b.n	8002724 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	4013      	ands	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8171 	beq.w	800271e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d00b      	beq.n	800245c <HAL_GPIO_Init+0x48>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d007      	beq.n	800245c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002450:	2b11      	cmp	r3, #17
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d118      	bne.n	80024fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x128>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b12      	cmp	r3, #18
 800253a:	d123      	bne.n	8002584 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	6939      	ldr	r1, [r7, #16]
 8002580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80ac 	beq.w	800271e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	4b5f      	ldr	r3, [pc, #380]	; (8002744 <HAL_GPIO_Init+0x330>)
 80025c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ca:	4a5e      	ldr	r2, [pc, #376]	; (8002744 <HAL_GPIO_Init+0x330>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6613      	str	r3, [r2, #96]	; 0x60
 80025d2:	4b5c      	ldr	r3, [pc, #368]	; (8002744 <HAL_GPIO_Init+0x330>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025de:	4a5a      	ldr	r2, [pc, #360]	; (8002748 <HAL_GPIO_Init+0x334>)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002608:	d025      	beq.n	8002656 <HAL_GPIO_Init+0x242>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4f      	ldr	r2, [pc, #316]	; (800274c <HAL_GPIO_Init+0x338>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01f      	beq.n	8002652 <HAL_GPIO_Init+0x23e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4e      	ldr	r2, [pc, #312]	; (8002750 <HAL_GPIO_Init+0x33c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x23a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4d      	ldr	r2, [pc, #308]	; (8002754 <HAL_GPIO_Init+0x340>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x236>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <HAL_GPIO_Init+0x344>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x232>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4b      	ldr	r2, [pc, #300]	; (800275c <HAL_GPIO_Init+0x348>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x22e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4a      	ldr	r2, [pc, #296]	; (8002760 <HAL_GPIO_Init+0x34c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x22a>
 800263a:	2306      	movs	r3, #6
 800263c:	e00c      	b.n	8002658 <HAL_GPIO_Init+0x244>
 800263e:	2307      	movs	r3, #7
 8002640:	e00a      	b.n	8002658 <HAL_GPIO_Init+0x244>
 8002642:	2305      	movs	r3, #5
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x244>
 8002646:	2304      	movs	r3, #4
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x244>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x244>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x244>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x244>
 8002656:	2300      	movs	r3, #0
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002668:	4937      	ldr	r1, [pc, #220]	; (8002748 <HAL_GPIO_Init+0x334>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_GPIO_Init+0x350>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800269a:	4a32      	ldr	r2, [pc, #200]	; (8002764 <HAL_GPIO_Init+0x350>)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ee:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <HAL_GPIO_Init+0x350>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	f47f ae78 	bne.w	8002424 <HAL_GPIO_Init+0x10>
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000
 800274c:	48000400 	.word	0x48000400
 8002750:	48000800 	.word	0x48000800
 8002754:	48000c00 	.word	0x48000c00
 8002758:	48001000 	.word	0x48001000
 800275c:	48001400 	.word	0x48001400
 8002760:	48001800 	.word	0x48001800
 8002764:	40010400 	.word	0x40010400

08002768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e001      	b.n	800278a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
 80027a4:	4613      	mov	r3, r2
 80027a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a8:	787b      	ldrb	r3, [r7, #1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d006      	beq.n	80027ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027de:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fe74 	bl	80014d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40010400 	.word	0x40010400

080027f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e081      	b.n	800290e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe fdd0 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2224      	movs	r2, #36	; 0x24
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002848:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002858:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	e006      	b.n	8002880 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800287e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d104      	bne.n	8002892 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002890:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	ea42 0103 	orr.w	r1, r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	021a      	lsls	r2, r3, #8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69d9      	ldr	r1, [r3, #28]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1a      	ldr	r2, [r3, #32]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b20      	cmp	r3, #32
 800292a:	d138      	bne.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002936:	2302      	movs	r3, #2
 8002938:	e032      	b.n	80029a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2224      	movs	r2, #36	; 0x24
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002968:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d139      	bne.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e033      	b.n	8002a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000

08002a60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6e:	d130      	bne.n	8002ad2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7c:	d038      	beq.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2232      	movs	r2, #50	; 0x32
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9b      	lsrs	r3, r3, #18
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa4:	e002      	b.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab8:	d102      	bne.n	8002ac0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f2      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d110      	bne.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e00f      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ade:	d007      	beq.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ae8:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40007000 	.word	0x40007000
 8002b04:	20000000 	.word	0x20000000
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e3d4      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1e:	4ba1      	ldr	r3, [pc, #644]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b28:	4b9e      	ldr	r3, [pc, #632]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80e4 	beq.w	8002d08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4a>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	f040 808b 	bne.w	8002c64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	f040 8087 	bne.w	8002c64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b56:	4b93      	ldr	r3, [pc, #588]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x62>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e3ac      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_RCC_OscConfig+0x7c>
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b86:	e005      	b.n	8002b94 <HAL_RCC_OscConfig+0x88>
 8002b88:	4b86      	ldr	r3, [pc, #536]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d223      	bcs.n	8002be0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fd41 	bl	8003624 <RCC_SetFlashLatencyFromMSIRange>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e38d      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bac:	4b7d      	ldr	r3, [pc, #500]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b7a      	ldr	r3, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4977      	ldr	r1, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	4972      	ldr	r1, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
 8002bde:	e025      	b.n	8002c2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be0:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	496a      	ldr	r1, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bfe:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	4965      	ldr	r1, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fd01 	bl	8003624 <RCC_SetFlashLatencyFromMSIRange>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e34d      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c2c:	f000 fc36 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	495a      	ldr	r1, [pc, #360]	; (8002da8 <HAL_RCC_OscConfig+0x29c>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	4a58      	ldr	r2, [pc, #352]	; (8002dac <HAL_RCC_OscConfig+0x2a0>)
 8002c4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c4c:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_RCC_OscConfig+0x2a4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fa0d 	bl	8002070 <HAL_InitTick>
 8002c56:	4603      	mov	r3, r0
 8002c58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d052      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	e331      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d032      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c78:	f7ff fa4a 	bl	8002110 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c80:	f7ff fa46 	bl	8002110 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e31a      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	493b      	ldr	r1, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	4936      	ldr	r1, [pc, #216]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
 8002cd0:	e01a      	b.n	8002d08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cde:	f7ff fa17 	bl	8002110 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce6:	f7ff fa13 	bl	8002110 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e2e7      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x1da>
 8002d04:	e000      	b.n	8002d08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d074      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d005      	beq.n	8002d26 <HAL_RCC_OscConfig+0x21a>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d10e      	bne.n	8002d3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d10b      	bne.n	8002d3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d064      	beq.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d160      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e2c4      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x24a>
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e01d      	b.n	8002d92 <HAL_RCC_OscConfig+0x286>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x26e>
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x286>
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7ff f9b9 	bl	8002110 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da0:	e011      	b.n	8002dc6 <HAL_RCC_OscConfig+0x2ba>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	0800a32c 	.word	0x0800a32c
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7ff f9ac 	bl	8002110 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e280      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc6:	4baf      	ldr	r3, [pc, #700]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2a8>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f99c 	bl	8002110 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff f998 	bl	8002110 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e26c      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dee:	4ba5      	ldr	r3, [pc, #660]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x2d0>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d060      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_OscConfig+0x310>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d119      	bne.n	8002e4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d116      	bne.n	8002e4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e1c:	4b99      	ldr	r3, [pc, #612]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_OscConfig+0x328>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e249      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b93      	ldr	r3, [pc, #588]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	4990      	ldr	r1, [pc, #576]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e48:	e040      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d023      	beq.n	8002e9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e52:	4b8c      	ldr	r3, [pc, #560]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a8b      	ldr	r2, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7ff f957 	bl	8002110 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7ff f953 	bl	8002110 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e227      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e78:	4b82      	ldr	r3, [pc, #520]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b7f      	ldr	r3, [pc, #508]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	497c      	ldr	r1, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
 8002e98:	e018      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a79      	ldr	r2, [pc, #484]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7ff f933 	bl	8002110 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eae:	f7ff f92f 	bl	8002110 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e203      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec0:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d03c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	4b68      	ldr	r3, [pc, #416]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	4a67      	ldr	r2, [pc, #412]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7ff f90e 	bl	8002110 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f90a 	bl	8002110 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1de      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f0a:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ef      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x3ec>
 8002f18:	e01b      	b.n	8002f52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	4a58      	ldr	r2, [pc, #352]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7ff f8f1 	bl	8002110 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f32:	f7ff f8ed 	bl	8002110 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e1c1      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f44:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ef      	bne.n	8002f32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a6 	beq.w	80030ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f64:	4b47      	ldr	r3, [pc, #284]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f70:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	4a43      	ldr	r2, [pc, #268]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7c:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f8c:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <HAL_RCC_OscConfig+0x57c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d118      	bne.n	8002fca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <HAL_RCC_OscConfig+0x57c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <HAL_RCC_OscConfig+0x57c>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa4:	f7ff f8b4 	bl	8002110 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7ff f8b0 	bl	8002110 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e184      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbe:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_RCC_OscConfig+0x57c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4d8>
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe2:	e024      	b.n	800302e <HAL_RCC_OscConfig+0x522>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d110      	bne.n	800300e <HAL_RCC_OscConfig+0x502>
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	4a24      	ldr	r2, [pc, #144]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a20      	ldr	r2, [pc, #128]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300c:	e00f      	b.n	800302e <HAL_RCC_OscConfig+0x522>
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	4a17      	ldr	r2, [pc, #92]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7ff f86b 	bl	8002110 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7ff f867 	bl	8002110 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e139      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0ed      	beq.n	800303e <HAL_RCC_OscConfig+0x532>
 8003062:	e01a      	b.n	800309a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7ff f854 	bl	8002110 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800306a:	e00f      	b.n	800308c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7ff f850 	bl	8002110 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d906      	bls.n	800308c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e122      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800308c:	4b90      	ldr	r3, [pc, #576]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e8      	bne.n	800306c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309a:	7ffb      	ldrb	r3, [r7, #31]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	4a8a      	ldr	r2, [pc, #552]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8108 	beq.w	80032c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	f040 80d0 	bne.w	8003260 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030c0:	4b83      	ldr	r3, [pc, #524]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0203 	and.w	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d130      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	3b01      	subs	r3, #1
 80030e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d127      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d11f      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003100:	2a07      	cmp	r2, #7
 8003102:	bf14      	ite	ne
 8003104:	2201      	movne	r2, #1
 8003106:	2200      	moveq	r2, #0
 8003108:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800310a:	4293      	cmp	r3, r2
 800310c:	d113      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d109      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d06e      	beq.n	8003214 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d069      	beq.n	8003210 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003148:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0b7      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003158:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5c      	ldr	r2, [pc, #368]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003164:	f7fe ffd4 	bl	8002110 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe ffd0 	bl	8002110 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0a4      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318a:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <HAL_RCC_OscConfig+0x7c8>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800319a:	3a01      	subs	r2, #1
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031a4:	0212      	lsls	r2, r2, #8
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031ac:	0852      	lsrs	r2, r2, #1
 80031ae:	3a01      	subs	r2, #1
 80031b0:	0552      	lsls	r2, r2, #21
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031b8:	0852      	lsrs	r2, r2, #1
 80031ba:	3a01      	subs	r2, #1
 80031bc:	0652      	lsls	r2, r2, #25
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031c4:	0912      	lsrs	r2, r2, #4
 80031c6:	0452      	lsls	r2, r2, #17
 80031c8:	430a      	orrs	r2, r1
 80031ca:	4941      	ldr	r1, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031d0:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a3e      	ldr	r2, [pc, #248]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031dc:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a3b      	ldr	r2, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031e8:	f7fe ff92 	bl	8002110 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe ff8e 	bl	8002110 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e062      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003202:	4b33      	ldr	r3, [pc, #204]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800320e:	e05a      	b.n	80032c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e059      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003214:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d152      	bne.n	80032c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003236:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003238:	f7fe ff6a 	bl	8002110 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe ff66 	bl	8002110 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e03a      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x734>
 800325e:	e032      	b.n	80032c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d02d      	beq.n	80032c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800326c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003270:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003284:	f023 0303 	bic.w	r3, r3, #3
 8003288:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003290:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe ff39 	bl	8002110 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe ff35 	bl	8002110 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e009      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x796>
 80032c0:	e001      	b.n	80032c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	f99d808c 	.word	0xf99d808c

080032d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0c8      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b66      	ldr	r3, [pc, #408]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d910      	bls.n	800331c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4961      	ldr	r1, [pc, #388]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b5f      	ldr	r3, [pc, #380]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b0      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04c      	beq.n	80033c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d107      	bne.n	8003340 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003330:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d121      	bne.n	8003380 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e09e      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d107      	bne.n	8003358 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d115      	bne.n	8003380 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e092      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003360:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e086      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003370:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e07e      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003380:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f023 0203 	bic.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	493f      	ldr	r1, [pc, #252]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003392:	f7fe febd 	bl	8002110 <HAL_GetTick>
 8003396:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339a:	f7fe feb9 	bl	8002110 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e066      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 020c 	and.w	r2, r3, #12
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	429a      	cmp	r2, r3
 80033c0:	d1eb      	bne.n	800339a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ce:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	492c      	ldr	r1, [pc, #176]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d210      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 0207 	bic.w	r2, r3, #7
 80033f6:	4924      	ldr	r1, [pc, #144]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e036      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4918      	ldr	r1, [pc, #96]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4910      	ldr	r1, [pc, #64]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344e:	f000 f825 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	490c      	ldr	r1, [pc, #48]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fdfc 	bl	8002070 <HAL_InitTick>
 8003478:	4603      	mov	r3, r0
 800347a:	72fb      	strb	r3, [r7, #11]

  return status;
 800347c:	7afb      	ldrb	r3, [r7, #11]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	0800a32c 	.word	0x0800a32c
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034aa:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b4:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x34>
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d121      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d11e      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034d0:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034dc:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e005      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034ec:	4b2d      	ldr	r3, [pc, #180]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034f8:	4a2b      	ldr	r2, [pc, #172]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d102      	bne.n	800351a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	e004      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d101      	bne.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d134      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800352a:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d003      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0xa6>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d003      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0xac>
 8003540:	e005      	b.n	800354e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003544:	617b      	str	r3, [r7, #20]
      break;
 8003546:	e005      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800354a:	617b      	str	r3, [r7, #20]
      break;
 800354c:	e002      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	617b      	str	r3, [r7, #20]
      break;
 8003552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	3301      	adds	r3, #1
 8003560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	fb02 f203 	mul.w	r2, r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	0e5b      	lsrs	r3, r3, #25
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	3301      	adds	r3, #1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003594:	69bb      	ldr	r3, [r7, #24]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	0800a344 	.word	0x0800a344
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	007a1200 	.word	0x007a1200

080035b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000000 	.word	0x20000000

080035cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035d0:	f7ff fff0 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4904      	ldr	r1, [pc, #16]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	0800a33c 	.word	0x0800a33c

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035fc:	f7ff ffda 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0adb      	lsrs	r3, r3, #11
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4904      	ldr	r1, [pc, #16]	; (8003620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000
 8003620:	0800a33c 	.word	0x0800a33c

08003624 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003630:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800363c:	f7ff fa02 	bl	8002a44 <HAL_PWREx_GetVoltageRange>
 8003640:	6178      	str	r0, [r7, #20]
 8003642:	e014      	b.n	800366e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003648:	4a24      	ldr	r2, [pc, #144]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364e:	6593      	str	r3, [r2, #88]	; 0x58
 8003650:	4b22      	ldr	r3, [pc, #136]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800365c:	f7ff f9f2 	bl	8002a44 <HAL_PWREx_GetVoltageRange>
 8003660:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003666:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003674:	d10b      	bne.n	800368e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d919      	bls.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2ba0      	cmp	r3, #160	; 0xa0
 8003680:	d902      	bls.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003682:	2302      	movs	r3, #2
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e013      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003688:	2301      	movs	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e010      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d902      	bls.n	800369a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003694:	2303      	movs	r3, #3
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e00a      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d102      	bne.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036a0:	2302      	movs	r3, #2
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e004      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b70      	cmp	r3, #112	; 0x70
 80036aa:	d101      	bne.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036ac:	2301      	movs	r3, #1
 80036ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 0207 	bic.w	r2, r3, #7
 80036b8:	4909      	ldr	r1, [pc, #36]	; (80036e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40022000 	.word	0x40022000

080036e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036ec:	2300      	movs	r3, #0
 80036ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036f0:	2300      	movs	r3, #0
 80036f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d041      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003708:	d02a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800370a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800370e:	d824      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003710:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003714:	d008      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800371a:	d81e      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003724:	d010      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003726:	e018      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003728:	4b86      	ldr	r3, [pc, #536]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a85      	ldr	r2, [pc, #532]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003732:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003734:	e015      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fabb 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003746:	e00c      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3320      	adds	r3, #32
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fba6 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	74fb      	strb	r3, [r7, #19]
      break;
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003768:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003776:	4973      	ldr	r1, [pc, #460]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800377e:	e001      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d041      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003794:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003798:	d02a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800379a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800379e:	d824      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a4:	d008      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037aa:	d81e      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b4:	d010      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037b6:	e018      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037b8:	4b62      	ldr	r3, [pc, #392]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a61      	ldr	r2, [pc, #388]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037c4:	e015      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fa73 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037d6:	e00c      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3320      	adds	r3, #32
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fb5e 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	74fb      	strb	r3, [r7, #19]
      break;
 80037ee:	e000      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037f8:	4b52      	ldr	r3, [pc, #328]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003806:	494f      	ldr	r1, [pc, #316]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800380e:	e001      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80a0 	beq.w	8003962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383c:	4b41      	ldr	r3, [pc, #260]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	4a40      	ldr	r2, [pc, #256]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003846:	6593      	str	r3, [r2, #88]	; 0x58
 8003848:	4b3e      	ldr	r3, [pc, #248]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003854:	2301      	movs	r3, #1
 8003856:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003858:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800385e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003862:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003864:	f7fe fc54 	bl	8002110 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800386a:	e009      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386c:	f7fe fc50 	bl	8002110 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	74fb      	strb	r3, [r7, #19]
        break;
 800387e:	e005      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003880:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ef      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d15c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01f      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d019      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038b0:	4b24      	ldr	r3, [pc, #144]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	4a20      	ldr	r2, [pc, #128]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fe fc0f 	bl	8002110 <HAL_GetTick>
 80038f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f4:	e00b      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fe fc0b 	bl	8002110 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d902      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	74fb      	strb	r3, [r7, #19]
            break;
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ec      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10c      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003932:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800393a:	e009      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003950:	7c7b      	ldrb	r3, [r7, #17]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003956:	4b9e      	ldr	r3, [pc, #632]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	4a9d      	ldr	r2, [pc, #628]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003960:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800396e:	4b98      	ldr	r3, [pc, #608]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f023 0203 	bic.w	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	4994      	ldr	r1, [pc, #592]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003990:	4b8f      	ldr	r3, [pc, #572]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f023 020c 	bic.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	498c      	ldr	r1, [pc, #560]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b2:	4b87      	ldr	r3, [pc, #540]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4983      	ldr	r1, [pc, #524]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039d4:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	497b      	ldr	r1, [pc, #492]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a04:	4972      	ldr	r1, [pc, #456]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a18:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	496a      	ldr	r1, [pc, #424]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	4961      	ldr	r1, [pc, #388]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a5c:	4b5c      	ldr	r3, [pc, #368]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	4959      	ldr	r1, [pc, #356]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7e:	4b54      	ldr	r3, [pc, #336]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	4950      	ldr	r1, [pc, #320]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa0:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	4948      	ldr	r1, [pc, #288]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac2:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	493f      	ldr	r1, [pc, #252]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d028      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae4:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af2:	4937      	ldr	r1, [pc, #220]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a31      	ldr	r2, [pc, #196]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
 8003b10:	e011      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f8c8 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d028      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	491f      	ldr	r1, [pc, #124]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b60:	d106      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b6c:	60d3      	str	r3, [r2, #12]
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f899 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d02b      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bae:	4908      	ldr	r1, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bbe:	d109      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a02      	ldr	r2, [pc, #8]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bca:	60d3      	str	r3, [r2, #12]
 8003bcc:	e014      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2101      	movs	r1, #1
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f867 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bee:	7cfb      	ldrb	r3, [r7, #19]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02f      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c04:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c12:	4928      	ldr	r1, [pc, #160]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c22:	d10d      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f844 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d014      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	74bb      	strb	r3, [r7, #18]
 8003c3e:	e011      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3320      	adds	r3, #32
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f925 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7e:	490d      	ldr	r1, [pc, #52]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca2:	4904      	ldr	r1, [pc, #16]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003caa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000

08003cb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cc6:	4b75      	ldr	r3, [pc, #468]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d018      	beq.n	8003d04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0203 	and.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d10d      	bne.n	8003cfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cea:	4b6c      	ldr	r3, [pc, #432]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d047      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	e044      	b.n	8003d8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d018      	beq.n	8003d3e <RCCEx_PLLSAI1_Config+0x86>
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d825      	bhi.n	8003d5c <RCCEx_PLLSAI1_Config+0xa4>
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d002      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0x62>
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d009      	beq.n	8003d2c <RCCEx_PLLSAI1_Config+0x74>
 8003d18:	e020      	b.n	8003d5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d1a:	4b60      	ldr	r3, [pc, #384]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11d      	bne.n	8003d62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2a:	e01a      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d2c:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3c:	e013      	b.n	8003d66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d3e:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d4a:	4b54      	ldr	r3, [pc, #336]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d5a:	e006      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d60:	e004      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10d      	bne.n	8003d8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d72:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	430b      	orrs	r3, r1
 8003d88:	4944      	ldr	r1, [pc, #272]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d17d      	bne.n	8003e90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d94:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da0:	f7fe f9b6 	bl	8002110 <HAL_GetTick>
 8003da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da6:	e009      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003da8:	f7fe f9b2 	bl	8002110 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d902      	bls.n	8003dbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	73fb      	strb	r3, [r7, #15]
        break;
 8003dba:	e005      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dbc:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ef      	bne.n	8003da8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d160      	bne.n	8003e90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d111      	bne.n	8003df8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd4:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6892      	ldr	r2, [r2, #8]
 8003de4:	0211      	lsls	r1, r2, #8
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68d2      	ldr	r2, [r2, #12]
 8003dea:	0912      	lsrs	r2, r2, #4
 8003dec:	0452      	lsls	r2, r2, #17
 8003dee:	430a      	orrs	r2, r1
 8003df0:	492a      	ldr	r1, [pc, #168]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	610b      	str	r3, [r1, #16]
 8003df6:	e027      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d112      	bne.n	8003e24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	0211      	lsls	r1, r2, #8
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6912      	ldr	r2, [r2, #16]
 8003e14:	0852      	lsrs	r2, r2, #1
 8003e16:	3a01      	subs	r2, #1
 8003e18:	0552      	lsls	r2, r2, #21
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	491f      	ldr	r1, [pc, #124]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]
 8003e22:	e011      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6892      	ldr	r2, [r2, #8]
 8003e34:	0211      	lsls	r1, r2, #8
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6952      	ldr	r2, [r2, #20]
 8003e3a:	0852      	lsrs	r2, r2, #1
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	0652      	lsls	r2, r2, #25
 8003e40:	430a      	orrs	r2, r1
 8003e42:	4916      	ldr	r1, [pc, #88]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fe f95c 	bl	8002110 <HAL_GetTick>
 8003e58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e5a:	e009      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5c:	f7fe f958 	bl	8002110 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d902      	bls.n	8003e70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003e6e:	e005      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ef      	beq.n	8003e5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	4904      	ldr	r1, [pc, #16]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eae:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d018      	beq.n	8003eec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003eba:	4b67      	ldr	r3, [pc, #412]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10d      	bne.n	8003ee6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ed2:	4b61      	ldr	r3, [pc, #388]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d047      	beq.n	8003f76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e044      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d018      	beq.n	8003f26 <RCCEx_PLLSAI2_Config+0x86>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d825      	bhi.n	8003f44 <RCCEx_PLLSAI2_Config+0xa4>
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d002      	beq.n	8003f02 <RCCEx_PLLSAI2_Config+0x62>
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d009      	beq.n	8003f14 <RCCEx_PLLSAI2_Config+0x74>
 8003f00:	e020      	b.n	8003f44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f02:	4b55      	ldr	r3, [pc, #340]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11d      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f12:	e01a      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f14:	4b50      	ldr	r3, [pc, #320]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f24:	e013      	b.n	8003f4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f26:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f42:	e006      	b.n	8003f52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e004      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10d      	bne.n	8003f76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f5a:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	4939      	ldr	r1, [pc, #228]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d167      	bne.n	800404c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a35      	ldr	r2, [pc, #212]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fe f8c2 	bl	8002110 <HAL_GetTick>
 8003f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f8e:	e009      	b.n	8003fa4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f90:	f7fe f8be 	bl	8002110 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d902      	bls.n	8003fa4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fa2:	e005      	b.n	8003fb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ef      	bne.n	8003f90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d14a      	bne.n	800404c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d111      	bne.n	8003fe0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6892      	ldr	r2, [r2, #8]
 8003fcc:	0211      	lsls	r1, r2, #8
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	0912      	lsrs	r2, r2, #4
 8003fd4:	0452      	lsls	r2, r2, #17
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	491f      	ldr	r1, [pc, #124]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	614b      	str	r3, [r1, #20]
 8003fde:	e011      	b.n	8004004 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6892      	ldr	r2, [r2, #8]
 8003ff0:	0211      	lsls	r1, r2, #8
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6912      	ldr	r2, [r2, #16]
 8003ff6:	0852      	lsrs	r2, r2, #1
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	0652      	lsls	r2, r2, #25
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	4916      	ldr	r1, [pc, #88]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a13      	ldr	r2, [pc, #76]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7fe f87e 	bl	8002110 <HAL_GetTick>
 8004014:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004016:	e009      	b.n	800402c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004018:	f7fe f87a 	bl	8002110 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d902      	bls.n	800402c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	73fb      	strb	r3, [r7, #15]
          break;
 800402a:	e005      	b.n	8004038 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ef      	beq.n	8004018 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4904      	ldr	r1, [pc, #16]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004048:	4313      	orrs	r3, r2
 800404a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000

0800405c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06c      	beq.n	8004148 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd fbd8 	bl	8001838 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	22ca      	movs	r2, #202	; 0xca
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2253      	movs	r2, #83	; 0x53
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f87c 	bl	800419e <RTC_EnterInitMode>
 80040a6:	4603      	mov	r3, r0
 80040a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d14b      	bne.n	8004148 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6899      	ldr	r1, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68d2      	ldr	r2, [r2, #12]
 80040ea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6919      	ldr	r1, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	041a      	lsls	r2, r3, #16
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f87f 	bl	8004204 <RTC_ExitInitMode>
 8004106:	4603      	mov	r3, r0
 8004108:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d11b      	bne.n	8004148 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0203 	bic.w	r2, r2, #3
 800411e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004168:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800416a:	f7fd ffd1 	bl	8002110 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004170:	e009      	b.n	8004186 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004172:	f7fd ffcd 	bl	8002110 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004180:	d901      	bls.n	8004186 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e007      	b.n	8004196 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ee      	beq.n	8004172 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d120      	bne.n	80041fa <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f04f 32ff 	mov.w	r2, #4294967295
 80041c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80041c2:	f7fd ffa5 	bl	8002110 <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041c8:	e00d      	b.n	80041e6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041ca:	f7fd ffa1 	bl	8002110 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d8:	d905      	bls.n	80041e6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2203      	movs	r2, #3
 80041e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <RTC_EnterInitMode+0x5c>
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d1e7      	bne.n	80041ca <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <RTC_ExitInitMode+0x78>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <RTC_ExitInitMode+0x78>)
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <RTC_ExitInitMode+0x78>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10c      	bne.n	8004242 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff92 	bl	8004152 <HAL_RTC_WaitForSynchro>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01e      	beq.n	8004272 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2203      	movs	r2, #3
 8004238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e017      	b.n	8004272 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <RTC_ExitInitMode+0x78>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <RTC_ExitInitMode+0x78>)
 8004248:	f023 0320 	bic.w	r3, r3, #32
 800424c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ff7f 	bl	8004152 <HAL_RTC_WaitForSynchro>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2203      	movs	r2, #3
 800425e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <RTC_ExitInitMode+0x78>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <RTC_ExitInitMode+0x78>)
 800426c:	f043 0320 	orr.w	r3, r3, #32
 8004270:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40002800 	.word	0x40002800

08004280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e095      	b.n	80043be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a2:	d009      	beq.n	80042b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
 80042aa:	e005      	b.n	80042b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fb0a 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042f8:	d902      	bls.n	8004300 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e002      	b.n	8004306 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004304:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800430e:	d007      	beq.n	8004320 <HAL_SPI_Init+0xa0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004318:	d002      	beq.n	8004320 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	ea42 0103 	orr.w	r1, r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	f003 0204 	and.w	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800439c:	ea42 0103 	orr.w	r1, r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e049      	b.n	800446c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fd fc75 	bl	8001cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f000 f9ed 	bl	80047e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e04f      	b.n	800452c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a23      	ldr	r2, [pc, #140]	; (8004538 <HAL_TIM_Base_Start_IT+0xc4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01d      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0x76>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d018      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0x76>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1f      	ldr	r2, [pc, #124]	; (800453c <HAL_TIM_Base_Start_IT+0xc8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0x76>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <HAL_TIM_Base_Start_IT+0xcc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0x76>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <HAL_TIM_Base_Start_IT+0xd0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0x76>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <HAL_TIM_Base_Start_IT+0xd4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0x76>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a19      	ldr	r2, [pc, #100]	; (800454c <HAL_TIM_Base_Start_IT+0xd8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d115      	bne.n	8004516 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	4b17      	ldr	r3, [pc, #92]	; (8004550 <HAL_TIM_Base_Start_IT+0xdc>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b06      	cmp	r3, #6
 80044fa:	d015      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0xb4>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d011      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004514:	e008      	b.n	8004528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e000      	b.n	800452a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004528:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40012c00 	.word	0x40012c00
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40013400 	.word	0x40013400
 800454c:	40014000 	.word	0x40014000
 8004550:	00010007 	.word	0x00010007

08004554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d122      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d11b      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0202 	mvn.w	r2, #2
 8004580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f905 	bl	80047a6 <HAL_TIM_IC_CaptureCallback>
 800459c:	e005      	b.n	80045aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8f7 	bl	8004792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f908 	bl	80047ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d122      	bne.n	8004604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d11b      	bne.n	8004604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0204 	mvn.w	r2, #4
 80045d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8db 	bl	80047a6 <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8cd 	bl	8004792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f8de 	bl	80047ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b08      	cmp	r3, #8
 8004610:	d122      	bne.n	8004658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b08      	cmp	r3, #8
 800461e:	d11b      	bne.n	8004658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0208 	mvn.w	r2, #8
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2204      	movs	r2, #4
 800462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8b1 	bl	80047a6 <HAL_TIM_IC_CaptureCallback>
 8004644:	e005      	b.n	8004652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8a3 	bl	8004792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8b4 	bl	80047ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b10      	cmp	r3, #16
 8004664:	d122      	bne.n	80046ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b10      	cmp	r3, #16
 8004672:	d11b      	bne.n	80046ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0210 	mvn.w	r2, #16
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2208      	movs	r2, #8
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f887 	bl	80047a6 <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f879 	bl	8004792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f88a 	bl	80047ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10e      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0201 	mvn.w	r2, #1
 80046d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc ff3e 	bl	8001554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b80      	cmp	r3, #128	; 0x80
 80046e4:	d10e      	bne.n	8004704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f99c 	bl	8004a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004712:	d10e      	bne.n	8004732 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b80      	cmp	r3, #128	; 0x80
 8004720:	d107      	bne.n	8004732 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800472a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f98f 	bl	8004a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d10e      	bne.n	800475e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d107      	bne.n	800475e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f838 	bl	80047ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b20      	cmp	r3, #32
 800476a:	d10e      	bne.n	800478a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b20      	cmp	r3, #32
 8004778:	d107      	bne.n	800478a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f06f 0220 	mvn.w	r2, #32
 8004782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f94f 	bl	8004a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a40      	ldr	r2, [pc, #256]	; (80048f8 <TIM_Base_SetConfig+0x114>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d013      	beq.n	8004824 <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004802:	d00f      	beq.n	8004824 <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3d      	ldr	r2, [pc, #244]	; (80048fc <TIM_Base_SetConfig+0x118>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00b      	beq.n	8004824 <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a3c      	ldr	r2, [pc, #240]	; (8004900 <TIM_Base_SetConfig+0x11c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a3b      	ldr	r2, [pc, #236]	; (8004904 <TIM_Base_SetConfig+0x120>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0x40>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a3a      	ldr	r2, [pc, #232]	; (8004908 <TIM_Base_SetConfig+0x124>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2f      	ldr	r2, [pc, #188]	; (80048f8 <TIM_Base_SetConfig+0x114>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01f      	beq.n	800487e <TIM_Base_SetConfig+0x9a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004844:	d01b      	beq.n	800487e <TIM_Base_SetConfig+0x9a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2c      	ldr	r2, [pc, #176]	; (80048fc <TIM_Base_SetConfig+0x118>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d017      	beq.n	800487e <TIM_Base_SetConfig+0x9a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <TIM_Base_SetConfig+0x11c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <TIM_Base_SetConfig+0x9a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <TIM_Base_SetConfig+0x120>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00f      	beq.n	800487e <TIM_Base_SetConfig+0x9a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a29      	ldr	r2, [pc, #164]	; (8004908 <TIM_Base_SetConfig+0x124>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <TIM_Base_SetConfig+0x9a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a28      	ldr	r2, [pc, #160]	; (800490c <TIM_Base_SetConfig+0x128>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_Base_SetConfig+0x9a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a27      	ldr	r2, [pc, #156]	; (8004910 <TIM_Base_SetConfig+0x12c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_Base_SetConfig+0x9a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a26      	ldr	r2, [pc, #152]	; (8004914 <TIM_Base_SetConfig+0x130>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d108      	bne.n	8004890 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <TIM_Base_SetConfig+0x114>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00f      	beq.n	80048dc <TIM_Base_SetConfig+0xf8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a12      	ldr	r2, [pc, #72]	; (8004908 <TIM_Base_SetConfig+0x124>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00b      	beq.n	80048dc <TIM_Base_SetConfig+0xf8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a11      	ldr	r2, [pc, #68]	; (800490c <TIM_Base_SetConfig+0x128>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_Base_SetConfig+0xf8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <TIM_Base_SetConfig+0x12c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_Base_SetConfig+0xf8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a0f      	ldr	r2, [pc, #60]	; (8004914 <TIM_Base_SetConfig+0x130>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d103      	bne.n	80048e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	615a      	str	r2, [r3, #20]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800
 8004904:	40000c00 	.word	0x40000c00
 8004908:	40013400 	.word	0x40013400
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800

08004918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800492c:	2302      	movs	r3, #2
 800492e:	e068      	b.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a2e      	ldr	r2, [pc, #184]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d108      	bne.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800496a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a2:	d018      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10c      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40013400 	.word	0x40013400
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40014000 	.word	0x40014000

08004a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e040      	b.n	8004af8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd f9f2 	bl	8001e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9dc 	bl	8004e60 <UART_SetConfig>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e022      	b.n	8004af8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fc5a 	bl	8005374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fce1 	bl	80054b8 <UART_CheckIdleState>
 8004af6:	4603      	mov	r3, r0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e048      	b.n	8004ba4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd f9a4 	bl	8001e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f98e 	bl	8004e60 <UART_SetConfig>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e02a      	b.n	8004ba4 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fc0c 	bl	8005374 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004b7a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fc8b 	bl	80054b8 <UART_CheckIdleState>
 8004ba2:	4603      	mov	r3, r0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	f640 030f 	movw	r3, #2063	; 0x80f
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d113      	bne.n	8004c04 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00e      	beq.n	8004c04 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8113 	beq.w	8004e20 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
      }
      return;
 8004c02:	e10d      	b.n	8004e20 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80d6 	beq.w	8004db8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4b85      	ldr	r3, [pc, #532]	; (8004e30 <HAL_UART_IRQHandler+0x284>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80cb 	beq.w	8004db8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <HAL_UART_IRQHandler+0x9e>
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c42:	f043 0201 	orr.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00e      	beq.n	8004c72 <HAL_UART_IRQHandler+0xc6>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2202      	movs	r2, #2
 8004c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6a:	f043 0204 	orr.w	r2, r3, #4
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00e      	beq.n	8004c9a <HAL_UART_IRQHandler+0xee>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d013      	beq.n	8004ccc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc4:	f043 0208 	orr.w	r2, r3, #8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00f      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x14a>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cee:	f043 0220 	orr.w	r2, r3, #32
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8092 	beq.w	8004e24 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d28:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d004      	beq.n	8004d42 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d031      	beq.n	8004da6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fc78 	bl	8005638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d123      	bne.n	8004d9e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d64:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d013      	beq.n	8004d96 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d72:	4a30      	ldr	r2, [pc, #192]	; (8004e34 <HAL_UART_IRQHandler+0x288>)
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd fb09 	bl	8002392 <HAL_DMA_Abort_IT>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d90:	4610      	mov	r0, r2
 8004d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	e00e      	b.n	8004db4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f858 	bl	8004e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	e00a      	b.n	8004db4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f854 	bl	8004e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da4:	e006      	b.n	8004db4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f850 	bl	8004e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004db2:	e037      	b.n	8004e24 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	bf00      	nop
    return;
 8004db6:	e035      	b.n	8004e24 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <HAL_UART_IRQHandler+0x232>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fc7d 	bl	80056d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ddc:	e025      	b.n	8004e2a <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00d      	beq.n	8004e04 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d016      	beq.n	8004e28 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
    }
    return;
 8004e02:	e011      	b.n	8004e28 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <HAL_UART_IRQHandler+0x27e>
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fc43 	bl	80056a4 <UART_EndTransmit_IT>
    return;
 8004e1e:	e004      	b.n	8004e2a <HAL_UART_IRQHandler+0x27e>
      return;
 8004e20:	bf00      	nop
 8004e22:	e002      	b.n	8004e2a <HAL_UART_IRQHandler+0x27e>
    return;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <HAL_UART_IRQHandler+0x27e>
    return;
 8004e28:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	04000120 	.word	0x04000120
 8004e34:	08005679 	.word	0x08005679

08004e38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4bad      	ldr	r3, [pc, #692]	; (8005140 <UART_SetConfig+0x2e0>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	69f9      	ldr	r1, [r7, #28]
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4aa2      	ldr	r2, [pc, #648]	; (8005144 <UART_SetConfig+0x2e4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a99      	ldr	r2, [pc, #612]	; (8005148 <UART_SetConfig+0x2e8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d121      	bne.n	8004f2a <UART_SetConfig+0xca>
 8004ee6:	4b99      	ldr	r3, [pc, #612]	; (800514c <UART_SetConfig+0x2ec>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d817      	bhi.n	8004f24 <UART_SetConfig+0xc4>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x9c>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f19 	.word	0x08004f19
 8004f04:	08004f13 	.word	0x08004f13
 8004f08:	08004f1f 	.word	0x08004f1f
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	76fb      	strb	r3, [r7, #27]
 8004f10:	e0e7      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f12:	2302      	movs	r3, #2
 8004f14:	76fb      	strb	r3, [r7, #27]
 8004f16:	e0e4      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	76fb      	strb	r3, [r7, #27]
 8004f1c:	e0e1      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	76fb      	strb	r3, [r7, #27]
 8004f22:	e0de      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f24:	2310      	movs	r3, #16
 8004f26:	76fb      	strb	r3, [r7, #27]
 8004f28:	e0db      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a88      	ldr	r2, [pc, #544]	; (8005150 <UART_SetConfig+0x2f0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d132      	bne.n	8004f9a <UART_SetConfig+0x13a>
 8004f34:	4b85      	ldr	r3, [pc, #532]	; (800514c <UART_SetConfig+0x2ec>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d828      	bhi.n	8004f94 <UART_SetConfig+0x134>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0xe8>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f95 	.word	0x08004f95
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f89 	.word	0x08004f89
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004f95 	.word	0x08004f95
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004f83 	.word	0x08004f83
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08004f8f 	.word	0x08004f8f
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	76fb      	strb	r3, [r7, #27]
 8004f80:	e0af      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f82:	2302      	movs	r3, #2
 8004f84:	76fb      	strb	r3, [r7, #27]
 8004f86:	e0ac      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	76fb      	strb	r3, [r7, #27]
 8004f8c:	e0a9      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	76fb      	strb	r3, [r7, #27]
 8004f92:	e0a6      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f94:	2310      	movs	r3, #16
 8004f96:	76fb      	strb	r3, [r7, #27]
 8004f98:	e0a3      	b.n	80050e2 <UART_SetConfig+0x282>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a6d      	ldr	r2, [pc, #436]	; (8005154 <UART_SetConfig+0x2f4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d120      	bne.n	8004fe6 <UART_SetConfig+0x186>
 8004fa4:	4b69      	ldr	r3, [pc, #420]	; (800514c <UART_SetConfig+0x2ec>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fae:	2b30      	cmp	r3, #48	; 0x30
 8004fb0:	d013      	beq.n	8004fda <UART_SetConfig+0x17a>
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d814      	bhi.n	8004fe0 <UART_SetConfig+0x180>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d009      	beq.n	8004fce <UART_SetConfig+0x16e>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d810      	bhi.n	8004fe0 <UART_SetConfig+0x180>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <UART_SetConfig+0x168>
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d006      	beq.n	8004fd4 <UART_SetConfig+0x174>
 8004fc6:	e00b      	b.n	8004fe0 <UART_SetConfig+0x180>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	76fb      	strb	r3, [r7, #27]
 8004fcc:	e089      	b.n	80050e2 <UART_SetConfig+0x282>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	76fb      	strb	r3, [r7, #27]
 8004fd2:	e086      	b.n	80050e2 <UART_SetConfig+0x282>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	76fb      	strb	r3, [r7, #27]
 8004fd8:	e083      	b.n	80050e2 <UART_SetConfig+0x282>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	76fb      	strb	r3, [r7, #27]
 8004fde:	e080      	b.n	80050e2 <UART_SetConfig+0x282>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	76fb      	strb	r3, [r7, #27]
 8004fe4:	e07d      	b.n	80050e2 <UART_SetConfig+0x282>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a5b      	ldr	r2, [pc, #364]	; (8005158 <UART_SetConfig+0x2f8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d120      	bne.n	8005032 <UART_SetConfig+0x1d2>
 8004ff0:	4b56      	ldr	r3, [pc, #344]	; (800514c <UART_SetConfig+0x2ec>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8004ffc:	d013      	beq.n	8005026 <UART_SetConfig+0x1c6>
 8004ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8005000:	d814      	bhi.n	800502c <UART_SetConfig+0x1cc>
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d009      	beq.n	800501a <UART_SetConfig+0x1ba>
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d810      	bhi.n	800502c <UART_SetConfig+0x1cc>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <UART_SetConfig+0x1b4>
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d006      	beq.n	8005020 <UART_SetConfig+0x1c0>
 8005012:	e00b      	b.n	800502c <UART_SetConfig+0x1cc>
 8005014:	2300      	movs	r3, #0
 8005016:	76fb      	strb	r3, [r7, #27]
 8005018:	e063      	b.n	80050e2 <UART_SetConfig+0x282>
 800501a:	2302      	movs	r3, #2
 800501c:	76fb      	strb	r3, [r7, #27]
 800501e:	e060      	b.n	80050e2 <UART_SetConfig+0x282>
 8005020:	2304      	movs	r3, #4
 8005022:	76fb      	strb	r3, [r7, #27]
 8005024:	e05d      	b.n	80050e2 <UART_SetConfig+0x282>
 8005026:	2308      	movs	r3, #8
 8005028:	76fb      	strb	r3, [r7, #27]
 800502a:	e05a      	b.n	80050e2 <UART_SetConfig+0x282>
 800502c:	2310      	movs	r3, #16
 800502e:	76fb      	strb	r3, [r7, #27]
 8005030:	e057      	b.n	80050e2 <UART_SetConfig+0x282>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a49      	ldr	r2, [pc, #292]	; (800515c <UART_SetConfig+0x2fc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d125      	bne.n	8005088 <UART_SetConfig+0x228>
 800503c:	4b43      	ldr	r3, [pc, #268]	; (800514c <UART_SetConfig+0x2ec>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504a:	d017      	beq.n	800507c <UART_SetConfig+0x21c>
 800504c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005050:	d817      	bhi.n	8005082 <UART_SetConfig+0x222>
 8005052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005056:	d00b      	beq.n	8005070 <UART_SetConfig+0x210>
 8005058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505c:	d811      	bhi.n	8005082 <UART_SetConfig+0x222>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <UART_SetConfig+0x20a>
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d006      	beq.n	8005076 <UART_SetConfig+0x216>
 8005068:	e00b      	b.n	8005082 <UART_SetConfig+0x222>
 800506a:	2300      	movs	r3, #0
 800506c:	76fb      	strb	r3, [r7, #27]
 800506e:	e038      	b.n	80050e2 <UART_SetConfig+0x282>
 8005070:	2302      	movs	r3, #2
 8005072:	76fb      	strb	r3, [r7, #27]
 8005074:	e035      	b.n	80050e2 <UART_SetConfig+0x282>
 8005076:	2304      	movs	r3, #4
 8005078:	76fb      	strb	r3, [r7, #27]
 800507a:	e032      	b.n	80050e2 <UART_SetConfig+0x282>
 800507c:	2308      	movs	r3, #8
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	e02f      	b.n	80050e2 <UART_SetConfig+0x282>
 8005082:	2310      	movs	r3, #16
 8005084:	76fb      	strb	r3, [r7, #27]
 8005086:	e02c      	b.n	80050e2 <UART_SetConfig+0x282>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <UART_SetConfig+0x2e4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d125      	bne.n	80050de <UART_SetConfig+0x27e>
 8005092:	4b2e      	ldr	r3, [pc, #184]	; (800514c <UART_SetConfig+0x2ec>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800509c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a0:	d017      	beq.n	80050d2 <UART_SetConfig+0x272>
 80050a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a6:	d817      	bhi.n	80050d8 <UART_SetConfig+0x278>
 80050a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ac:	d00b      	beq.n	80050c6 <UART_SetConfig+0x266>
 80050ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b2:	d811      	bhi.n	80050d8 <UART_SetConfig+0x278>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <UART_SetConfig+0x260>
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d006      	beq.n	80050cc <UART_SetConfig+0x26c>
 80050be:	e00b      	b.n	80050d8 <UART_SetConfig+0x278>
 80050c0:	2300      	movs	r3, #0
 80050c2:	76fb      	strb	r3, [r7, #27]
 80050c4:	e00d      	b.n	80050e2 <UART_SetConfig+0x282>
 80050c6:	2302      	movs	r3, #2
 80050c8:	76fb      	strb	r3, [r7, #27]
 80050ca:	e00a      	b.n	80050e2 <UART_SetConfig+0x282>
 80050cc:	2304      	movs	r3, #4
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	e007      	b.n	80050e2 <UART_SetConfig+0x282>
 80050d2:	2308      	movs	r3, #8
 80050d4:	76fb      	strb	r3, [r7, #27]
 80050d6:	e004      	b.n	80050e2 <UART_SetConfig+0x282>
 80050d8:	2310      	movs	r3, #16
 80050da:	76fb      	strb	r3, [r7, #27]
 80050dc:	e001      	b.n	80050e2 <UART_SetConfig+0x282>
 80050de:	2310      	movs	r3, #16
 80050e0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a17      	ldr	r2, [pc, #92]	; (8005144 <UART_SetConfig+0x2e4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	f040 8087 	bne.w	80051fc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050ee:	7efb      	ldrb	r3, [r7, #27]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d837      	bhi.n	8005164 <UART_SetConfig+0x304>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <UART_SetConfig+0x29c>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005121 	.word	0x08005121
 8005100:	08005165 	.word	0x08005165
 8005104:	08005129 	.word	0x08005129
 8005108:	08005165 	.word	0x08005165
 800510c:	0800512f 	.word	0x0800512f
 8005110:	08005165 	.word	0x08005165
 8005114:	08005165 	.word	0x08005165
 8005118:	08005165 	.word	0x08005165
 800511c:	08005137 	.word	0x08005137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005120:	f7fe fa54 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8005124:	6178      	str	r0, [r7, #20]
        break;
 8005126:	e022      	b.n	800516e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005128:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <UART_SetConfig+0x300>)
 800512a:	617b      	str	r3, [r7, #20]
        break;
 800512c:	e01f      	b.n	800516e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512e:	f7fe f9b5 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8005132:	6178      	str	r0, [r7, #20]
        break;
 8005134:	e01b      	b.n	800516e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513a:	617b      	str	r3, [r7, #20]
        break;
 800513c:	e017      	b.n	800516e <UART_SetConfig+0x30e>
 800513e:	bf00      	nop
 8005140:	efff69f3 	.word	0xefff69f3
 8005144:	40008000 	.word	0x40008000
 8005148:	40013800 	.word	0x40013800
 800514c:	40021000 	.word	0x40021000
 8005150:	40004400 	.word	0x40004400
 8005154:	40004800 	.word	0x40004800
 8005158:	40004c00 	.word	0x40004c00
 800515c:	40005000 	.word	0x40005000
 8005160:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	76bb      	strb	r3, [r7, #26]
        break;
 800516c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80f1 	beq.w	8005358 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	429a      	cmp	r2, r3
 8005184:	d305      	bcc.n	8005192 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	429a      	cmp	r2, r3
 8005190:	d902      	bls.n	8005198 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	76bb      	strb	r3, [r7, #26]
 8005196:	e0df      	b.n	8005358 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4618      	mov	r0, r3
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	020b      	lsls	r3, r1, #8
 80051aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051ae:	0202      	lsls	r2, r0, #8
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	6849      	ldr	r1, [r1, #4]
 80051b4:	0849      	lsrs	r1, r1, #1
 80051b6:	4608      	mov	r0, r1
 80051b8:	f04f 0100 	mov.w	r1, #0
 80051bc:	1814      	adds	r4, r2, r0
 80051be:	eb43 0501 	adc.w	r5, r3, r1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	4620      	mov	r0, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	f7fb fd3a 	bl	8000c48 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4613      	mov	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051e2:	d308      	bcc.n	80051f6 <UART_SetConfig+0x396>
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ea:	d204      	bcs.n	80051f6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	60da      	str	r2, [r3, #12]
 80051f4:	e0b0      	b.n	8005358 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	76bb      	strb	r3, [r7, #26]
 80051fa:	e0ad      	b.n	8005358 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005204:	d15c      	bne.n	80052c0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005206:	7efb      	ldrb	r3, [r7, #27]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d828      	bhi.n	800525e <UART_SetConfig+0x3fe>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <UART_SetConfig+0x3b4>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005239 	.word	0x08005239
 8005218:	08005241 	.word	0x08005241
 800521c:	08005249 	.word	0x08005249
 8005220:	0800525f 	.word	0x0800525f
 8005224:	0800524f 	.word	0x0800524f
 8005228:	0800525f 	.word	0x0800525f
 800522c:	0800525f 	.word	0x0800525f
 8005230:	0800525f 	.word	0x0800525f
 8005234:	08005257 	.word	0x08005257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005238:	f7fe f9c8 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 800523c:	6178      	str	r0, [r7, #20]
        break;
 800523e:	e013      	b.n	8005268 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005240:	f7fe f9da 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8005244:	6178      	str	r0, [r7, #20]
        break;
 8005246:	e00f      	b.n	8005268 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005248:	4b49      	ldr	r3, [pc, #292]	; (8005370 <UART_SetConfig+0x510>)
 800524a:	617b      	str	r3, [r7, #20]
        break;
 800524c:	e00c      	b.n	8005268 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524e:	f7fe f925 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8005252:	6178      	str	r0, [r7, #20]
        break;
 8005254:	e008      	b.n	8005268 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525a:	617b      	str	r3, [r7, #20]
        break;
 800525c:	e004      	b.n	8005268 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	76bb      	strb	r3, [r7, #26]
        break;
 8005266:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d074      	beq.n	8005358 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	005a      	lsls	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	441a      	add	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	b29b      	uxth	r3, r3
 8005284:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b0f      	cmp	r3, #15
 800528a:	d916      	bls.n	80052ba <UART_SetConfig+0x45a>
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005292:	d212      	bcs.n	80052ba <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f023 030f 	bic.w	r3, r3, #15
 800529c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	89fb      	ldrh	r3, [r7, #14]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	89fa      	ldrh	r2, [r7, #14]
 80052b6:	60da      	str	r2, [r3, #12]
 80052b8:	e04e      	b.n	8005358 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	76bb      	strb	r3, [r7, #26]
 80052be:	e04b      	b.n	8005358 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052c0:	7efb      	ldrb	r3, [r7, #27]
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d827      	bhi.n	8005316 <UART_SetConfig+0x4b6>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0x46c>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	080052f9 	.word	0x080052f9
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005317 	.word	0x08005317
 80052dc:	08005307 	.word	0x08005307
 80052e0:	08005317 	.word	0x08005317
 80052e4:	08005317 	.word	0x08005317
 80052e8:	08005317 	.word	0x08005317
 80052ec:	0800530f 	.word	0x0800530f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7fe f96c 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 80052f4:	6178      	str	r0, [r7, #20]
        break;
 80052f6:	e013      	b.n	8005320 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f8:	f7fe f97e 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 80052fc:	6178      	str	r0, [r7, #20]
        break;
 80052fe:	e00f      	b.n	8005320 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005300:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <UART_SetConfig+0x510>)
 8005302:	617b      	str	r3, [r7, #20]
        break;
 8005304:	e00c      	b.n	8005320 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005306:	f7fe f8c9 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800530a:	6178      	str	r0, [r7, #20]
        break;
 800530c:	e008      	b.n	8005320 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	617b      	str	r3, [r7, #20]
        break;
 8005314:	e004      	b.n	8005320 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	76bb      	strb	r3, [r7, #26]
        break;
 800531e:	bf00      	nop
    }

    if (pclk != 0U)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d018      	beq.n	8005358 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	085a      	lsrs	r2, r3, #1
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	441a      	add	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	b29b      	uxth	r3, r3
 800533a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b0f      	cmp	r3, #15
 8005340:	d908      	bls.n	8005354 <UART_SetConfig+0x4f4>
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d204      	bcs.n	8005354 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	e001      	b.n	8005358 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005364:	7ebb      	ldrb	r3, [r7, #26]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bdb0      	pop	{r4, r5, r7, pc}
 800536e:	bf00      	nop
 8005370:	00f42400 	.word	0x00f42400

08005374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01a      	beq.n	800548a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005472:	d10a      	bne.n	800548a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af02      	add	r7, sp, #8
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80054c6:	f7fc fe23 	bl	8002110 <HAL_GetTick>
 80054ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d10e      	bne.n	80054f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f82a 	bl	8005542 <UART_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e020      	b.n	800553a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b04      	cmp	r3, #4
 8005504:	d10e      	bne.n	8005524 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005506:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f814 	bl	8005542 <UART_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e00a      	b.n	800553a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	e05d      	b.n	8005610 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d059      	beq.n	8005610 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555c:	f7fc fdd8 	bl	8002110 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <UART_WaitOnFlagUntilTimeout+0x30>
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11b      	bne.n	80055aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005580:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e042      	b.n	8005630 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02b      	beq.n	8005610 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c6:	d123      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e00f      	b.n	8005630 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4013      	ands	r3, r2
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	429a      	cmp	r2, r3
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	429a      	cmp	r2, r3
 800562c:	d092      	beq.n	8005554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800564e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fbd8 	bl	8004e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fbb5 	bl	8004e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80056f0:	4904      	ldr	r1, [pc, #16]	; (8005704 <MX_FATFS_Init+0x18>)
 80056f2:	4805      	ldr	r0, [pc, #20]	; (8005708 <MX_FATFS_Init+0x1c>)
 80056f4:	f000 f8b0 	bl	8005858 <FATFS_LinkDriver>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	4b03      	ldr	r3, [pc, #12]	; (800570c <MX_FATFS_Init+0x20>)
 80056fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005700:	bf00      	nop
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20000d34 	.word	0x20000d34
 8005708:	2000000c 	.word	0x2000000c
 800570c:	20000d38 	.word	0x20000d38

08005710 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <USER_initialize+0x24>)
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <USER_initialize+0x24>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000009 	.word	0x20000009

08005738 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005742:	4b06      	ldr	r3, [pc, #24]	; (800575c <USER_status+0x24>)
 8005744:	2201      	movs	r2, #1
 8005746:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <USER_status+0x24>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20000009 	.word	0x20000009

08005760 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005770:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4603      	mov	r3, r0
 800578c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800578e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	603a      	str	r2, [r7, #0]
 80057a6:	71fb      	strb	r3, [r7, #7]
 80057a8:	460b      	mov	r3, r1
 80057aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
    return res;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80057ce:	2301      	movs	r3, #1
 80057d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80057d6:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 80057d8:	7a5b      	ldrb	r3, [r3, #9]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d131      	bne.n	8005844 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80057e0:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 80057e2:	7a5b      	ldrb	r3, [r3, #9]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	4b1a      	ldr	r3, [pc, #104]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 80057ea:	2100      	movs	r1, #0
 80057ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 80057f0:	7a5b      	ldrb	r3, [r3, #9]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	4a17      	ldr	r2, [pc, #92]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80057fe:	4b15      	ldr	r3, [pc, #84]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 8005800:	7a5b      	ldrb	r3, [r3, #9]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	4b13      	ldr	r3, [pc, #76]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 8005808:	4413      	add	r3, r2
 800580a:	79fa      	ldrb	r2, [r7, #7]
 800580c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 8005810:	7a5b      	ldrb	r3, [r3, #9]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	b2d1      	uxtb	r1, r2
 8005818:	4a0e      	ldr	r2, [pc, #56]	; (8005854 <FATFS_LinkDriverEx+0x94>)
 800581a:	7251      	strb	r1, [r2, #9]
 800581c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800581e:	7dbb      	ldrb	r3, [r7, #22]
 8005820:	3330      	adds	r3, #48	; 0x30
 8005822:	b2da      	uxtb	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	3301      	adds	r3, #1
 800582c:	223a      	movs	r2, #58	; 0x3a
 800582e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	3302      	adds	r3, #2
 8005834:	222f      	movs	r2, #47	; 0x2f
 8005836:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3303      	adds	r3, #3
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005844:	7dfb      	ldrb	r3, [r7, #23]
}
 8005846:	4618      	mov	r0, r3
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000a04 	.word	0x20000a04

08005858 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005862:	2200      	movs	r2, #0
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ffaa 	bl	80057c0 <FATFS_LinkDriverEx>
 800586c:	4603      	mov	r3, r0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <__errno>:
 8005878:	4b01      	ldr	r3, [pc, #4]	; (8005880 <__errno+0x8>)
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000020 	.word	0x20000020

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4d0d      	ldr	r5, [pc, #52]	; (80058bc <__libc_init_array+0x38>)
 8005888:	4c0d      	ldr	r4, [pc, #52]	; (80058c0 <__libc_init_array+0x3c>)
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	2600      	movs	r6, #0
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	4d0b      	ldr	r5, [pc, #44]	; (80058c4 <__libc_init_array+0x40>)
 8005896:	4c0c      	ldr	r4, [pc, #48]	; (80058c8 <__libc_init_array+0x44>)
 8005898:	f004 fd28 	bl	800a2ec <_init>
 800589c:	1b64      	subs	r4, r4, r5
 800589e:	10a4      	asrs	r4, r4, #2
 80058a0:	2600      	movs	r6, #0
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	0800a71c 	.word	0x0800a71c
 80058c0:	0800a71c 	.word	0x0800a71c
 80058c4:	0800a71c 	.word	0x0800a71c
 80058c8:	0800a724 	.word	0x0800a724

080058cc <memset>:
 80058cc:	4402      	add	r2, r0
 80058ce:	4603      	mov	r3, r0
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d100      	bne.n	80058d6 <memset+0xa>
 80058d4:	4770      	bx	lr
 80058d6:	f803 1b01 	strb.w	r1, [r3], #1
 80058da:	e7f9      	b.n	80058d0 <memset+0x4>

080058dc <printf>:
 80058dc:	b40f      	push	{r0, r1, r2, r3}
 80058de:	b507      	push	{r0, r1, r2, lr}
 80058e0:	4906      	ldr	r1, [pc, #24]	; (80058fc <printf+0x20>)
 80058e2:	ab04      	add	r3, sp, #16
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ea:	6881      	ldr	r1, [r0, #8]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	f000 f807 	bl	8005900 <_vfprintf_r>
 80058f2:	b003      	add	sp, #12
 80058f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f8:	b004      	add	sp, #16
 80058fa:	4770      	bx	lr
 80058fc:	20000020 	.word	0x20000020

08005900 <_vfprintf_r>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	ed2d 8b04 	vpush	{d8-d9}
 8005908:	b0cf      	sub	sp, #316	; 0x13c
 800590a:	4689      	mov	r9, r1
 800590c:	9203      	str	r2, [sp, #12]
 800590e:	461c      	mov	r4, r3
 8005910:	461e      	mov	r6, r3
 8005912:	4682      	mov	sl, r0
 8005914:	f002 fb9e 	bl	8008054 <_localeconv_r>
 8005918:	6803      	ldr	r3, [r0, #0]
 800591a:	9313      	str	r3, [sp, #76]	; 0x4c
 800591c:	4618      	mov	r0, r3
 800591e:	f7fa fca7 	bl	8000270 <strlen>
 8005922:	900e      	str	r0, [sp, #56]	; 0x38
 8005924:	f1ba 0f00 	cmp.w	sl, #0
 8005928:	d005      	beq.n	8005936 <_vfprintf_r+0x36>
 800592a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800592e:	b913      	cbnz	r3, 8005936 <_vfprintf_r+0x36>
 8005930:	4650      	mov	r0, sl
 8005932:	f002 fa1f 	bl	8007d74 <__sinit>
 8005936:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800593a:	07d8      	lsls	r0, r3, #31
 800593c:	d407      	bmi.n	800594e <_vfprintf_r+0x4e>
 800593e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005942:	0599      	lsls	r1, r3, #22
 8005944:	d403      	bmi.n	800594e <_vfprintf_r+0x4e>
 8005946:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800594a:	f002 fb89 	bl	8008060 <__retarget_lock_acquire_recursive>
 800594e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8005952:	049a      	lsls	r2, r3, #18
 8005954:	d409      	bmi.n	800596a <_vfprintf_r+0x6a>
 8005956:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800595a:	f8a9 300c 	strh.w	r3, [r9, #12]
 800595e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8005962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005966:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 800596a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800596e:	071f      	lsls	r7, r3, #28
 8005970:	d502      	bpl.n	8005978 <_vfprintf_r+0x78>
 8005972:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005976:	b9d3      	cbnz	r3, 80059ae <_vfprintf_r+0xae>
 8005978:	4649      	mov	r1, r9
 800597a:	4650      	mov	r0, sl
 800597c:	f001 fa36 	bl	8006dec <__swsetup_r>
 8005980:	b1a8      	cbz	r0, 80059ae <_vfprintf_r+0xae>
 8005982:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8005986:	07dd      	lsls	r5, r3, #31
 8005988:	d508      	bpl.n	800599c <_vfprintf_r+0x9c>
 800598a:	f04f 33ff 	mov.w	r3, #4294967295
 800598e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005990:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005992:	b04f      	add	sp, #316	; 0x13c
 8005994:	ecbd 8b04 	vpop	{d8-d9}
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80059a0:	059c      	lsls	r4, r3, #22
 80059a2:	d4f2      	bmi.n	800598a <_vfprintf_r+0x8a>
 80059a4:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80059a8:	f002 fb5b 	bl	8008062 <__retarget_lock_release_recursive>
 80059ac:	e7ed      	b.n	800598a <_vfprintf_r+0x8a>
 80059ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80059b2:	f003 021a 	and.w	r2, r3, #26
 80059b6:	2a0a      	cmp	r2, #10
 80059b8:	d115      	bne.n	80059e6 <_vfprintf_r+0xe6>
 80059ba:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80059be:	2a00      	cmp	r2, #0
 80059c0:	db11      	blt.n	80059e6 <_vfprintf_r+0xe6>
 80059c2:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80059c6:	07d0      	lsls	r0, r2, #31
 80059c8:	d405      	bmi.n	80059d6 <_vfprintf_r+0xd6>
 80059ca:	0599      	lsls	r1, r3, #22
 80059cc:	d403      	bmi.n	80059d6 <_vfprintf_r+0xd6>
 80059ce:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80059d2:	f002 fb46 	bl	8008062 <__retarget_lock_release_recursive>
 80059d6:	9a03      	ldr	r2, [sp, #12]
 80059d8:	4623      	mov	r3, r4
 80059da:	4649      	mov	r1, r9
 80059dc:	4650      	mov	r0, sl
 80059de:	f001 f9c5 	bl	8006d6c <__sbprintf>
 80059e2:	900f      	str	r0, [sp, #60]	; 0x3c
 80059e4:	e7d4      	b.n	8005990 <_vfprintf_r+0x90>
 80059e6:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8005c50 <_vfprintf_r+0x350>
 80059ea:	2500      	movs	r5, #0
 80059ec:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80059f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80059f4:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80059f8:	ac25      	add	r4, sp, #148	; 0x94
 80059fa:	9422      	str	r4, [sp, #136]	; 0x88
 80059fc:	9505      	str	r5, [sp, #20]
 80059fe:	950a      	str	r5, [sp, #40]	; 0x28
 8005a00:	9512      	str	r5, [sp, #72]	; 0x48
 8005a02:	9514      	str	r5, [sp, #80]	; 0x50
 8005a04:	950f      	str	r5, [sp, #60]	; 0x3c
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	461d      	mov	r5, r3
 8005a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a0e:	b10a      	cbz	r2, 8005a14 <_vfprintf_r+0x114>
 8005a10:	2a25      	cmp	r2, #37	; 0x25
 8005a12:	d1f9      	bne.n	8005a08 <_vfprintf_r+0x108>
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	1aef      	subs	r7, r5, r3
 8005a18:	d00d      	beq.n	8005a36 <_vfprintf_r+0x136>
 8005a1a:	e9c4 3700 	strd	r3, r7, [r4]
 8005a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a20:	443b      	add	r3, r7
 8005a22:	9324      	str	r3, [sp, #144]	; 0x90
 8005a24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a26:	3301      	adds	r3, #1
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	9323      	str	r3, [sp, #140]	; 0x8c
 8005a2c:	dc79      	bgt.n	8005b22 <_vfprintf_r+0x222>
 8005a2e:	3408      	adds	r4, #8
 8005a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a32:	443b      	add	r3, r7
 8005a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a36:	782b      	ldrb	r3, [r5, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f001 8156 	beq.w	8006cea <_vfprintf_r+0x13ea>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	3501      	adds	r5, #1
 8005a42:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005a46:	f04f 38ff 	mov.w	r8, #4294967295
 8005a4a:	9310      	str	r3, [sp, #64]	; 0x40
 8005a4c:	469b      	mov	fp, r3
 8005a4e:	270a      	movs	r7, #10
 8005a50:	212b      	movs	r1, #43	; 0x2b
 8005a52:	462a      	mov	r2, r5
 8005a54:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005a58:	9307      	str	r3, [sp, #28]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a5e:	9b07      	ldr	r3, [sp, #28]
 8005a60:	3b20      	subs	r3, #32
 8005a62:	2b5a      	cmp	r3, #90	; 0x5a
 8005a64:	f200 85c0 	bhi.w	80065e8 <_vfprintf_r+0xce8>
 8005a68:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a6c:	05be007e 	.word	0x05be007e
 8005a70:	008605be 	.word	0x008605be
 8005a74:	05be05be 	.word	0x05be05be
 8005a78:	006505be 	.word	0x006505be
 8005a7c:	05be05be 	.word	0x05be05be
 8005a80:	00930089 	.word	0x00930089
 8005a84:	009005be 	.word	0x009005be
 8005a88:	05be0096 	.word	0x05be0096
 8005a8c:	00b200af 	.word	0x00b200af
 8005a90:	00b200b2 	.word	0x00b200b2
 8005a94:	00b200b2 	.word	0x00b200b2
 8005a98:	00b200b2 	.word	0x00b200b2
 8005a9c:	00b200b2 	.word	0x00b200b2
 8005aa0:	05be05be 	.word	0x05be05be
 8005aa4:	05be05be 	.word	0x05be05be
 8005aa8:	05be05be 	.word	0x05be05be
 8005aac:	012105be 	.word	0x012105be
 8005ab0:	00df05be 	.word	0x00df05be
 8005ab4:	012100f6 	.word	0x012100f6
 8005ab8:	01210121 	.word	0x01210121
 8005abc:	05be05be 	.word	0x05be05be
 8005ac0:	05be05be 	.word	0x05be05be
 8005ac4:	05be00c2 	.word	0x05be00c2
 8005ac8:	049005be 	.word	0x049005be
 8005acc:	05be05be 	.word	0x05be05be
 8005ad0:	04d705be 	.word	0x04d705be
 8005ad4:	04fb05be 	.word	0x04fb05be
 8005ad8:	05be05be 	.word	0x05be05be
 8005adc:	05be051a 	.word	0x05be051a
 8005ae0:	05be05be 	.word	0x05be05be
 8005ae4:	05be05be 	.word	0x05be05be
 8005ae8:	05be05be 	.word	0x05be05be
 8005aec:	012105be 	.word	0x012105be
 8005af0:	00df05be 	.word	0x00df05be
 8005af4:	012100f8 	.word	0x012100f8
 8005af8:	01210121 	.word	0x01210121
 8005afc:	00f800c5 	.word	0x00f800c5
 8005b00:	05be00d9 	.word	0x05be00d9
 8005b04:	05be00d2 	.word	0x05be00d2
 8005b08:	0492046d 	.word	0x0492046d
 8005b0c:	00d904c6 	.word	0x00d904c6
 8005b10:	04d705be 	.word	0x04d705be
 8005b14:	04fd007c 	.word	0x04fd007c
 8005b18:	05be05be 	.word	0x05be05be
 8005b1c:	05be0537 	.word	0x05be0537
 8005b20:	007c      	.short	0x007c
 8005b22:	aa22      	add	r2, sp, #136	; 0x88
 8005b24:	4649      	mov	r1, r9
 8005b26:	4650      	mov	r0, sl
 8005b28:	f003 f93f 	bl	8008daa <__sprint_r>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f040 8130 	bne.w	8005d92 <_vfprintf_r+0x492>
 8005b32:	ac25      	add	r4, sp, #148	; 0x94
 8005b34:	e77c      	b.n	8005a30 <_vfprintf_r+0x130>
 8005b36:	4650      	mov	r0, sl
 8005b38:	f002 fa8c 	bl	8008054 <_localeconv_r>
 8005b3c:	6843      	ldr	r3, [r0, #4]
 8005b3e:	9314      	str	r3, [sp, #80]	; 0x50
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fa fb95 	bl	8000270 <strlen>
 8005b46:	9012      	str	r0, [sp, #72]	; 0x48
 8005b48:	4650      	mov	r0, sl
 8005b4a:	f002 fa83 	bl	8008054 <_localeconv_r>
 8005b4e:	6883      	ldr	r3, [r0, #8]
 8005b50:	930a      	str	r3, [sp, #40]	; 0x28
 8005b52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b54:	212b      	movs	r1, #43	; 0x2b
 8005b56:	b12b      	cbz	r3, 8005b64 <_vfprintf_r+0x264>
 8005b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5a:	b11b      	cbz	r3, 8005b64 <_vfprintf_r+0x264>
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b10b      	cbz	r3, 8005b64 <_vfprintf_r+0x264>
 8005b60:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8005b64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005b66:	e774      	b.n	8005a52 <_vfprintf_r+0x152>
 8005b68:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f9      	bne.n	8005b64 <_vfprintf_r+0x264>
 8005b70:	2320      	movs	r3, #32
 8005b72:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005b76:	e7f5      	b.n	8005b64 <_vfprintf_r+0x264>
 8005b78:	f04b 0b01 	orr.w	fp, fp, #1
 8005b7c:	e7f2      	b.n	8005b64 <_vfprintf_r+0x264>
 8005b7e:	f856 3b04 	ldr.w	r3, [r6], #4
 8005b82:	9310      	str	r3, [sp, #64]	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	daed      	bge.n	8005b64 <_vfprintf_r+0x264>
 8005b88:	425b      	negs	r3, r3
 8005b8a:	9310      	str	r3, [sp, #64]	; 0x40
 8005b8c:	f04b 0b04 	orr.w	fp, fp, #4
 8005b90:	e7e8      	b.n	8005b64 <_vfprintf_r+0x264>
 8005b92:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8005b96:	e7e5      	b.n	8005b64 <_vfprintf_r+0x264>
 8005b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9e:	9207      	str	r2, [sp, #28]
 8005ba0:	2a2a      	cmp	r2, #42	; 0x2a
 8005ba2:	d10f      	bne.n	8005bc4 <_vfprintf_r+0x2c4>
 8005ba4:	f856 0b04 	ldr.w	r0, [r6], #4
 8005ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005baa:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 8005bae:	e7d9      	b.n	8005b64 <_vfprintf_r+0x264>
 8005bb0:	fb07 2808 	mla	r8, r7, r8, r2
 8005bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb8:	9207      	str	r2, [sp, #28]
 8005bba:	9a07      	ldr	r2, [sp, #28]
 8005bbc:	3a30      	subs	r2, #48	; 0x30
 8005bbe:	2a09      	cmp	r2, #9
 8005bc0:	d9f6      	bls.n	8005bb0 <_vfprintf_r+0x2b0>
 8005bc2:	e74b      	b.n	8005a5c <_vfprintf_r+0x15c>
 8005bc4:	f04f 0800 	mov.w	r8, #0
 8005bc8:	e7f7      	b.n	8005bba <_vfprintf_r+0x2ba>
 8005bca:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8005bce:	e7c9      	b.n	8005b64 <_vfprintf_r+0x264>
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd4:	9210      	str	r2, [sp, #64]	; 0x40
 8005bd6:	9a07      	ldr	r2, [sp, #28]
 8005bd8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005bda:	3a30      	subs	r2, #48	; 0x30
 8005bdc:	fb07 2200 	mla	r2, r7, r0, r2
 8005be0:	9210      	str	r2, [sp, #64]	; 0x40
 8005be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005be6:	9207      	str	r2, [sp, #28]
 8005be8:	3a30      	subs	r2, #48	; 0x30
 8005bea:	2a09      	cmp	r2, #9
 8005bec:	d9f3      	bls.n	8005bd6 <_vfprintf_r+0x2d6>
 8005bee:	e735      	b.n	8005a5c <_vfprintf_r+0x15c>
 8005bf0:	f04b 0b08 	orr.w	fp, fp, #8
 8005bf4:	e7b6      	b.n	8005b64 <_vfprintf_r+0x264>
 8005bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b68      	cmp	r3, #104	; 0x68
 8005bfc:	bf01      	itttt	eq
 8005bfe:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8005c00:	3301      	addeq	r3, #1
 8005c02:	930b      	streq	r3, [sp, #44]	; 0x2c
 8005c04:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8005c08:	bf18      	it	ne
 8005c0a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8005c0e:	e7a9      	b.n	8005b64 <_vfprintf_r+0x264>
 8005c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b6c      	cmp	r3, #108	; 0x6c
 8005c16:	d105      	bne.n	8005c24 <_vfprintf_r+0x324>
 8005c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c1e:	f04b 0b20 	orr.w	fp, fp, #32
 8005c22:	e79f      	b.n	8005b64 <_vfprintf_r+0x264>
 8005c24:	f04b 0b10 	orr.w	fp, fp, #16
 8005c28:	e79c      	b.n	8005b64 <_vfprintf_r+0x264>
 8005c2a:	4632      	mov	r2, r6
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f852 3b04 	ldr.w	r3, [r2], #4
 8005c32:	9206      	str	r2, [sp, #24]
 8005c34:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8005c38:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8005c3c:	ab35      	add	r3, sp, #212	; 0xd4
 8005c3e:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8005c42:	9004      	str	r0, [sp, #16]
 8005c44:	f04f 0801 	mov.w	r8, #1
 8005c48:	4606      	mov	r6, r0
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	e1c3      	b.n	8005fd8 <_vfprintf_r+0x6d8>
	...
 8005c58:	f04b 0b10 	orr.w	fp, fp, #16
 8005c5c:	f01b 0f20 	tst.w	fp, #32
 8005c60:	d012      	beq.n	8005c88 <_vfprintf_r+0x388>
 8005c62:	3607      	adds	r6, #7
 8005c64:	f026 0307 	bic.w	r3, r6, #7
 8005c68:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8005c6c:	9306      	str	r3, [sp, #24]
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	f177 0300 	sbcs.w	r3, r7, #0
 8005c74:	da06      	bge.n	8005c84 <_vfprintf_r+0x384>
 8005c76:	4276      	negs	r6, r6
 8005c78:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005c7c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005c80:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005c84:	2301      	movs	r3, #1
 8005c86:	e392      	b.n	80063ae <_vfprintf_r+0xaae>
 8005c88:	1d33      	adds	r3, r6, #4
 8005c8a:	f01b 0f10 	tst.w	fp, #16
 8005c8e:	9306      	str	r3, [sp, #24]
 8005c90:	d002      	beq.n	8005c98 <_vfprintf_r+0x398>
 8005c92:	6836      	ldr	r6, [r6, #0]
 8005c94:	17f7      	asrs	r7, r6, #31
 8005c96:	e7ea      	b.n	8005c6e <_vfprintf_r+0x36e>
 8005c98:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005c9c:	6836      	ldr	r6, [r6, #0]
 8005c9e:	d001      	beq.n	8005ca4 <_vfprintf_r+0x3a4>
 8005ca0:	b236      	sxth	r6, r6
 8005ca2:	e7f7      	b.n	8005c94 <_vfprintf_r+0x394>
 8005ca4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8005ca8:	bf18      	it	ne
 8005caa:	b276      	sxtbne	r6, r6
 8005cac:	e7f2      	b.n	8005c94 <_vfprintf_r+0x394>
 8005cae:	3607      	adds	r6, #7
 8005cb0:	f026 0307 	bic.w	r3, r6, #7
 8005cb4:	ecb3 7b02 	vldmia	r3!, {d7}
 8005cb8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005cbc:	9306      	str	r3, [sp, #24]
 8005cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cc0:	ee09 3a10 	vmov	s18, r3
 8005cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cca:	ee09 3a90 	vmov	s19, r3
 8005cce:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd2:	4b39      	ldr	r3, [pc, #228]	; (8005db8 <_vfprintf_r+0x4b8>)
 8005cd4:	ec51 0b19 	vmov	r0, r1, d9
 8005cd8:	f7fa ff28 	bl	8000b2c <__aeabi_dcmpun>
 8005cdc:	bb20      	cbnz	r0, 8005d28 <_vfprintf_r+0x428>
 8005cde:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <_vfprintf_r+0x4b8>)
 8005ce0:	ec51 0b19 	vmov	r0, r1, d9
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	f7fa ff02 	bl	8000af0 <__aeabi_dcmple>
 8005cec:	b9e0      	cbnz	r0, 8005d28 <_vfprintf_r+0x428>
 8005cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f7fa fef1 	bl	8000adc <__aeabi_dcmplt>
 8005cfa:	b110      	cbz	r0, 8005d02 <_vfprintf_r+0x402>
 8005cfc:	232d      	movs	r3, #45	; 0x2d
 8005cfe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005d02:	4a2e      	ldr	r2, [pc, #184]	; (8005dbc <_vfprintf_r+0x4bc>)
 8005d04:	482e      	ldr	r0, [pc, #184]	; (8005dc0 <_vfprintf_r+0x4c0>)
 8005d06:	9907      	ldr	r1, [sp, #28]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	2947      	cmp	r1, #71	; 0x47
 8005d0c:	bfc8      	it	gt
 8005d0e:	4603      	movgt	r3, r0
 8005d10:	9303      	str	r3, [sp, #12]
 8005d12:	2300      	movs	r3, #0
 8005d14:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	f04f 0803 	mov.w	r8, #3
 8005d1e:	461e      	mov	r6, r3
 8005d20:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8005d24:	461d      	mov	r5, r3
 8005d26:	e157      	b.n	8005fd8 <_vfprintf_r+0x6d8>
 8005d28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f7fa fefc 	bl	8000b2c <__aeabi_dcmpun>
 8005d34:	b140      	cbz	r0, 8005d48 <_vfprintf_r+0x448>
 8005d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <_vfprintf_r+0x4c4>)
 8005d3a:	4823      	ldr	r0, [pc, #140]	; (8005dc8 <_vfprintf_r+0x4c8>)
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bfbc      	itt	lt
 8005d40:	232d      	movlt	r3, #45	; 0x2d
 8005d42:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8005d46:	e7de      	b.n	8005d06 <_vfprintf_r+0x406>
 8005d48:	9b07      	ldr	r3, [sp, #28]
 8005d4a:	f023 0320 	bic.w	r3, r3, #32
 8005d4e:	2b41      	cmp	r3, #65	; 0x41
 8005d50:	9308      	str	r3, [sp, #32]
 8005d52:	d13b      	bne.n	8005dcc <_vfprintf_r+0x4cc>
 8005d54:	2330      	movs	r3, #48	; 0x30
 8005d56:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8005d5a:	9b07      	ldr	r3, [sp, #28]
 8005d5c:	2b61      	cmp	r3, #97	; 0x61
 8005d5e:	bf0c      	ite	eq
 8005d60:	2378      	moveq	r3, #120	; 0x78
 8005d62:	2358      	movne	r3, #88	; 0x58
 8005d64:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8005d68:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8005d6c:	f04b 0b02 	orr.w	fp, fp, #2
 8005d70:	f340 8209 	ble.w	8006186 <_vfprintf_r+0x886>
 8005d74:	f108 0101 	add.w	r1, r8, #1
 8005d78:	4650      	mov	r0, sl
 8005d7a:	f002 f9df 	bl	800813c <_malloc_r>
 8005d7e:	9003      	str	r0, [sp, #12]
 8005d80:	2800      	cmp	r0, #0
 8005d82:	f040 8204 	bne.w	800618e <_vfprintf_r+0x88e>
 8005d86:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8e:	f8a9 300c 	strh.w	r3, [r9, #12]
 8005d92:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8005d96:	07d9      	lsls	r1, r3, #31
 8005d98:	d407      	bmi.n	8005daa <_vfprintf_r+0x4aa>
 8005d9a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005d9e:	059a      	lsls	r2, r3, #22
 8005da0:	d403      	bmi.n	8005daa <_vfprintf_r+0x4aa>
 8005da2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8005da6:	f002 f95c 	bl	8008062 <__retarget_lock_release_recursive>
 8005daa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005dae:	065b      	lsls	r3, r3, #25
 8005db0:	f57f adee 	bpl.w	8005990 <_vfprintf_r+0x90>
 8005db4:	e5e9      	b.n	800598a <_vfprintf_r+0x8a>
 8005db6:	bf00      	nop
 8005db8:	7fefffff 	.word	0x7fefffff
 8005dbc:	0800a378 	.word	0x0800a378
 8005dc0:	0800a37c 	.word	0x0800a37c
 8005dc4:	0800a380 	.word	0x0800a380
 8005dc8:	0800a384 	.word	0x0800a384
 8005dcc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005dd0:	f000 81e0 	beq.w	8006194 <_vfprintf_r+0x894>
 8005dd4:	9b08      	ldr	r3, [sp, #32]
 8005dd6:	2b47      	cmp	r3, #71	; 0x47
 8005dd8:	f040 81e0 	bne.w	800619c <_vfprintf_r+0x89c>
 8005ddc:	f1b8 0f00 	cmp.w	r8, #0
 8005de0:	f040 81dc 	bne.w	800619c <_vfprintf_r+0x89c>
 8005de4:	f8cd 8010 	str.w	r8, [sp, #16]
 8005de8:	f04f 0801 	mov.w	r8, #1
 8005dec:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8005df0:	9311      	str	r3, [sp, #68]	; 0x44
 8005df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f280 81d3 	bge.w	80061a0 <_vfprintf_r+0x8a0>
 8005dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dfc:	ee08 3a10 	vmov	s16, r3
 8005e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e06:	ee08 3a90 	vmov	s17, r3
 8005e0a:	232d      	movs	r3, #45	; 0x2d
 8005e0c:	9318      	str	r3, [sp, #96]	; 0x60
 8005e0e:	9b08      	ldr	r3, [sp, #32]
 8005e10:	2b41      	cmp	r3, #65	; 0x41
 8005e12:	f040 81e3 	bne.w	80061dc <_vfprintf_r+0x8dc>
 8005e16:	eeb0 0a48 	vmov.f32	s0, s16
 8005e1a:	eef0 0a68 	vmov.f32	s1, s17
 8005e1e:	a81c      	add	r0, sp, #112	; 0x70
 8005e20:	f002 ff18 	bl	8008c54 <frexp>
 8005e24:	2200      	movs	r2, #0
 8005e26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e2a:	ec51 0b10 	vmov	r0, r1, d0
 8005e2e:	f7fa fbe3 	bl	80005f8 <__aeabi_dmul>
 8005e32:	2200      	movs	r2, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	4606      	mov	r6, r0
 8005e38:	460f      	mov	r7, r1
 8005e3a:	f7fa fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e3e:	b108      	cbz	r0, 8005e44 <_vfprintf_r+0x544>
 8005e40:	2301      	movs	r3, #1
 8005e42:	931c      	str	r3, [sp, #112]	; 0x70
 8005e44:	4bb7      	ldr	r3, [pc, #732]	; (8006124 <_vfprintf_r+0x824>)
 8005e46:	4ab8      	ldr	r2, [pc, #736]	; (8006128 <_vfprintf_r+0x828>)
 8005e48:	9907      	ldr	r1, [sp, #28]
 8005e4a:	9d03      	ldr	r5, [sp, #12]
 8005e4c:	2961      	cmp	r1, #97	; 0x61
 8005e4e:	bf18      	it	ne
 8005e50:	461a      	movne	r2, r3
 8005e52:	f108 33ff 	add.w	r3, r8, #4294967295
 8005e56:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e58:	9305      	str	r3, [sp, #20]
 8005e5a:	4bb4      	ldr	r3, [pc, #720]	; (800612c <_vfprintf_r+0x82c>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4639      	mov	r1, r7
 8005e62:	f7fa fbc9 	bl	80005f8 <__aeabi_dmul>
 8005e66:	460f      	mov	r7, r1
 8005e68:	4606      	mov	r6, r0
 8005e6a:	f7fa fe75 	bl	8000b58 <__aeabi_d2iz>
 8005e6e:	9019      	str	r0, [sp, #100]	; 0x64
 8005e70:	f7fa fb58 	bl	8000524 <__aeabi_i2d>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4630      	mov	r0, r6
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	f7fa fa04 	bl	8000288 <__aeabi_dsub>
 8005e80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e84:	5c9b      	ldrb	r3, [r3, r2]
 8005e86:	f805 3b01 	strb.w	r3, [r5], #1
 8005e8a:	9b05      	ldr	r3, [sp, #20]
 8005e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	4606      	mov	r6, r0
 8005e92:	460f      	mov	r7, r1
 8005e94:	d007      	beq.n	8005ea6 <_vfprintf_r+0x5a6>
 8005e96:	3b01      	subs	r3, #1
 8005e98:	9305      	str	r3, [sp, #20]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f7fa fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0d9      	beq.n	8005e5a <_vfprintf_r+0x55a>
 8005ea6:	4ba2      	ldr	r3, [pc, #648]	; (8006130 <_vfprintf_r+0x830>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4630      	mov	r0, r6
 8005eac:	4639      	mov	r1, r7
 8005eae:	f7fa fe33 	bl	8000b18 <__aeabi_dcmpgt>
 8005eb2:	b960      	cbnz	r0, 8005ece <_vfprintf_r+0x5ce>
 8005eb4:	4b9e      	ldr	r3, [pc, #632]	; (8006130 <_vfprintf_r+0x830>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	4630      	mov	r0, r6
 8005eba:	4639      	mov	r1, r7
 8005ebc:	f7fa fe04 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f000 8186 	beq.w	80061d2 <_vfprintf_r+0x8d2>
 8005ec6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ec8:	07df      	lsls	r7, r3, #31
 8005eca:	f140 8182 	bpl.w	80061d2 <_vfprintf_r+0x8d2>
 8005ece:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ed0:	9520      	str	r5, [sp, #128]	; 0x80
 8005ed2:	7bd9      	ldrb	r1, [r3, #15]
 8005ed4:	2030      	movs	r0, #48	; 0x30
 8005ed6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ed8:	1e53      	subs	r3, r2, #1
 8005eda:	9320      	str	r3, [sp, #128]	; 0x80
 8005edc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	f000 8165 	beq.w	80061b0 <_vfprintf_r+0x8b0>
 8005ee6:	2b39      	cmp	r3, #57	; 0x39
 8005ee8:	bf0b      	itete	eq
 8005eea:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8005eec:	3301      	addne	r3, #1
 8005eee:	7a9b      	ldrbeq	r3, [r3, #10]
 8005ef0:	b2db      	uxtbne	r3, r3
 8005ef2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	1aeb      	subs	r3, r5, r3
 8005efa:	9305      	str	r3, [sp, #20]
 8005efc:	9b08      	ldr	r3, [sp, #32]
 8005efe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005f00:	2b47      	cmp	r3, #71	; 0x47
 8005f02:	f040 81b3 	bne.w	800626c <_vfprintf_r+0x96c>
 8005f06:	1cee      	adds	r6, r5, #3
 8005f08:	db02      	blt.n	8005f10 <_vfprintf_r+0x610>
 8005f0a:	4545      	cmp	r5, r8
 8005f0c:	f340 81d5 	ble.w	80062ba <_vfprintf_r+0x9ba>
 8005f10:	9b07      	ldr	r3, [sp, #28]
 8005f12:	3b02      	subs	r3, #2
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	9907      	ldr	r1, [sp, #28]
 8005f18:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8005f1c:	f021 0120 	bic.w	r1, r1, #32
 8005f20:	2941      	cmp	r1, #65	; 0x41
 8005f22:	bf08      	it	eq
 8005f24:	320f      	addeq	r2, #15
 8005f26:	f105 33ff 	add.w	r3, r5, #4294967295
 8005f2a:	bf06      	itte	eq
 8005f2c:	b2d2      	uxtbeq	r2, r2
 8005f2e:	2101      	moveq	r1, #1
 8005f30:	2100      	movne	r1, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	931c      	str	r3, [sp, #112]	; 0x70
 8005f36:	bfb8      	it	lt
 8005f38:	f1c5 0301 	rsblt	r3, r5, #1
 8005f3c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8005f40:	bfb4      	ite	lt
 8005f42:	222d      	movlt	r2, #45	; 0x2d
 8005f44:	222b      	movge	r2, #43	; 0x2b
 8005f46:	2b09      	cmp	r3, #9
 8005f48:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8005f4c:	f340 81a4 	ble.w	8006298 <_vfprintf_r+0x998>
 8005f50:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8005f54:	260a      	movs	r6, #10
 8005f56:	4611      	mov	r1, r2
 8005f58:	fb93 f5f6 	sdiv	r5, r3, r6
 8005f5c:	fb06 3015 	mls	r0, r6, r5, r3
 8005f60:	3030      	adds	r0, #48	; 0x30
 8005f62:	f801 0c01 	strb.w	r0, [r1, #-1]
 8005f66:	4618      	mov	r0, r3
 8005f68:	2863      	cmp	r0, #99	; 0x63
 8005f6a:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f6e:	462b      	mov	r3, r5
 8005f70:	dcf1      	bgt.n	8005f56 <_vfprintf_r+0x656>
 8005f72:	3330      	adds	r3, #48	; 0x30
 8005f74:	1e88      	subs	r0, r1, #2
 8005f76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f7a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8005f7e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8005f82:	4603      	mov	r3, r0
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	f0c0 8182 	bcc.w	800628e <_vfprintf_r+0x98e>
 8005f8a:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8005f8e:	1a52      	subs	r2, r2, r1
 8005f90:	42a8      	cmp	r0, r5
 8005f92:	bf88      	it	hi
 8005f94:	2200      	movhi	r2, #0
 8005f96:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8005f9a:	441a      	add	r2, r3
 8005f9c:	ab1e      	add	r3, sp, #120	; 0x78
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	9a05      	ldr	r2, [sp, #20]
 8005fa2:	9315      	str	r3, [sp, #84]	; 0x54
 8005fa4:	2a01      	cmp	r2, #1
 8005fa6:	eb03 0802 	add.w	r8, r3, r2
 8005faa:	dc02      	bgt.n	8005fb2 <_vfprintf_r+0x6b2>
 8005fac:	f01b 0f01 	tst.w	fp, #1
 8005fb0:	d001      	beq.n	8005fb6 <_vfprintf_r+0x6b6>
 8005fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb4:	4498      	add	r8, r3
 8005fb6:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8005fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbe:	9311      	str	r3, [sp, #68]	; 0x44
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005fca:	b113      	cbz	r3, 8005fd2 <_vfprintf_r+0x6d2>
 8005fcc:	232d      	movs	r3, #45	; 0x2d
 8005fce:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005fd2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	4546      	cmp	r6, r8
 8005fda:	4633      	mov	r3, r6
 8005fdc:	bfb8      	it	lt
 8005fde:	4643      	movlt	r3, r8
 8005fe0:	9311      	str	r3, [sp, #68]	; 0x44
 8005fe2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8005fe6:	b113      	cbz	r3, 8005fee <_vfprintf_r+0x6ee>
 8005fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fea:	3301      	adds	r3, #1
 8005fec:	9311      	str	r3, [sp, #68]	; 0x44
 8005fee:	f01b 0302 	ands.w	r3, fp, #2
 8005ff2:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ff4:	bf1e      	ittt	ne
 8005ff6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8005ff8:	3302      	addne	r3, #2
 8005ffa:	9311      	strne	r3, [sp, #68]	; 0x44
 8005ffc:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8006000:	9318      	str	r3, [sp, #96]	; 0x60
 8006002:	d11f      	bne.n	8006044 <_vfprintf_r+0x744>
 8006004:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006008:	1a9f      	subs	r7, r3, r2
 800600a:	2f00      	cmp	r7, #0
 800600c:	dd1a      	ble.n	8006044 <_vfprintf_r+0x744>
 800600e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006012:	4848      	ldr	r0, [pc, #288]	; (8006134 <_vfprintf_r+0x834>)
 8006014:	6020      	str	r0, [r4, #0]
 8006016:	2f10      	cmp	r7, #16
 8006018:	f103 0301 	add.w	r3, r3, #1
 800601c:	f104 0108 	add.w	r1, r4, #8
 8006020:	f300 82f0 	bgt.w	8006604 <_vfprintf_r+0xd04>
 8006024:	6067      	str	r7, [r4, #4]
 8006026:	2b07      	cmp	r3, #7
 8006028:	4417      	add	r7, r2
 800602a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800602e:	f340 82fc 	ble.w	800662a <_vfprintf_r+0xd2a>
 8006032:	aa22      	add	r2, sp, #136	; 0x88
 8006034:	4649      	mov	r1, r9
 8006036:	4650      	mov	r0, sl
 8006038:	f002 feb7 	bl	8008daa <__sprint_r>
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 8632 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006042:	ac25      	add	r4, sp, #148	; 0x94
 8006044:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006048:	b173      	cbz	r3, 8006068 <_vfprintf_r+0x768>
 800604a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	2301      	movs	r3, #1
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006056:	3301      	adds	r3, #1
 8006058:	9324      	str	r3, [sp, #144]	; 0x90
 800605a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800605c:	3301      	adds	r3, #1
 800605e:	2b07      	cmp	r3, #7
 8006060:	9323      	str	r3, [sp, #140]	; 0x8c
 8006062:	f300 82e4 	bgt.w	800662e <_vfprintf_r+0xd2e>
 8006066:	3408      	adds	r4, #8
 8006068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800606a:	b16b      	cbz	r3, 8006088 <_vfprintf_r+0x788>
 800606c:	ab1b      	add	r3, sp, #108	; 0x6c
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	2302      	movs	r3, #2
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006076:	3302      	adds	r3, #2
 8006078:	9324      	str	r3, [sp, #144]	; 0x90
 800607a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800607c:	3301      	adds	r3, #1
 800607e:	2b07      	cmp	r3, #7
 8006080:	9323      	str	r3, [sp, #140]	; 0x8c
 8006082:	f300 82de 	bgt.w	8006642 <_vfprintf_r+0xd42>
 8006086:	3408      	adds	r4, #8
 8006088:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d11f      	bne.n	80060ce <_vfprintf_r+0x7ce>
 800608e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006092:	1a9f      	subs	r7, r3, r2
 8006094:	2f00      	cmp	r7, #0
 8006096:	dd1a      	ble.n	80060ce <_vfprintf_r+0x7ce>
 8006098:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800609c:	4826      	ldr	r0, [pc, #152]	; (8006138 <_vfprintf_r+0x838>)
 800609e:	6020      	str	r0, [r4, #0]
 80060a0:	2f10      	cmp	r7, #16
 80060a2:	f103 0301 	add.w	r3, r3, #1
 80060a6:	f104 0108 	add.w	r1, r4, #8
 80060aa:	f300 82d4 	bgt.w	8006656 <_vfprintf_r+0xd56>
 80060ae:	6067      	str	r7, [r4, #4]
 80060b0:	2b07      	cmp	r3, #7
 80060b2:	4417      	add	r7, r2
 80060b4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80060b8:	f340 82e0 	ble.w	800667c <_vfprintf_r+0xd7c>
 80060bc:	aa22      	add	r2, sp, #136	; 0x88
 80060be:	4649      	mov	r1, r9
 80060c0:	4650      	mov	r0, sl
 80060c2:	f002 fe72 	bl	8008daa <__sprint_r>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f040 85ed 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 80060cc:	ac25      	add	r4, sp, #148	; 0x94
 80060ce:	eba6 0608 	sub.w	r6, r6, r8
 80060d2:	2e00      	cmp	r6, #0
 80060d4:	dd1a      	ble.n	800610c <_vfprintf_r+0x80c>
 80060d6:	4f18      	ldr	r7, [pc, #96]	; (8006138 <_vfprintf_r+0x838>)
 80060d8:	6027      	str	r7, [r4, #0]
 80060da:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80060de:	2e10      	cmp	r6, #16
 80060e0:	f103 0301 	add.w	r3, r3, #1
 80060e4:	f104 0108 	add.w	r1, r4, #8
 80060e8:	f300 82ca 	bgt.w	8006680 <_vfprintf_r+0xd80>
 80060ec:	6066      	str	r6, [r4, #4]
 80060ee:	2b07      	cmp	r3, #7
 80060f0:	4416      	add	r6, r2
 80060f2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80060f6:	f340 82d6 	ble.w	80066a6 <_vfprintf_r+0xda6>
 80060fa:	aa22      	add	r2, sp, #136	; 0x88
 80060fc:	4649      	mov	r1, r9
 80060fe:	4650      	mov	r0, sl
 8006100:	f002 fe53 	bl	8008daa <__sprint_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	f040 85ce 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 800610a:	ac25      	add	r4, sp, #148	; 0x94
 800610c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006110:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006112:	f040 82cf 	bne.w	80066b4 <_vfprintf_r+0xdb4>
 8006116:	9b03      	ldr	r3, [sp, #12]
 8006118:	e9c4 3800 	strd	r3, r8, [r4]
 800611c:	4446      	add	r6, r8
 800611e:	9624      	str	r6, [sp, #144]	; 0x90
 8006120:	e00c      	b.n	800613c <_vfprintf_r+0x83c>
 8006122:	bf00      	nop
 8006124:	0800a399 	.word	0x0800a399
 8006128:	0800a388 	.word	0x0800a388
 800612c:	40300000 	.word	0x40300000
 8006130:	3fe00000 	.word	0x3fe00000
 8006134:	0800a3ac 	.word	0x0800a3ac
 8006138:	0800a3bc 	.word	0x0800a3bc
 800613c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800613e:	3301      	adds	r3, #1
 8006140:	2b07      	cmp	r3, #7
 8006142:	9323      	str	r3, [sp, #140]	; 0x8c
 8006144:	f300 82fb 	bgt.w	800673e <_vfprintf_r+0xe3e>
 8006148:	3408      	adds	r4, #8
 800614a:	f01b 0f04 	tst.w	fp, #4
 800614e:	f040 858c 	bne.w	8006c6a <_vfprintf_r+0x136a>
 8006152:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8006156:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006158:	428a      	cmp	r2, r1
 800615a:	bfac      	ite	ge
 800615c:	189b      	addge	r3, r3, r2
 800615e:	185b      	addlt	r3, r3, r1
 8006160:	930f      	str	r3, [sp, #60]	; 0x3c
 8006162:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006164:	b13b      	cbz	r3, 8006176 <_vfprintf_r+0x876>
 8006166:	aa22      	add	r2, sp, #136	; 0x88
 8006168:	4649      	mov	r1, r9
 800616a:	4650      	mov	r0, sl
 800616c:	f002 fe1d 	bl	8008daa <__sprint_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	f040 8598 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006176:	2300      	movs	r3, #0
 8006178:	9323      	str	r3, [sp, #140]	; 0x8c
 800617a:	9b04      	ldr	r3, [sp, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f040 85ae 	bne.w	8006cde <_vfprintf_r+0x13de>
 8006182:	ac25      	add	r4, sp, #148	; 0x94
 8006184:	e0eb      	b.n	800635e <_vfprintf_r+0xa5e>
 8006186:	ab35      	add	r3, sp, #212	; 0xd4
 8006188:	9004      	str	r0, [sp, #16]
 800618a:	9303      	str	r3, [sp, #12]
 800618c:	e62e      	b.n	8005dec <_vfprintf_r+0x4ec>
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	9304      	str	r3, [sp, #16]
 8006192:	e62b      	b.n	8005dec <_vfprintf_r+0x4ec>
 8006194:	9004      	str	r0, [sp, #16]
 8006196:	f04f 0806 	mov.w	r8, #6
 800619a:	e627      	b.n	8005dec <_vfprintf_r+0x4ec>
 800619c:	9004      	str	r0, [sp, #16]
 800619e:	e625      	b.n	8005dec <_vfprintf_r+0x4ec>
 80061a0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80061a4:	2300      	movs	r3, #0
 80061a6:	eeb0 8a47 	vmov.f32	s16, s14
 80061aa:	eef0 8a67 	vmov.f32	s17, s15
 80061ae:	e62d      	b.n	8005e0c <_vfprintf_r+0x50c>
 80061b0:	f802 0c01 	strb.w	r0, [r2, #-1]
 80061b4:	e68f      	b.n	8005ed6 <_vfprintf_r+0x5d6>
 80061b6:	f803 0b01 	strb.w	r0, [r3], #1
 80061ba:	1aca      	subs	r2, r1, r3
 80061bc:	2a00      	cmp	r2, #0
 80061be:	dafa      	bge.n	80061b6 <_vfprintf_r+0x8b6>
 80061c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	3201      	adds	r2, #1
 80061c6:	f103 0301 	add.w	r3, r3, #1
 80061ca:	bfb8      	it	lt
 80061cc:	2300      	movlt	r3, #0
 80061ce:	441d      	add	r5, r3
 80061d0:	e691      	b.n	8005ef6 <_vfprintf_r+0x5f6>
 80061d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d4:	462b      	mov	r3, r5
 80061d6:	18a9      	adds	r1, r5, r2
 80061d8:	2030      	movs	r0, #48	; 0x30
 80061da:	e7ee      	b.n	80061ba <_vfprintf_r+0x8ba>
 80061dc:	9b08      	ldr	r3, [sp, #32]
 80061de:	2b46      	cmp	r3, #70	; 0x46
 80061e0:	d005      	beq.n	80061ee <_vfprintf_r+0x8ee>
 80061e2:	2b45      	cmp	r3, #69	; 0x45
 80061e4:	d11b      	bne.n	800621e <_vfprintf_r+0x91e>
 80061e6:	f108 0501 	add.w	r5, r8, #1
 80061ea:	2102      	movs	r1, #2
 80061ec:	e001      	b.n	80061f2 <_vfprintf_r+0x8f2>
 80061ee:	4645      	mov	r5, r8
 80061f0:	2103      	movs	r1, #3
 80061f2:	ab20      	add	r3, sp, #128	; 0x80
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	ab1d      	add	r3, sp, #116	; 0x74
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	462a      	mov	r2, r5
 80061fc:	ab1c      	add	r3, sp, #112	; 0x70
 80061fe:	4650      	mov	r0, sl
 8006200:	eeb0 0a48 	vmov.f32	s0, s16
 8006204:	eef0 0a68 	vmov.f32	s1, s17
 8006208:	f000 fee6 	bl	8006fd8 <_dtoa_r>
 800620c:	9b08      	ldr	r3, [sp, #32]
 800620e:	9003      	str	r0, [sp, #12]
 8006210:	2b47      	cmp	r3, #71	; 0x47
 8006212:	d106      	bne.n	8006222 <_vfprintf_r+0x922>
 8006214:	f01b 0f01 	tst.w	fp, #1
 8006218:	d103      	bne.n	8006222 <_vfprintf_r+0x922>
 800621a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800621c:	e66b      	b.n	8005ef6 <_vfprintf_r+0x5f6>
 800621e:	4645      	mov	r5, r8
 8006220:	e7e3      	b.n	80061ea <_vfprintf_r+0x8ea>
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	195e      	adds	r6, r3, r5
 8006226:	9b08      	ldr	r3, [sp, #32]
 8006228:	2b46      	cmp	r3, #70	; 0x46
 800622a:	d10f      	bne.n	800624c <_vfprintf_r+0x94c>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b30      	cmp	r3, #48	; 0x30
 8006232:	d109      	bne.n	8006248 <_vfprintf_r+0x948>
 8006234:	ec51 0b18 	vmov	r0, r1, d8
 8006238:	2200      	movs	r2, #0
 800623a:	2300      	movs	r3, #0
 800623c:	f7fa fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006240:	b910      	cbnz	r0, 8006248 <_vfprintf_r+0x948>
 8006242:	f1c5 0501 	rsb	r5, r5, #1
 8006246:	951c      	str	r5, [sp, #112]	; 0x70
 8006248:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800624a:	441e      	add	r6, r3
 800624c:	ec51 0b18 	vmov	r0, r1, d8
 8006250:	2200      	movs	r2, #0
 8006252:	2300      	movs	r3, #0
 8006254:	f7fa fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006258:	b100      	cbz	r0, 800625c <_vfprintf_r+0x95c>
 800625a:	9620      	str	r6, [sp, #128]	; 0x80
 800625c:	2230      	movs	r2, #48	; 0x30
 800625e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006260:	429e      	cmp	r6, r3
 8006262:	d9da      	bls.n	800621a <_vfprintf_r+0x91a>
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	9120      	str	r1, [sp, #128]	; 0x80
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e7f8      	b.n	800625e <_vfprintf_r+0x95e>
 800626c:	9b08      	ldr	r3, [sp, #32]
 800626e:	2b46      	cmp	r3, #70	; 0x46
 8006270:	f47f ae51 	bne.w	8005f16 <_vfprintf_r+0x616>
 8006274:	f00b 0301 	and.w	r3, fp, #1
 8006278:	2d00      	cmp	r5, #0
 800627a:	ea43 0308 	orr.w	r3, r3, r8
 800627e:	dd18      	ble.n	80062b2 <_vfprintf_r+0x9b2>
 8006280:	b383      	cbz	r3, 80062e4 <_vfprintf_r+0x9e4>
 8006282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006284:	18eb      	adds	r3, r5, r3
 8006286:	4498      	add	r8, r3
 8006288:	2366      	movs	r3, #102	; 0x66
 800628a:	9307      	str	r3, [sp, #28]
 800628c:	e030      	b.n	80062f0 <_vfprintf_r+0x9f0>
 800628e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006292:	f802 6b01 	strb.w	r6, [r2], #1
 8006296:	e675      	b.n	8005f84 <_vfprintf_r+0x684>
 8006298:	b941      	cbnz	r1, 80062ac <_vfprintf_r+0x9ac>
 800629a:	2230      	movs	r2, #48	; 0x30
 800629c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80062a0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80062a4:	3330      	adds	r3, #48	; 0x30
 80062a6:	f802 3b01 	strb.w	r3, [r2], #1
 80062aa:	e677      	b.n	8005f9c <_vfprintf_r+0x69c>
 80062ac:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80062b0:	e7f8      	b.n	80062a4 <_vfprintf_r+0x9a4>
 80062b2:	b1cb      	cbz	r3, 80062e8 <_vfprintf_r+0x9e8>
 80062b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062b6:	3301      	adds	r3, #1
 80062b8:	e7e5      	b.n	8006286 <_vfprintf_r+0x986>
 80062ba:	9b05      	ldr	r3, [sp, #20]
 80062bc:	429d      	cmp	r5, r3
 80062be:	db07      	blt.n	80062d0 <_vfprintf_r+0x9d0>
 80062c0:	f01b 0f01 	tst.w	fp, #1
 80062c4:	d029      	beq.n	800631a <_vfprintf_r+0xa1a>
 80062c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c8:	eb05 0803 	add.w	r8, r5, r3
 80062cc:	2367      	movs	r3, #103	; 0x67
 80062ce:	e7dc      	b.n	800628a <_vfprintf_r+0x98a>
 80062d0:	9b05      	ldr	r3, [sp, #20]
 80062d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	eb03 0802 	add.w	r8, r3, r2
 80062da:	dcf7      	bgt.n	80062cc <_vfprintf_r+0x9cc>
 80062dc:	f1c5 0301 	rsb	r3, r5, #1
 80062e0:	4498      	add	r8, r3
 80062e2:	e7f3      	b.n	80062cc <_vfprintf_r+0x9cc>
 80062e4:	46a8      	mov	r8, r5
 80062e6:	e7cf      	b.n	8006288 <_vfprintf_r+0x988>
 80062e8:	2366      	movs	r3, #102	; 0x66
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	f04f 0801 	mov.w	r8, #1
 80062f0:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 80062f4:	9309      	str	r3, [sp, #36]	; 0x24
 80062f6:	d023      	beq.n	8006340 <_vfprintf_r+0xa40>
 80062f8:	2300      	movs	r3, #0
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006300:	f77f ae62 	ble.w	8005fc8 <_vfprintf_r+0x6c8>
 8006304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2bff      	cmp	r3, #255	; 0xff
 800630a:	d108      	bne.n	800631e <_vfprintf_r+0xa1e>
 800630c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006310:	4413      	add	r3, r2
 8006312:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006314:	fb02 8803 	mla	r8, r2, r3, r8
 8006318:	e656      	b.n	8005fc8 <_vfprintf_r+0x6c8>
 800631a:	46a8      	mov	r8, r5
 800631c:	e7d6      	b.n	80062cc <_vfprintf_r+0x9cc>
 800631e:	42ab      	cmp	r3, r5
 8006320:	daf4      	bge.n	800630c <_vfprintf_r+0xa0c>
 8006322:	1aed      	subs	r5, r5, r3
 8006324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	b133      	cbz	r3, 8006338 <_vfprintf_r+0xa38>
 800632a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632c:	3301      	adds	r3, #1
 800632e:	9309      	str	r3, [sp, #36]	; 0x24
 8006330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006332:	3301      	adds	r3, #1
 8006334:	930a      	str	r3, [sp, #40]	; 0x28
 8006336:	e7e5      	b.n	8006304 <_vfprintf_r+0xa04>
 8006338:	9b08      	ldr	r3, [sp, #32]
 800633a:	3301      	adds	r3, #1
 800633c:	9308      	str	r3, [sp, #32]
 800633e:	e7e1      	b.n	8006304 <_vfprintf_r+0xa04>
 8006340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006342:	9308      	str	r3, [sp, #32]
 8006344:	e640      	b.n	8005fc8 <_vfprintf_r+0x6c8>
 8006346:	4632      	mov	r2, r6
 8006348:	f01b 0f20 	tst.w	fp, #32
 800634c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006350:	9206      	str	r2, [sp, #24]
 8006352:	d009      	beq.n	8006368 <_vfprintf_r+0xa68>
 8006354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006356:	4610      	mov	r0, r2
 8006358:	17d1      	asrs	r1, r2, #31
 800635a:	e9c3 0100 	strd	r0, r1, [r3]
 800635e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006360:	9e06      	ldr	r6, [sp, #24]
 8006362:	9303      	str	r3, [sp, #12]
 8006364:	f7ff bb4f 	b.w	8005a06 <_vfprintf_r+0x106>
 8006368:	f01b 0f10 	tst.w	fp, #16
 800636c:	d002      	beq.n	8006374 <_vfprintf_r+0xa74>
 800636e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e7f4      	b.n	800635e <_vfprintf_r+0xa5e>
 8006374:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006378:	d002      	beq.n	8006380 <_vfprintf_r+0xa80>
 800637a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e7ee      	b.n	800635e <_vfprintf_r+0xa5e>
 8006380:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006384:	d0f3      	beq.n	800636e <_vfprintf_r+0xa6e>
 8006386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	e7e8      	b.n	800635e <_vfprintf_r+0xa5e>
 800638c:	f04b 0b10 	orr.w	fp, fp, #16
 8006390:	f01b 0f20 	tst.w	fp, #32
 8006394:	d01e      	beq.n	80063d4 <_vfprintf_r+0xad4>
 8006396:	3607      	adds	r6, #7
 8006398:	f026 0307 	bic.w	r3, r6, #7
 800639c:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80063a0:	9306      	str	r3, [sp, #24]
 80063a2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80063a6:	2300      	movs	r3, #0
 80063a8:	2200      	movs	r2, #0
 80063aa:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80063ae:	f1b8 3fff 	cmp.w	r8, #4294967295
 80063b2:	f000 84a9 	beq.w	8006d08 <_vfprintf_r+0x1408>
 80063b6:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 80063ba:	9204      	str	r2, [sp, #16]
 80063bc:	ea56 0207 	orrs.w	r2, r6, r7
 80063c0:	f040 84a8 	bne.w	8006d14 <_vfprintf_r+0x1414>
 80063c4:	f1b8 0f00 	cmp.w	r8, #0
 80063c8:	f000 8104 	beq.w	80065d4 <_vfprintf_r+0xcd4>
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	f040 84a4 	bne.w	8006d1a <_vfprintf_r+0x141a>
 80063d2:	e09a      	b.n	800650a <_vfprintf_r+0xc0a>
 80063d4:	1d33      	adds	r3, r6, #4
 80063d6:	f01b 0f10 	tst.w	fp, #16
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	d001      	beq.n	80063e2 <_vfprintf_r+0xae2>
 80063de:	6836      	ldr	r6, [r6, #0]
 80063e0:	e003      	b.n	80063ea <_vfprintf_r+0xaea>
 80063e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80063e6:	d002      	beq.n	80063ee <_vfprintf_r+0xaee>
 80063e8:	8836      	ldrh	r6, [r6, #0]
 80063ea:	2700      	movs	r7, #0
 80063ec:	e7d9      	b.n	80063a2 <_vfprintf_r+0xaa2>
 80063ee:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80063f2:	d0f4      	beq.n	80063de <_vfprintf_r+0xade>
 80063f4:	7836      	ldrb	r6, [r6, #0]
 80063f6:	e7f8      	b.n	80063ea <_vfprintf_r+0xaea>
 80063f8:	4633      	mov	r3, r6
 80063fa:	2278      	movs	r2, #120	; 0x78
 80063fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8006400:	9306      	str	r3, [sp, #24]
 8006402:	f647 0330 	movw	r3, #30768	; 0x7830
 8006406:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800640a:	4ba8      	ldr	r3, [pc, #672]	; (80066ac <_vfprintf_r+0xdac>)
 800640c:	9316      	str	r3, [sp, #88]	; 0x58
 800640e:	2700      	movs	r7, #0
 8006410:	f04b 0b02 	orr.w	fp, fp, #2
 8006414:	2302      	movs	r3, #2
 8006416:	9207      	str	r2, [sp, #28]
 8006418:	e7c6      	b.n	80063a8 <_vfprintf_r+0xaa8>
 800641a:	4632      	mov	r2, r6
 800641c:	2500      	movs	r5, #0
 800641e:	f852 3b04 	ldr.w	r3, [r2], #4
 8006422:	9303      	str	r3, [sp, #12]
 8006424:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006428:	9206      	str	r2, [sp, #24]
 800642a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800642e:	d010      	beq.n	8006452 <_vfprintf_r+0xb52>
 8006430:	9803      	ldr	r0, [sp, #12]
 8006432:	4642      	mov	r2, r8
 8006434:	4629      	mov	r1, r5
 8006436:	f7f9 fecb 	bl	80001d0 <memchr>
 800643a:	9004      	str	r0, [sp, #16]
 800643c:	2800      	cmp	r0, #0
 800643e:	f000 80df 	beq.w	8006600 <_vfprintf_r+0xd00>
 8006442:	9a03      	ldr	r2, [sp, #12]
 8006444:	9504      	str	r5, [sp, #16]
 8006446:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800644a:	eba0 0802 	sub.w	r8, r0, r2
 800644e:	462e      	mov	r6, r5
 8006450:	e5c2      	b.n	8005fd8 <_vfprintf_r+0x6d8>
 8006452:	9803      	ldr	r0, [sp, #12]
 8006454:	f7f9 ff0c 	bl	8000270 <strlen>
 8006458:	462e      	mov	r6, r5
 800645a:	4680      	mov	r8, r0
 800645c:	9504      	str	r5, [sp, #16]
 800645e:	4633      	mov	r3, r6
 8006460:	e45e      	b.n	8005d20 <_vfprintf_r+0x420>
 8006462:	f04b 0b10 	orr.w	fp, fp, #16
 8006466:	f01b 0f20 	tst.w	fp, #32
 800646a:	d007      	beq.n	800647c <_vfprintf_r+0xb7c>
 800646c:	3607      	adds	r6, #7
 800646e:	f026 0307 	bic.w	r3, r6, #7
 8006472:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006476:	9306      	str	r3, [sp, #24]
 8006478:	2301      	movs	r3, #1
 800647a:	e795      	b.n	80063a8 <_vfprintf_r+0xaa8>
 800647c:	1d33      	adds	r3, r6, #4
 800647e:	f01b 0f10 	tst.w	fp, #16
 8006482:	9306      	str	r3, [sp, #24]
 8006484:	d001      	beq.n	800648a <_vfprintf_r+0xb8a>
 8006486:	6836      	ldr	r6, [r6, #0]
 8006488:	e003      	b.n	8006492 <_vfprintf_r+0xb92>
 800648a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800648e:	d002      	beq.n	8006496 <_vfprintf_r+0xb96>
 8006490:	8836      	ldrh	r6, [r6, #0]
 8006492:	2700      	movs	r7, #0
 8006494:	e7f0      	b.n	8006478 <_vfprintf_r+0xb78>
 8006496:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800649a:	d0f4      	beq.n	8006486 <_vfprintf_r+0xb86>
 800649c:	7836      	ldrb	r6, [r6, #0]
 800649e:	e7f8      	b.n	8006492 <_vfprintf_r+0xb92>
 80064a0:	4b83      	ldr	r3, [pc, #524]	; (80066b0 <_vfprintf_r+0xdb0>)
 80064a2:	9316      	str	r3, [sp, #88]	; 0x58
 80064a4:	f01b 0f20 	tst.w	fp, #32
 80064a8:	d019      	beq.n	80064de <_vfprintf_r+0xbde>
 80064aa:	3607      	adds	r6, #7
 80064ac:	f026 0307 	bic.w	r3, r6, #7
 80064b0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80064b4:	9306      	str	r3, [sp, #24]
 80064b6:	f01b 0f01 	tst.w	fp, #1
 80064ba:	d00a      	beq.n	80064d2 <_vfprintf_r+0xbd2>
 80064bc:	ea56 0307 	orrs.w	r3, r6, r7
 80064c0:	d007      	beq.n	80064d2 <_vfprintf_r+0xbd2>
 80064c2:	2330      	movs	r3, #48	; 0x30
 80064c4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80064c8:	9b07      	ldr	r3, [sp, #28]
 80064ca:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80064ce:	f04b 0b02 	orr.w	fp, fp, #2
 80064d2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80064d6:	2302      	movs	r3, #2
 80064d8:	e766      	b.n	80063a8 <_vfprintf_r+0xaa8>
 80064da:	4b74      	ldr	r3, [pc, #464]	; (80066ac <_vfprintf_r+0xdac>)
 80064dc:	e7e1      	b.n	80064a2 <_vfprintf_r+0xba2>
 80064de:	1d33      	adds	r3, r6, #4
 80064e0:	f01b 0f10 	tst.w	fp, #16
 80064e4:	9306      	str	r3, [sp, #24]
 80064e6:	d001      	beq.n	80064ec <_vfprintf_r+0xbec>
 80064e8:	6836      	ldr	r6, [r6, #0]
 80064ea:	e003      	b.n	80064f4 <_vfprintf_r+0xbf4>
 80064ec:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80064f0:	d002      	beq.n	80064f8 <_vfprintf_r+0xbf8>
 80064f2:	8836      	ldrh	r6, [r6, #0]
 80064f4:	2700      	movs	r7, #0
 80064f6:	e7de      	b.n	80064b6 <_vfprintf_r+0xbb6>
 80064f8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80064fc:	d0f4      	beq.n	80064e8 <_vfprintf_r+0xbe8>
 80064fe:	7836      	ldrb	r6, [r6, #0]
 8006500:	e7f8      	b.n	80064f4 <_vfprintf_r+0xbf4>
 8006502:	2f00      	cmp	r7, #0
 8006504:	bf08      	it	eq
 8006506:	2e0a      	cmpeq	r6, #10
 8006508:	d206      	bcs.n	8006518 <_vfprintf_r+0xc18>
 800650a:	3630      	adds	r6, #48	; 0x30
 800650c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8006510:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8006514:	f000 bc23 	b.w	8006d5e <_vfprintf_r+0x145e>
 8006518:	2300      	movs	r3, #0
 800651a:	9305      	str	r3, [sp, #20]
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	ad4e      	add	r5, sp, #312	; 0x138
 8006520:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8006524:	1e6b      	subs	r3, r5, #1
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	220a      	movs	r2, #10
 800652a:	2300      	movs	r3, #0
 800652c:	4630      	mov	r0, r6
 800652e:	4639      	mov	r1, r7
 8006530:	f7fa fb8a 	bl	8000c48 <__aeabi_uldivmod>
 8006534:	9b05      	ldr	r3, [sp, #20]
 8006536:	3230      	adds	r2, #48	; 0x30
 8006538:	3301      	adds	r3, #1
 800653a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800653e:	9305      	str	r3, [sp, #20]
 8006540:	f1bb 0f00 	cmp.w	fp, #0
 8006544:	d019      	beq.n	800657a <_vfprintf_r+0xc7a>
 8006546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006548:	9a05      	ldr	r2, [sp, #20]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d114      	bne.n	800657a <_vfprintf_r+0xc7a>
 8006550:	2aff      	cmp	r2, #255	; 0xff
 8006552:	d012      	beq.n	800657a <_vfprintf_r+0xc7a>
 8006554:	2f00      	cmp	r7, #0
 8006556:	bf08      	it	eq
 8006558:	2e0a      	cmpeq	r6, #10
 800655a:	d30e      	bcc.n	800657a <_vfprintf_r+0xc7a>
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006560:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	4618      	mov	r0, r3
 8006566:	9303      	str	r3, [sp, #12]
 8006568:	f002 fbff 	bl	8008d6a <strncpy>
 800656c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656e:	785d      	ldrb	r5, [r3, #1]
 8006570:	b1e5      	cbz	r5, 80065ac <_vfprintf_r+0xcac>
 8006572:	3301      	adds	r3, #1
 8006574:	930a      	str	r3, [sp, #40]	; 0x28
 8006576:	2300      	movs	r3, #0
 8006578:	9305      	str	r3, [sp, #20]
 800657a:	220a      	movs	r2, #10
 800657c:	2300      	movs	r3, #0
 800657e:	4630      	mov	r0, r6
 8006580:	4639      	mov	r1, r7
 8006582:	f7fa fb61 	bl	8000c48 <__aeabi_uldivmod>
 8006586:	2f00      	cmp	r7, #0
 8006588:	bf08      	it	eq
 800658a:	2e0a      	cmpeq	r6, #10
 800658c:	d20a      	bcs.n	80065a4 <_vfprintf_r+0xca4>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006594:	aa4e      	add	r2, sp, #312	; 0x138
 8006596:	4646      	mov	r6, r8
 8006598:	eba2 0803 	sub.w	r8, r2, r3
 800659c:	2300      	movs	r3, #0
 800659e:	9304      	str	r3, [sp, #16]
 80065a0:	f7ff bbbe 	b.w	8005d20 <_vfprintf_r+0x420>
 80065a4:	9d03      	ldr	r5, [sp, #12]
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	e7bb      	b.n	8006524 <_vfprintf_r+0xc24>
 80065ac:	9505      	str	r5, [sp, #20]
 80065ae:	e7e4      	b.n	800657a <_vfprintf_r+0xc7a>
 80065b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80065b2:	f006 030f 	and.w	r3, r6, #15
 80065b6:	5cd3      	ldrb	r3, [r2, r3]
 80065b8:	9a03      	ldr	r2, [sp, #12]
 80065ba:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80065be:	0933      	lsrs	r3, r6, #4
 80065c0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80065c4:	9203      	str	r2, [sp, #12]
 80065c6:	093a      	lsrs	r2, r7, #4
 80065c8:	461e      	mov	r6, r3
 80065ca:	4617      	mov	r7, r2
 80065cc:	ea56 0307 	orrs.w	r3, r6, r7
 80065d0:	d1ee      	bne.n	80065b0 <_vfprintf_r+0xcb0>
 80065d2:	e7dc      	b.n	800658e <_vfprintf_r+0xc8e>
 80065d4:	b933      	cbnz	r3, 80065e4 <_vfprintf_r+0xce4>
 80065d6:	f01b 0f01 	tst.w	fp, #1
 80065da:	d003      	beq.n	80065e4 <_vfprintf_r+0xce4>
 80065dc:	2330      	movs	r3, #48	; 0x30
 80065de:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80065e2:	e795      	b.n	8006510 <_vfprintf_r+0xc10>
 80065e4:	ab4e      	add	r3, sp, #312	; 0x138
 80065e6:	e3ba      	b.n	8006d5e <_vfprintf_r+0x145e>
 80065e8:	9b07      	ldr	r3, [sp, #28]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 837d 	beq.w	8006cea <_vfprintf_r+0x13ea>
 80065f0:	2000      	movs	r0, #0
 80065f2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80065f6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80065fa:	9606      	str	r6, [sp, #24]
 80065fc:	f7ff bb1e 	b.w	8005c3c <_vfprintf_r+0x33c>
 8006600:	9e04      	ldr	r6, [sp, #16]
 8006602:	e72c      	b.n	800645e <_vfprintf_r+0xb5e>
 8006604:	2010      	movs	r0, #16
 8006606:	4402      	add	r2, r0
 8006608:	2b07      	cmp	r3, #7
 800660a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800660e:	6060      	str	r0, [r4, #4]
 8006610:	dd08      	ble.n	8006624 <_vfprintf_r+0xd24>
 8006612:	aa22      	add	r2, sp, #136	; 0x88
 8006614:	4649      	mov	r1, r9
 8006616:	4650      	mov	r0, sl
 8006618:	f002 fbc7 	bl	8008daa <__sprint_r>
 800661c:	2800      	cmp	r0, #0
 800661e:	f040 8342 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006622:	a925      	add	r1, sp, #148	; 0x94
 8006624:	3f10      	subs	r7, #16
 8006626:	460c      	mov	r4, r1
 8006628:	e4f1      	b.n	800600e <_vfprintf_r+0x70e>
 800662a:	460c      	mov	r4, r1
 800662c:	e50a      	b.n	8006044 <_vfprintf_r+0x744>
 800662e:	aa22      	add	r2, sp, #136	; 0x88
 8006630:	4649      	mov	r1, r9
 8006632:	4650      	mov	r0, sl
 8006634:	f002 fbb9 	bl	8008daa <__sprint_r>
 8006638:	2800      	cmp	r0, #0
 800663a:	f040 8334 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 800663e:	ac25      	add	r4, sp, #148	; 0x94
 8006640:	e512      	b.n	8006068 <_vfprintf_r+0x768>
 8006642:	aa22      	add	r2, sp, #136	; 0x88
 8006644:	4649      	mov	r1, r9
 8006646:	4650      	mov	r0, sl
 8006648:	f002 fbaf 	bl	8008daa <__sprint_r>
 800664c:	2800      	cmp	r0, #0
 800664e:	f040 832a 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006652:	ac25      	add	r4, sp, #148	; 0x94
 8006654:	e518      	b.n	8006088 <_vfprintf_r+0x788>
 8006656:	2010      	movs	r0, #16
 8006658:	4402      	add	r2, r0
 800665a:	2b07      	cmp	r3, #7
 800665c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006660:	6060      	str	r0, [r4, #4]
 8006662:	dd08      	ble.n	8006676 <_vfprintf_r+0xd76>
 8006664:	aa22      	add	r2, sp, #136	; 0x88
 8006666:	4649      	mov	r1, r9
 8006668:	4650      	mov	r0, sl
 800666a:	f002 fb9e 	bl	8008daa <__sprint_r>
 800666e:	2800      	cmp	r0, #0
 8006670:	f040 8319 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006674:	a925      	add	r1, sp, #148	; 0x94
 8006676:	3f10      	subs	r7, #16
 8006678:	460c      	mov	r4, r1
 800667a:	e50d      	b.n	8006098 <_vfprintf_r+0x798>
 800667c:	460c      	mov	r4, r1
 800667e:	e526      	b.n	80060ce <_vfprintf_r+0x7ce>
 8006680:	2010      	movs	r0, #16
 8006682:	4402      	add	r2, r0
 8006684:	2b07      	cmp	r3, #7
 8006686:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800668a:	6060      	str	r0, [r4, #4]
 800668c:	dd08      	ble.n	80066a0 <_vfprintf_r+0xda0>
 800668e:	aa22      	add	r2, sp, #136	; 0x88
 8006690:	4649      	mov	r1, r9
 8006692:	4650      	mov	r0, sl
 8006694:	f002 fb89 	bl	8008daa <__sprint_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	f040 8304 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 800669e:	a925      	add	r1, sp, #148	; 0x94
 80066a0:	3e10      	subs	r6, #16
 80066a2:	460c      	mov	r4, r1
 80066a4:	e518      	b.n	80060d8 <_vfprintf_r+0x7d8>
 80066a6:	460c      	mov	r4, r1
 80066a8:	e530      	b.n	800610c <_vfprintf_r+0x80c>
 80066aa:	bf00      	nop
 80066ac:	0800a388 	.word	0x0800a388
 80066b0:	0800a399 	.word	0x0800a399
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	2b65      	cmp	r3, #101	; 0x65
 80066b8:	f340 8242 	ble.w	8006b40 <_vfprintf_r+0x1240>
 80066bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066c0:	2200      	movs	r2, #0
 80066c2:	2300      	movs	r3, #0
 80066c4:	f7fa fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d068      	beq.n	800679e <_vfprintf_r+0xe9e>
 80066cc:	4b6d      	ldr	r3, [pc, #436]	; (8006884 <_vfprintf_r+0xf84>)
 80066ce:	6023      	str	r3, [r4, #0]
 80066d0:	2301      	movs	r3, #1
 80066d2:	441e      	add	r6, r3
 80066d4:	6063      	str	r3, [r4, #4]
 80066d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066d8:	9624      	str	r6, [sp, #144]	; 0x90
 80066da:	3301      	adds	r3, #1
 80066dc:	2b07      	cmp	r3, #7
 80066de:	9323      	str	r3, [sp, #140]	; 0x8c
 80066e0:	dc37      	bgt.n	8006752 <_vfprintf_r+0xe52>
 80066e2:	3408      	adds	r4, #8
 80066e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80066e6:	9a05      	ldr	r2, [sp, #20]
 80066e8:	4293      	cmp	r3, r2
 80066ea:	db03      	blt.n	80066f4 <_vfprintf_r+0xdf4>
 80066ec:	f01b 0f01 	tst.w	fp, #1
 80066f0:	f43f ad2b 	beq.w	800614a <_vfprintf_r+0x84a>
 80066f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066f6:	6023      	str	r3, [r4, #0]
 80066f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066fc:	6063      	str	r3, [r4, #4]
 80066fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006700:	4413      	add	r3, r2
 8006702:	9324      	str	r3, [sp, #144]	; 0x90
 8006704:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006706:	3301      	adds	r3, #1
 8006708:	2b07      	cmp	r3, #7
 800670a:	9323      	str	r3, [sp, #140]	; 0x8c
 800670c:	dc2b      	bgt.n	8006766 <_vfprintf_r+0xe66>
 800670e:	3408      	adds	r4, #8
 8006710:	9b05      	ldr	r3, [sp, #20]
 8006712:	1e5d      	subs	r5, r3, #1
 8006714:	2d00      	cmp	r5, #0
 8006716:	f77f ad18 	ble.w	800614a <_vfprintf_r+0x84a>
 800671a:	4e5b      	ldr	r6, [pc, #364]	; (8006888 <_vfprintf_r+0xf88>)
 800671c:	2710      	movs	r7, #16
 800671e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006722:	2d10      	cmp	r5, #16
 8006724:	f103 0301 	add.w	r3, r3, #1
 8006728:	f104 0108 	add.w	r1, r4, #8
 800672c:	6026      	str	r6, [r4, #0]
 800672e:	dc24      	bgt.n	800677a <_vfprintf_r+0xe7a>
 8006730:	6065      	str	r5, [r4, #4]
 8006732:	2b07      	cmp	r3, #7
 8006734:	4415      	add	r5, r2
 8006736:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800673a:	f340 8293 	ble.w	8006c64 <_vfprintf_r+0x1364>
 800673e:	aa22      	add	r2, sp, #136	; 0x88
 8006740:	4649      	mov	r1, r9
 8006742:	4650      	mov	r0, sl
 8006744:	f002 fb31 	bl	8008daa <__sprint_r>
 8006748:	2800      	cmp	r0, #0
 800674a:	f040 82ac 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 800674e:	ac25      	add	r4, sp, #148	; 0x94
 8006750:	e4fb      	b.n	800614a <_vfprintf_r+0x84a>
 8006752:	aa22      	add	r2, sp, #136	; 0x88
 8006754:	4649      	mov	r1, r9
 8006756:	4650      	mov	r0, sl
 8006758:	f002 fb27 	bl	8008daa <__sprint_r>
 800675c:	2800      	cmp	r0, #0
 800675e:	f040 82a2 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006762:	ac25      	add	r4, sp, #148	; 0x94
 8006764:	e7be      	b.n	80066e4 <_vfprintf_r+0xde4>
 8006766:	aa22      	add	r2, sp, #136	; 0x88
 8006768:	4649      	mov	r1, r9
 800676a:	4650      	mov	r0, sl
 800676c:	f002 fb1d 	bl	8008daa <__sprint_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	f040 8298 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006776:	ac25      	add	r4, sp, #148	; 0x94
 8006778:	e7ca      	b.n	8006710 <_vfprintf_r+0xe10>
 800677a:	3210      	adds	r2, #16
 800677c:	2b07      	cmp	r3, #7
 800677e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006782:	6067      	str	r7, [r4, #4]
 8006784:	dd08      	ble.n	8006798 <_vfprintf_r+0xe98>
 8006786:	aa22      	add	r2, sp, #136	; 0x88
 8006788:	4649      	mov	r1, r9
 800678a:	4650      	mov	r0, sl
 800678c:	f002 fb0d 	bl	8008daa <__sprint_r>
 8006790:	2800      	cmp	r0, #0
 8006792:	f040 8288 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006796:	a925      	add	r1, sp, #148	; 0x94
 8006798:	3d10      	subs	r5, #16
 800679a:	460c      	mov	r4, r1
 800679c:	e7bf      	b.n	800671e <_vfprintf_r+0xe1e>
 800679e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc73      	bgt.n	800688c <_vfprintf_r+0xf8c>
 80067a4:	4b37      	ldr	r3, [pc, #220]	; (8006884 <_vfprintf_r+0xf84>)
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	2301      	movs	r3, #1
 80067aa:	441e      	add	r6, r3
 80067ac:	6063      	str	r3, [r4, #4]
 80067ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067b0:	9624      	str	r6, [sp, #144]	; 0x90
 80067b2:	3301      	adds	r3, #1
 80067b4:	2b07      	cmp	r3, #7
 80067b6:	9323      	str	r3, [sp, #140]	; 0x8c
 80067b8:	dc3d      	bgt.n	8006836 <_vfprintf_r+0xf36>
 80067ba:	3408      	adds	r4, #8
 80067bc:	9905      	ldr	r1, [sp, #20]
 80067be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80067c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80067c2:	430a      	orrs	r2, r1
 80067c4:	f00b 0101 	and.w	r1, fp, #1
 80067c8:	430a      	orrs	r2, r1
 80067ca:	f43f acbe 	beq.w	800614a <_vfprintf_r+0x84a>
 80067ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d4:	6062      	str	r2, [r4, #4]
 80067d6:	4413      	add	r3, r2
 80067d8:	9324      	str	r3, [sp, #144]	; 0x90
 80067da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067dc:	3301      	adds	r3, #1
 80067de:	2b07      	cmp	r3, #7
 80067e0:	9323      	str	r3, [sp, #140]	; 0x8c
 80067e2:	dc32      	bgt.n	800684a <_vfprintf_r+0xf4a>
 80067e4:	3408      	adds	r4, #8
 80067e6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	da1b      	bge.n	8006824 <_vfprintf_r+0xf24>
 80067ec:	4e26      	ldr	r6, [pc, #152]	; (8006888 <_vfprintf_r+0xf88>)
 80067ee:	426d      	negs	r5, r5
 80067f0:	4623      	mov	r3, r4
 80067f2:	2710      	movs	r7, #16
 80067f4:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80067f8:	2d10      	cmp	r5, #16
 80067fa:	f102 0201 	add.w	r2, r2, #1
 80067fe:	f104 0408 	add.w	r4, r4, #8
 8006802:	601e      	str	r6, [r3, #0]
 8006804:	dc2b      	bgt.n	800685e <_vfprintf_r+0xf5e>
 8006806:	605d      	str	r5, [r3, #4]
 8006808:	2a07      	cmp	r2, #7
 800680a:	440d      	add	r5, r1
 800680c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8006810:	dd08      	ble.n	8006824 <_vfprintf_r+0xf24>
 8006812:	aa22      	add	r2, sp, #136	; 0x88
 8006814:	4649      	mov	r1, r9
 8006816:	4650      	mov	r0, sl
 8006818:	f002 fac7 	bl	8008daa <__sprint_r>
 800681c:	2800      	cmp	r0, #0
 800681e:	f040 8242 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006822:	ac25      	add	r4, sp, #148	; 0x94
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	9b05      	ldr	r3, [sp, #20]
 800682a:	9a05      	ldr	r2, [sp, #20]
 800682c:	6063      	str	r3, [r4, #4]
 800682e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006830:	4413      	add	r3, r2
 8006832:	9324      	str	r3, [sp, #144]	; 0x90
 8006834:	e482      	b.n	800613c <_vfprintf_r+0x83c>
 8006836:	aa22      	add	r2, sp, #136	; 0x88
 8006838:	4649      	mov	r1, r9
 800683a:	4650      	mov	r0, sl
 800683c:	f002 fab5 	bl	8008daa <__sprint_r>
 8006840:	2800      	cmp	r0, #0
 8006842:	f040 8230 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006846:	ac25      	add	r4, sp, #148	; 0x94
 8006848:	e7b8      	b.n	80067bc <_vfprintf_r+0xebc>
 800684a:	aa22      	add	r2, sp, #136	; 0x88
 800684c:	4649      	mov	r1, r9
 800684e:	4650      	mov	r0, sl
 8006850:	f002 faab 	bl	8008daa <__sprint_r>
 8006854:	2800      	cmp	r0, #0
 8006856:	f040 8226 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 800685a:	ac25      	add	r4, sp, #148	; 0x94
 800685c:	e7c3      	b.n	80067e6 <_vfprintf_r+0xee6>
 800685e:	3110      	adds	r1, #16
 8006860:	2a07      	cmp	r2, #7
 8006862:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8006866:	605f      	str	r7, [r3, #4]
 8006868:	dd08      	ble.n	800687c <_vfprintf_r+0xf7c>
 800686a:	aa22      	add	r2, sp, #136	; 0x88
 800686c:	4649      	mov	r1, r9
 800686e:	4650      	mov	r0, sl
 8006870:	f002 fa9b 	bl	8008daa <__sprint_r>
 8006874:	2800      	cmp	r0, #0
 8006876:	f040 8216 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 800687a:	ac25      	add	r4, sp, #148	; 0x94
 800687c:	3d10      	subs	r5, #16
 800687e:	4623      	mov	r3, r4
 8006880:	e7b8      	b.n	80067f4 <_vfprintf_r+0xef4>
 8006882:	bf00      	nop
 8006884:	0800a3aa 	.word	0x0800a3aa
 8006888:	0800a3bc 	.word	0x0800a3bc
 800688c:	9b05      	ldr	r3, [sp, #20]
 800688e:	42ab      	cmp	r3, r5
 8006890:	bfa8      	it	ge
 8006892:	462b      	movge	r3, r5
 8006894:	2b00      	cmp	r3, #0
 8006896:	461f      	mov	r7, r3
 8006898:	dd0b      	ble.n	80068b2 <_vfprintf_r+0xfb2>
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	e9c4 3700 	strd	r3, r7, [r4]
 80068a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068a2:	3301      	adds	r3, #1
 80068a4:	443e      	add	r6, r7
 80068a6:	2b07      	cmp	r3, #7
 80068a8:	9624      	str	r6, [sp, #144]	; 0x90
 80068aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80068ac:	f300 808c 	bgt.w	80069c8 <_vfprintf_r+0x10c8>
 80068b0:	3408      	adds	r4, #8
 80068b2:	2f00      	cmp	r7, #0
 80068b4:	bfac      	ite	ge
 80068b6:	1bee      	subge	r6, r5, r7
 80068b8:	462e      	movlt	r6, r5
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	dd1c      	ble.n	80068f8 <_vfprintf_r+0xff8>
 80068be:	4f9f      	ldr	r7, [pc, #636]	; (8006b3c <_vfprintf_r+0x123c>)
 80068c0:	f04f 0810 	mov.w	r8, #16
 80068c4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80068c8:	2e10      	cmp	r6, #16
 80068ca:	f103 0301 	add.w	r3, r3, #1
 80068ce:	f104 0108 	add.w	r1, r4, #8
 80068d2:	6027      	str	r7, [r4, #0]
 80068d4:	f300 8082 	bgt.w	80069dc <_vfprintf_r+0x10dc>
 80068d8:	6066      	str	r6, [r4, #4]
 80068da:	2b07      	cmp	r3, #7
 80068dc:	4416      	add	r6, r2
 80068de:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80068e2:	f340 808e 	ble.w	8006a02 <_vfprintf_r+0x1102>
 80068e6:	aa22      	add	r2, sp, #136	; 0x88
 80068e8:	4649      	mov	r1, r9
 80068ea:	4650      	mov	r0, sl
 80068ec:	f002 fa5d 	bl	8008daa <__sprint_r>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f040 81d8 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 80068f6:	ac25      	add	r4, sp, #148	; 0x94
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80068fe:	441d      	add	r5, r3
 8006900:	d00d      	beq.n	800691e <_vfprintf_r+0x101e>
 8006902:	4e8e      	ldr	r6, [pc, #568]	; (8006b3c <_vfprintf_r+0x123c>)
 8006904:	2710      	movs	r7, #16
 8006906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	d17c      	bne.n	8006a06 <_vfprintf_r+0x1106>
 800690c:	9b08      	ldr	r3, [sp, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d17c      	bne.n	8006a0c <_vfprintf_r+0x110c>
 8006912:	9b03      	ldr	r3, [sp, #12]
 8006914:	9a05      	ldr	r2, [sp, #20]
 8006916:	4413      	add	r3, r2
 8006918:	429d      	cmp	r5, r3
 800691a:	bf28      	it	cs
 800691c:	461d      	movcs	r5, r3
 800691e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006920:	9a05      	ldr	r2, [sp, #20]
 8006922:	4293      	cmp	r3, r2
 8006924:	db02      	blt.n	800692c <_vfprintf_r+0x102c>
 8006926:	f01b 0f01 	tst.w	fp, #1
 800692a:	d00e      	beq.n	800694a <_vfprintf_r+0x104a>
 800692c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006934:	6063      	str	r3, [r4, #4]
 8006936:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006938:	4413      	add	r3, r2
 800693a:	9324      	str	r3, [sp, #144]	; 0x90
 800693c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800693e:	3301      	adds	r3, #1
 8006940:	2b07      	cmp	r3, #7
 8006942:	9323      	str	r3, [sp, #140]	; 0x8c
 8006944:	f300 80e5 	bgt.w	8006b12 <_vfprintf_r+0x1212>
 8006948:	3408      	adds	r4, #8
 800694a:	9905      	ldr	r1, [sp, #20]
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8006950:	440b      	add	r3, r1
 8006952:	1b8e      	subs	r6, r1, r6
 8006954:	1b5a      	subs	r2, r3, r5
 8006956:	4296      	cmp	r6, r2
 8006958:	bfa8      	it	ge
 800695a:	4616      	movge	r6, r2
 800695c:	2e00      	cmp	r6, #0
 800695e:	dd0b      	ble.n	8006978 <_vfprintf_r+0x1078>
 8006960:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006962:	4433      	add	r3, r6
 8006964:	9324      	str	r3, [sp, #144]	; 0x90
 8006966:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006968:	3301      	adds	r3, #1
 800696a:	2b07      	cmp	r3, #7
 800696c:	e9c4 5600 	strd	r5, r6, [r4]
 8006970:	9323      	str	r3, [sp, #140]	; 0x8c
 8006972:	f300 80d8 	bgt.w	8006b26 <_vfprintf_r+0x1226>
 8006976:	3408      	adds	r4, #8
 8006978:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800697a:	9b05      	ldr	r3, [sp, #20]
 800697c:	2e00      	cmp	r6, #0
 800697e:	eba3 0505 	sub.w	r5, r3, r5
 8006982:	bfa8      	it	ge
 8006984:	1bad      	subge	r5, r5, r6
 8006986:	2d00      	cmp	r5, #0
 8006988:	f77f abdf 	ble.w	800614a <_vfprintf_r+0x84a>
 800698c:	4e6b      	ldr	r6, [pc, #428]	; (8006b3c <_vfprintf_r+0x123c>)
 800698e:	2710      	movs	r7, #16
 8006990:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006994:	2d10      	cmp	r5, #16
 8006996:	f103 0301 	add.w	r3, r3, #1
 800699a:	f104 0108 	add.w	r1, r4, #8
 800699e:	6026      	str	r6, [r4, #0]
 80069a0:	f77f aec6 	ble.w	8006730 <_vfprintf_r+0xe30>
 80069a4:	3210      	adds	r2, #16
 80069a6:	2b07      	cmp	r3, #7
 80069a8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80069ac:	6067      	str	r7, [r4, #4]
 80069ae:	dd08      	ble.n	80069c2 <_vfprintf_r+0x10c2>
 80069b0:	aa22      	add	r2, sp, #136	; 0x88
 80069b2:	4649      	mov	r1, r9
 80069b4:	4650      	mov	r0, sl
 80069b6:	f002 f9f8 	bl	8008daa <__sprint_r>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f040 8173 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 80069c0:	a925      	add	r1, sp, #148	; 0x94
 80069c2:	3d10      	subs	r5, #16
 80069c4:	460c      	mov	r4, r1
 80069c6:	e7e3      	b.n	8006990 <_vfprintf_r+0x1090>
 80069c8:	aa22      	add	r2, sp, #136	; 0x88
 80069ca:	4649      	mov	r1, r9
 80069cc:	4650      	mov	r0, sl
 80069ce:	f002 f9ec 	bl	8008daa <__sprint_r>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f040 8167 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 80069d8:	ac25      	add	r4, sp, #148	; 0x94
 80069da:	e76a      	b.n	80068b2 <_vfprintf_r+0xfb2>
 80069dc:	3210      	adds	r2, #16
 80069de:	2b07      	cmp	r3, #7
 80069e0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80069e4:	f8c4 8004 	str.w	r8, [r4, #4]
 80069e8:	dd08      	ble.n	80069fc <_vfprintf_r+0x10fc>
 80069ea:	aa22      	add	r2, sp, #136	; 0x88
 80069ec:	4649      	mov	r1, r9
 80069ee:	4650      	mov	r0, sl
 80069f0:	f002 f9db 	bl	8008daa <__sprint_r>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	f040 8156 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 80069fa:	a925      	add	r1, sp, #148	; 0x94
 80069fc:	3e10      	subs	r6, #16
 80069fe:	460c      	mov	r4, r1
 8006a00:	e760      	b.n	80068c4 <_vfprintf_r+0xfc4>
 8006a02:	460c      	mov	r4, r1
 8006a04:	e778      	b.n	80068f8 <_vfprintf_r+0xff8>
 8006a06:	9b08      	ldr	r3, [sp, #32]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d052      	beq.n	8006ab2 <_vfprintf_r+0x11b2>
 8006a0c:	9b08      	ldr	r3, [sp, #32]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	9308      	str	r3, [sp, #32]
 8006a12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a1a:	6063      	str	r3, [r4, #4]
 8006a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a1e:	4413      	add	r3, r2
 8006a20:	9324      	str	r3, [sp, #144]	; 0x90
 8006a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a24:	3301      	adds	r3, #1
 8006a26:	2b07      	cmp	r3, #7
 8006a28:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a2a:	dc49      	bgt.n	8006ac0 <_vfprintf_r+0x11c0>
 8006a2c:	3408      	adds	r4, #8
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	9a05      	ldr	r2, [sp, #20]
 8006a32:	eb03 0802 	add.w	r8, r3, r2
 8006a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	eba8 0805 	sub.w	r8, r8, r5
 8006a3e:	4598      	cmp	r8, r3
 8006a40:	bfa8      	it	ge
 8006a42:	4698      	movge	r8, r3
 8006a44:	f1b8 0f00 	cmp.w	r8, #0
 8006a48:	dd0a      	ble.n	8006a60 <_vfprintf_r+0x1160>
 8006a4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a4c:	4443      	add	r3, r8
 8006a4e:	9324      	str	r3, [sp, #144]	; 0x90
 8006a50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a52:	3301      	adds	r3, #1
 8006a54:	2b07      	cmp	r3, #7
 8006a56:	e9c4 5800 	strd	r5, r8, [r4]
 8006a5a:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a5c:	dc3a      	bgt.n	8006ad4 <_vfprintf_r+0x11d4>
 8006a5e:	3408      	adds	r4, #8
 8006a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f1b8 0f00 	cmp.w	r8, #0
 8006a68:	bfac      	ite	ge
 8006a6a:	eba3 0808 	subge.w	r8, r3, r8
 8006a6e:	4698      	movlt	r8, r3
 8006a70:	f1b8 0f00 	cmp.w	r8, #0
 8006a74:	dd19      	ble.n	8006aaa <_vfprintf_r+0x11aa>
 8006a76:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8006a7a:	f1b8 0f10 	cmp.w	r8, #16
 8006a7e:	f102 0201 	add.w	r2, r2, #1
 8006a82:	f104 0108 	add.w	r1, r4, #8
 8006a86:	6026      	str	r6, [r4, #0]
 8006a88:	dc2e      	bgt.n	8006ae8 <_vfprintf_r+0x11e8>
 8006a8a:	4443      	add	r3, r8
 8006a8c:	2a07      	cmp	r2, #7
 8006a8e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8006a92:	f8c4 8004 	str.w	r8, [r4, #4]
 8006a96:	dd3a      	ble.n	8006b0e <_vfprintf_r+0x120e>
 8006a98:	aa22      	add	r2, sp, #136	; 0x88
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	f002 f984 	bl	8008daa <__sprint_r>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f040 80ff 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006aa8:	ac25      	add	r4, sp, #148	; 0x94
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	441d      	add	r5, r3
 8006ab0:	e729      	b.n	8006906 <_vfprintf_r+0x1006>
 8006ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aba:	3b01      	subs	r3, #1
 8006abc:	9309      	str	r3, [sp, #36]	; 0x24
 8006abe:	e7a8      	b.n	8006a12 <_vfprintf_r+0x1112>
 8006ac0:	aa22      	add	r2, sp, #136	; 0x88
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4650      	mov	r0, sl
 8006ac6:	f002 f970 	bl	8008daa <__sprint_r>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f040 80eb 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006ad0:	ac25      	add	r4, sp, #148	; 0x94
 8006ad2:	e7ac      	b.n	8006a2e <_vfprintf_r+0x112e>
 8006ad4:	aa22      	add	r2, sp, #136	; 0x88
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	4650      	mov	r0, sl
 8006ada:	f002 f966 	bl	8008daa <__sprint_r>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f040 80e1 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006ae4:	ac25      	add	r4, sp, #148	; 0x94
 8006ae6:	e7bb      	b.n	8006a60 <_vfprintf_r+0x1160>
 8006ae8:	3310      	adds	r3, #16
 8006aea:	2a07      	cmp	r2, #7
 8006aec:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8006af0:	6067      	str	r7, [r4, #4]
 8006af2:	dd08      	ble.n	8006b06 <_vfprintf_r+0x1206>
 8006af4:	aa22      	add	r2, sp, #136	; 0x88
 8006af6:	4649      	mov	r1, r9
 8006af8:	4650      	mov	r0, sl
 8006afa:	f002 f956 	bl	8008daa <__sprint_r>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	f040 80d1 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006b04:	a925      	add	r1, sp, #148	; 0x94
 8006b06:	f1a8 0810 	sub.w	r8, r8, #16
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	e7b3      	b.n	8006a76 <_vfprintf_r+0x1176>
 8006b0e:	460c      	mov	r4, r1
 8006b10:	e7cb      	b.n	8006aaa <_vfprintf_r+0x11aa>
 8006b12:	aa22      	add	r2, sp, #136	; 0x88
 8006b14:	4649      	mov	r1, r9
 8006b16:	4650      	mov	r0, sl
 8006b18:	f002 f947 	bl	8008daa <__sprint_r>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f040 80c2 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006b22:	ac25      	add	r4, sp, #148	; 0x94
 8006b24:	e711      	b.n	800694a <_vfprintf_r+0x104a>
 8006b26:	aa22      	add	r2, sp, #136	; 0x88
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	f002 f93d 	bl	8008daa <__sprint_r>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f040 80b8 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006b36:	ac25      	add	r4, sp, #148	; 0x94
 8006b38:	e71e      	b.n	8006978 <_vfprintf_r+0x1078>
 8006b3a:	bf00      	nop
 8006b3c:	0800a3bc 	.word	0x0800a3bc
 8006b40:	9a05      	ldr	r2, [sp, #20]
 8006b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b44:	2a01      	cmp	r2, #1
 8006b46:	9a03      	ldr	r2, [sp, #12]
 8006b48:	6022      	str	r2, [r4, #0]
 8006b4a:	f106 0601 	add.w	r6, r6, #1
 8006b4e:	f103 0301 	add.w	r3, r3, #1
 8006b52:	f04f 0201 	mov.w	r2, #1
 8006b56:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8006b5a:	f104 0508 	add.w	r5, r4, #8
 8006b5e:	6062      	str	r2, [r4, #4]
 8006b60:	dc02      	bgt.n	8006b68 <_vfprintf_r+0x1268>
 8006b62:	f01b 0f01 	tst.w	fp, #1
 8006b66:	d078      	beq.n	8006c5a <_vfprintf_r+0x135a>
 8006b68:	2b07      	cmp	r3, #7
 8006b6a:	dd08      	ble.n	8006b7e <_vfprintf_r+0x127e>
 8006b6c:	aa22      	add	r2, sp, #136	; 0x88
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4650      	mov	r0, sl
 8006b72:	f002 f91a 	bl	8008daa <__sprint_r>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	f040 8095 	bne.w	8006ca6 <_vfprintf_r+0x13a6>
 8006b7c:	ad25      	add	r5, sp, #148	; 0x94
 8006b7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b86:	606b      	str	r3, [r5, #4]
 8006b88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b8a:	4413      	add	r3, r2
 8006b8c:	9324      	str	r3, [sp, #144]	; 0x90
 8006b8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b90:	3301      	adds	r3, #1
 8006b92:	2b07      	cmp	r3, #7
 8006b94:	9323      	str	r3, [sp, #140]	; 0x8c
 8006b96:	dc32      	bgt.n	8006bfe <_vfprintf_r+0x12fe>
 8006b98:	3508      	adds	r5, #8
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ba0:	1e5c      	subs	r4, r3, #1
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f7f9 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d130      	bne.n	8006c10 <_vfprintf_r+0x1310>
 8006bae:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8006bb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006bb2:	9803      	ldr	r0, [sp, #12]
 8006bb4:	9a05      	ldr	r2, [sp, #20]
 8006bb6:	3101      	adds	r1, #1
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	3001      	adds	r0, #1
 8006bbc:	4413      	add	r3, r2
 8006bbe:	2907      	cmp	r1, #7
 8006bc0:	e9c5 0400 	strd	r0, r4, [r5]
 8006bc4:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8006bc8:	dd4a      	ble.n	8006c60 <_vfprintf_r+0x1360>
 8006bca:	aa22      	add	r2, sp, #136	; 0x88
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4650      	mov	r0, sl
 8006bd0:	f002 f8eb 	bl	8008daa <__sprint_r>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d166      	bne.n	8006ca6 <_vfprintf_r+0x13a6>
 8006bd8:	ad25      	add	r5, sp, #148	; 0x94
 8006bda:	ab1e      	add	r3, sp, #120	; 0x78
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006be0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006be2:	606b      	str	r3, [r5, #4]
 8006be4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006be6:	4413      	add	r3, r2
 8006be8:	9324      	str	r3, [sp, #144]	; 0x90
 8006bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bec:	3301      	adds	r3, #1
 8006bee:	2b07      	cmp	r3, #7
 8006bf0:	9323      	str	r3, [sp, #140]	; 0x8c
 8006bf2:	f73f ada4 	bgt.w	800673e <_vfprintf_r+0xe3e>
 8006bf6:	f105 0408 	add.w	r4, r5, #8
 8006bfa:	f7ff baa6 	b.w	800614a <_vfprintf_r+0x84a>
 8006bfe:	aa22      	add	r2, sp, #136	; 0x88
 8006c00:	4649      	mov	r1, r9
 8006c02:	4650      	mov	r0, sl
 8006c04:	f002 f8d1 	bl	8008daa <__sprint_r>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d14c      	bne.n	8006ca6 <_vfprintf_r+0x13a6>
 8006c0c:	ad25      	add	r5, sp, #148	; 0x94
 8006c0e:	e7c4      	b.n	8006b9a <_vfprintf_r+0x129a>
 8006c10:	2c00      	cmp	r4, #0
 8006c12:	dde2      	ble.n	8006bda <_vfprintf_r+0x12da>
 8006c14:	4e53      	ldr	r6, [pc, #332]	; (8006d64 <_vfprintf_r+0x1464>)
 8006c16:	2710      	movs	r7, #16
 8006c18:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006c1c:	2c10      	cmp	r4, #16
 8006c1e:	f103 0301 	add.w	r3, r3, #1
 8006c22:	f105 0108 	add.w	r1, r5, #8
 8006c26:	602e      	str	r6, [r5, #0]
 8006c28:	dc07      	bgt.n	8006c3a <_vfprintf_r+0x133a>
 8006c2a:	606c      	str	r4, [r5, #4]
 8006c2c:	2b07      	cmp	r3, #7
 8006c2e:	4414      	add	r4, r2
 8006c30:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8006c34:	dcc9      	bgt.n	8006bca <_vfprintf_r+0x12ca>
 8006c36:	460d      	mov	r5, r1
 8006c38:	e7cf      	b.n	8006bda <_vfprintf_r+0x12da>
 8006c3a:	3210      	adds	r2, #16
 8006c3c:	2b07      	cmp	r3, #7
 8006c3e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006c42:	606f      	str	r7, [r5, #4]
 8006c44:	dd06      	ble.n	8006c54 <_vfprintf_r+0x1354>
 8006c46:	aa22      	add	r2, sp, #136	; 0x88
 8006c48:	4649      	mov	r1, r9
 8006c4a:	4650      	mov	r0, sl
 8006c4c:	f002 f8ad 	bl	8008daa <__sprint_r>
 8006c50:	bb48      	cbnz	r0, 8006ca6 <_vfprintf_r+0x13a6>
 8006c52:	a925      	add	r1, sp, #148	; 0x94
 8006c54:	3c10      	subs	r4, #16
 8006c56:	460d      	mov	r5, r1
 8006c58:	e7de      	b.n	8006c18 <_vfprintf_r+0x1318>
 8006c5a:	2b07      	cmp	r3, #7
 8006c5c:	ddbd      	ble.n	8006bda <_vfprintf_r+0x12da>
 8006c5e:	e7b4      	b.n	8006bca <_vfprintf_r+0x12ca>
 8006c60:	3508      	adds	r5, #8
 8006c62:	e7ba      	b.n	8006bda <_vfprintf_r+0x12da>
 8006c64:	460c      	mov	r4, r1
 8006c66:	f7ff ba70 	b.w	800614a <_vfprintf_r+0x84a>
 8006c6a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006c6e:	1a9d      	subs	r5, r3, r2
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	f77f aa6e 	ble.w	8006152 <_vfprintf_r+0x852>
 8006c76:	4e3c      	ldr	r6, [pc, #240]	; (8006d68 <_vfprintf_r+0x1468>)
 8006c78:	2710      	movs	r7, #16
 8006c7a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006c7e:	2d10      	cmp	r5, #16
 8006c80:	f103 0301 	add.w	r3, r3, #1
 8006c84:	6026      	str	r6, [r4, #0]
 8006c86:	dc18      	bgt.n	8006cba <_vfprintf_r+0x13ba>
 8006c88:	6065      	str	r5, [r4, #4]
 8006c8a:	2b07      	cmp	r3, #7
 8006c8c:	4415      	add	r5, r2
 8006c8e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8006c92:	f77f aa5e 	ble.w	8006152 <_vfprintf_r+0x852>
 8006c96:	aa22      	add	r2, sp, #136	; 0x88
 8006c98:	4649      	mov	r1, r9
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	f002 f885 	bl	8008daa <__sprint_r>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	f43f aa56 	beq.w	8006152 <_vfprintf_r+0x852>
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f43f a872 	beq.w	8005d92 <_vfprintf_r+0x492>
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4650      	mov	r0, sl
 8006cb2:	f001 f8ef 	bl	8007e94 <_free_r>
 8006cb6:	f7ff b86c 	b.w	8005d92 <_vfprintf_r+0x492>
 8006cba:	3210      	adds	r2, #16
 8006cbc:	2b07      	cmp	r3, #7
 8006cbe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006cc2:	6067      	str	r7, [r4, #4]
 8006cc4:	dc02      	bgt.n	8006ccc <_vfprintf_r+0x13cc>
 8006cc6:	3408      	adds	r4, #8
 8006cc8:	3d10      	subs	r5, #16
 8006cca:	e7d6      	b.n	8006c7a <_vfprintf_r+0x137a>
 8006ccc:	aa22      	add	r2, sp, #136	; 0x88
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4650      	mov	r0, sl
 8006cd2:	f002 f86a 	bl	8008daa <__sprint_r>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d1e5      	bne.n	8006ca6 <_vfprintf_r+0x13a6>
 8006cda:	ac25      	add	r4, sp, #148	; 0x94
 8006cdc:	e7f4      	b.n	8006cc8 <_vfprintf_r+0x13c8>
 8006cde:	9904      	ldr	r1, [sp, #16]
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	f001 f8d7 	bl	8007e94 <_free_r>
 8006ce6:	f7ff ba4c 	b.w	8006182 <_vfprintf_r+0x882>
 8006cea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006cec:	b91b      	cbnz	r3, 8006cf6 <_vfprintf_r+0x13f6>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9323      	str	r3, [sp, #140]	; 0x8c
 8006cf2:	f7ff b84e 	b.w	8005d92 <_vfprintf_r+0x492>
 8006cf6:	aa22      	add	r2, sp, #136	; 0x88
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f002 f855 	bl	8008daa <__sprint_r>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d0f4      	beq.n	8006cee <_vfprintf_r+0x13ee>
 8006d04:	f7ff b845 	b.w	8005d92 <_vfprintf_r+0x492>
 8006d08:	ea56 0207 	orrs.w	r2, r6, r7
 8006d0c:	f8cd b010 	str.w	fp, [sp, #16]
 8006d10:	f43f ab5c 	beq.w	80063cc <_vfprintf_r+0xacc>
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f43f abf4 	beq.w	8006502 <_vfprintf_r+0xc02>
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	ab4e      	add	r3, sp, #312	; 0x138
 8006d1e:	9303      	str	r3, [sp, #12]
 8006d20:	f43f ac46 	beq.w	80065b0 <_vfprintf_r+0xcb0>
 8006d24:	9903      	ldr	r1, [sp, #12]
 8006d26:	f006 0307 	and.w	r3, r6, #7
 8006d2a:	460a      	mov	r2, r1
 8006d2c:	3330      	adds	r3, #48	; 0x30
 8006d2e:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8006d32:	9203      	str	r2, [sp, #12]
 8006d34:	08f2      	lsrs	r2, r6, #3
 8006d36:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8006d3a:	08f8      	lsrs	r0, r7, #3
 8006d3c:	4616      	mov	r6, r2
 8006d3e:	4607      	mov	r7, r0
 8006d40:	ea56 0207 	orrs.w	r2, r6, r7
 8006d44:	d1ee      	bne.n	8006d24 <_vfprintf_r+0x1424>
 8006d46:	9a04      	ldr	r2, [sp, #16]
 8006d48:	07d0      	lsls	r0, r2, #31
 8006d4a:	f57f ac20 	bpl.w	800658e <_vfprintf_r+0xc8e>
 8006d4e:	2b30      	cmp	r3, #48	; 0x30
 8006d50:	f43f ac1d 	beq.w	800658e <_vfprintf_r+0xc8e>
 8006d54:	9a03      	ldr	r2, [sp, #12]
 8006d56:	2330      	movs	r3, #48	; 0x30
 8006d58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d5c:	1e8b      	subs	r3, r1, #2
 8006d5e:	9303      	str	r3, [sp, #12]
 8006d60:	e415      	b.n	800658e <_vfprintf_r+0xc8e>
 8006d62:	bf00      	nop
 8006d64:	0800a3bc 	.word	0x0800a3bc
 8006d68:	0800a3ac 	.word	0x0800a3ac

08006d6c <__sbprintf>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	460c      	mov	r4, r1
 8006d70:	8989      	ldrh	r1, [r1, #12]
 8006d72:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8006d76:	f021 0102 	bic.w	r1, r1, #2
 8006d7a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006d7e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006d80:	911b      	str	r1, [sp, #108]	; 0x6c
 8006d82:	89e1      	ldrh	r1, [r4, #14]
 8006d84:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006d88:	69e1      	ldr	r1, [r4, #28]
 8006d8a:	9109      	str	r1, [sp, #36]	; 0x24
 8006d8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d8e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006d90:	a91c      	add	r1, sp, #112	; 0x70
 8006d92:	9102      	str	r1, [sp, #8]
 8006d94:	9106      	str	r1, [sp, #24]
 8006d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	9104      	str	r1, [sp, #16]
 8006d9e:	9107      	str	r1, [sp, #28]
 8006da0:	a818      	add	r0, sp, #96	; 0x60
 8006da2:	2100      	movs	r1, #0
 8006da4:	e9cd 3200 	strd	r3, r2, [sp]
 8006da8:	9108      	str	r1, [sp, #32]
 8006daa:	f001 f957 	bl	800805c <__retarget_lock_init_recursive>
 8006dae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006db2:	a902      	add	r1, sp, #8
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7fe fda3 	bl	8005900 <_vfprintf_r>
 8006dba:	1e05      	subs	r5, r0, #0
 8006dbc:	db07      	blt.n	8006dce <__sbprintf+0x62>
 8006dbe:	a902      	add	r1, sp, #8
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f000 ff6b 	bl	8007c9c <_fflush_r>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	bf18      	it	ne
 8006dca:	f04f 35ff 	movne.w	r5, #4294967295
 8006dce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006dd2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006dd4:	065b      	lsls	r3, r3, #25
 8006dd6:	bf42      	ittt	mi
 8006dd8:	89a3      	ldrhmi	r3, [r4, #12]
 8006dda:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8006dde:	81a3      	strhmi	r3, [r4, #12]
 8006de0:	f001 f93d 	bl	800805e <__retarget_lock_close_recursive>
 8006de4:	4628      	mov	r0, r5
 8006de6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8006dea:	bd70      	pop	{r4, r5, r6, pc}

08006dec <__swsetup_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4b2a      	ldr	r3, [pc, #168]	; (8006e98 <__swsetup_r+0xac>)
 8006df0:	4605      	mov	r5, r0
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	460c      	mov	r4, r1
 8006df6:	b118      	cbz	r0, 8006e00 <__swsetup_r+0x14>
 8006df8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006dfa:	b90b      	cbnz	r3, 8006e00 <__swsetup_r+0x14>
 8006dfc:	f000 ffba 	bl	8007d74 <__sinit>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e06:	0718      	lsls	r0, r3, #28
 8006e08:	d422      	bmi.n	8006e50 <__swsetup_r+0x64>
 8006e0a:	06d9      	lsls	r1, r3, #27
 8006e0c:	d407      	bmi.n	8006e1e <__swsetup_r+0x32>
 8006e0e:	2309      	movs	r3, #9
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	e034      	b.n	8006e88 <__swsetup_r+0x9c>
 8006e1e:	0758      	lsls	r0, r3, #29
 8006e20:	d512      	bpl.n	8006e48 <__swsetup_r+0x5c>
 8006e22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e24:	b141      	cbz	r1, 8006e38 <__swsetup_r+0x4c>
 8006e26:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006e2a:	4299      	cmp	r1, r3
 8006e2c:	d002      	beq.n	8006e34 <__swsetup_r+0x48>
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f001 f830 	bl	8007e94 <_free_r>
 8006e34:	2300      	movs	r3, #0
 8006e36:	6323      	str	r3, [r4, #48]	; 0x30
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	2300      	movs	r3, #0
 8006e42:	6063      	str	r3, [r4, #4]
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	6023      	str	r3, [r4, #0]
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f043 0308 	orr.w	r3, r3, #8
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	b94b      	cbnz	r3, 8006e68 <__swsetup_r+0x7c>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5e:	d003      	beq.n	8006e68 <__swsetup_r+0x7c>
 8006e60:	4621      	mov	r1, r4
 8006e62:	4628      	mov	r0, r5
 8006e64:	f001 f92a 	bl	80080bc <__smakebuf_r>
 8006e68:	89a0      	ldrh	r0, [r4, #12]
 8006e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e6e:	f010 0301 	ands.w	r3, r0, #1
 8006e72:	d00a      	beq.n	8006e8a <__swsetup_r+0x9e>
 8006e74:	2300      	movs	r3, #0
 8006e76:	60a3      	str	r3, [r4, #8]
 8006e78:	6963      	ldr	r3, [r4, #20]
 8006e7a:	425b      	negs	r3, r3
 8006e7c:	61a3      	str	r3, [r4, #24]
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	b943      	cbnz	r3, 8006e94 <__swsetup_r+0xa8>
 8006e82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e86:	d1c4      	bne.n	8006e12 <__swsetup_r+0x26>
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	0781      	lsls	r1, r0, #30
 8006e8c:	bf58      	it	pl
 8006e8e:	6963      	ldrpl	r3, [r4, #20]
 8006e90:	60a3      	str	r3, [r4, #8]
 8006e92:	e7f4      	b.n	8006e7e <__swsetup_r+0x92>
 8006e94:	2000      	movs	r0, #0
 8006e96:	e7f7      	b.n	8006e88 <__swsetup_r+0x9c>
 8006e98:	20000020 	.word	0x20000020

08006e9c <register_fini>:
 8006e9c:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <register_fini+0xc>)
 8006e9e:	b113      	cbz	r3, 8006ea6 <register_fini+0xa>
 8006ea0:	4802      	ldr	r0, [pc, #8]	; (8006eac <register_fini+0x10>)
 8006ea2:	f000 b805 	b.w	8006eb0 <atexit>
 8006ea6:	4770      	bx	lr
 8006ea8:	00000000 	.word	0x00000000
 8006eac:	08007dc5 	.word	0x08007dc5

08006eb0 <atexit>:
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f002 bc84 	b.w	80097c4 <__register_exitproc>

08006ebc <quorem>:
 8006ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	6903      	ldr	r3, [r0, #16]
 8006ec2:	690c      	ldr	r4, [r1, #16]
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	f2c0 8081 	blt.w	8006fce <quorem+0x112>
 8006ecc:	3c01      	subs	r4, #1
 8006ece:	f101 0814 	add.w	r8, r1, #20
 8006ed2:	f100 0514 	add.w	r5, r0, #20
 8006ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006eec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ef4:	d331      	bcc.n	8006f5a <quorem+0x9e>
 8006ef6:	f04f 0e00 	mov.w	lr, #0
 8006efa:	4640      	mov	r0, r8
 8006efc:	46ac      	mov	ip, r5
 8006efe:	46f2      	mov	sl, lr
 8006f00:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f04:	b293      	uxth	r3, r2
 8006f06:	fb06 e303 	mla	r3, r6, r3, lr
 8006f0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	ebaa 0303 	sub.w	r3, sl, r3
 8006f14:	0c12      	lsrs	r2, r2, #16
 8006f16:	f8dc a000 	ldr.w	sl, [ip]
 8006f1a:	fb06 e202 	mla	r2, r6, r2, lr
 8006f1e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f26:	fa1f fa82 	uxth.w	sl, r2
 8006f2a:	f8dc 2000 	ldr.w	r2, [ip]
 8006f2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f3c:	4581      	cmp	r9, r0
 8006f3e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f46:	d2db      	bcs.n	8006f00 <quorem+0x44>
 8006f48:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f4c:	b92b      	cbnz	r3, 8006f5a <quorem+0x9e>
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	3b04      	subs	r3, #4
 8006f52:	429d      	cmp	r5, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	d32e      	bcc.n	8006fb6 <quorem+0xfa>
 8006f58:	613c      	str	r4, [r7, #16]
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f001 fd7a 	bl	8008a54 <__mcmp>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	db24      	blt.n	8006fae <quorem+0xf2>
 8006f64:	3601      	adds	r6, #1
 8006f66:	4628      	mov	r0, r5
 8006f68:	f04f 0c00 	mov.w	ip, #0
 8006f6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f70:	f8d0 e000 	ldr.w	lr, [r0]
 8006f74:	b293      	uxth	r3, r2
 8006f76:	ebac 0303 	sub.w	r3, ip, r3
 8006f7a:	0c12      	lsrs	r2, r2, #16
 8006f7c:	fa13 f38e 	uxtah	r3, r3, lr
 8006f80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f8e:	45c1      	cmp	r9, r8
 8006f90:	f840 3b04 	str.w	r3, [r0], #4
 8006f94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f98:	d2e8      	bcs.n	8006f6c <quorem+0xb0>
 8006f9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fa2:	b922      	cbnz	r2, 8006fae <quorem+0xf2>
 8006fa4:	3b04      	subs	r3, #4
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	d30a      	bcc.n	8006fc2 <quorem+0x106>
 8006fac:	613c      	str	r4, [r7, #16]
 8006fae:	4630      	mov	r0, r6
 8006fb0:	b003      	add	sp, #12
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	3b04      	subs	r3, #4
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	d1cc      	bne.n	8006f58 <quorem+0x9c>
 8006fbe:	3c01      	subs	r4, #1
 8006fc0:	e7c7      	b.n	8006f52 <quorem+0x96>
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	d1f0      	bne.n	8006fac <quorem+0xf0>
 8006fca:	3c01      	subs	r4, #1
 8006fcc:	e7eb      	b.n	8006fa6 <quorem+0xea>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e7ee      	b.n	8006fb0 <quorem+0xf4>
 8006fd2:	0000      	movs	r0, r0
 8006fd4:	0000      	movs	r0, r0
	...

08006fd8 <_dtoa_r>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	ed2d 8b02 	vpush	{d8}
 8006fe0:	b095      	sub	sp, #84	; 0x54
 8006fe2:	ec57 6b10 	vmov	r6, r7, d0
 8006fe6:	9105      	str	r1, [sp, #20]
 8006fe8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006fea:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006fec:	9209      	str	r2, [sp, #36]	; 0x24
 8006fee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ff6:	b141      	cbz	r1, 800700a <_dtoa_r+0x32>
 8006ff8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ffa:	604a      	str	r2, [r1, #4]
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4093      	lsls	r3, r2
 8007000:	608b      	str	r3, [r1, #8]
 8007002:	f001 fb1c 	bl	800863e <_Bfree>
 8007006:	2300      	movs	r3, #0
 8007008:	6423      	str	r3, [r4, #64]	; 0x40
 800700a:	1e3b      	subs	r3, r7, #0
 800700c:	bfb9      	ittee	lt
 800700e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007012:	9303      	strlt	r3, [sp, #12]
 8007014:	2300      	movge	r3, #0
 8007016:	602b      	strge	r3, [r5, #0]
 8007018:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800701c:	4ba2      	ldr	r3, [pc, #648]	; (80072a8 <_dtoa_r+0x2d0>)
 800701e:	bfbc      	itt	lt
 8007020:	2201      	movlt	r2, #1
 8007022:	602a      	strlt	r2, [r5, #0]
 8007024:	ea33 0309 	bics.w	r3, r3, r9
 8007028:	d11b      	bne.n	8007062 <_dtoa_r+0x8a>
 800702a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800702c:	f242 730f 	movw	r3, #9999	; 0x270f
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007036:	4333      	orrs	r3, r6
 8007038:	f000 8578 	beq.w	8007b2c <_dtoa_r+0xb54>
 800703c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800703e:	b90b      	cbnz	r3, 8007044 <_dtoa_r+0x6c>
 8007040:	4b9a      	ldr	r3, [pc, #616]	; (80072ac <_dtoa_r+0x2d4>)
 8007042:	e024      	b.n	800708e <_dtoa_r+0xb6>
 8007044:	4b99      	ldr	r3, [pc, #612]	; (80072ac <_dtoa_r+0x2d4>)
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	3303      	adds	r3, #3
 800704a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	9800      	ldr	r0, [sp, #0]
 8007050:	b015      	add	sp, #84	; 0x54
 8007052:	ecbd 8b02 	vpop	{d8}
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	4b95      	ldr	r3, [pc, #596]	; (80072b0 <_dtoa_r+0x2d8>)
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	3308      	adds	r3, #8
 8007060:	e7f3      	b.n	800704a <_dtoa_r+0x72>
 8007062:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007066:	2200      	movs	r2, #0
 8007068:	ec51 0b17 	vmov	r0, r1, d7
 800706c:	2300      	movs	r3, #0
 800706e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007072:	f7f9 fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8007076:	4680      	mov	r8, r0
 8007078:	b158      	cbz	r0, 8007092 <_dtoa_r+0xba>
 800707a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800707c:	2301      	movs	r3, #1
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 854f 	beq.w	8007b26 <_dtoa_r+0xb4e>
 8007088:	488a      	ldr	r0, [pc, #552]	; (80072b4 <_dtoa_r+0x2dc>)
 800708a:	6018      	str	r0, [r3, #0]
 800708c:	1e43      	subs	r3, r0, #1
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	e7dd      	b.n	800704e <_dtoa_r+0x76>
 8007092:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007096:	aa12      	add	r2, sp, #72	; 0x48
 8007098:	a913      	add	r1, sp, #76	; 0x4c
 800709a:	4620      	mov	r0, r4
 800709c:	f001 fd7e 	bl	8008b9c <__d2b>
 80070a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070a4:	4683      	mov	fp, r0
 80070a6:	2d00      	cmp	r5, #0
 80070a8:	d07c      	beq.n	80071a4 <_dtoa_r+0x1cc>
 80070aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ac:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80070b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80070b8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070bc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070c4:	4b7c      	ldr	r3, [pc, #496]	; (80072b8 <_dtoa_r+0x2e0>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 f8dc 	bl	8000288 <__aeabi_dsub>
 80070d0:	a36f      	add	r3, pc, #444	; (adr r3, 8007290 <_dtoa_r+0x2b8>)
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f7f9 fa8f 	bl	80005f8 <__aeabi_dmul>
 80070da:	a36f      	add	r3, pc, #444	; (adr r3, 8007298 <_dtoa_r+0x2c0>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 f8d4 	bl	800028c <__adddf3>
 80070e4:	4606      	mov	r6, r0
 80070e6:	4628      	mov	r0, r5
 80070e8:	460f      	mov	r7, r1
 80070ea:	f7f9 fa1b 	bl	8000524 <__aeabi_i2d>
 80070ee:	a36c      	add	r3, pc, #432	; (adr r3, 80072a0 <_dtoa_r+0x2c8>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 fa80 	bl	80005f8 <__aeabi_dmul>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4630      	mov	r0, r6
 80070fe:	4639      	mov	r1, r7
 8007100:	f7f9 f8c4 	bl	800028c <__adddf3>
 8007104:	4606      	mov	r6, r0
 8007106:	460f      	mov	r7, r1
 8007108:	f7f9 fd26 	bl	8000b58 <__aeabi_d2iz>
 800710c:	2200      	movs	r2, #0
 800710e:	4682      	mov	sl, r0
 8007110:	2300      	movs	r3, #0
 8007112:	4630      	mov	r0, r6
 8007114:	4639      	mov	r1, r7
 8007116:	f7f9 fce1 	bl	8000adc <__aeabi_dcmplt>
 800711a:	b148      	cbz	r0, 8007130 <_dtoa_r+0x158>
 800711c:	4650      	mov	r0, sl
 800711e:	f7f9 fa01 	bl	8000524 <__aeabi_i2d>
 8007122:	4632      	mov	r2, r6
 8007124:	463b      	mov	r3, r7
 8007126:	f7f9 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800712a:	b908      	cbnz	r0, 8007130 <_dtoa_r+0x158>
 800712c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007130:	f1ba 0f16 	cmp.w	sl, #22
 8007134:	d854      	bhi.n	80071e0 <_dtoa_r+0x208>
 8007136:	4b61      	ldr	r3, [pc, #388]	; (80072bc <_dtoa_r+0x2e4>)
 8007138:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007144:	f7f9 fcca 	bl	8000adc <__aeabi_dcmplt>
 8007148:	2800      	cmp	r0, #0
 800714a:	d04b      	beq.n	80071e4 <_dtoa_r+0x20c>
 800714c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007150:	2300      	movs	r3, #0
 8007152:	930e      	str	r3, [sp, #56]	; 0x38
 8007154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007156:	1b5d      	subs	r5, r3, r5
 8007158:	1e6b      	subs	r3, r5, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	bf43      	ittte	mi
 800715e:	2300      	movmi	r3, #0
 8007160:	f1c5 0801 	rsbmi	r8, r5, #1
 8007164:	9304      	strmi	r3, [sp, #16]
 8007166:	f04f 0800 	movpl.w	r8, #0
 800716a:	f1ba 0f00 	cmp.w	sl, #0
 800716e:	db3b      	blt.n	80071e8 <_dtoa_r+0x210>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007176:	4453      	add	r3, sl
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	2300      	movs	r3, #0
 800717c:	9306      	str	r3, [sp, #24]
 800717e:	9b05      	ldr	r3, [sp, #20]
 8007180:	2b09      	cmp	r3, #9
 8007182:	d86a      	bhi.n	800725a <_dtoa_r+0x282>
 8007184:	2b05      	cmp	r3, #5
 8007186:	bfc4      	itt	gt
 8007188:	3b04      	subgt	r3, #4
 800718a:	9305      	strgt	r3, [sp, #20]
 800718c:	9b05      	ldr	r3, [sp, #20]
 800718e:	f1a3 0302 	sub.w	r3, r3, #2
 8007192:	bfcc      	ite	gt
 8007194:	2500      	movgt	r5, #0
 8007196:	2501      	movle	r5, #1
 8007198:	2b03      	cmp	r3, #3
 800719a:	d86a      	bhi.n	8007272 <_dtoa_r+0x29a>
 800719c:	e8df f003 	tbb	[pc, r3]
 80071a0:	5b4d4f2c 	.word	0x5b4d4f2c
 80071a4:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80071a8:	441d      	add	r5, r3
 80071aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	bfc1      	itttt	gt
 80071b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071ba:	fa09 f303 	lslgt.w	r3, r9, r3
 80071be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071c2:	bfda      	itte	le
 80071c4:	f1c3 0320 	rsble	r3, r3, #32
 80071c8:	fa06 f003 	lslle.w	r0, r6, r3
 80071cc:	4318      	orrgt	r0, r3
 80071ce:	f7f9 f999 	bl	8000504 <__aeabi_ui2d>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4606      	mov	r6, r0
 80071d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071da:	3d01      	subs	r5, #1
 80071dc:	9310      	str	r3, [sp, #64]	; 0x40
 80071de:	e771      	b.n	80070c4 <_dtoa_r+0xec>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e7b6      	b.n	8007152 <_dtoa_r+0x17a>
 80071e4:	900e      	str	r0, [sp, #56]	; 0x38
 80071e6:	e7b5      	b.n	8007154 <_dtoa_r+0x17c>
 80071e8:	f1ca 0300 	rsb	r3, sl, #0
 80071ec:	9306      	str	r3, [sp, #24]
 80071ee:	2300      	movs	r3, #0
 80071f0:	eba8 080a 	sub.w	r8, r8, sl
 80071f4:	930d      	str	r3, [sp, #52]	; 0x34
 80071f6:	e7c2      	b.n	800717e <_dtoa_r+0x1a6>
 80071f8:	2300      	movs	r3, #0
 80071fa:	9308      	str	r3, [sp, #32]
 80071fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dc3a      	bgt.n	8007278 <_dtoa_r+0x2a0>
 8007202:	f04f 0901 	mov.w	r9, #1
 8007206:	f8cd 9004 	str.w	r9, [sp, #4]
 800720a:	464b      	mov	r3, r9
 800720c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007210:	2200      	movs	r2, #0
 8007212:	6462      	str	r2, [r4, #68]	; 0x44
 8007214:	2204      	movs	r2, #4
 8007216:	f102 0014 	add.w	r0, r2, #20
 800721a:	4298      	cmp	r0, r3
 800721c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800721e:	d931      	bls.n	8007284 <_dtoa_r+0x2ac>
 8007220:	4620      	mov	r0, r4
 8007222:	f001 f9e7 	bl	80085f4 <_Balloc>
 8007226:	9000      	str	r0, [sp, #0]
 8007228:	2800      	cmp	r0, #0
 800722a:	d14d      	bne.n	80072c8 <_dtoa_r+0x2f0>
 800722c:	4b24      	ldr	r3, [pc, #144]	; (80072c0 <_dtoa_r+0x2e8>)
 800722e:	4602      	mov	r2, r0
 8007230:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007234:	4823      	ldr	r0, [pc, #140]	; (80072c4 <_dtoa_r+0x2ec>)
 8007236:	f002 fb05 	bl	8009844 <__assert_func>
 800723a:	2301      	movs	r3, #1
 800723c:	e7dd      	b.n	80071fa <_dtoa_r+0x222>
 800723e:	2300      	movs	r3, #0
 8007240:	9308      	str	r3, [sp, #32]
 8007242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007244:	eb0a 0903 	add.w	r9, sl, r3
 8007248:	f109 0301 	add.w	r3, r9, #1
 800724c:	2b01      	cmp	r3, #1
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	bfb8      	it	lt
 8007252:	2301      	movlt	r3, #1
 8007254:	e7dc      	b.n	8007210 <_dtoa_r+0x238>
 8007256:	2301      	movs	r3, #1
 8007258:	e7f2      	b.n	8007240 <_dtoa_r+0x268>
 800725a:	2501      	movs	r5, #1
 800725c:	2300      	movs	r3, #0
 800725e:	9305      	str	r3, [sp, #20]
 8007260:	9508      	str	r5, [sp, #32]
 8007262:	f04f 39ff 	mov.w	r9, #4294967295
 8007266:	2200      	movs	r2, #0
 8007268:	f8cd 9004 	str.w	r9, [sp, #4]
 800726c:	2312      	movs	r3, #18
 800726e:	9209      	str	r2, [sp, #36]	; 0x24
 8007270:	e7ce      	b.n	8007210 <_dtoa_r+0x238>
 8007272:	2301      	movs	r3, #1
 8007274:	9308      	str	r3, [sp, #32]
 8007276:	e7f4      	b.n	8007262 <_dtoa_r+0x28a>
 8007278:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800727c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007280:	464b      	mov	r3, r9
 8007282:	e7c5      	b.n	8007210 <_dtoa_r+0x238>
 8007284:	3101      	adds	r1, #1
 8007286:	6461      	str	r1, [r4, #68]	; 0x44
 8007288:	0052      	lsls	r2, r2, #1
 800728a:	e7c4      	b.n	8007216 <_dtoa_r+0x23e>
 800728c:	f3af 8000 	nop.w
 8007290:	636f4361 	.word	0x636f4361
 8007294:	3fd287a7 	.word	0x3fd287a7
 8007298:	8b60c8b3 	.word	0x8b60c8b3
 800729c:	3fc68a28 	.word	0x3fc68a28
 80072a0:	509f79fb 	.word	0x509f79fb
 80072a4:	3fd34413 	.word	0x3fd34413
 80072a8:	7ff00000 	.word	0x7ff00000
 80072ac:	0800a3cc 	.word	0x0800a3cc
 80072b0:	0800a3d0 	.word	0x0800a3d0
 80072b4:	0800a3ab 	.word	0x0800a3ab
 80072b8:	3ff80000 	.word	0x3ff80000
 80072bc:	0800a4d8 	.word	0x0800a4d8
 80072c0:	0800a3d9 	.word	0x0800a3d9
 80072c4:	0800a3ea 	.word	0x0800a3ea
 80072c8:	9b00      	ldr	r3, [sp, #0]
 80072ca:	6423      	str	r3, [r4, #64]	; 0x40
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	2b0e      	cmp	r3, #14
 80072d0:	f200 80ad 	bhi.w	800742e <_dtoa_r+0x456>
 80072d4:	2d00      	cmp	r5, #0
 80072d6:	f000 80aa 	beq.w	800742e <_dtoa_r+0x456>
 80072da:	f1ba 0f00 	cmp.w	sl, #0
 80072de:	dd36      	ble.n	800734e <_dtoa_r+0x376>
 80072e0:	4ac2      	ldr	r2, [pc, #776]	; (80075ec <_dtoa_r+0x614>)
 80072e2:	f00a 030f 	and.w	r3, sl, #15
 80072e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072ea:	ed93 7b00 	vldr	d7, [r3]
 80072ee:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072f2:	ea4f 172a 	mov.w	r7, sl, asr #4
 80072f6:	eeb0 8a47 	vmov.f32	s16, s14
 80072fa:	eef0 8a67 	vmov.f32	s17, s15
 80072fe:	d016      	beq.n	800732e <_dtoa_r+0x356>
 8007300:	4bbb      	ldr	r3, [pc, #748]	; (80075f0 <_dtoa_r+0x618>)
 8007302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007306:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800730a:	f7f9 fa9f 	bl	800084c <__aeabi_ddiv>
 800730e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007312:	f007 070f 	and.w	r7, r7, #15
 8007316:	2503      	movs	r5, #3
 8007318:	4eb5      	ldr	r6, [pc, #724]	; (80075f0 <_dtoa_r+0x618>)
 800731a:	b957      	cbnz	r7, 8007332 <_dtoa_r+0x35a>
 800731c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007320:	ec53 2b18 	vmov	r2, r3, d8
 8007324:	f7f9 fa92 	bl	800084c <__aeabi_ddiv>
 8007328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800732c:	e029      	b.n	8007382 <_dtoa_r+0x3aa>
 800732e:	2502      	movs	r5, #2
 8007330:	e7f2      	b.n	8007318 <_dtoa_r+0x340>
 8007332:	07f9      	lsls	r1, r7, #31
 8007334:	d508      	bpl.n	8007348 <_dtoa_r+0x370>
 8007336:	ec51 0b18 	vmov	r0, r1, d8
 800733a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800733e:	f7f9 f95b 	bl	80005f8 <__aeabi_dmul>
 8007342:	ec41 0b18 	vmov	d8, r0, r1
 8007346:	3501      	adds	r5, #1
 8007348:	107f      	asrs	r7, r7, #1
 800734a:	3608      	adds	r6, #8
 800734c:	e7e5      	b.n	800731a <_dtoa_r+0x342>
 800734e:	f000 80a6 	beq.w	800749e <_dtoa_r+0x4c6>
 8007352:	f1ca 0600 	rsb	r6, sl, #0
 8007356:	4ba5      	ldr	r3, [pc, #660]	; (80075ec <_dtoa_r+0x614>)
 8007358:	4fa5      	ldr	r7, [pc, #660]	; (80075f0 <_dtoa_r+0x618>)
 800735a:	f006 020f 	and.w	r2, r6, #15
 800735e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800736a:	f7f9 f945 	bl	80005f8 <__aeabi_dmul>
 800736e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007372:	1136      	asrs	r6, r6, #4
 8007374:	2300      	movs	r3, #0
 8007376:	2502      	movs	r5, #2
 8007378:	2e00      	cmp	r6, #0
 800737a:	f040 8085 	bne.w	8007488 <_dtoa_r+0x4b0>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1d2      	bne.n	8007328 <_dtoa_r+0x350>
 8007382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 808c 	beq.w	80074a2 <_dtoa_r+0x4ca>
 800738a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800738e:	4b99      	ldr	r3, [pc, #612]	; (80075f4 <_dtoa_r+0x61c>)
 8007390:	2200      	movs	r2, #0
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f9 fba1 	bl	8000adc <__aeabi_dcmplt>
 800739a:	2800      	cmp	r0, #0
 800739c:	f000 8081 	beq.w	80074a2 <_dtoa_r+0x4ca>
 80073a0:	9b01      	ldr	r3, [sp, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d07d      	beq.n	80074a2 <_dtoa_r+0x4ca>
 80073a6:	f1b9 0f00 	cmp.w	r9, #0
 80073aa:	dd3c      	ble.n	8007426 <_dtoa_r+0x44e>
 80073ac:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	2200      	movs	r2, #0
 80073b4:	4b90      	ldr	r3, [pc, #576]	; (80075f8 <_dtoa_r+0x620>)
 80073b6:	4630      	mov	r0, r6
 80073b8:	4639      	mov	r1, r7
 80073ba:	f7f9 f91d 	bl	80005f8 <__aeabi_dmul>
 80073be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c2:	3501      	adds	r5, #1
 80073c4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80073c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073cc:	4628      	mov	r0, r5
 80073ce:	f7f9 f8a9 	bl	8000524 <__aeabi_i2d>
 80073d2:	4632      	mov	r2, r6
 80073d4:	463b      	mov	r3, r7
 80073d6:	f7f9 f90f 	bl	80005f8 <__aeabi_dmul>
 80073da:	4b88      	ldr	r3, [pc, #544]	; (80075fc <_dtoa_r+0x624>)
 80073dc:	2200      	movs	r2, #0
 80073de:	f7f8 ff55 	bl	800028c <__adddf3>
 80073e2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ea:	9303      	str	r3, [sp, #12]
 80073ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d15c      	bne.n	80074ac <_dtoa_r+0x4d4>
 80073f2:	4b83      	ldr	r3, [pc, #524]	; (8007600 <_dtoa_r+0x628>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	4630      	mov	r0, r6
 80073f8:	4639      	mov	r1, r7
 80073fa:	f7f8 ff45 	bl	8000288 <__aeabi_dsub>
 80073fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007402:	4606      	mov	r6, r0
 8007404:	460f      	mov	r7, r1
 8007406:	f7f9 fb87 	bl	8000b18 <__aeabi_dcmpgt>
 800740a:	2800      	cmp	r0, #0
 800740c:	f040 8295 	bne.w	800793a <_dtoa_r+0x962>
 8007410:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007414:	4630      	mov	r0, r6
 8007416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800741a:	4639      	mov	r1, r7
 800741c:	f7f9 fb5e 	bl	8000adc <__aeabi_dcmplt>
 8007420:	2800      	cmp	r0, #0
 8007422:	f040 8287 	bne.w	8007934 <_dtoa_r+0x95c>
 8007426:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800742a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800742e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007430:	2b00      	cmp	r3, #0
 8007432:	f2c0 8157 	blt.w	80076e4 <_dtoa_r+0x70c>
 8007436:	f1ba 0f0e 	cmp.w	sl, #14
 800743a:	f300 8153 	bgt.w	80076e4 <_dtoa_r+0x70c>
 800743e:	4b6b      	ldr	r3, [pc, #428]	; (80075ec <_dtoa_r+0x614>)
 8007440:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	2b00      	cmp	r3, #0
 800744c:	f280 80e2 	bge.w	8007614 <_dtoa_r+0x63c>
 8007450:	9b01      	ldr	r3, [sp, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f300 80de 	bgt.w	8007614 <_dtoa_r+0x63c>
 8007458:	f040 826c 	bne.w	8007934 <_dtoa_r+0x95c>
 800745c:	4b68      	ldr	r3, [pc, #416]	; (8007600 <_dtoa_r+0x628>)
 800745e:	2200      	movs	r2, #0
 8007460:	4640      	mov	r0, r8
 8007462:	4649      	mov	r1, r9
 8007464:	f7f9 f8c8 	bl	80005f8 <__aeabi_dmul>
 8007468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800746c:	f7f9 fb4a 	bl	8000b04 <__aeabi_dcmpge>
 8007470:	9e01      	ldr	r6, [sp, #4]
 8007472:	4637      	mov	r7, r6
 8007474:	2800      	cmp	r0, #0
 8007476:	f040 8242 	bne.w	80078fe <_dtoa_r+0x926>
 800747a:	9d00      	ldr	r5, [sp, #0]
 800747c:	2331      	movs	r3, #49	; 0x31
 800747e:	f805 3b01 	strb.w	r3, [r5], #1
 8007482:	f10a 0a01 	add.w	sl, sl, #1
 8007486:	e23e      	b.n	8007906 <_dtoa_r+0x92e>
 8007488:	07f2      	lsls	r2, r6, #31
 800748a:	d505      	bpl.n	8007498 <_dtoa_r+0x4c0>
 800748c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007490:	f7f9 f8b2 	bl	80005f8 <__aeabi_dmul>
 8007494:	3501      	adds	r5, #1
 8007496:	2301      	movs	r3, #1
 8007498:	1076      	asrs	r6, r6, #1
 800749a:	3708      	adds	r7, #8
 800749c:	e76c      	b.n	8007378 <_dtoa_r+0x3a0>
 800749e:	2502      	movs	r5, #2
 80074a0:	e76f      	b.n	8007382 <_dtoa_r+0x3aa>
 80074a2:	9b01      	ldr	r3, [sp, #4]
 80074a4:	f8cd a01c 	str.w	sl, [sp, #28]
 80074a8:	930c      	str	r3, [sp, #48]	; 0x30
 80074aa:	e78d      	b.n	80073c8 <_dtoa_r+0x3f0>
 80074ac:	9900      	ldr	r1, [sp, #0]
 80074ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074b2:	4b4e      	ldr	r3, [pc, #312]	; (80075ec <_dtoa_r+0x614>)
 80074b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074b8:	4401      	add	r1, r0
 80074ba:	9102      	str	r1, [sp, #8]
 80074bc:	9908      	ldr	r1, [sp, #32]
 80074be:	eeb0 8a47 	vmov.f32	s16, s14
 80074c2:	eef0 8a67 	vmov.f32	s17, s15
 80074c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074ce:	2900      	cmp	r1, #0
 80074d0:	d045      	beq.n	800755e <_dtoa_r+0x586>
 80074d2:	494c      	ldr	r1, [pc, #304]	; (8007604 <_dtoa_r+0x62c>)
 80074d4:	2000      	movs	r0, #0
 80074d6:	f7f9 f9b9 	bl	800084c <__aeabi_ddiv>
 80074da:	ec53 2b18 	vmov	r2, r3, d8
 80074de:	f7f8 fed3 	bl	8000288 <__aeabi_dsub>
 80074e2:	9d00      	ldr	r5, [sp, #0]
 80074e4:	ec41 0b18 	vmov	d8, r0, r1
 80074e8:	4639      	mov	r1, r7
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7f9 fb34 	bl	8000b58 <__aeabi_d2iz>
 80074f0:	900c      	str	r0, [sp, #48]	; 0x30
 80074f2:	f7f9 f817 	bl	8000524 <__aeabi_i2d>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4630      	mov	r0, r6
 80074fc:	4639      	mov	r1, r7
 80074fe:	f7f8 fec3 	bl	8000288 <__aeabi_dsub>
 8007502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007504:	3330      	adds	r3, #48	; 0x30
 8007506:	f805 3b01 	strb.w	r3, [r5], #1
 800750a:	ec53 2b18 	vmov	r2, r3, d8
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	f7f9 fae3 	bl	8000adc <__aeabi_dcmplt>
 8007516:	2800      	cmp	r0, #0
 8007518:	d165      	bne.n	80075e6 <_dtoa_r+0x60e>
 800751a:	4632      	mov	r2, r6
 800751c:	463b      	mov	r3, r7
 800751e:	4935      	ldr	r1, [pc, #212]	; (80075f4 <_dtoa_r+0x61c>)
 8007520:	2000      	movs	r0, #0
 8007522:	f7f8 feb1 	bl	8000288 <__aeabi_dsub>
 8007526:	ec53 2b18 	vmov	r2, r3, d8
 800752a:	f7f9 fad7 	bl	8000adc <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	f040 80b8 	bne.w	80076a4 <_dtoa_r+0x6cc>
 8007534:	9b02      	ldr	r3, [sp, #8]
 8007536:	429d      	cmp	r5, r3
 8007538:	f43f af75 	beq.w	8007426 <_dtoa_r+0x44e>
 800753c:	4b2e      	ldr	r3, [pc, #184]	; (80075f8 <_dtoa_r+0x620>)
 800753e:	ec51 0b18 	vmov	r0, r1, d8
 8007542:	2200      	movs	r2, #0
 8007544:	f7f9 f858 	bl	80005f8 <__aeabi_dmul>
 8007548:	4b2b      	ldr	r3, [pc, #172]	; (80075f8 <_dtoa_r+0x620>)
 800754a:	ec41 0b18 	vmov	d8, r0, r1
 800754e:	2200      	movs	r2, #0
 8007550:	4630      	mov	r0, r6
 8007552:	4639      	mov	r1, r7
 8007554:	f7f9 f850 	bl	80005f8 <__aeabi_dmul>
 8007558:	4606      	mov	r6, r0
 800755a:	460f      	mov	r7, r1
 800755c:	e7c4      	b.n	80074e8 <_dtoa_r+0x510>
 800755e:	ec51 0b17 	vmov	r0, r1, d7
 8007562:	f7f9 f849 	bl	80005f8 <__aeabi_dmul>
 8007566:	9b02      	ldr	r3, [sp, #8]
 8007568:	9d00      	ldr	r5, [sp, #0]
 800756a:	930c      	str	r3, [sp, #48]	; 0x30
 800756c:	ec41 0b18 	vmov	d8, r0, r1
 8007570:	4639      	mov	r1, r7
 8007572:	4630      	mov	r0, r6
 8007574:	f7f9 faf0 	bl	8000b58 <__aeabi_d2iz>
 8007578:	9011      	str	r0, [sp, #68]	; 0x44
 800757a:	f7f8 ffd3 	bl	8000524 <__aeabi_i2d>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4630      	mov	r0, r6
 8007584:	4639      	mov	r1, r7
 8007586:	f7f8 fe7f 	bl	8000288 <__aeabi_dsub>
 800758a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800758c:	3330      	adds	r3, #48	; 0x30
 800758e:	f805 3b01 	strb.w	r3, [r5], #1
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	429d      	cmp	r5, r3
 8007596:	4606      	mov	r6, r0
 8007598:	460f      	mov	r7, r1
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	d133      	bne.n	8007608 <_dtoa_r+0x630>
 80075a0:	4b18      	ldr	r3, [pc, #96]	; (8007604 <_dtoa_r+0x62c>)
 80075a2:	ec51 0b18 	vmov	r0, r1, d8
 80075a6:	f7f8 fe71 	bl	800028c <__adddf3>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4630      	mov	r0, r6
 80075b0:	4639      	mov	r1, r7
 80075b2:	f7f9 fab1 	bl	8000b18 <__aeabi_dcmpgt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d174      	bne.n	80076a4 <_dtoa_r+0x6cc>
 80075ba:	ec53 2b18 	vmov	r2, r3, d8
 80075be:	4911      	ldr	r1, [pc, #68]	; (8007604 <_dtoa_r+0x62c>)
 80075c0:	2000      	movs	r0, #0
 80075c2:	f7f8 fe61 	bl	8000288 <__aeabi_dsub>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4630      	mov	r0, r6
 80075cc:	4639      	mov	r1, r7
 80075ce:	f7f9 fa85 	bl	8000adc <__aeabi_dcmplt>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	f43f af27 	beq.w	8007426 <_dtoa_r+0x44e>
 80075d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075da:	1e6b      	subs	r3, r5, #1
 80075dc:	930c      	str	r3, [sp, #48]	; 0x30
 80075de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075e2:	2b30      	cmp	r3, #48	; 0x30
 80075e4:	d0f8      	beq.n	80075d8 <_dtoa_r+0x600>
 80075e6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80075ea:	e049      	b.n	8007680 <_dtoa_r+0x6a8>
 80075ec:	0800a4d8 	.word	0x0800a4d8
 80075f0:	0800a4b0 	.word	0x0800a4b0
 80075f4:	3ff00000 	.word	0x3ff00000
 80075f8:	40240000 	.word	0x40240000
 80075fc:	401c0000 	.word	0x401c0000
 8007600:	40140000 	.word	0x40140000
 8007604:	3fe00000 	.word	0x3fe00000
 8007608:	4baf      	ldr	r3, [pc, #700]	; (80078c8 <_dtoa_r+0x8f0>)
 800760a:	f7f8 fff5 	bl	80005f8 <__aeabi_dmul>
 800760e:	4606      	mov	r6, r0
 8007610:	460f      	mov	r7, r1
 8007612:	e7ad      	b.n	8007570 <_dtoa_r+0x598>
 8007614:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007618:	9d00      	ldr	r5, [sp, #0]
 800761a:	4642      	mov	r2, r8
 800761c:	464b      	mov	r3, r9
 800761e:	4630      	mov	r0, r6
 8007620:	4639      	mov	r1, r7
 8007622:	f7f9 f913 	bl	800084c <__aeabi_ddiv>
 8007626:	f7f9 fa97 	bl	8000b58 <__aeabi_d2iz>
 800762a:	9002      	str	r0, [sp, #8]
 800762c:	f7f8 ff7a 	bl	8000524 <__aeabi_i2d>
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	f7f8 ffe0 	bl	80005f8 <__aeabi_dmul>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4630      	mov	r0, r6
 800763e:	4639      	mov	r1, r7
 8007640:	f7f8 fe22 	bl	8000288 <__aeabi_dsub>
 8007644:	9e02      	ldr	r6, [sp, #8]
 8007646:	9f01      	ldr	r7, [sp, #4]
 8007648:	3630      	adds	r6, #48	; 0x30
 800764a:	f805 6b01 	strb.w	r6, [r5], #1
 800764e:	9e00      	ldr	r6, [sp, #0]
 8007650:	1bae      	subs	r6, r5, r6
 8007652:	42b7      	cmp	r7, r6
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	d137      	bne.n	80076ca <_dtoa_r+0x6f2>
 800765a:	f7f8 fe17 	bl	800028c <__adddf3>
 800765e:	4642      	mov	r2, r8
 8007660:	464b      	mov	r3, r9
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	f7f9 fa57 	bl	8000b18 <__aeabi_dcmpgt>
 800766a:	b9c8      	cbnz	r0, 80076a0 <_dtoa_r+0x6c8>
 800766c:	4642      	mov	r2, r8
 800766e:	464b      	mov	r3, r9
 8007670:	4630      	mov	r0, r6
 8007672:	4639      	mov	r1, r7
 8007674:	f7f9 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007678:	b110      	cbz	r0, 8007680 <_dtoa_r+0x6a8>
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	07d9      	lsls	r1, r3, #31
 800767e:	d40f      	bmi.n	80076a0 <_dtoa_r+0x6c8>
 8007680:	4620      	mov	r0, r4
 8007682:	4659      	mov	r1, fp
 8007684:	f000 ffdb 	bl	800863e <_Bfree>
 8007688:	2300      	movs	r3, #0
 800768a:	702b      	strb	r3, [r5, #0]
 800768c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800768e:	f10a 0001 	add.w	r0, sl, #1
 8007692:	6018      	str	r0, [r3, #0]
 8007694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007696:	2b00      	cmp	r3, #0
 8007698:	f43f acd9 	beq.w	800704e <_dtoa_r+0x76>
 800769c:	601d      	str	r5, [r3, #0]
 800769e:	e4d6      	b.n	800704e <_dtoa_r+0x76>
 80076a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80076a4:	462b      	mov	r3, r5
 80076a6:	461d      	mov	r5, r3
 80076a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ac:	2a39      	cmp	r2, #57	; 0x39
 80076ae:	d108      	bne.n	80076c2 <_dtoa_r+0x6ea>
 80076b0:	9a00      	ldr	r2, [sp, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d1f7      	bne.n	80076a6 <_dtoa_r+0x6ce>
 80076b6:	9a07      	ldr	r2, [sp, #28]
 80076b8:	9900      	ldr	r1, [sp, #0]
 80076ba:	3201      	adds	r2, #1
 80076bc:	9207      	str	r2, [sp, #28]
 80076be:	2230      	movs	r2, #48	; 0x30
 80076c0:	700a      	strb	r2, [r1, #0]
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	3201      	adds	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e78d      	b.n	80075e6 <_dtoa_r+0x60e>
 80076ca:	4b7f      	ldr	r3, [pc, #508]	; (80078c8 <_dtoa_r+0x8f0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	f7f8 ff93 	bl	80005f8 <__aeabi_dmul>
 80076d2:	2200      	movs	r2, #0
 80076d4:	2300      	movs	r3, #0
 80076d6:	4606      	mov	r6, r0
 80076d8:	460f      	mov	r7, r1
 80076da:	f7f9 f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d09b      	beq.n	800761a <_dtoa_r+0x642>
 80076e2:	e7cd      	b.n	8007680 <_dtoa_r+0x6a8>
 80076e4:	9a08      	ldr	r2, [sp, #32]
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	f000 80c4 	beq.w	8007874 <_dtoa_r+0x89c>
 80076ec:	9a05      	ldr	r2, [sp, #20]
 80076ee:	2a01      	cmp	r2, #1
 80076f0:	f300 80a8 	bgt.w	8007844 <_dtoa_r+0x86c>
 80076f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	f000 80a0 	beq.w	800783c <_dtoa_r+0x864>
 80076fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007700:	9e06      	ldr	r6, [sp, #24]
 8007702:	4645      	mov	r5, r8
 8007704:	9a04      	ldr	r2, [sp, #16]
 8007706:	2101      	movs	r1, #1
 8007708:	441a      	add	r2, r3
 800770a:	4620      	mov	r0, r4
 800770c:	4498      	add	r8, r3
 800770e:	9204      	str	r2, [sp, #16]
 8007710:	f001 f838 	bl	8008784 <__i2b>
 8007714:	4607      	mov	r7, r0
 8007716:	2d00      	cmp	r5, #0
 8007718:	dd0b      	ble.n	8007732 <_dtoa_r+0x75a>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd08      	ble.n	8007732 <_dtoa_r+0x75a>
 8007720:	42ab      	cmp	r3, r5
 8007722:	9a04      	ldr	r2, [sp, #16]
 8007724:	bfa8      	it	ge
 8007726:	462b      	movge	r3, r5
 8007728:	eba8 0803 	sub.w	r8, r8, r3
 800772c:	1aed      	subs	r5, r5, r3
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	9b06      	ldr	r3, [sp, #24]
 8007734:	b1fb      	cbz	r3, 8007776 <_dtoa_r+0x79e>
 8007736:	9b08      	ldr	r3, [sp, #32]
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 809f 	beq.w	800787c <_dtoa_r+0x8a4>
 800773e:	2e00      	cmp	r6, #0
 8007740:	dd11      	ble.n	8007766 <_dtoa_r+0x78e>
 8007742:	4639      	mov	r1, r7
 8007744:	4632      	mov	r2, r6
 8007746:	4620      	mov	r0, r4
 8007748:	f001 f8d8 	bl	80088fc <__pow5mult>
 800774c:	465a      	mov	r2, fp
 800774e:	4601      	mov	r1, r0
 8007750:	4607      	mov	r7, r0
 8007752:	4620      	mov	r0, r4
 8007754:	f001 f82c 	bl	80087b0 <__multiply>
 8007758:	4659      	mov	r1, fp
 800775a:	9007      	str	r0, [sp, #28]
 800775c:	4620      	mov	r0, r4
 800775e:	f000 ff6e 	bl	800863e <_Bfree>
 8007762:	9b07      	ldr	r3, [sp, #28]
 8007764:	469b      	mov	fp, r3
 8007766:	9b06      	ldr	r3, [sp, #24]
 8007768:	1b9a      	subs	r2, r3, r6
 800776a:	d004      	beq.n	8007776 <_dtoa_r+0x79e>
 800776c:	4659      	mov	r1, fp
 800776e:	4620      	mov	r0, r4
 8007770:	f001 f8c4 	bl	80088fc <__pow5mult>
 8007774:	4683      	mov	fp, r0
 8007776:	2101      	movs	r1, #1
 8007778:	4620      	mov	r0, r4
 800777a:	f001 f803 	bl	8008784 <__i2b>
 800777e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007780:	2b00      	cmp	r3, #0
 8007782:	4606      	mov	r6, r0
 8007784:	dd7c      	ble.n	8007880 <_dtoa_r+0x8a8>
 8007786:	461a      	mov	r2, r3
 8007788:	4601      	mov	r1, r0
 800778a:	4620      	mov	r0, r4
 800778c:	f001 f8b6 	bl	80088fc <__pow5mult>
 8007790:	9b05      	ldr	r3, [sp, #20]
 8007792:	2b01      	cmp	r3, #1
 8007794:	4606      	mov	r6, r0
 8007796:	dd76      	ble.n	8007886 <_dtoa_r+0x8ae>
 8007798:	2300      	movs	r3, #0
 800779a:	9306      	str	r3, [sp, #24]
 800779c:	6933      	ldr	r3, [r6, #16]
 800779e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077a2:	6918      	ldr	r0, [r3, #16]
 80077a4:	f000 ff9e 	bl	80086e4 <__hi0bits>
 80077a8:	f1c0 0020 	rsb	r0, r0, #32
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	4418      	add	r0, r3
 80077b0:	f010 001f 	ands.w	r0, r0, #31
 80077b4:	f000 8086 	beq.w	80078c4 <_dtoa_r+0x8ec>
 80077b8:	f1c0 0320 	rsb	r3, r0, #32
 80077bc:	2b04      	cmp	r3, #4
 80077be:	dd7f      	ble.n	80078c0 <_dtoa_r+0x8e8>
 80077c0:	f1c0 001c 	rsb	r0, r0, #28
 80077c4:	9b04      	ldr	r3, [sp, #16]
 80077c6:	4403      	add	r3, r0
 80077c8:	4480      	add	r8, r0
 80077ca:	4405      	add	r5, r0
 80077cc:	9304      	str	r3, [sp, #16]
 80077ce:	f1b8 0f00 	cmp.w	r8, #0
 80077d2:	dd05      	ble.n	80077e0 <_dtoa_r+0x808>
 80077d4:	4659      	mov	r1, fp
 80077d6:	4642      	mov	r2, r8
 80077d8:	4620      	mov	r0, r4
 80077da:	f001 f8cf 	bl	800897c <__lshift>
 80077de:	4683      	mov	fp, r0
 80077e0:	9b04      	ldr	r3, [sp, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	dd05      	ble.n	80077f2 <_dtoa_r+0x81a>
 80077e6:	4631      	mov	r1, r6
 80077e8:	461a      	mov	r2, r3
 80077ea:	4620      	mov	r0, r4
 80077ec:	f001 f8c6 	bl	800897c <__lshift>
 80077f0:	4606      	mov	r6, r0
 80077f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d069      	beq.n	80078cc <_dtoa_r+0x8f4>
 80077f8:	4631      	mov	r1, r6
 80077fa:	4658      	mov	r0, fp
 80077fc:	f001 f92a 	bl	8008a54 <__mcmp>
 8007800:	2800      	cmp	r0, #0
 8007802:	da63      	bge.n	80078cc <_dtoa_r+0x8f4>
 8007804:	2300      	movs	r3, #0
 8007806:	4659      	mov	r1, fp
 8007808:	220a      	movs	r2, #10
 800780a:	4620      	mov	r0, r4
 800780c:	f000 ff20 	bl	8008650 <__multadd>
 8007810:	9b08      	ldr	r3, [sp, #32]
 8007812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007816:	4683      	mov	fp, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 818e 	beq.w	8007b3a <_dtoa_r+0xb62>
 800781e:	4639      	mov	r1, r7
 8007820:	2300      	movs	r3, #0
 8007822:	220a      	movs	r2, #10
 8007824:	4620      	mov	r0, r4
 8007826:	f000 ff13 	bl	8008650 <__multadd>
 800782a:	f1b9 0f00 	cmp.w	r9, #0
 800782e:	4607      	mov	r7, r0
 8007830:	f300 808e 	bgt.w	8007950 <_dtoa_r+0x978>
 8007834:	9b05      	ldr	r3, [sp, #20]
 8007836:	2b02      	cmp	r3, #2
 8007838:	dc50      	bgt.n	80078dc <_dtoa_r+0x904>
 800783a:	e089      	b.n	8007950 <_dtoa_r+0x978>
 800783c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007842:	e75d      	b.n	8007700 <_dtoa_r+0x728>
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	1e5e      	subs	r6, r3, #1
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	42b3      	cmp	r3, r6
 800784c:	bfbf      	itttt	lt
 800784e:	9b06      	ldrlt	r3, [sp, #24]
 8007850:	9606      	strlt	r6, [sp, #24]
 8007852:	1af2      	sublt	r2, r6, r3
 8007854:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007856:	bfb6      	itet	lt
 8007858:	189b      	addlt	r3, r3, r2
 800785a:	1b9e      	subge	r6, r3, r6
 800785c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	bfb8      	it	lt
 8007862:	2600      	movlt	r6, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	bfb5      	itete	lt
 8007868:	eba8 0503 	sublt.w	r5, r8, r3
 800786c:	9b01      	ldrge	r3, [sp, #4]
 800786e:	2300      	movlt	r3, #0
 8007870:	4645      	movge	r5, r8
 8007872:	e747      	b.n	8007704 <_dtoa_r+0x72c>
 8007874:	9e06      	ldr	r6, [sp, #24]
 8007876:	9f08      	ldr	r7, [sp, #32]
 8007878:	4645      	mov	r5, r8
 800787a:	e74c      	b.n	8007716 <_dtoa_r+0x73e>
 800787c:	9a06      	ldr	r2, [sp, #24]
 800787e:	e775      	b.n	800776c <_dtoa_r+0x794>
 8007880:	9b05      	ldr	r3, [sp, #20]
 8007882:	2b01      	cmp	r3, #1
 8007884:	dc18      	bgt.n	80078b8 <_dtoa_r+0x8e0>
 8007886:	9b02      	ldr	r3, [sp, #8]
 8007888:	b9b3      	cbnz	r3, 80078b8 <_dtoa_r+0x8e0>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007890:	b9a3      	cbnz	r3, 80078bc <_dtoa_r+0x8e4>
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007898:	0d1b      	lsrs	r3, r3, #20
 800789a:	051b      	lsls	r3, r3, #20
 800789c:	b12b      	cbz	r3, 80078aa <_dtoa_r+0x8d2>
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	3301      	adds	r3, #1
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	f108 0801 	add.w	r8, r8, #1
 80078a8:	2301      	movs	r3, #1
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f47f af74 	bne.w	800779c <_dtoa_r+0x7c4>
 80078b4:	2001      	movs	r0, #1
 80078b6:	e779      	b.n	80077ac <_dtoa_r+0x7d4>
 80078b8:	2300      	movs	r3, #0
 80078ba:	e7f6      	b.n	80078aa <_dtoa_r+0x8d2>
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	e7f4      	b.n	80078aa <_dtoa_r+0x8d2>
 80078c0:	d085      	beq.n	80077ce <_dtoa_r+0x7f6>
 80078c2:	4618      	mov	r0, r3
 80078c4:	301c      	adds	r0, #28
 80078c6:	e77d      	b.n	80077c4 <_dtoa_r+0x7ec>
 80078c8:	40240000 	.word	0x40240000
 80078cc:	9b01      	ldr	r3, [sp, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dc38      	bgt.n	8007944 <_dtoa_r+0x96c>
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	dd35      	ble.n	8007944 <_dtoa_r+0x96c>
 80078d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80078dc:	f1b9 0f00 	cmp.w	r9, #0
 80078e0:	d10d      	bne.n	80078fe <_dtoa_r+0x926>
 80078e2:	4631      	mov	r1, r6
 80078e4:	464b      	mov	r3, r9
 80078e6:	2205      	movs	r2, #5
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 feb1 	bl	8008650 <__multadd>
 80078ee:	4601      	mov	r1, r0
 80078f0:	4606      	mov	r6, r0
 80078f2:	4658      	mov	r0, fp
 80078f4:	f001 f8ae 	bl	8008a54 <__mcmp>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	f73f adbe 	bgt.w	800747a <_dtoa_r+0x4a2>
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	9d00      	ldr	r5, [sp, #0]
 8007902:	ea6f 0a03 	mvn.w	sl, r3
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	4631      	mov	r1, r6
 800790c:	4620      	mov	r0, r4
 800790e:	f000 fe96 	bl	800863e <_Bfree>
 8007912:	2f00      	cmp	r7, #0
 8007914:	f43f aeb4 	beq.w	8007680 <_dtoa_r+0x6a8>
 8007918:	f1b8 0f00 	cmp.w	r8, #0
 800791c:	d005      	beq.n	800792a <_dtoa_r+0x952>
 800791e:	45b8      	cmp	r8, r7
 8007920:	d003      	beq.n	800792a <_dtoa_r+0x952>
 8007922:	4641      	mov	r1, r8
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fe8a 	bl	800863e <_Bfree>
 800792a:	4639      	mov	r1, r7
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fe86 	bl	800863e <_Bfree>
 8007932:	e6a5      	b.n	8007680 <_dtoa_r+0x6a8>
 8007934:	2600      	movs	r6, #0
 8007936:	4637      	mov	r7, r6
 8007938:	e7e1      	b.n	80078fe <_dtoa_r+0x926>
 800793a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800793c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007940:	4637      	mov	r7, r6
 8007942:	e59a      	b.n	800747a <_dtoa_r+0x4a2>
 8007944:	9b08      	ldr	r3, [sp, #32]
 8007946:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80fc 	beq.w	8007b48 <_dtoa_r+0xb70>
 8007950:	2d00      	cmp	r5, #0
 8007952:	dd05      	ble.n	8007960 <_dtoa_r+0x988>
 8007954:	4639      	mov	r1, r7
 8007956:	462a      	mov	r2, r5
 8007958:	4620      	mov	r0, r4
 800795a:	f001 f80f 	bl	800897c <__lshift>
 800795e:	4607      	mov	r7, r0
 8007960:	9b06      	ldr	r3, [sp, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d05b      	beq.n	8007a1e <_dtoa_r+0xa46>
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fe43 	bl	80085f4 <_Balloc>
 800796e:	4605      	mov	r5, r0
 8007970:	b920      	cbnz	r0, 800797c <_dtoa_r+0x9a4>
 8007972:	4b80      	ldr	r3, [pc, #512]	; (8007b74 <_dtoa_r+0xb9c>)
 8007974:	4602      	mov	r2, r0
 8007976:	f240 21ea 	movw	r1, #746	; 0x2ea
 800797a:	e45b      	b.n	8007234 <_dtoa_r+0x25c>
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	3202      	adds	r2, #2
 8007980:	0092      	lsls	r2, r2, #2
 8007982:	f107 010c 	add.w	r1, r7, #12
 8007986:	300c      	adds	r0, #12
 8007988:	f000 fe1a 	bl	80085c0 <memcpy>
 800798c:	2201      	movs	r2, #1
 800798e:	4629      	mov	r1, r5
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fff3 	bl	800897c <__lshift>
 8007996:	9b00      	ldr	r3, [sp, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	9b00      	ldr	r3, [sp, #0]
 800799e:	444b      	add	r3, r9
 80079a0:	9307      	str	r3, [sp, #28]
 80079a2:	9b02      	ldr	r3, [sp, #8]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	46b8      	mov	r8, r7
 80079aa:	9306      	str	r3, [sp, #24]
 80079ac:	4607      	mov	r7, r0
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	4631      	mov	r1, r6
 80079b2:	3b01      	subs	r3, #1
 80079b4:	4658      	mov	r0, fp
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	f7ff fa80 	bl	8006ebc <quorem>
 80079bc:	4603      	mov	r3, r0
 80079be:	3330      	adds	r3, #48	; 0x30
 80079c0:	9004      	str	r0, [sp, #16]
 80079c2:	4641      	mov	r1, r8
 80079c4:	4658      	mov	r0, fp
 80079c6:	9308      	str	r3, [sp, #32]
 80079c8:	f001 f844 	bl	8008a54 <__mcmp>
 80079cc:	463a      	mov	r2, r7
 80079ce:	4681      	mov	r9, r0
 80079d0:	4631      	mov	r1, r6
 80079d2:	4620      	mov	r0, r4
 80079d4:	f001 f85a 	bl	8008a8c <__mdiff>
 80079d8:	68c2      	ldr	r2, [r0, #12]
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	4605      	mov	r5, r0
 80079de:	bb02      	cbnz	r2, 8007a22 <_dtoa_r+0xa4a>
 80079e0:	4601      	mov	r1, r0
 80079e2:	4658      	mov	r0, fp
 80079e4:	f001 f836 	bl	8008a54 <__mcmp>
 80079e8:	9b08      	ldr	r3, [sp, #32]
 80079ea:	4602      	mov	r2, r0
 80079ec:	4629      	mov	r1, r5
 80079ee:	4620      	mov	r0, r4
 80079f0:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80079f4:	f000 fe23 	bl	800863e <_Bfree>
 80079f8:	9b05      	ldr	r3, [sp, #20]
 80079fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fc:	9d01      	ldr	r5, [sp, #4]
 80079fe:	ea43 0102 	orr.w	r1, r3, r2
 8007a02:	9b06      	ldr	r3, [sp, #24]
 8007a04:	430b      	orrs	r3, r1
 8007a06:	9b08      	ldr	r3, [sp, #32]
 8007a08:	d10d      	bne.n	8007a26 <_dtoa_r+0xa4e>
 8007a0a:	2b39      	cmp	r3, #57	; 0x39
 8007a0c:	d029      	beq.n	8007a62 <_dtoa_r+0xa8a>
 8007a0e:	f1b9 0f00 	cmp.w	r9, #0
 8007a12:	dd01      	ble.n	8007a18 <_dtoa_r+0xa40>
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	3331      	adds	r3, #49	; 0x31
 8007a18:	9a02      	ldr	r2, [sp, #8]
 8007a1a:	7013      	strb	r3, [r2, #0]
 8007a1c:	e775      	b.n	800790a <_dtoa_r+0x932>
 8007a1e:	4638      	mov	r0, r7
 8007a20:	e7b9      	b.n	8007996 <_dtoa_r+0x9be>
 8007a22:	2201      	movs	r2, #1
 8007a24:	e7e2      	b.n	80079ec <_dtoa_r+0xa14>
 8007a26:	f1b9 0f00 	cmp.w	r9, #0
 8007a2a:	db06      	blt.n	8007a3a <_dtoa_r+0xa62>
 8007a2c:	9905      	ldr	r1, [sp, #20]
 8007a2e:	ea41 0909 	orr.w	r9, r1, r9
 8007a32:	9906      	ldr	r1, [sp, #24]
 8007a34:	ea59 0101 	orrs.w	r1, r9, r1
 8007a38:	d120      	bne.n	8007a7c <_dtoa_r+0xaa4>
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	ddec      	ble.n	8007a18 <_dtoa_r+0xa40>
 8007a3e:	4659      	mov	r1, fp
 8007a40:	2201      	movs	r2, #1
 8007a42:	4620      	mov	r0, r4
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	f000 ff99 	bl	800897c <__lshift>
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4683      	mov	fp, r0
 8007a4e:	f001 f801 	bl	8008a54 <__mcmp>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	dc02      	bgt.n	8007a5e <_dtoa_r+0xa86>
 8007a58:	d1de      	bne.n	8007a18 <_dtoa_r+0xa40>
 8007a5a:	07da      	lsls	r2, r3, #31
 8007a5c:	d5dc      	bpl.n	8007a18 <_dtoa_r+0xa40>
 8007a5e:	2b39      	cmp	r3, #57	; 0x39
 8007a60:	d1d8      	bne.n	8007a14 <_dtoa_r+0xa3c>
 8007a62:	9a02      	ldr	r2, [sp, #8]
 8007a64:	2339      	movs	r3, #57	; 0x39
 8007a66:	7013      	strb	r3, [r2, #0]
 8007a68:	462b      	mov	r3, r5
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a72:	2a39      	cmp	r2, #57	; 0x39
 8007a74:	d050      	beq.n	8007b18 <_dtoa_r+0xb40>
 8007a76:	3201      	adds	r2, #1
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	e746      	b.n	800790a <_dtoa_r+0x932>
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	dd03      	ble.n	8007a88 <_dtoa_r+0xab0>
 8007a80:	2b39      	cmp	r3, #57	; 0x39
 8007a82:	d0ee      	beq.n	8007a62 <_dtoa_r+0xa8a>
 8007a84:	3301      	adds	r3, #1
 8007a86:	e7c7      	b.n	8007a18 <_dtoa_r+0xa40>
 8007a88:	9a01      	ldr	r2, [sp, #4]
 8007a8a:	9907      	ldr	r1, [sp, #28]
 8007a8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a90:	428a      	cmp	r2, r1
 8007a92:	d02a      	beq.n	8007aea <_dtoa_r+0xb12>
 8007a94:	4659      	mov	r1, fp
 8007a96:	2300      	movs	r3, #0
 8007a98:	220a      	movs	r2, #10
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fdd8 	bl	8008650 <__multadd>
 8007aa0:	45b8      	cmp	r8, r7
 8007aa2:	4683      	mov	fp, r0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	f04f 020a 	mov.w	r2, #10
 8007aac:	4641      	mov	r1, r8
 8007aae:	4620      	mov	r0, r4
 8007ab0:	d107      	bne.n	8007ac2 <_dtoa_r+0xaea>
 8007ab2:	f000 fdcd 	bl	8008650 <__multadd>
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	4607      	mov	r7, r0
 8007aba:	9b01      	ldr	r3, [sp, #4]
 8007abc:	3301      	adds	r3, #1
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	e775      	b.n	80079ae <_dtoa_r+0x9d6>
 8007ac2:	f000 fdc5 	bl	8008650 <__multadd>
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	4680      	mov	r8, r0
 8007aca:	2300      	movs	r3, #0
 8007acc:	220a      	movs	r2, #10
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fdbe 	bl	8008650 <__multadd>
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	e7f0      	b.n	8007aba <_dtoa_r+0xae2>
 8007ad8:	f1b9 0f00 	cmp.w	r9, #0
 8007adc:	9a00      	ldr	r2, [sp, #0]
 8007ade:	bfcc      	ite	gt
 8007ae0:	464d      	movgt	r5, r9
 8007ae2:	2501      	movle	r5, #1
 8007ae4:	4415      	add	r5, r2
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	4659      	mov	r1, fp
 8007aec:	2201      	movs	r2, #1
 8007aee:	4620      	mov	r0, r4
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	f000 ff43 	bl	800897c <__lshift>
 8007af6:	4631      	mov	r1, r6
 8007af8:	4683      	mov	fp, r0
 8007afa:	f000 ffab 	bl	8008a54 <__mcmp>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	dcb2      	bgt.n	8007a68 <_dtoa_r+0xa90>
 8007b02:	d102      	bne.n	8007b0a <_dtoa_r+0xb32>
 8007b04:	9b01      	ldr	r3, [sp, #4]
 8007b06:	07db      	lsls	r3, r3, #31
 8007b08:	d4ae      	bmi.n	8007a68 <_dtoa_r+0xa90>
 8007b0a:	462b      	mov	r3, r5
 8007b0c:	461d      	mov	r5, r3
 8007b0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b12:	2a30      	cmp	r2, #48	; 0x30
 8007b14:	d0fa      	beq.n	8007b0c <_dtoa_r+0xb34>
 8007b16:	e6f8      	b.n	800790a <_dtoa_r+0x932>
 8007b18:	9a00      	ldr	r2, [sp, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d1a5      	bne.n	8007a6a <_dtoa_r+0xa92>
 8007b1e:	f10a 0a01 	add.w	sl, sl, #1
 8007b22:	2331      	movs	r3, #49	; 0x31
 8007b24:	e779      	b.n	8007a1a <_dtoa_r+0xa42>
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <_dtoa_r+0xba0>)
 8007b28:	f7ff bab1 	b.w	800708e <_dtoa_r+0xb6>
 8007b2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f47f aa93 	bne.w	800705a <_dtoa_r+0x82>
 8007b34:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <_dtoa_r+0xba4>)
 8007b36:	f7ff baaa 	b.w	800708e <_dtoa_r+0xb6>
 8007b3a:	f1b9 0f00 	cmp.w	r9, #0
 8007b3e:	dc03      	bgt.n	8007b48 <_dtoa_r+0xb70>
 8007b40:	9b05      	ldr	r3, [sp, #20]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	f73f aeca 	bgt.w	80078dc <_dtoa_r+0x904>
 8007b48:	9d00      	ldr	r5, [sp, #0]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f7ff f9b5 	bl	8006ebc <quorem>
 8007b52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b56:	f805 3b01 	strb.w	r3, [r5], #1
 8007b5a:	9a00      	ldr	r2, [sp, #0]
 8007b5c:	1aaa      	subs	r2, r5, r2
 8007b5e:	4591      	cmp	r9, r2
 8007b60:	ddba      	ble.n	8007ad8 <_dtoa_r+0xb00>
 8007b62:	4659      	mov	r1, fp
 8007b64:	2300      	movs	r3, #0
 8007b66:	220a      	movs	r2, #10
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fd71 	bl	8008650 <__multadd>
 8007b6e:	4683      	mov	fp, r0
 8007b70:	e7eb      	b.n	8007b4a <_dtoa_r+0xb72>
 8007b72:	bf00      	nop
 8007b74:	0800a3d9 	.word	0x0800a3d9
 8007b78:	0800a3aa 	.word	0x0800a3aa
 8007b7c:	0800a3d0 	.word	0x0800a3d0

08007b80 <__sflush_r>:
 8007b80:	898b      	ldrh	r3, [r1, #12]
 8007b82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	0718      	lsls	r0, r3, #28
 8007b8e:	460c      	mov	r4, r1
 8007b90:	d45f      	bmi.n	8007c52 <__sflush_r+0xd2>
 8007b92:	684b      	ldr	r3, [r1, #4]
 8007b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	818a      	strh	r2, [r1, #12]
 8007b9c:	dc05      	bgt.n	8007baa <__sflush_r+0x2a>
 8007b9e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	dc02      	bgt.n	8007baa <__sflush_r+0x2a>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	d0f9      	beq.n	8007ba4 <__sflush_r+0x24>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bb6:	682f      	ldr	r7, [r5, #0]
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	d036      	beq.n	8007c2a <__sflush_r+0xaa>
 8007bbc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	075a      	lsls	r2, r3, #29
 8007bc2:	d505      	bpl.n	8007bd0 <__sflush_r+0x50>
 8007bc4:	6863      	ldr	r3, [r4, #4]
 8007bc6:	1ac0      	subs	r0, r0, r3
 8007bc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007bca:	b10b      	cbz	r3, 8007bd0 <__sflush_r+0x50>
 8007bcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bce:	1ac0      	subs	r0, r0, r3
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bd6:	69e1      	ldr	r1, [r4, #28]
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b0      	blx	r6
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	d106      	bne.n	8007bf0 <__sflush_r+0x70>
 8007be2:	6829      	ldr	r1, [r5, #0]
 8007be4:	291d      	cmp	r1, #29
 8007be6:	d830      	bhi.n	8007c4a <__sflush_r+0xca>
 8007be8:	4a2b      	ldr	r2, [pc, #172]	; (8007c98 <__sflush_r+0x118>)
 8007bea:	40ca      	lsrs	r2, r1
 8007bec:	07d6      	lsls	r6, r2, #31
 8007bee:	d52c      	bpl.n	8007c4a <__sflush_r+0xca>
 8007bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bf4:	b21b      	sxth	r3, r3
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	6062      	str	r2, [r4, #4]
 8007bfa:	04d9      	lsls	r1, r3, #19
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	d504      	bpl.n	8007c0e <__sflush_r+0x8e>
 8007c04:	1c42      	adds	r2, r0, #1
 8007c06:	d101      	bne.n	8007c0c <__sflush_r+0x8c>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b903      	cbnz	r3, 8007c0e <__sflush_r+0x8e>
 8007c0c:	6520      	str	r0, [r4, #80]	; 0x50
 8007c0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007c10:	602f      	str	r7, [r5, #0]
 8007c12:	2900      	cmp	r1, #0
 8007c14:	d0c6      	beq.n	8007ba4 <__sflush_r+0x24>
 8007c16:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	d002      	beq.n	8007c24 <__sflush_r+0xa4>
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 f938 	bl	8007e94 <_free_r>
 8007c24:	2000      	movs	r0, #0
 8007c26:	6320      	str	r0, [r4, #48]	; 0x30
 8007c28:	e7bd      	b.n	8007ba6 <__sflush_r+0x26>
 8007c2a:	69e1      	ldr	r1, [r4, #28]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b0      	blx	r6
 8007c32:	1c41      	adds	r1, r0, #1
 8007c34:	d1c3      	bne.n	8007bbe <__sflush_r+0x3e>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0c0      	beq.n	8007bbe <__sflush_r+0x3e>
 8007c3c:	2b1d      	cmp	r3, #29
 8007c3e:	d001      	beq.n	8007c44 <__sflush_r+0xc4>
 8007c40:	2b16      	cmp	r3, #22
 8007c42:	d101      	bne.n	8007c48 <__sflush_r+0xc8>
 8007c44:	602f      	str	r7, [r5, #0]
 8007c46:	e7ad      	b.n	8007ba4 <__sflush_r+0x24>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	e7a9      	b.n	8007ba6 <__sflush_r+0x26>
 8007c52:	690f      	ldr	r7, [r1, #16]
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	d0a5      	beq.n	8007ba4 <__sflush_r+0x24>
 8007c58:	079b      	lsls	r3, r3, #30
 8007c5a:	680e      	ldr	r6, [r1, #0]
 8007c5c:	bf08      	it	eq
 8007c5e:	694b      	ldreq	r3, [r1, #20]
 8007c60:	600f      	str	r7, [r1, #0]
 8007c62:	bf18      	it	ne
 8007c64:	2300      	movne	r3, #0
 8007c66:	eba6 0807 	sub.w	r8, r6, r7
 8007c6a:	608b      	str	r3, [r1, #8]
 8007c6c:	f1b8 0f00 	cmp.w	r8, #0
 8007c70:	dd98      	ble.n	8007ba4 <__sflush_r+0x24>
 8007c72:	69e1      	ldr	r1, [r4, #28]
 8007c74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c76:	4643      	mov	r3, r8
 8007c78:	463a      	mov	r2, r7
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b0      	blx	r6
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	dc06      	bgt.n	8007c90 <__sflush_r+0x110>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8e:	e78a      	b.n	8007ba6 <__sflush_r+0x26>
 8007c90:	4407      	add	r7, r0
 8007c92:	eba8 0800 	sub.w	r8, r8, r0
 8007c96:	e7e9      	b.n	8007c6c <__sflush_r+0xec>
 8007c98:	20400001 	.word	0x20400001

08007c9c <_fflush_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	b118      	cbz	r0, 8007cac <_fflush_r+0x10>
 8007ca4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007ca6:	b90b      	cbnz	r3, 8007cac <_fflush_r+0x10>
 8007ca8:	f000 f864 	bl	8007d74 <__sinit>
 8007cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb0:	b1bb      	cbz	r3, 8007ce2 <_fflush_r+0x46>
 8007cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cb4:	07d0      	lsls	r0, r2, #31
 8007cb6:	d404      	bmi.n	8007cc2 <_fflush_r+0x26>
 8007cb8:	0599      	lsls	r1, r3, #22
 8007cba:	d402      	bmi.n	8007cc2 <_fflush_r+0x26>
 8007cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cbe:	f000 f9cf 	bl	8008060 <__retarget_lock_acquire_recursive>
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	f7ff ff5b 	bl	8007b80 <__sflush_r>
 8007cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ccc:	07da      	lsls	r2, r3, #31
 8007cce:	4605      	mov	r5, r0
 8007cd0:	d405      	bmi.n	8007cde <_fflush_r+0x42>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	059b      	lsls	r3, r3, #22
 8007cd6:	d402      	bmi.n	8007cde <_fflush_r+0x42>
 8007cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cda:	f000 f9c2 	bl	8008062 <__retarget_lock_release_recursive>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	bd38      	pop	{r3, r4, r5, pc}
 8007ce2:	461d      	mov	r5, r3
 8007ce4:	e7fb      	b.n	8007cde <_fflush_r+0x42>
	...

08007ce8 <std>:
 8007ce8:	2300      	movs	r3, #0
 8007cea:	b510      	push	{r4, lr}
 8007cec:	4604      	mov	r4, r0
 8007cee:	e9c0 3300 	strd	r3, r3, [r0]
 8007cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cf6:	6083      	str	r3, [r0, #8]
 8007cf8:	8181      	strh	r1, [r0, #12]
 8007cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8007cfc:	81c2      	strh	r2, [r0, #14]
 8007cfe:	6183      	str	r3, [r0, #24]
 8007d00:	4619      	mov	r1, r3
 8007d02:	2208      	movs	r2, #8
 8007d04:	305c      	adds	r0, #92	; 0x5c
 8007d06:	f7fd fde1 	bl	80058cc <memset>
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <std+0x40>)
 8007d0c:	6223      	str	r3, [r4, #32]
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <std+0x44>)
 8007d10:	6263      	str	r3, [r4, #36]	; 0x24
 8007d12:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <std+0x48>)
 8007d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d16:	4b07      	ldr	r3, [pc, #28]	; (8007d34 <std+0x4c>)
 8007d18:	61e4      	str	r4, [r4, #28]
 8007d1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d24:	f000 b99a 	b.w	800805c <__retarget_lock_init_recursive>
 8007d28:	08008ce5 	.word	0x08008ce5
 8007d2c:	08008d07 	.word	0x08008d07
 8007d30:	08008d3f 	.word	0x08008d3f
 8007d34:	08008d63 	.word	0x08008d63

08007d38 <_cleanup_r>:
 8007d38:	4901      	ldr	r1, [pc, #4]	; (8007d40 <_cleanup_r+0x8>)
 8007d3a:	f000 b96b 	b.w	8008014 <_fwalk_reent>
 8007d3e:	bf00      	nop
 8007d40:	080098fd 	.word	0x080098fd

08007d44 <__sfp_lock_acquire>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__sfp_lock_acquire+0x8>)
 8007d46:	f000 b98b 	b.w	8008060 <__retarget_lock_acquire_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20002dac 	.word	0x20002dac

08007d50 <__sfp_lock_release>:
 8007d50:	4801      	ldr	r0, [pc, #4]	; (8007d58 <__sfp_lock_release+0x8>)
 8007d52:	f000 b986 	b.w	8008062 <__retarget_lock_release_recursive>
 8007d56:	bf00      	nop
 8007d58:	20002dac 	.word	0x20002dac

08007d5c <__sinit_lock_acquire>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__sinit_lock_acquire+0x8>)
 8007d5e:	f000 b97f 	b.w	8008060 <__retarget_lock_acquire_recursive>
 8007d62:	bf00      	nop
 8007d64:	20002da7 	.word	0x20002da7

08007d68 <__sinit_lock_release>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__sinit_lock_release+0x8>)
 8007d6a:	f000 b97a 	b.w	8008062 <__retarget_lock_release_recursive>
 8007d6e:	bf00      	nop
 8007d70:	20002da7 	.word	0x20002da7

08007d74 <__sinit>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4604      	mov	r4, r0
 8007d78:	f7ff fff0 	bl	8007d5c <__sinit_lock_acquire>
 8007d7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d7e:	b11a      	cbz	r2, 8007d88 <__sinit+0x14>
 8007d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d84:	f7ff bff0 	b.w	8007d68 <__sinit_lock_release>
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <__sinit+0x4c>)
 8007d8a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8007d92:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8007d96:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8007d9a:	6860      	ldr	r0, [r4, #4]
 8007d9c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8007da0:	2104      	movs	r1, #4
 8007da2:	f7ff ffa1 	bl	8007ce8 <std>
 8007da6:	68a0      	ldr	r0, [r4, #8]
 8007da8:	2201      	movs	r2, #1
 8007daa:	2109      	movs	r1, #9
 8007dac:	f7ff ff9c 	bl	8007ce8 <std>
 8007db0:	68e0      	ldr	r0, [r4, #12]
 8007db2:	2202      	movs	r2, #2
 8007db4:	2112      	movs	r1, #18
 8007db6:	f7ff ff97 	bl	8007ce8 <std>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	63a3      	str	r3, [r4, #56]	; 0x38
 8007dbe:	e7df      	b.n	8007d80 <__sinit+0xc>
 8007dc0:	08007d39 	.word	0x08007d39

08007dc4 <__libc_fini_array>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	; (8007de4 <__libc_fini_array+0x20>)
 8007dc8:	4c07      	ldr	r4, [pc, #28]	; (8007de8 <__libc_fini_array+0x24>)
 8007dca:	1b64      	subs	r4, r4, r5
 8007dcc:	10a4      	asrs	r4, r4, #2
 8007dce:	b91c      	cbnz	r4, 8007dd8 <__libc_fini_array+0x14>
 8007dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dd4:	f002 ba90 	b.w	800a2f8 <_fini>
 8007dd8:	3c01      	subs	r4, #1
 8007dda:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007dde:	4798      	blx	r3
 8007de0:	e7f5      	b.n	8007dce <__libc_fini_array+0xa>
 8007de2:	bf00      	nop
 8007de4:	0800a724 	.word	0x0800a724
 8007de8:	0800a728 	.word	0x0800a728

08007dec <_malloc_trim_r>:
 8007dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df0:	4606      	mov	r6, r0
 8007df2:	2008      	movs	r0, #8
 8007df4:	460c      	mov	r4, r1
 8007df6:	f000 ffcb 	bl	8008d90 <sysconf>
 8007dfa:	4f23      	ldr	r7, [pc, #140]	; (8007e88 <_malloc_trim_r+0x9c>)
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f000 fbec 	bl	80085dc <__malloc_lock>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	685d      	ldr	r5, [r3, #4]
 8007e08:	f025 0503 	bic.w	r5, r5, #3
 8007e0c:	1b2c      	subs	r4, r5, r4
 8007e0e:	3c11      	subs	r4, #17
 8007e10:	4444      	add	r4, r8
 8007e12:	fbb4 f4f8 	udiv	r4, r4, r8
 8007e16:	3c01      	subs	r4, #1
 8007e18:	fb08 f404 	mul.w	r4, r8, r4
 8007e1c:	45a0      	cmp	r8, r4
 8007e1e:	dd05      	ble.n	8007e2c <_malloc_trim_r+0x40>
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 fbe1 	bl	80085e8 <__malloc_unlock>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f000 ff48 	bl	8008cc4 <_sbrk_r>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	442b      	add	r3, r5
 8007e38:	4298      	cmp	r0, r3
 8007e3a:	d1f1      	bne.n	8007e20 <_malloc_trim_r+0x34>
 8007e3c:	4261      	negs	r1, r4
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 ff40 	bl	8008cc4 <_sbrk_r>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d110      	bne.n	8007e6a <_malloc_trim_r+0x7e>
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f000 ff3a 	bl	8008cc4 <_sbrk_r>
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	1a83      	subs	r3, r0, r2
 8007e54:	2b0f      	cmp	r3, #15
 8007e56:	dde3      	ble.n	8007e20 <_malloc_trim_r+0x34>
 8007e58:	490c      	ldr	r1, [pc, #48]	; (8007e8c <_malloc_trim_r+0xa0>)
 8007e5a:	6809      	ldr	r1, [r1, #0]
 8007e5c:	1a40      	subs	r0, r0, r1
 8007e5e:	490c      	ldr	r1, [pc, #48]	; (8007e90 <_malloc_trim_r+0xa4>)
 8007e60:	f043 0301 	orr.w	r3, r3, #1
 8007e64:	6008      	str	r0, [r1, #0]
 8007e66:	6053      	str	r3, [r2, #4]
 8007e68:	e7da      	b.n	8007e20 <_malloc_trim_r+0x34>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4a08      	ldr	r2, [pc, #32]	; (8007e90 <_malloc_trim_r+0xa4>)
 8007e6e:	1b2d      	subs	r5, r5, r4
 8007e70:	f045 0501 	orr.w	r5, r5, #1
 8007e74:	605d      	str	r5, [r3, #4]
 8007e76:	6813      	ldr	r3, [r2, #0]
 8007e78:	4630      	mov	r0, r6
 8007e7a:	1b1c      	subs	r4, r3, r4
 8007e7c:	6014      	str	r4, [r2, #0]
 8007e7e:	f000 fbb3 	bl	80085e8 <__malloc_unlock>
 8007e82:	2001      	movs	r0, #1
 8007e84:	e7d0      	b.n	8007e28 <_malloc_trim_r+0x3c>
 8007e86:	bf00      	nop
 8007e88:	20000454 	.word	0x20000454
 8007e8c:	2000085c 	.word	0x2000085c
 8007e90:	20000a10 	.word	0x20000a10

08007e94 <_free_r>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	4605      	mov	r5, r0
 8007e98:	460f      	mov	r7, r1
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	f000 80b1 	beq.w	8008002 <_free_r+0x16e>
 8007ea0:	f000 fb9c 	bl	80085dc <__malloc_lock>
 8007ea4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007ea8:	4856      	ldr	r0, [pc, #344]	; (8008004 <_free_r+0x170>)
 8007eaa:	f022 0401 	bic.w	r4, r2, #1
 8007eae:	f1a7 0308 	sub.w	r3, r7, #8
 8007eb2:	eb03 0c04 	add.w	ip, r3, r4
 8007eb6:	6881      	ldr	r1, [r0, #8]
 8007eb8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007ebc:	4561      	cmp	r1, ip
 8007ebe:	f026 0603 	bic.w	r6, r6, #3
 8007ec2:	f002 0201 	and.w	r2, r2, #1
 8007ec6:	d11b      	bne.n	8007f00 <_free_r+0x6c>
 8007ec8:	4434      	add	r4, r6
 8007eca:	b93a      	cbnz	r2, 8007edc <_free_r+0x48>
 8007ecc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	4414      	add	r4, r2
 8007ed4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8007ed8:	60ca      	str	r2, [r1, #12]
 8007eda:	6091      	str	r1, [r2, #8]
 8007edc:	f044 0201 	orr.w	r2, r4, #1
 8007ee0:	605a      	str	r2, [r3, #4]
 8007ee2:	6083      	str	r3, [r0, #8]
 8007ee4:	4b48      	ldr	r3, [pc, #288]	; (8008008 <_free_r+0x174>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d804      	bhi.n	8007ef6 <_free_r+0x62>
 8007eec:	4b47      	ldr	r3, [pc, #284]	; (800800c <_free_r+0x178>)
 8007eee:	4628      	mov	r0, r5
 8007ef0:	6819      	ldr	r1, [r3, #0]
 8007ef2:	f7ff ff7b 	bl	8007dec <_malloc_trim_r>
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007efc:	f000 bb74 	b.w	80085e8 <__malloc_unlock>
 8007f00:	f8cc 6004 	str.w	r6, [ip, #4]
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d138      	bne.n	8007f7a <_free_r+0xe6>
 8007f08:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8007f0c:	1a5b      	subs	r3, r3, r1
 8007f0e:	440c      	add	r4, r1
 8007f10:	6899      	ldr	r1, [r3, #8]
 8007f12:	f100 0708 	add.w	r7, r0, #8
 8007f16:	42b9      	cmp	r1, r7
 8007f18:	d031      	beq.n	8007f7e <_free_r+0xea>
 8007f1a:	68df      	ldr	r7, [r3, #12]
 8007f1c:	60cf      	str	r7, [r1, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	eb0c 0106 	add.w	r1, ip, r6
 8007f24:	6849      	ldr	r1, [r1, #4]
 8007f26:	07c9      	lsls	r1, r1, #31
 8007f28:	d40b      	bmi.n	8007f42 <_free_r+0xae>
 8007f2a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007f2e:	4434      	add	r4, r6
 8007f30:	bb3a      	cbnz	r2, 8007f82 <_free_r+0xee>
 8007f32:	4e37      	ldr	r6, [pc, #220]	; (8008010 <_free_r+0x17c>)
 8007f34:	42b1      	cmp	r1, r6
 8007f36:	d124      	bne.n	8007f82 <_free_r+0xee>
 8007f38:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f3c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f044 0101 	orr.w	r1, r4, #1
 8007f46:	6059      	str	r1, [r3, #4]
 8007f48:	511c      	str	r4, [r3, r4]
 8007f4a:	2a00      	cmp	r2, #0
 8007f4c:	d1d3      	bne.n	8007ef6 <_free_r+0x62>
 8007f4e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8007f52:	d21b      	bcs.n	8007f8c <_free_r+0xf8>
 8007f54:	0961      	lsrs	r1, r4, #5
 8007f56:	08e2      	lsrs	r2, r4, #3
 8007f58:	2401      	movs	r4, #1
 8007f5a:	408c      	lsls	r4, r1
 8007f5c:	6841      	ldr	r1, [r0, #4]
 8007f5e:	3201      	adds	r2, #1
 8007f60:	430c      	orrs	r4, r1
 8007f62:	6044      	str	r4, [r0, #4]
 8007f64:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8007f68:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8007f6c:	3908      	subs	r1, #8
 8007f6e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8007f72:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8007f76:	60e3      	str	r3, [r4, #12]
 8007f78:	e7bd      	b.n	8007ef6 <_free_r+0x62>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	e7d0      	b.n	8007f20 <_free_r+0x8c>
 8007f7e:	2201      	movs	r2, #1
 8007f80:	e7ce      	b.n	8007f20 <_free_r+0x8c>
 8007f82:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8007f86:	60ce      	str	r6, [r1, #12]
 8007f88:	60b1      	str	r1, [r6, #8]
 8007f8a:	e7da      	b.n	8007f42 <_free_r+0xae>
 8007f8c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8007f90:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8007f94:	d214      	bcs.n	8007fc0 <_free_r+0x12c>
 8007f96:	09a2      	lsrs	r2, r4, #6
 8007f98:	3238      	adds	r2, #56	; 0x38
 8007f9a:	1c51      	adds	r1, r2, #1
 8007f9c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8007fa0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8007fa4:	428e      	cmp	r6, r1
 8007fa6:	d125      	bne.n	8007ff4 <_free_r+0x160>
 8007fa8:	2401      	movs	r4, #1
 8007faa:	1092      	asrs	r2, r2, #2
 8007fac:	fa04 f202 	lsl.w	r2, r4, r2
 8007fb0:	6844      	ldr	r4, [r0, #4]
 8007fb2:	4322      	orrs	r2, r4
 8007fb4:	6042      	str	r2, [r0, #4]
 8007fb6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007fba:	60b3      	str	r3, [r6, #8]
 8007fbc:	60cb      	str	r3, [r1, #12]
 8007fbe:	e79a      	b.n	8007ef6 <_free_r+0x62>
 8007fc0:	2a14      	cmp	r2, #20
 8007fc2:	d801      	bhi.n	8007fc8 <_free_r+0x134>
 8007fc4:	325b      	adds	r2, #91	; 0x5b
 8007fc6:	e7e8      	b.n	8007f9a <_free_r+0x106>
 8007fc8:	2a54      	cmp	r2, #84	; 0x54
 8007fca:	d802      	bhi.n	8007fd2 <_free_r+0x13e>
 8007fcc:	0b22      	lsrs	r2, r4, #12
 8007fce:	326e      	adds	r2, #110	; 0x6e
 8007fd0:	e7e3      	b.n	8007f9a <_free_r+0x106>
 8007fd2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007fd6:	d802      	bhi.n	8007fde <_free_r+0x14a>
 8007fd8:	0be2      	lsrs	r2, r4, #15
 8007fda:	3277      	adds	r2, #119	; 0x77
 8007fdc:	e7dd      	b.n	8007f9a <_free_r+0x106>
 8007fde:	f240 5154 	movw	r1, #1364	; 0x554
 8007fe2:	428a      	cmp	r2, r1
 8007fe4:	bf9a      	itte	ls
 8007fe6:	0ca2      	lsrls	r2, r4, #18
 8007fe8:	327c      	addls	r2, #124	; 0x7c
 8007fea:	227e      	movhi	r2, #126	; 0x7e
 8007fec:	e7d5      	b.n	8007f9a <_free_r+0x106>
 8007fee:	6889      	ldr	r1, [r1, #8]
 8007ff0:	428e      	cmp	r6, r1
 8007ff2:	d004      	beq.n	8007ffe <_free_r+0x16a>
 8007ff4:	684a      	ldr	r2, [r1, #4]
 8007ff6:	f022 0203 	bic.w	r2, r2, #3
 8007ffa:	42a2      	cmp	r2, r4
 8007ffc:	d8f7      	bhi.n	8007fee <_free_r+0x15a>
 8007ffe:	68ce      	ldr	r6, [r1, #12]
 8008000:	e7d9      	b.n	8007fb6 <_free_r+0x122>
 8008002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008004:	20000454 	.word	0x20000454
 8008008:	20000860 	.word	0x20000860
 800800c:	20000a40 	.word	0x20000a40
 8008010:	2000045c 	.word	0x2000045c

08008014 <_fwalk_reent>:
 8008014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008018:	4606      	mov	r6, r0
 800801a:	4688      	mov	r8, r1
 800801c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8008020:	2700      	movs	r7, #0
 8008022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008026:	f1b9 0901 	subs.w	r9, r9, #1
 800802a:	d505      	bpl.n	8008038 <_fwalk_reent+0x24>
 800802c:	6824      	ldr	r4, [r4, #0]
 800802e:	2c00      	cmp	r4, #0
 8008030:	d1f7      	bne.n	8008022 <_fwalk_reent+0xe>
 8008032:	4638      	mov	r0, r7
 8008034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008038:	89ab      	ldrh	r3, [r5, #12]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d907      	bls.n	800804e <_fwalk_reent+0x3a>
 800803e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008042:	3301      	adds	r3, #1
 8008044:	d003      	beq.n	800804e <_fwalk_reent+0x3a>
 8008046:	4629      	mov	r1, r5
 8008048:	4630      	mov	r0, r6
 800804a:	47c0      	blx	r8
 800804c:	4307      	orrs	r7, r0
 800804e:	3568      	adds	r5, #104	; 0x68
 8008050:	e7e9      	b.n	8008026 <_fwalk_reent+0x12>
	...

08008054 <_localeconv_r>:
 8008054:	4800      	ldr	r0, [pc, #0]	; (8008058 <_localeconv_r+0x4>)
 8008056:	4770      	bx	lr
 8008058:	20000954 	.word	0x20000954

0800805c <__retarget_lock_init_recursive>:
 800805c:	4770      	bx	lr

0800805e <__retarget_lock_close_recursive>:
 800805e:	4770      	bx	lr

08008060 <__retarget_lock_acquire_recursive>:
 8008060:	4770      	bx	lr

08008062 <__retarget_lock_release_recursive>:
 8008062:	4770      	bx	lr

08008064 <__swhatbuf_r>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	460e      	mov	r6, r1
 8008068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806c:	2900      	cmp	r1, #0
 800806e:	b096      	sub	sp, #88	; 0x58
 8008070:	4614      	mov	r4, r2
 8008072:	461d      	mov	r5, r3
 8008074:	da09      	bge.n	800808a <__swhatbuf_r+0x26>
 8008076:	89b3      	ldrh	r3, [r6, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800807e:	602a      	str	r2, [r5, #0]
 8008080:	d116      	bne.n	80080b0 <__swhatbuf_r+0x4c>
 8008082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	e015      	b.n	80080b6 <__swhatbuf_r+0x52>
 800808a:	466a      	mov	r2, sp
 800808c:	f001 fd0c 	bl	8009aa8 <_fstat_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	dbf0      	blt.n	8008076 <__swhatbuf_r+0x12>
 8008094:	9a01      	ldr	r2, [sp, #4]
 8008096:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800809a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800809e:	425a      	negs	r2, r3
 80080a0:	415a      	adcs	r2, r3
 80080a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a6:	602a      	str	r2, [r5, #0]
 80080a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	e002      	b.n	80080b6 <__swhatbuf_r+0x52>
 80080b0:	2340      	movs	r3, #64	; 0x40
 80080b2:	6023      	str	r3, [r4, #0]
 80080b4:	4610      	mov	r0, r2
 80080b6:	b016      	add	sp, #88	; 0x58
 80080b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080080bc <__smakebuf_r>:
 80080bc:	898b      	ldrh	r3, [r1, #12]
 80080be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080c0:	079d      	lsls	r5, r3, #30
 80080c2:	4606      	mov	r6, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	d507      	bpl.n	80080d8 <__smakebuf_r+0x1c>
 80080c8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	2301      	movs	r3, #1
 80080d2:	6163      	str	r3, [r4, #20]
 80080d4:	b002      	add	sp, #8
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	ab01      	add	r3, sp, #4
 80080da:	466a      	mov	r2, sp
 80080dc:	f7ff ffc2 	bl	8008064 <__swhatbuf_r>
 80080e0:	9900      	ldr	r1, [sp, #0]
 80080e2:	4605      	mov	r5, r0
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 f829 	bl	800813c <_malloc_r>
 80080ea:	b948      	cbnz	r0, 8008100 <__smakebuf_r+0x44>
 80080ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d4ef      	bmi.n	80080d4 <__smakebuf_r+0x18>
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	f043 0302 	orr.w	r3, r3, #2
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	e7e3      	b.n	80080c8 <__smakebuf_r+0xc>
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <__smakebuf_r+0x7c>)
 8008102:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	6020      	str	r0, [r4, #0]
 8008108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	6163      	str	r3, [r4, #20]
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	6120      	str	r0, [r4, #16]
 8008116:	b15b      	cbz	r3, 8008130 <__smakebuf_r+0x74>
 8008118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800811c:	4630      	mov	r0, r6
 800811e:	f001 fe1f 	bl	8009d60 <_isatty_r>
 8008122:	b128      	cbz	r0, 8008130 <__smakebuf_r+0x74>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f023 0303 	bic.w	r3, r3, #3
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	89a0      	ldrh	r0, [r4, #12]
 8008132:	4305      	orrs	r5, r0
 8008134:	81a5      	strh	r5, [r4, #12]
 8008136:	e7cd      	b.n	80080d4 <__smakebuf_r+0x18>
 8008138:	08007d39 	.word	0x08007d39

0800813c <_malloc_r>:
 800813c:	f101 030b 	add.w	r3, r1, #11
 8008140:	2b16      	cmp	r3, #22
 8008142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008146:	4605      	mov	r5, r0
 8008148:	d906      	bls.n	8008158 <_malloc_r+0x1c>
 800814a:	f033 0707 	bics.w	r7, r3, #7
 800814e:	d504      	bpl.n	800815a <_malloc_r+0x1e>
 8008150:	230c      	movs	r3, #12
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	2400      	movs	r4, #0
 8008156:	e1ae      	b.n	80084b6 <_malloc_r+0x37a>
 8008158:	2710      	movs	r7, #16
 800815a:	42b9      	cmp	r1, r7
 800815c:	d8f8      	bhi.n	8008150 <_malloc_r+0x14>
 800815e:	4628      	mov	r0, r5
 8008160:	f000 fa3c 	bl	80085dc <__malloc_lock>
 8008164:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8008168:	4ec3      	ldr	r6, [pc, #780]	; (8008478 <_malloc_r+0x33c>)
 800816a:	d238      	bcs.n	80081de <_malloc_r+0xa2>
 800816c:	f107 0208 	add.w	r2, r7, #8
 8008170:	4432      	add	r2, r6
 8008172:	f1a2 0108 	sub.w	r1, r2, #8
 8008176:	6854      	ldr	r4, [r2, #4]
 8008178:	428c      	cmp	r4, r1
 800817a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800817e:	d102      	bne.n	8008186 <_malloc_r+0x4a>
 8008180:	68d4      	ldr	r4, [r2, #12]
 8008182:	42a2      	cmp	r2, r4
 8008184:	d010      	beq.n	80081a8 <_malloc_r+0x6c>
 8008186:	6863      	ldr	r3, [r4, #4]
 8008188:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800818c:	f023 0303 	bic.w	r3, r3, #3
 8008190:	60ca      	str	r2, [r1, #12]
 8008192:	4423      	add	r3, r4
 8008194:	6091      	str	r1, [r2, #8]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	f042 0201 	orr.w	r2, r2, #1
 800819c:	605a      	str	r2, [r3, #4]
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 fa22 	bl	80085e8 <__malloc_unlock>
 80081a4:	3408      	adds	r4, #8
 80081a6:	e186      	b.n	80084b6 <_malloc_r+0x37a>
 80081a8:	3302      	adds	r3, #2
 80081aa:	4ab4      	ldr	r2, [pc, #720]	; (800847c <_malloc_r+0x340>)
 80081ac:	6934      	ldr	r4, [r6, #16]
 80081ae:	4294      	cmp	r4, r2
 80081b0:	4611      	mov	r1, r2
 80081b2:	d077      	beq.n	80082a4 <_malloc_r+0x168>
 80081b4:	6860      	ldr	r0, [r4, #4]
 80081b6:	f020 0c03 	bic.w	ip, r0, #3
 80081ba:	ebac 0007 	sub.w	r0, ip, r7
 80081be:	280f      	cmp	r0, #15
 80081c0:	dd48      	ble.n	8008254 <_malloc_r+0x118>
 80081c2:	19e1      	adds	r1, r4, r7
 80081c4:	f040 0301 	orr.w	r3, r0, #1
 80081c8:	f047 0701 	orr.w	r7, r7, #1
 80081cc:	6067      	str	r7, [r4, #4]
 80081ce:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80081d2:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80081d6:	604b      	str	r3, [r1, #4]
 80081d8:	f844 000c 	str.w	r0, [r4, ip]
 80081dc:	e7df      	b.n	800819e <_malloc_r+0x62>
 80081de:	0a7b      	lsrs	r3, r7, #9
 80081e0:	d02a      	beq.n	8008238 <_malloc_r+0xfc>
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d812      	bhi.n	800820c <_malloc_r+0xd0>
 80081e6:	09bb      	lsrs	r3, r7, #6
 80081e8:	3338      	adds	r3, #56	; 0x38
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80081f0:	f1a2 0c08 	sub.w	ip, r2, #8
 80081f4:	6854      	ldr	r4, [r2, #4]
 80081f6:	4564      	cmp	r4, ip
 80081f8:	d006      	beq.n	8008208 <_malloc_r+0xcc>
 80081fa:	6862      	ldr	r2, [r4, #4]
 80081fc:	f022 0203 	bic.w	r2, r2, #3
 8008200:	1bd0      	subs	r0, r2, r7
 8008202:	280f      	cmp	r0, #15
 8008204:	dd1c      	ble.n	8008240 <_malloc_r+0x104>
 8008206:	3b01      	subs	r3, #1
 8008208:	3301      	adds	r3, #1
 800820a:	e7ce      	b.n	80081aa <_malloc_r+0x6e>
 800820c:	2b14      	cmp	r3, #20
 800820e:	d801      	bhi.n	8008214 <_malloc_r+0xd8>
 8008210:	335b      	adds	r3, #91	; 0x5b
 8008212:	e7ea      	b.n	80081ea <_malloc_r+0xae>
 8008214:	2b54      	cmp	r3, #84	; 0x54
 8008216:	d802      	bhi.n	800821e <_malloc_r+0xe2>
 8008218:	0b3b      	lsrs	r3, r7, #12
 800821a:	336e      	adds	r3, #110	; 0x6e
 800821c:	e7e5      	b.n	80081ea <_malloc_r+0xae>
 800821e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008222:	d802      	bhi.n	800822a <_malloc_r+0xee>
 8008224:	0bfb      	lsrs	r3, r7, #15
 8008226:	3377      	adds	r3, #119	; 0x77
 8008228:	e7df      	b.n	80081ea <_malloc_r+0xae>
 800822a:	f240 5254 	movw	r2, #1364	; 0x554
 800822e:	4293      	cmp	r3, r2
 8008230:	d804      	bhi.n	800823c <_malloc_r+0x100>
 8008232:	0cbb      	lsrs	r3, r7, #18
 8008234:	337c      	adds	r3, #124	; 0x7c
 8008236:	e7d8      	b.n	80081ea <_malloc_r+0xae>
 8008238:	233f      	movs	r3, #63	; 0x3f
 800823a:	e7d6      	b.n	80081ea <_malloc_r+0xae>
 800823c:	237e      	movs	r3, #126	; 0x7e
 800823e:	e7d4      	b.n	80081ea <_malloc_r+0xae>
 8008240:	2800      	cmp	r0, #0
 8008242:	68e1      	ldr	r1, [r4, #12]
 8008244:	db04      	blt.n	8008250 <_malloc_r+0x114>
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	60d9      	str	r1, [r3, #12]
 800824a:	608b      	str	r3, [r1, #8]
 800824c:	18a3      	adds	r3, r4, r2
 800824e:	e7a2      	b.n	8008196 <_malloc_r+0x5a>
 8008250:	460c      	mov	r4, r1
 8008252:	e7d0      	b.n	80081f6 <_malloc_r+0xba>
 8008254:	2800      	cmp	r0, #0
 8008256:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800825a:	db07      	blt.n	800826c <_malloc_r+0x130>
 800825c:	44a4      	add	ip, r4
 800825e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008262:	f043 0301 	orr.w	r3, r3, #1
 8008266:	f8cc 3004 	str.w	r3, [ip, #4]
 800826a:	e798      	b.n	800819e <_malloc_r+0x62>
 800826c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8008270:	6870      	ldr	r0, [r6, #4]
 8008272:	f080 809e 	bcs.w	80083b2 <_malloc_r+0x276>
 8008276:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800827a:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800827e:	f04f 0c01 	mov.w	ip, #1
 8008282:	3201      	adds	r2, #1
 8008284:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008288:	ea4c 0000 	orr.w	r0, ip, r0
 800828c:	6070      	str	r0, [r6, #4]
 800828e:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8008292:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8008296:	3808      	subs	r0, #8
 8008298:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800829c:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80082a0:	f8cc 400c 	str.w	r4, [ip, #12]
 80082a4:	2001      	movs	r0, #1
 80082a6:	109a      	asrs	r2, r3, #2
 80082a8:	fa00 f202 	lsl.w	r2, r0, r2
 80082ac:	6870      	ldr	r0, [r6, #4]
 80082ae:	4290      	cmp	r0, r2
 80082b0:	d326      	bcc.n	8008300 <_malloc_r+0x1c4>
 80082b2:	4210      	tst	r0, r2
 80082b4:	d106      	bne.n	80082c4 <_malloc_r+0x188>
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	0052      	lsls	r2, r2, #1
 80082bc:	4210      	tst	r0, r2
 80082be:	f103 0304 	add.w	r3, r3, #4
 80082c2:	d0fa      	beq.n	80082ba <_malloc_r+0x17e>
 80082c4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80082c8:	46c1      	mov	r9, r8
 80082ca:	469e      	mov	lr, r3
 80082cc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80082d0:	454c      	cmp	r4, r9
 80082d2:	f040 80b3 	bne.w	800843c <_malloc_r+0x300>
 80082d6:	f10e 0e01 	add.w	lr, lr, #1
 80082da:	f01e 0f03 	tst.w	lr, #3
 80082de:	f109 0908 	add.w	r9, r9, #8
 80082e2:	d1f3      	bne.n	80082cc <_malloc_r+0x190>
 80082e4:	0798      	lsls	r0, r3, #30
 80082e6:	f040 80ec 	bne.w	80084c2 <_malloc_r+0x386>
 80082ea:	6873      	ldr	r3, [r6, #4]
 80082ec:	ea23 0302 	bic.w	r3, r3, r2
 80082f0:	6073      	str	r3, [r6, #4]
 80082f2:	6870      	ldr	r0, [r6, #4]
 80082f4:	0052      	lsls	r2, r2, #1
 80082f6:	4290      	cmp	r0, r2
 80082f8:	d302      	bcc.n	8008300 <_malloc_r+0x1c4>
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	f040 80ee 	bne.w	80084dc <_malloc_r+0x3a0>
 8008300:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008304:	f8db 1004 	ldr.w	r1, [fp, #4]
 8008308:	f021 0903 	bic.w	r9, r1, #3
 800830c:	45b9      	cmp	r9, r7
 800830e:	d304      	bcc.n	800831a <_malloc_r+0x1de>
 8008310:	eba9 0207 	sub.w	r2, r9, r7
 8008314:	2a0f      	cmp	r2, #15
 8008316:	f300 8149 	bgt.w	80085ac <_malloc_r+0x470>
 800831a:	4a59      	ldr	r2, [pc, #356]	; (8008480 <_malloc_r+0x344>)
 800831c:	6811      	ldr	r1, [r2, #0]
 800831e:	3110      	adds	r1, #16
 8008320:	eb0b 0309 	add.w	r3, fp, r9
 8008324:	4439      	add	r1, r7
 8008326:	2008      	movs	r0, #8
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	9100      	str	r1, [sp, #0]
 800832c:	f000 fd30 	bl	8008d90 <sysconf>
 8008330:	4a54      	ldr	r2, [pc, #336]	; (8008484 <_malloc_r+0x348>)
 8008332:	e9dd 1300 	ldrd	r1, r3, [sp]
 8008336:	4680      	mov	r8, r0
 8008338:	6810      	ldr	r0, [r2, #0]
 800833a:	3001      	adds	r0, #1
 800833c:	bf1f      	itttt	ne
 800833e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8008342:	4441      	addne	r1, r8
 8008344:	f1c8 0000 	rsbne	r0, r8, #0
 8008348:	4001      	andne	r1, r0
 800834a:	4628      	mov	r0, r5
 800834c:	e9cd 1300 	strd	r1, r3, [sp]
 8008350:	f000 fcb8 	bl	8008cc4 <_sbrk_r>
 8008354:	1c42      	adds	r2, r0, #1
 8008356:	4604      	mov	r4, r0
 8008358:	f000 80fc 	beq.w	8008554 <_malloc_r+0x418>
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	9900      	ldr	r1, [sp, #0]
 8008360:	4a48      	ldr	r2, [pc, #288]	; (8008484 <_malloc_r+0x348>)
 8008362:	4283      	cmp	r3, r0
 8008364:	d902      	bls.n	800836c <_malloc_r+0x230>
 8008366:	45b3      	cmp	fp, r6
 8008368:	f040 80f4 	bne.w	8008554 <_malloc_r+0x418>
 800836c:	f8df a120 	ldr.w	sl, [pc, #288]	; 8008490 <_malloc_r+0x354>
 8008370:	f8da 0000 	ldr.w	r0, [sl]
 8008374:	42a3      	cmp	r3, r4
 8008376:	eb00 0e01 	add.w	lr, r0, r1
 800837a:	f8ca e000 	str.w	lr, [sl]
 800837e:	f108 3cff 	add.w	ip, r8, #4294967295
 8008382:	f040 80ad 	bne.w	80084e0 <_malloc_r+0x3a4>
 8008386:	ea13 0f0c 	tst.w	r3, ip
 800838a:	f040 80a9 	bne.w	80084e0 <_malloc_r+0x3a4>
 800838e:	68b3      	ldr	r3, [r6, #8]
 8008390:	4449      	add	r1, r9
 8008392:	f041 0101 	orr.w	r1, r1, #1
 8008396:	6059      	str	r1, [r3, #4]
 8008398:	4a3b      	ldr	r2, [pc, #236]	; (8008488 <_malloc_r+0x34c>)
 800839a:	f8da 3000 	ldr.w	r3, [sl]
 800839e:	6811      	ldr	r1, [r2, #0]
 80083a0:	428b      	cmp	r3, r1
 80083a2:	bf88      	it	hi
 80083a4:	6013      	strhi	r3, [r2, #0]
 80083a6:	4a39      	ldr	r2, [pc, #228]	; (800848c <_malloc_r+0x350>)
 80083a8:	6811      	ldr	r1, [r2, #0]
 80083aa:	428b      	cmp	r3, r1
 80083ac:	bf88      	it	hi
 80083ae:	6013      	strhi	r3, [r2, #0]
 80083b0:	e0d0      	b.n	8008554 <_malloc_r+0x418>
 80083b2:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80083b6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80083ba:	d218      	bcs.n	80083ee <_malloc_r+0x2b2>
 80083bc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80083c0:	3238      	adds	r2, #56	; 0x38
 80083c2:	f102 0e01 	add.w	lr, r2, #1
 80083c6:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80083ca:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80083ce:	45f0      	cmp	r8, lr
 80083d0:	d12b      	bne.n	800842a <_malloc_r+0x2ee>
 80083d2:	1092      	asrs	r2, r2, #2
 80083d4:	f04f 0c01 	mov.w	ip, #1
 80083d8:	fa0c f202 	lsl.w	r2, ip, r2
 80083dc:	4310      	orrs	r0, r2
 80083de:	6070      	str	r0, [r6, #4]
 80083e0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80083e4:	f8c8 4008 	str.w	r4, [r8, #8]
 80083e8:	f8ce 400c 	str.w	r4, [lr, #12]
 80083ec:	e75a      	b.n	80082a4 <_malloc_r+0x168>
 80083ee:	2a14      	cmp	r2, #20
 80083f0:	d801      	bhi.n	80083f6 <_malloc_r+0x2ba>
 80083f2:	325b      	adds	r2, #91	; 0x5b
 80083f4:	e7e5      	b.n	80083c2 <_malloc_r+0x286>
 80083f6:	2a54      	cmp	r2, #84	; 0x54
 80083f8:	d803      	bhi.n	8008402 <_malloc_r+0x2c6>
 80083fa:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80083fe:	326e      	adds	r2, #110	; 0x6e
 8008400:	e7df      	b.n	80083c2 <_malloc_r+0x286>
 8008402:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008406:	d803      	bhi.n	8008410 <_malloc_r+0x2d4>
 8008408:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800840c:	3277      	adds	r2, #119	; 0x77
 800840e:	e7d8      	b.n	80083c2 <_malloc_r+0x286>
 8008410:	f240 5e54 	movw	lr, #1364	; 0x554
 8008414:	4572      	cmp	r2, lr
 8008416:	bf9a      	itte	ls
 8008418:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800841c:	327c      	addls	r2, #124	; 0x7c
 800841e:	227e      	movhi	r2, #126	; 0x7e
 8008420:	e7cf      	b.n	80083c2 <_malloc_r+0x286>
 8008422:	f8de e008 	ldr.w	lr, [lr, #8]
 8008426:	45f0      	cmp	r8, lr
 8008428:	d005      	beq.n	8008436 <_malloc_r+0x2fa>
 800842a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800842e:	f022 0203 	bic.w	r2, r2, #3
 8008432:	4562      	cmp	r2, ip
 8008434:	d8f5      	bhi.n	8008422 <_malloc_r+0x2e6>
 8008436:	f8de 800c 	ldr.w	r8, [lr, #12]
 800843a:	e7d1      	b.n	80083e0 <_malloc_r+0x2a4>
 800843c:	6860      	ldr	r0, [r4, #4]
 800843e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008442:	f020 0003 	bic.w	r0, r0, #3
 8008446:	eba0 0a07 	sub.w	sl, r0, r7
 800844a:	f1ba 0f0f 	cmp.w	sl, #15
 800844e:	dd21      	ble.n	8008494 <_malloc_r+0x358>
 8008450:	68a3      	ldr	r3, [r4, #8]
 8008452:	19e2      	adds	r2, r4, r7
 8008454:	f047 0701 	orr.w	r7, r7, #1
 8008458:	6067      	str	r7, [r4, #4]
 800845a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800845e:	f8cc 3008 	str.w	r3, [ip, #8]
 8008462:	f04a 0301 	orr.w	r3, sl, #1
 8008466:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800846a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800846e:	6053      	str	r3, [r2, #4]
 8008470:	f844 a000 	str.w	sl, [r4, r0]
 8008474:	e693      	b.n	800819e <_malloc_r+0x62>
 8008476:	bf00      	nop
 8008478:	20000454 	.word	0x20000454
 800847c:	2000045c 	.word	0x2000045c
 8008480:	20000a40 	.word	0x20000a40
 8008484:	2000085c 	.word	0x2000085c
 8008488:	20000a38 	.word	0x20000a38
 800848c:	20000a3c 	.word	0x20000a3c
 8008490:	20000a10 	.word	0x20000a10
 8008494:	f1ba 0f00 	cmp.w	sl, #0
 8008498:	db11      	blt.n	80084be <_malloc_r+0x382>
 800849a:	4420      	add	r0, r4
 800849c:	6843      	ldr	r3, [r0, #4]
 800849e:	f043 0301 	orr.w	r3, r3, #1
 80084a2:	6043      	str	r3, [r0, #4]
 80084a4:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80084a8:	4628      	mov	r0, r5
 80084aa:	f8c3 c00c 	str.w	ip, [r3, #12]
 80084ae:	f8cc 3008 	str.w	r3, [ip, #8]
 80084b2:	f000 f899 	bl	80085e8 <__malloc_unlock>
 80084b6:	4620      	mov	r0, r4
 80084b8:	b003      	add	sp, #12
 80084ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084be:	4664      	mov	r4, ip
 80084c0:	e706      	b.n	80082d0 <_malloc_r+0x194>
 80084c2:	f858 0908 	ldr.w	r0, [r8], #-8
 80084c6:	4540      	cmp	r0, r8
 80084c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80084cc:	f43f af0a 	beq.w	80082e4 <_malloc_r+0x1a8>
 80084d0:	e70f      	b.n	80082f2 <_malloc_r+0x1b6>
 80084d2:	3304      	adds	r3, #4
 80084d4:	0052      	lsls	r2, r2, #1
 80084d6:	4210      	tst	r0, r2
 80084d8:	d0fb      	beq.n	80084d2 <_malloc_r+0x396>
 80084da:	e6f3      	b.n	80082c4 <_malloc_r+0x188>
 80084dc:	4673      	mov	r3, lr
 80084de:	e7fa      	b.n	80084d6 <_malloc_r+0x39a>
 80084e0:	6810      	ldr	r0, [r2, #0]
 80084e2:	3001      	adds	r0, #1
 80084e4:	bf1b      	ittet	ne
 80084e6:	1ae3      	subne	r3, r4, r3
 80084e8:	4473      	addne	r3, lr
 80084ea:	6014      	streq	r4, [r2, #0]
 80084ec:	f8ca 3000 	strne.w	r3, [sl]
 80084f0:	f014 0307 	ands.w	r3, r4, #7
 80084f4:	bf1a      	itte	ne
 80084f6:	f1c3 0008 	rsbne	r0, r3, #8
 80084fa:	1824      	addne	r4, r4, r0
 80084fc:	4618      	moveq	r0, r3
 80084fe:	1862      	adds	r2, r4, r1
 8008500:	ea02 010c 	and.w	r1, r2, ip
 8008504:	4480      	add	r8, r0
 8008506:	eba8 0801 	sub.w	r8, r8, r1
 800850a:	ea08 080c 	and.w	r8, r8, ip
 800850e:	4641      	mov	r1, r8
 8008510:	4628      	mov	r0, r5
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	9200      	str	r2, [sp, #0]
 8008516:	f000 fbd5 	bl	8008cc4 <_sbrk_r>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008520:	d105      	bne.n	800852e <_malloc_r+0x3f2>
 8008522:	b32b      	cbz	r3, 8008570 <_malloc_r+0x434>
 8008524:	f1a3 0008 	sub.w	r0, r3, #8
 8008528:	4410      	add	r0, r2
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	f8da 2000 	ldr.w	r2, [sl]
 8008532:	60b4      	str	r4, [r6, #8]
 8008534:	1b00      	subs	r0, r0, r4
 8008536:	4440      	add	r0, r8
 8008538:	4442      	add	r2, r8
 800853a:	f040 0001 	orr.w	r0, r0, #1
 800853e:	45b3      	cmp	fp, r6
 8008540:	f8ca 2000 	str.w	r2, [sl]
 8008544:	6060      	str	r0, [r4, #4]
 8008546:	f43f af27 	beq.w	8008398 <_malloc_r+0x25c>
 800854a:	f1b9 0f0f 	cmp.w	r9, #15
 800854e:	d812      	bhi.n	8008576 <_malloc_r+0x43a>
 8008550:	2301      	movs	r3, #1
 8008552:	6063      	str	r3, [r4, #4]
 8008554:	68b3      	ldr	r3, [r6, #8]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f023 0303 	bic.w	r3, r3, #3
 800855c:	42bb      	cmp	r3, r7
 800855e:	eba3 0207 	sub.w	r2, r3, r7
 8008562:	d301      	bcc.n	8008568 <_malloc_r+0x42c>
 8008564:	2a0f      	cmp	r2, #15
 8008566:	dc21      	bgt.n	80085ac <_malloc_r+0x470>
 8008568:	4628      	mov	r0, r5
 800856a:	f000 f83d 	bl	80085e8 <__malloc_unlock>
 800856e:	e5f1      	b.n	8008154 <_malloc_r+0x18>
 8008570:	4610      	mov	r0, r2
 8008572:	4698      	mov	r8, r3
 8008574:	e7db      	b.n	800852e <_malloc_r+0x3f2>
 8008576:	f8db 3004 	ldr.w	r3, [fp, #4]
 800857a:	f1a9 090c 	sub.w	r9, r9, #12
 800857e:	f029 0907 	bic.w	r9, r9, #7
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	ea43 0309 	orr.w	r3, r3, r9
 800858a:	f8cb 3004 	str.w	r3, [fp, #4]
 800858e:	2205      	movs	r2, #5
 8008590:	eb0b 0309 	add.w	r3, fp, r9
 8008594:	f1b9 0f0f 	cmp.w	r9, #15
 8008598:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800859c:	f67f aefc 	bls.w	8008398 <_malloc_r+0x25c>
 80085a0:	f10b 0108 	add.w	r1, fp, #8
 80085a4:	4628      	mov	r0, r5
 80085a6:	f7ff fc75 	bl	8007e94 <_free_r>
 80085aa:	e6f5      	b.n	8008398 <_malloc_r+0x25c>
 80085ac:	68b4      	ldr	r4, [r6, #8]
 80085ae:	f047 0301 	orr.w	r3, r7, #1
 80085b2:	4427      	add	r7, r4
 80085b4:	f042 0201 	orr.w	r2, r2, #1
 80085b8:	6063      	str	r3, [r4, #4]
 80085ba:	60b7      	str	r7, [r6, #8]
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	e5ee      	b.n	800819e <_malloc_r+0x62>

080085c0 <memcpy>:
 80085c0:	440a      	add	r2, r1
 80085c2:	4291      	cmp	r1, r2
 80085c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085c8:	d100      	bne.n	80085cc <memcpy+0xc>
 80085ca:	4770      	bx	lr
 80085cc:	b510      	push	{r4, lr}
 80085ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d6:	4291      	cmp	r1, r2
 80085d8:	d1f9      	bne.n	80085ce <memcpy+0xe>
 80085da:	bd10      	pop	{r4, pc}

080085dc <__malloc_lock>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__malloc_lock+0x8>)
 80085de:	f7ff bd3f 	b.w	8008060 <__retarget_lock_acquire_recursive>
 80085e2:	bf00      	nop
 80085e4:	20002da8 	.word	0x20002da8

080085e8 <__malloc_unlock>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__malloc_unlock+0x8>)
 80085ea:	f7ff bd3a 	b.w	8008062 <__retarget_lock_release_recursive>
 80085ee:	bf00      	nop
 80085f0:	20002da8 	.word	0x20002da8

080085f4 <_Balloc>:
 80085f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80085f6:	b570      	push	{r4, r5, r6, lr}
 80085f8:	4605      	mov	r5, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	b17b      	cbz	r3, 800861e <_Balloc+0x2a>
 80085fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008600:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008604:	b9a0      	cbnz	r0, 8008630 <_Balloc+0x3c>
 8008606:	2101      	movs	r1, #1
 8008608:	fa01 f604 	lsl.w	r6, r1, r4
 800860c:	1d72      	adds	r2, r6, #5
 800860e:	0092      	lsls	r2, r2, #2
 8008610:	4628      	mov	r0, r5
 8008612:	f001 f935 	bl	8009880 <_calloc_r>
 8008616:	b148      	cbz	r0, 800862c <_Balloc+0x38>
 8008618:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800861c:	e00b      	b.n	8008636 <_Balloc+0x42>
 800861e:	2221      	movs	r2, #33	; 0x21
 8008620:	2104      	movs	r1, #4
 8008622:	f001 f92d 	bl	8009880 <_calloc_r>
 8008626:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008628:	2800      	cmp	r0, #0
 800862a:	d1e8      	bne.n	80085fe <_Balloc+0xa>
 800862c:	2000      	movs	r0, #0
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	6802      	ldr	r2, [r0, #0]
 8008632:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008636:	2300      	movs	r3, #0
 8008638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800863c:	e7f7      	b.n	800862e <_Balloc+0x3a>

0800863e <_Bfree>:
 800863e:	b131      	cbz	r1, 800864e <_Bfree+0x10>
 8008640:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008642:	684a      	ldr	r2, [r1, #4]
 8008644:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008648:	6008      	str	r0, [r1, #0]
 800864a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800864e:	4770      	bx	lr

08008650 <__multadd>:
 8008650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008654:	690e      	ldr	r6, [r1, #16]
 8008656:	4607      	mov	r7, r0
 8008658:	4698      	mov	r8, r3
 800865a:	460c      	mov	r4, r1
 800865c:	f101 0014 	add.w	r0, r1, #20
 8008660:	2300      	movs	r3, #0
 8008662:	6805      	ldr	r5, [r0, #0]
 8008664:	b2a9      	uxth	r1, r5
 8008666:	fb02 8101 	mla	r1, r2, r1, r8
 800866a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800866e:	0c2d      	lsrs	r5, r5, #16
 8008670:	fb02 c505 	mla	r5, r2, r5, ip
 8008674:	b289      	uxth	r1, r1
 8008676:	3301      	adds	r3, #1
 8008678:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800867c:	429e      	cmp	r6, r3
 800867e:	f840 1b04 	str.w	r1, [r0], #4
 8008682:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008686:	dcec      	bgt.n	8008662 <__multadd+0x12>
 8008688:	f1b8 0f00 	cmp.w	r8, #0
 800868c:	d022      	beq.n	80086d4 <__multadd+0x84>
 800868e:	68a3      	ldr	r3, [r4, #8]
 8008690:	42b3      	cmp	r3, r6
 8008692:	dc19      	bgt.n	80086c8 <__multadd+0x78>
 8008694:	6861      	ldr	r1, [r4, #4]
 8008696:	4638      	mov	r0, r7
 8008698:	3101      	adds	r1, #1
 800869a:	f7ff ffab 	bl	80085f4 <_Balloc>
 800869e:	4605      	mov	r5, r0
 80086a0:	b928      	cbnz	r0, 80086ae <__multadd+0x5e>
 80086a2:	4602      	mov	r2, r0
 80086a4:	4b0d      	ldr	r3, [pc, #52]	; (80086dc <__multadd+0x8c>)
 80086a6:	480e      	ldr	r0, [pc, #56]	; (80086e0 <__multadd+0x90>)
 80086a8:	21b5      	movs	r1, #181	; 0xb5
 80086aa:	f001 f8cb 	bl	8009844 <__assert_func>
 80086ae:	6922      	ldr	r2, [r4, #16]
 80086b0:	3202      	adds	r2, #2
 80086b2:	f104 010c 	add.w	r1, r4, #12
 80086b6:	0092      	lsls	r2, r2, #2
 80086b8:	300c      	adds	r0, #12
 80086ba:	f7ff ff81 	bl	80085c0 <memcpy>
 80086be:	4621      	mov	r1, r4
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff ffbc 	bl	800863e <_Bfree>
 80086c6:	462c      	mov	r4, r5
 80086c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80086cc:	3601      	adds	r6, #1
 80086ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80086d2:	6126      	str	r6, [r4, #16]
 80086d4:	4620      	mov	r0, r4
 80086d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086da:	bf00      	nop
 80086dc:	0800a3d9 	.word	0x0800a3d9
 80086e0:	0800a449 	.word	0x0800a449

080086e4 <__hi0bits>:
 80086e4:	0c03      	lsrs	r3, r0, #16
 80086e6:	041b      	lsls	r3, r3, #16
 80086e8:	b9d3      	cbnz	r3, 8008720 <__hi0bits+0x3c>
 80086ea:	0400      	lsls	r0, r0, #16
 80086ec:	2310      	movs	r3, #16
 80086ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086f2:	bf04      	itt	eq
 80086f4:	0200      	lsleq	r0, r0, #8
 80086f6:	3308      	addeq	r3, #8
 80086f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086fc:	bf04      	itt	eq
 80086fe:	0100      	lsleq	r0, r0, #4
 8008700:	3304      	addeq	r3, #4
 8008702:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008706:	bf04      	itt	eq
 8008708:	0080      	lsleq	r0, r0, #2
 800870a:	3302      	addeq	r3, #2
 800870c:	2800      	cmp	r0, #0
 800870e:	db05      	blt.n	800871c <__hi0bits+0x38>
 8008710:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008714:	f103 0301 	add.w	r3, r3, #1
 8008718:	bf08      	it	eq
 800871a:	2320      	moveq	r3, #32
 800871c:	4618      	mov	r0, r3
 800871e:	4770      	bx	lr
 8008720:	2300      	movs	r3, #0
 8008722:	e7e4      	b.n	80086ee <__hi0bits+0xa>

08008724 <__lo0bits>:
 8008724:	6803      	ldr	r3, [r0, #0]
 8008726:	f013 0207 	ands.w	r2, r3, #7
 800872a:	4601      	mov	r1, r0
 800872c:	d00b      	beq.n	8008746 <__lo0bits+0x22>
 800872e:	07da      	lsls	r2, r3, #31
 8008730:	d424      	bmi.n	800877c <__lo0bits+0x58>
 8008732:	0798      	lsls	r0, r3, #30
 8008734:	bf49      	itett	mi
 8008736:	085b      	lsrmi	r3, r3, #1
 8008738:	089b      	lsrpl	r3, r3, #2
 800873a:	2001      	movmi	r0, #1
 800873c:	600b      	strmi	r3, [r1, #0]
 800873e:	bf5c      	itt	pl
 8008740:	600b      	strpl	r3, [r1, #0]
 8008742:	2002      	movpl	r0, #2
 8008744:	4770      	bx	lr
 8008746:	b298      	uxth	r0, r3
 8008748:	b9b0      	cbnz	r0, 8008778 <__lo0bits+0x54>
 800874a:	0c1b      	lsrs	r3, r3, #16
 800874c:	2010      	movs	r0, #16
 800874e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008752:	bf04      	itt	eq
 8008754:	0a1b      	lsreq	r3, r3, #8
 8008756:	3008      	addeq	r0, #8
 8008758:	071a      	lsls	r2, r3, #28
 800875a:	bf04      	itt	eq
 800875c:	091b      	lsreq	r3, r3, #4
 800875e:	3004      	addeq	r0, #4
 8008760:	079a      	lsls	r2, r3, #30
 8008762:	bf04      	itt	eq
 8008764:	089b      	lsreq	r3, r3, #2
 8008766:	3002      	addeq	r0, #2
 8008768:	07da      	lsls	r2, r3, #31
 800876a:	d403      	bmi.n	8008774 <__lo0bits+0x50>
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	f100 0001 	add.w	r0, r0, #1
 8008772:	d005      	beq.n	8008780 <__lo0bits+0x5c>
 8008774:	600b      	str	r3, [r1, #0]
 8008776:	4770      	bx	lr
 8008778:	4610      	mov	r0, r2
 800877a:	e7e8      	b.n	800874e <__lo0bits+0x2a>
 800877c:	2000      	movs	r0, #0
 800877e:	4770      	bx	lr
 8008780:	2020      	movs	r0, #32
 8008782:	4770      	bx	lr

08008784 <__i2b>:
 8008784:	b510      	push	{r4, lr}
 8008786:	460c      	mov	r4, r1
 8008788:	2101      	movs	r1, #1
 800878a:	f7ff ff33 	bl	80085f4 <_Balloc>
 800878e:	4602      	mov	r2, r0
 8008790:	b928      	cbnz	r0, 800879e <__i2b+0x1a>
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <__i2b+0x24>)
 8008794:	4805      	ldr	r0, [pc, #20]	; (80087ac <__i2b+0x28>)
 8008796:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800879a:	f001 f853 	bl	8009844 <__assert_func>
 800879e:	2301      	movs	r3, #1
 80087a0:	6144      	str	r4, [r0, #20]
 80087a2:	6103      	str	r3, [r0, #16]
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	bf00      	nop
 80087a8:	0800a3d9 	.word	0x0800a3d9
 80087ac:	0800a449 	.word	0x0800a449

080087b0 <__multiply>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	4614      	mov	r4, r2
 80087b6:	690a      	ldr	r2, [r1, #16]
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	bfb8      	it	lt
 80087be:	460b      	movlt	r3, r1
 80087c0:	460d      	mov	r5, r1
 80087c2:	bfbc      	itt	lt
 80087c4:	4625      	movlt	r5, r4
 80087c6:	461c      	movlt	r4, r3
 80087c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80087cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087d0:	68ab      	ldr	r3, [r5, #8]
 80087d2:	6869      	ldr	r1, [r5, #4]
 80087d4:	eb0a 0709 	add.w	r7, sl, r9
 80087d8:	42bb      	cmp	r3, r7
 80087da:	b085      	sub	sp, #20
 80087dc:	bfb8      	it	lt
 80087de:	3101      	addlt	r1, #1
 80087e0:	f7ff ff08 	bl	80085f4 <_Balloc>
 80087e4:	b930      	cbnz	r0, 80087f4 <__multiply+0x44>
 80087e6:	4602      	mov	r2, r0
 80087e8:	4b42      	ldr	r3, [pc, #264]	; (80088f4 <__multiply+0x144>)
 80087ea:	4843      	ldr	r0, [pc, #268]	; (80088f8 <__multiply+0x148>)
 80087ec:	f240 115d 	movw	r1, #349	; 0x15d
 80087f0:	f001 f828 	bl	8009844 <__assert_func>
 80087f4:	f100 0614 	add.w	r6, r0, #20
 80087f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80087fc:	4633      	mov	r3, r6
 80087fe:	2200      	movs	r2, #0
 8008800:	4543      	cmp	r3, r8
 8008802:	d31e      	bcc.n	8008842 <__multiply+0x92>
 8008804:	f105 0c14 	add.w	ip, r5, #20
 8008808:	f104 0314 	add.w	r3, r4, #20
 800880c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008810:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008814:	9202      	str	r2, [sp, #8]
 8008816:	ebac 0205 	sub.w	r2, ip, r5
 800881a:	3a15      	subs	r2, #21
 800881c:	f022 0203 	bic.w	r2, r2, #3
 8008820:	3204      	adds	r2, #4
 8008822:	f105 0115 	add.w	r1, r5, #21
 8008826:	458c      	cmp	ip, r1
 8008828:	bf38      	it	cc
 800882a:	2204      	movcc	r2, #4
 800882c:	9201      	str	r2, [sp, #4]
 800882e:	9a02      	ldr	r2, [sp, #8]
 8008830:	9303      	str	r3, [sp, #12]
 8008832:	429a      	cmp	r2, r3
 8008834:	d808      	bhi.n	8008848 <__multiply+0x98>
 8008836:	2f00      	cmp	r7, #0
 8008838:	dc55      	bgt.n	80088e6 <__multiply+0x136>
 800883a:	6107      	str	r7, [r0, #16]
 800883c:	b005      	add	sp, #20
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	f843 2b04 	str.w	r2, [r3], #4
 8008846:	e7db      	b.n	8008800 <__multiply+0x50>
 8008848:	f8b3 a000 	ldrh.w	sl, [r3]
 800884c:	f1ba 0f00 	cmp.w	sl, #0
 8008850:	d020      	beq.n	8008894 <__multiply+0xe4>
 8008852:	f105 0e14 	add.w	lr, r5, #20
 8008856:	46b1      	mov	r9, r6
 8008858:	2200      	movs	r2, #0
 800885a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800885e:	f8d9 b000 	ldr.w	fp, [r9]
 8008862:	b2a1      	uxth	r1, r4
 8008864:	fa1f fb8b 	uxth.w	fp, fp
 8008868:	fb0a b101 	mla	r1, sl, r1, fp
 800886c:	4411      	add	r1, r2
 800886e:	f8d9 2000 	ldr.w	r2, [r9]
 8008872:	0c24      	lsrs	r4, r4, #16
 8008874:	0c12      	lsrs	r2, r2, #16
 8008876:	fb0a 2404 	mla	r4, sl, r4, r2
 800887a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800887e:	b289      	uxth	r1, r1
 8008880:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008884:	45f4      	cmp	ip, lr
 8008886:	f849 1b04 	str.w	r1, [r9], #4
 800888a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800888e:	d8e4      	bhi.n	800885a <__multiply+0xaa>
 8008890:	9901      	ldr	r1, [sp, #4]
 8008892:	5072      	str	r2, [r6, r1]
 8008894:	9a03      	ldr	r2, [sp, #12]
 8008896:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800889a:	3304      	adds	r3, #4
 800889c:	f1b9 0f00 	cmp.w	r9, #0
 80088a0:	d01f      	beq.n	80088e2 <__multiply+0x132>
 80088a2:	6834      	ldr	r4, [r6, #0]
 80088a4:	f105 0114 	add.w	r1, r5, #20
 80088a8:	46b6      	mov	lr, r6
 80088aa:	f04f 0a00 	mov.w	sl, #0
 80088ae:	880a      	ldrh	r2, [r1, #0]
 80088b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80088b4:	fb09 b202 	mla	r2, r9, r2, fp
 80088b8:	4492      	add	sl, r2
 80088ba:	b2a4      	uxth	r4, r4
 80088bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80088c0:	f84e 4b04 	str.w	r4, [lr], #4
 80088c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80088c8:	f8be 2000 	ldrh.w	r2, [lr]
 80088cc:	0c24      	lsrs	r4, r4, #16
 80088ce:	fb09 2404 	mla	r4, r9, r4, r2
 80088d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80088d6:	458c      	cmp	ip, r1
 80088d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088dc:	d8e7      	bhi.n	80088ae <__multiply+0xfe>
 80088de:	9a01      	ldr	r2, [sp, #4]
 80088e0:	50b4      	str	r4, [r6, r2]
 80088e2:	3604      	adds	r6, #4
 80088e4:	e7a3      	b.n	800882e <__multiply+0x7e>
 80088e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1a5      	bne.n	800883a <__multiply+0x8a>
 80088ee:	3f01      	subs	r7, #1
 80088f0:	e7a1      	b.n	8008836 <__multiply+0x86>
 80088f2:	bf00      	nop
 80088f4:	0800a3d9 	.word	0x0800a3d9
 80088f8:	0800a449 	.word	0x0800a449

080088fc <__pow5mult>:
 80088fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008900:	4615      	mov	r5, r2
 8008902:	f012 0203 	ands.w	r2, r2, #3
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	d007      	beq.n	800891c <__pow5mult+0x20>
 800890c:	4c1a      	ldr	r4, [pc, #104]	; (8008978 <__pow5mult+0x7c>)
 800890e:	3a01      	subs	r2, #1
 8008910:	2300      	movs	r3, #0
 8008912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008916:	f7ff fe9b 	bl	8008650 <__multadd>
 800891a:	4607      	mov	r7, r0
 800891c:	10ad      	asrs	r5, r5, #2
 800891e:	d027      	beq.n	8008970 <__pow5mult+0x74>
 8008920:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8008922:	b944      	cbnz	r4, 8008936 <__pow5mult+0x3a>
 8008924:	f240 2171 	movw	r1, #625	; 0x271
 8008928:	4630      	mov	r0, r6
 800892a:	f7ff ff2b 	bl	8008784 <__i2b>
 800892e:	2300      	movs	r3, #0
 8008930:	64b0      	str	r0, [r6, #72]	; 0x48
 8008932:	4604      	mov	r4, r0
 8008934:	6003      	str	r3, [r0, #0]
 8008936:	f04f 0900 	mov.w	r9, #0
 800893a:	07eb      	lsls	r3, r5, #31
 800893c:	d50a      	bpl.n	8008954 <__pow5mult+0x58>
 800893e:	4639      	mov	r1, r7
 8008940:	4622      	mov	r2, r4
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ff34 	bl	80087b0 <__multiply>
 8008948:	4639      	mov	r1, r7
 800894a:	4680      	mov	r8, r0
 800894c:	4630      	mov	r0, r6
 800894e:	f7ff fe76 	bl	800863e <_Bfree>
 8008952:	4647      	mov	r7, r8
 8008954:	106d      	asrs	r5, r5, #1
 8008956:	d00b      	beq.n	8008970 <__pow5mult+0x74>
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	b938      	cbnz	r0, 800896c <__pow5mult+0x70>
 800895c:	4622      	mov	r2, r4
 800895e:	4621      	mov	r1, r4
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff ff25 	bl	80087b0 <__multiply>
 8008966:	6020      	str	r0, [r4, #0]
 8008968:	f8c0 9000 	str.w	r9, [r0]
 800896c:	4604      	mov	r4, r0
 800896e:	e7e4      	b.n	800893a <__pow5mult+0x3e>
 8008970:	4638      	mov	r0, r7
 8008972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008976:	bf00      	nop
 8008978:	0800a5a0 	.word	0x0800a5a0

0800897c <__lshift>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	460c      	mov	r4, r1
 8008982:	6849      	ldr	r1, [r1, #4]
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800898a:	68a3      	ldr	r3, [r4, #8]
 800898c:	4607      	mov	r7, r0
 800898e:	4691      	mov	r9, r2
 8008990:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008994:	f108 0601 	add.w	r6, r8, #1
 8008998:	42b3      	cmp	r3, r6
 800899a:	db0b      	blt.n	80089b4 <__lshift+0x38>
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff fe29 	bl	80085f4 <_Balloc>
 80089a2:	4605      	mov	r5, r0
 80089a4:	b948      	cbnz	r0, 80089ba <__lshift+0x3e>
 80089a6:	4602      	mov	r2, r0
 80089a8:	4b28      	ldr	r3, [pc, #160]	; (8008a4c <__lshift+0xd0>)
 80089aa:	4829      	ldr	r0, [pc, #164]	; (8008a50 <__lshift+0xd4>)
 80089ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089b0:	f000 ff48 	bl	8009844 <__assert_func>
 80089b4:	3101      	adds	r1, #1
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	e7ee      	b.n	8008998 <__lshift+0x1c>
 80089ba:	2300      	movs	r3, #0
 80089bc:	f100 0114 	add.w	r1, r0, #20
 80089c0:	f100 0210 	add.w	r2, r0, #16
 80089c4:	4618      	mov	r0, r3
 80089c6:	4553      	cmp	r3, sl
 80089c8:	db33      	blt.n	8008a32 <__lshift+0xb6>
 80089ca:	6920      	ldr	r0, [r4, #16]
 80089cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d0:	f104 0314 	add.w	r3, r4, #20
 80089d4:	f019 091f 	ands.w	r9, r9, #31
 80089d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089e0:	d02b      	beq.n	8008a3a <__lshift+0xbe>
 80089e2:	f1c9 0e20 	rsb	lr, r9, #32
 80089e6:	468a      	mov	sl, r1
 80089e8:	2200      	movs	r2, #0
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	fa00 f009 	lsl.w	r0, r0, r9
 80089f0:	4302      	orrs	r2, r0
 80089f2:	f84a 2b04 	str.w	r2, [sl], #4
 80089f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fa:	459c      	cmp	ip, r3
 80089fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a00:	d8f3      	bhi.n	80089ea <__lshift+0x6e>
 8008a02:	ebac 0304 	sub.w	r3, ip, r4
 8008a06:	3b15      	subs	r3, #21
 8008a08:	f023 0303 	bic.w	r3, r3, #3
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	f104 0015 	add.w	r0, r4, #21
 8008a12:	4584      	cmp	ip, r0
 8008a14:	bf38      	it	cc
 8008a16:	2304      	movcc	r3, #4
 8008a18:	50ca      	str	r2, [r1, r3]
 8008a1a:	b10a      	cbz	r2, 8008a20 <__lshift+0xa4>
 8008a1c:	f108 0602 	add.w	r6, r8, #2
 8008a20:	3e01      	subs	r6, #1
 8008a22:	4638      	mov	r0, r7
 8008a24:	612e      	str	r6, [r5, #16]
 8008a26:	4621      	mov	r1, r4
 8008a28:	f7ff fe09 	bl	800863e <_Bfree>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a36:	3301      	adds	r3, #1
 8008a38:	e7c5      	b.n	80089c6 <__lshift+0x4a>
 8008a3a:	3904      	subs	r1, #4
 8008a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a44:	459c      	cmp	ip, r3
 8008a46:	d8f9      	bhi.n	8008a3c <__lshift+0xc0>
 8008a48:	e7ea      	b.n	8008a20 <__lshift+0xa4>
 8008a4a:	bf00      	nop
 8008a4c:	0800a3d9 	.word	0x0800a3d9
 8008a50:	0800a449 	.word	0x0800a449

08008a54 <__mcmp>:
 8008a54:	b530      	push	{r4, r5, lr}
 8008a56:	6902      	ldr	r2, [r0, #16]
 8008a58:	690c      	ldr	r4, [r1, #16]
 8008a5a:	1b12      	subs	r2, r2, r4
 8008a5c:	d10e      	bne.n	8008a7c <__mcmp+0x28>
 8008a5e:	f100 0314 	add.w	r3, r0, #20
 8008a62:	3114      	adds	r1, #20
 8008a64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a74:	42a5      	cmp	r5, r4
 8008a76:	d003      	beq.n	8008a80 <__mcmp+0x2c>
 8008a78:	d305      	bcc.n	8008a86 <__mcmp+0x32>
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	bd30      	pop	{r4, r5, pc}
 8008a80:	4283      	cmp	r3, r0
 8008a82:	d3f3      	bcc.n	8008a6c <__mcmp+0x18>
 8008a84:	e7fa      	b.n	8008a7c <__mcmp+0x28>
 8008a86:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8a:	e7f7      	b.n	8008a7c <__mcmp+0x28>

08008a8c <__mdiff>:
 8008a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	460c      	mov	r4, r1
 8008a92:	4606      	mov	r6, r0
 8008a94:	4611      	mov	r1, r2
 8008a96:	4620      	mov	r0, r4
 8008a98:	4617      	mov	r7, r2
 8008a9a:	f7ff ffdb 	bl	8008a54 <__mcmp>
 8008a9e:	1e05      	subs	r5, r0, #0
 8008aa0:	d110      	bne.n	8008ac4 <__mdiff+0x38>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7ff fda5 	bl	80085f4 <_Balloc>
 8008aaa:	b930      	cbnz	r0, 8008aba <__mdiff+0x2e>
 8008aac:	4b39      	ldr	r3, [pc, #228]	; (8008b94 <__mdiff+0x108>)
 8008aae:	4602      	mov	r2, r0
 8008ab0:	f240 2132 	movw	r1, #562	; 0x232
 8008ab4:	4838      	ldr	r0, [pc, #224]	; (8008b98 <__mdiff+0x10c>)
 8008ab6:	f000 fec5 	bl	8009844 <__assert_func>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac4:	bfa4      	itt	ge
 8008ac6:	463b      	movge	r3, r7
 8008ac8:	4627      	movge	r7, r4
 8008aca:	4630      	mov	r0, r6
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	bfa6      	itte	ge
 8008ad0:	461c      	movge	r4, r3
 8008ad2:	2500      	movge	r5, #0
 8008ad4:	2501      	movlt	r5, #1
 8008ad6:	f7ff fd8d 	bl	80085f4 <_Balloc>
 8008ada:	b920      	cbnz	r0, 8008ae6 <__mdiff+0x5a>
 8008adc:	4b2d      	ldr	r3, [pc, #180]	; (8008b94 <__mdiff+0x108>)
 8008ade:	4602      	mov	r2, r0
 8008ae0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ae4:	e7e6      	b.n	8008ab4 <__mdiff+0x28>
 8008ae6:	693e      	ldr	r6, [r7, #16]
 8008ae8:	60c5      	str	r5, [r0, #12]
 8008aea:	6925      	ldr	r5, [r4, #16]
 8008aec:	f107 0114 	add.w	r1, r7, #20
 8008af0:	f104 0914 	add.w	r9, r4, #20
 8008af4:	f100 0e14 	add.w	lr, r0, #20
 8008af8:	f107 0210 	add.w	r2, r7, #16
 8008afc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008b00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008b04:	46f2      	mov	sl, lr
 8008b06:	2700      	movs	r7, #0
 8008b08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b10:	fa1f f883 	uxth.w	r8, r3
 8008b14:	fa17 f78b 	uxtah	r7, r7, fp
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	eba7 0808 	sub.w	r8, r7, r8
 8008b1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b26:	fa1f f888 	uxth.w	r8, r8
 8008b2a:	141f      	asrs	r7, r3, #16
 8008b2c:	454d      	cmp	r5, r9
 8008b2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b32:	f84a 3b04 	str.w	r3, [sl], #4
 8008b36:	d8e7      	bhi.n	8008b08 <__mdiff+0x7c>
 8008b38:	1b2b      	subs	r3, r5, r4
 8008b3a:	3b15      	subs	r3, #21
 8008b3c:	f023 0303 	bic.w	r3, r3, #3
 8008b40:	3304      	adds	r3, #4
 8008b42:	3415      	adds	r4, #21
 8008b44:	42a5      	cmp	r5, r4
 8008b46:	bf38      	it	cc
 8008b48:	2304      	movcc	r3, #4
 8008b4a:	4419      	add	r1, r3
 8008b4c:	4473      	add	r3, lr
 8008b4e:	469e      	mov	lr, r3
 8008b50:	460d      	mov	r5, r1
 8008b52:	4565      	cmp	r5, ip
 8008b54:	d30e      	bcc.n	8008b74 <__mdiff+0xe8>
 8008b56:	f10c 0203 	add.w	r2, ip, #3
 8008b5a:	1a52      	subs	r2, r2, r1
 8008b5c:	f022 0203 	bic.w	r2, r2, #3
 8008b60:	3903      	subs	r1, #3
 8008b62:	458c      	cmp	ip, r1
 8008b64:	bf38      	it	cc
 8008b66:	2200      	movcc	r2, #0
 8008b68:	441a      	add	r2, r3
 8008b6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b6e:	b17b      	cbz	r3, 8008b90 <__mdiff+0x104>
 8008b70:	6106      	str	r6, [r0, #16]
 8008b72:	e7a5      	b.n	8008ac0 <__mdiff+0x34>
 8008b74:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b78:	fa17 f488 	uxtah	r4, r7, r8
 8008b7c:	1422      	asrs	r2, r4, #16
 8008b7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008b82:	b2a4      	uxth	r4, r4
 8008b84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008b88:	f84e 4b04 	str.w	r4, [lr], #4
 8008b8c:	1417      	asrs	r7, r2, #16
 8008b8e:	e7e0      	b.n	8008b52 <__mdiff+0xc6>
 8008b90:	3e01      	subs	r6, #1
 8008b92:	e7ea      	b.n	8008b6a <__mdiff+0xde>
 8008b94:	0800a3d9 	.word	0x0800a3d9
 8008b98:	0800a449 	.word	0x0800a449

08008b9c <__d2b>:
 8008b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	ec57 6b10 	vmov	r6, r7, d0
 8008ba8:	4690      	mov	r8, r2
 8008baa:	f7ff fd23 	bl	80085f4 <_Balloc>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	b930      	cbnz	r0, 8008bc0 <__d2b+0x24>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <__d2b+0xb0>)
 8008bb6:	4826      	ldr	r0, [pc, #152]	; (8008c50 <__d2b+0xb4>)
 8008bb8:	f240 310a 	movw	r1, #778	; 0x30a
 8008bbc:	f000 fe42 	bl	8009844 <__assert_func>
 8008bc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bc8:	bb35      	cbnz	r5, 8008c18 <__d2b+0x7c>
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	d028      	beq.n	8008c22 <__d2b+0x86>
 8008bd0:	4668      	mov	r0, sp
 8008bd2:	9600      	str	r6, [sp, #0]
 8008bd4:	f7ff fda6 	bl	8008724 <__lo0bits>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	b300      	cbz	r0, 8008c1e <__d2b+0x82>
 8008bdc:	9a01      	ldr	r2, [sp, #4]
 8008bde:	f1c0 0320 	rsb	r3, r0, #32
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	430b      	orrs	r3, r1
 8008be8:	40c2      	lsrs	r2, r0
 8008bea:	6163      	str	r3, [r4, #20]
 8008bec:	9201      	str	r2, [sp, #4]
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	61a3      	str	r3, [r4, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bf14      	ite	ne
 8008bf6:	2202      	movne	r2, #2
 8008bf8:	2201      	moveq	r2, #1
 8008bfa:	6122      	str	r2, [r4, #16]
 8008bfc:	b1d5      	cbz	r5, 8008c34 <__d2b+0x98>
 8008bfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c02:	4405      	add	r5, r0
 8008c04:	f8c9 5000 	str.w	r5, [r9]
 8008c08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c0c:	f8c8 0000 	str.w	r0, [r8]
 8008c10:	4620      	mov	r0, r4
 8008c12:	b003      	add	sp, #12
 8008c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c1c:	e7d5      	b.n	8008bca <__d2b+0x2e>
 8008c1e:	6161      	str	r1, [r4, #20]
 8008c20:	e7e5      	b.n	8008bee <__d2b+0x52>
 8008c22:	a801      	add	r0, sp, #4
 8008c24:	f7ff fd7e 	bl	8008724 <__lo0bits>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	6163      	str	r3, [r4, #20]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	6122      	str	r2, [r4, #16]
 8008c30:	3020      	adds	r0, #32
 8008c32:	e7e3      	b.n	8008bfc <__d2b+0x60>
 8008c34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c3c:	f8c9 0000 	str.w	r0, [r9]
 8008c40:	6918      	ldr	r0, [r3, #16]
 8008c42:	f7ff fd4f 	bl	80086e4 <__hi0bits>
 8008c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c4a:	e7df      	b.n	8008c0c <__d2b+0x70>
 8008c4c:	0800a3d9 	.word	0x0800a3d9
 8008c50:	0800a449 	.word	0x0800a449

08008c54 <frexp>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	2100      	movs	r1, #0
 8008c58:	ec55 4b10 	vmov	r4, r5, d0
 8008c5c:	6001      	str	r1, [r0, #0]
 8008c5e:	4916      	ldr	r1, [pc, #88]	; (8008cb8 <frexp+0x64>)
 8008c60:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008c64:	428a      	cmp	r2, r1
 8008c66:	4606      	mov	r6, r0
 8008c68:	462b      	mov	r3, r5
 8008c6a:	dc22      	bgt.n	8008cb2 <frexp+0x5e>
 8008c6c:	ee10 1a10 	vmov	r1, s0
 8008c70:	4311      	orrs	r1, r2
 8008c72:	d01e      	beq.n	8008cb2 <frexp+0x5e>
 8008c74:	4911      	ldr	r1, [pc, #68]	; (8008cbc <frexp+0x68>)
 8008c76:	4029      	ands	r1, r5
 8008c78:	b969      	cbnz	r1, 8008c96 <frexp+0x42>
 8008c7a:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <frexp+0x6c>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	ee10 0a10 	vmov	r0, s0
 8008c82:	4629      	mov	r1, r5
 8008c84:	f7f7 fcb8 	bl	80005f8 <__aeabi_dmul>
 8008c88:	460b      	mov	r3, r1
 8008c8a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008c8e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8008c92:	4604      	mov	r4, r0
 8008c94:	6031      	str	r1, [r6, #0]
 8008c96:	6831      	ldr	r1, [r6, #0]
 8008c98:	1512      	asrs	r2, r2, #20
 8008c9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c9e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8008ca2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ca6:	440a      	add	r2, r1
 8008ca8:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8008cac:	6032      	str	r2, [r6, #0]
 8008cae:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8008cb2:	ec45 4b10 	vmov	d0, r4, r5
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	7fefffff 	.word	0x7fefffff
 8008cbc:	7ff00000 	.word	0x7ff00000
 8008cc0:	43500000 	.word	0x43500000

08008cc4 <_sbrk_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d06      	ldr	r5, [pc, #24]	; (8008ce0 <_sbrk_r+0x1c>)
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	602b      	str	r3, [r5, #0]
 8008cd0:	f7f8 ff3a 	bl	8001b48 <_sbrk>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d102      	bne.n	8008cde <_sbrk_r+0x1a>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	b103      	cbz	r3, 8008cde <_sbrk_r+0x1a>
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	20002db0 	.word	0x20002db0

08008ce4 <__sread>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cec:	f001 f88c 	bl	8009e08 <_read_r>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	bfab      	itete	ge
 8008cf4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8008cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8008cf8:	181b      	addge	r3, r3, r0
 8008cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cfe:	bfac      	ite	ge
 8008d00:	6523      	strge	r3, [r4, #80]	; 0x50
 8008d02:	81a3      	strhlt	r3, [r4, #12]
 8008d04:	bd10      	pop	{r4, pc}

08008d06 <__swrite>:
 8008d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0a:	461f      	mov	r7, r3
 8008d0c:	898b      	ldrh	r3, [r1, #12]
 8008d0e:	05db      	lsls	r3, r3, #23
 8008d10:	4605      	mov	r5, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	4616      	mov	r6, r2
 8008d16:	d505      	bpl.n	8008d24 <__swrite+0x1e>
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f001 f834 	bl	8009d8c <_lseek_r>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	4632      	mov	r2, r6
 8008d32:	463b      	mov	r3, r7
 8008d34:	4628      	mov	r0, r5
 8008d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3a:	f000 bd31 	b.w	80097a0 <_write_r>

08008d3e <__sseek>:
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	460c      	mov	r4, r1
 8008d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d46:	f001 f821 	bl	8009d8c <_lseek_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	bf15      	itete	ne
 8008d50:	6520      	strne	r0, [r4, #80]	; 0x50
 8008d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d5a:	81a3      	strheq	r3, [r4, #12]
 8008d5c:	bf18      	it	ne
 8008d5e:	81a3      	strhne	r3, [r4, #12]
 8008d60:	bd10      	pop	{r4, pc}

08008d62 <__sclose>:
 8008d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d66:	f000 bdb9 	b.w	80098dc <_close_r>

08008d6a <strncpy>:
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	3901      	subs	r1, #1
 8008d6e:	4603      	mov	r3, r0
 8008d70:	b132      	cbz	r2, 8008d80 <strncpy+0x16>
 8008d72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d76:	f803 4b01 	strb.w	r4, [r3], #1
 8008d7a:	3a01      	subs	r2, #1
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	d1f7      	bne.n	8008d70 <strncpy+0x6>
 8008d80:	441a      	add	r2, r3
 8008d82:	2100      	movs	r1, #0
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d100      	bne.n	8008d8a <strncpy+0x20>
 8008d88:	bd10      	pop	{r4, pc}
 8008d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d8e:	e7f9      	b.n	8008d84 <strncpy+0x1a>

08008d90 <sysconf>:
 8008d90:	2808      	cmp	r0, #8
 8008d92:	b508      	push	{r3, lr}
 8008d94:	d006      	beq.n	8008da4 <sysconf+0x14>
 8008d96:	f7fc fd6f 	bl	8005878 <__errno>
 8008d9a:	2316      	movs	r3, #22
 8008d9c:	6003      	str	r3, [r0, #0]
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	bd08      	pop	{r3, pc}
 8008da4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008da8:	e7fb      	b.n	8008da2 <sysconf+0x12>

08008daa <__sprint_r>:
 8008daa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dae:	6893      	ldr	r3, [r2, #8]
 8008db0:	4680      	mov	r8, r0
 8008db2:	460f      	mov	r7, r1
 8008db4:	4614      	mov	r4, r2
 8008db6:	b91b      	cbnz	r3, 8008dc0 <__sprint_r+0x16>
 8008db8:	6053      	str	r3, [r2, #4]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008dc2:	049d      	lsls	r5, r3, #18
 8008dc4:	d520      	bpl.n	8008e08 <__sprint_r+0x5e>
 8008dc6:	6815      	ldr	r5, [r2, #0]
 8008dc8:	3508      	adds	r5, #8
 8008dca:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8008dce:	f04f 0900 	mov.w	r9, #0
 8008dd2:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8008dd6:	45ca      	cmp	sl, r9
 8008dd8:	dc0b      	bgt.n	8008df2 <__sprint_r+0x48>
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	f026 0003 	bic.w	r0, r6, #3
 8008de0:	1a18      	subs	r0, r3, r0
 8008de2:	60a0      	str	r0, [r4, #8]
 8008de4:	3508      	adds	r5, #8
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d1ef      	bne.n	8008dca <__sprint_r+0x20>
 8008dea:	2300      	movs	r3, #0
 8008dec:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8008df0:	e7e4      	b.n	8008dbc <__sprint_r+0x12>
 8008df2:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8008df6:	463a      	mov	r2, r7
 8008df8:	4640      	mov	r0, r8
 8008dfa:	f000 fe2a 	bl	8009a52 <_fputwc_r>
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	d0f3      	beq.n	8008dea <__sprint_r+0x40>
 8008e02:	f109 0901 	add.w	r9, r9, #1
 8008e06:	e7e6      	b.n	8008dd6 <__sprint_r+0x2c>
 8008e08:	f000 fe60 	bl	8009acc <__sfvwrite_r>
 8008e0c:	e7ed      	b.n	8008dea <__sprint_r+0x40>
	...

08008e10 <_vfiprintf_r>:
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	ed2d 8b02 	vpush	{d8}
 8008e18:	b0b9      	sub	sp, #228	; 0xe4
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	9201      	str	r2, [sp, #4]
 8008e1e:	461d      	mov	r5, r3
 8008e20:	461c      	mov	r4, r3
 8008e22:	4681      	mov	r9, r0
 8008e24:	b118      	cbz	r0, 8008e2e <_vfiprintf_r+0x1e>
 8008e26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008e28:	b90b      	cbnz	r3, 8008e2e <_vfiprintf_r+0x1e>
 8008e2a:	f7fe ffa3 	bl	8007d74 <__sinit>
 8008e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e30:	07d8      	lsls	r0, r3, #31
 8008e32:	d405      	bmi.n	8008e40 <_vfiprintf_r+0x30>
 8008e34:	89bb      	ldrh	r3, [r7, #12]
 8008e36:	0599      	lsls	r1, r3, #22
 8008e38:	d402      	bmi.n	8008e40 <_vfiprintf_r+0x30>
 8008e3a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008e3c:	f7ff f910 	bl	8008060 <__retarget_lock_acquire_recursive>
 8008e40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008e44:	049a      	lsls	r2, r3, #18
 8008e46:	d406      	bmi.n	8008e56 <_vfiprintf_r+0x46>
 8008e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e4c:	81bb      	strh	r3, [r7, #12]
 8008e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e54:	667b      	str	r3, [r7, #100]	; 0x64
 8008e56:	89bb      	ldrh	r3, [r7, #12]
 8008e58:	071e      	lsls	r6, r3, #28
 8008e5a:	d501      	bpl.n	8008e60 <_vfiprintf_r+0x50>
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	b9bb      	cbnz	r3, 8008e90 <_vfiprintf_r+0x80>
 8008e60:	4639      	mov	r1, r7
 8008e62:	4648      	mov	r0, r9
 8008e64:	f7fd ffc2 	bl	8006dec <__swsetup_r>
 8008e68:	b190      	cbz	r0, 8008e90 <_vfiprintf_r+0x80>
 8008e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e6c:	07d8      	lsls	r0, r3, #31
 8008e6e:	d508      	bpl.n	8008e82 <_vfiprintf_r+0x72>
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295
 8008e74:	9302      	str	r3, [sp, #8]
 8008e76:	9802      	ldr	r0, [sp, #8]
 8008e78:	b039      	add	sp, #228	; 0xe4
 8008e7a:	ecbd 8b02 	vpop	{d8}
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	89bb      	ldrh	r3, [r7, #12]
 8008e84:	0599      	lsls	r1, r3, #22
 8008e86:	d4f3      	bmi.n	8008e70 <_vfiprintf_r+0x60>
 8008e88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008e8a:	f7ff f8ea 	bl	8008062 <__retarget_lock_release_recursive>
 8008e8e:	e7ef      	b.n	8008e70 <_vfiprintf_r+0x60>
 8008e90:	89bb      	ldrh	r3, [r7, #12]
 8008e92:	f003 021a 	and.w	r2, r3, #26
 8008e96:	2a0a      	cmp	r2, #10
 8008e98:	d113      	bne.n	8008ec2 <_vfiprintf_r+0xb2>
 8008e9a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	db0f      	blt.n	8008ec2 <_vfiprintf_r+0xb2>
 8008ea2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ea4:	07d2      	lsls	r2, r2, #31
 8008ea6:	d404      	bmi.n	8008eb2 <_vfiprintf_r+0xa2>
 8008ea8:	059e      	lsls	r6, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_vfiprintf_r+0xa2>
 8008eac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008eae:	f7ff f8d8 	bl	8008062 <__retarget_lock_release_recursive>
 8008eb2:	9a01      	ldr	r2, [sp, #4]
 8008eb4:	462b      	mov	r3, r5
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	4648      	mov	r0, r9
 8008eba:	f000 fc31 	bl	8009720 <__sbprintf>
 8008ebe:	9002      	str	r0, [sp, #8]
 8008ec0:	e7d9      	b.n	8008e76 <_vfiprintf_r+0x66>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8008ec8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008ecc:	ae0f      	add	r6, sp, #60	; 0x3c
 8008ece:	ee08 3a10 	vmov	s16, r3
 8008ed2:	960c      	str	r6, [sp, #48]	; 0x30
 8008ed4:	9307      	str	r3, [sp, #28]
 8008ed6:	9302      	str	r3, [sp, #8]
 8008ed8:	9b01      	ldr	r3, [sp, #4]
 8008eda:	461d      	mov	r5, r3
 8008edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee0:	b10a      	cbz	r2, 8008ee6 <_vfiprintf_r+0xd6>
 8008ee2:	2a25      	cmp	r2, #37	; 0x25
 8008ee4:	d1f9      	bne.n	8008eda <_vfiprintf_r+0xca>
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	ebb5 0803 	subs.w	r8, r5, r3
 8008eec:	d00d      	beq.n	8008f0a <_vfiprintf_r+0xfa>
 8008eee:	e9c6 3800 	strd	r3, r8, [r6]
 8008ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef4:	4443      	add	r3, r8
 8008ef6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008efa:	3301      	adds	r3, #1
 8008efc:	2b07      	cmp	r3, #7
 8008efe:	930d      	str	r3, [sp, #52]	; 0x34
 8008f00:	dc75      	bgt.n	8008fee <_vfiprintf_r+0x1de>
 8008f02:	3608      	adds	r6, #8
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	4443      	add	r3, r8
 8008f08:	9302      	str	r3, [sp, #8]
 8008f0a:	782b      	ldrb	r3, [r5, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 83c8 	beq.w	80096a2 <_vfiprintf_r+0x892>
 8008f12:	2300      	movs	r3, #0
 8008f14:	f04f 31ff 	mov.w	r1, #4294967295
 8008f18:	1c6a      	adds	r2, r5, #1
 8008f1a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8008f1e:	9100      	str	r1, [sp, #0]
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	469a      	mov	sl, r3
 8008f24:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008f28:	9201      	str	r2, [sp, #4]
 8008f2a:	f1a3 0220 	sub.w	r2, r3, #32
 8008f2e:	2a5a      	cmp	r2, #90	; 0x5a
 8008f30:	f200 8310 	bhi.w	8009554 <_vfiprintf_r+0x744>
 8008f34:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008f38:	030e0099 	.word	0x030e0099
 8008f3c:	00a1030e 	.word	0x00a1030e
 8008f40:	030e030e 	.word	0x030e030e
 8008f44:	0080030e 	.word	0x0080030e
 8008f48:	030e030e 	.word	0x030e030e
 8008f4c:	00ae00a4 	.word	0x00ae00a4
 8008f50:	00ab030e 	.word	0x00ab030e
 8008f54:	030e00b0 	.word	0x030e00b0
 8008f58:	00ce00cb 	.word	0x00ce00cb
 8008f5c:	00ce00ce 	.word	0x00ce00ce
 8008f60:	00ce00ce 	.word	0x00ce00ce
 8008f64:	00ce00ce 	.word	0x00ce00ce
 8008f68:	00ce00ce 	.word	0x00ce00ce
 8008f6c:	030e030e 	.word	0x030e030e
 8008f70:	030e030e 	.word	0x030e030e
 8008f74:	030e030e 	.word	0x030e030e
 8008f78:	030e030e 	.word	0x030e030e
 8008f7c:	00f8030e 	.word	0x00f8030e
 8008f80:	030e0106 	.word	0x030e0106
 8008f84:	030e030e 	.word	0x030e030e
 8008f88:	030e030e 	.word	0x030e030e
 8008f8c:	030e030e 	.word	0x030e030e
 8008f90:	030e030e 	.word	0x030e030e
 8008f94:	014d030e 	.word	0x014d030e
 8008f98:	030e030e 	.word	0x030e030e
 8008f9c:	0192030e 	.word	0x0192030e
 8008fa0:	0270030e 	.word	0x0270030e
 8008fa4:	030e030e 	.word	0x030e030e
 8008fa8:	030e028e 	.word	0x030e028e
 8008fac:	030e030e 	.word	0x030e030e
 8008fb0:	030e030e 	.word	0x030e030e
 8008fb4:	030e030e 	.word	0x030e030e
 8008fb8:	030e030e 	.word	0x030e030e
 8008fbc:	00f8030e 	.word	0x00f8030e
 8008fc0:	030e0108 	.word	0x030e0108
 8008fc4:	030e030e 	.word	0x030e030e
 8008fc8:	010800de 	.word	0x010800de
 8008fcc:	030e00f2 	.word	0x030e00f2
 8008fd0:	030e00eb 	.word	0x030e00eb
 8008fd4:	014f0130 	.word	0x014f0130
 8008fd8:	00f20182 	.word	0x00f20182
 8008fdc:	0192030e 	.word	0x0192030e
 8008fe0:	02720097 	.word	0x02720097
 8008fe4:	030e030e 	.word	0x030e030e
 8008fe8:	030e0065 	.word	0x030e0065
 8008fec:	0097      	.short	0x0097
 8008fee:	aa0c      	add	r2, sp, #48	; 0x30
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	4648      	mov	r0, r9
 8008ff4:	f7ff fed9 	bl	8008daa <__sprint_r>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	f040 8331 	bne.w	8009660 <_vfiprintf_r+0x850>
 8008ffe:	ae0f      	add	r6, sp, #60	; 0x3c
 8009000:	e780      	b.n	8008f04 <_vfiprintf_r+0xf4>
 8009002:	4a95      	ldr	r2, [pc, #596]	; (8009258 <_vfiprintf_r+0x448>)
 8009004:	9205      	str	r2, [sp, #20]
 8009006:	f01a 0f20 	tst.w	sl, #32
 800900a:	f000 8225 	beq.w	8009458 <_vfiprintf_r+0x648>
 800900e:	3407      	adds	r4, #7
 8009010:	f024 0b07 	bic.w	fp, r4, #7
 8009014:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009018:	f01a 0f01 	tst.w	sl, #1
 800901c:	d009      	beq.n	8009032 <_vfiprintf_r+0x222>
 800901e:	ea54 0205 	orrs.w	r2, r4, r5
 8009022:	bf1f      	itttt	ne
 8009024:	2230      	movne	r2, #48	; 0x30
 8009026:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800902a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800902e:	f04a 0a02 	orrne.w	sl, sl, #2
 8009032:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009036:	e10d      	b.n	8009254 <_vfiprintf_r+0x444>
 8009038:	4648      	mov	r0, r9
 800903a:	f7ff f80b 	bl	8008054 <_localeconv_r>
 800903e:	6843      	ldr	r3, [r0, #4]
 8009040:	4618      	mov	r0, r3
 8009042:	ee08 3a10 	vmov	s16, r3
 8009046:	f7f7 f913 	bl	8000270 <strlen>
 800904a:	9007      	str	r0, [sp, #28]
 800904c:	4648      	mov	r0, r9
 800904e:	f7ff f801 	bl	8008054 <_localeconv_r>
 8009052:	6883      	ldr	r3, [r0, #8]
 8009054:	9306      	str	r3, [sp, #24]
 8009056:	9b07      	ldr	r3, [sp, #28]
 8009058:	b12b      	cbz	r3, 8009066 <_vfiprintf_r+0x256>
 800905a:	9b06      	ldr	r3, [sp, #24]
 800905c:	b11b      	cbz	r3, 8009066 <_vfiprintf_r+0x256>
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	b10b      	cbz	r3, 8009066 <_vfiprintf_r+0x256>
 8009062:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8009066:	9a01      	ldr	r2, [sp, #4]
 8009068:	e75c      	b.n	8008f24 <_vfiprintf_r+0x114>
 800906a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1f9      	bne.n	8009066 <_vfiprintf_r+0x256>
 8009072:	2320      	movs	r3, #32
 8009074:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8009078:	e7f5      	b.n	8009066 <_vfiprintf_r+0x256>
 800907a:	f04a 0a01 	orr.w	sl, sl, #1
 800907e:	e7f2      	b.n	8009066 <_vfiprintf_r+0x256>
 8009080:	f854 3b04 	ldr.w	r3, [r4], #4
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	daed      	bge.n	8009066 <_vfiprintf_r+0x256>
 800908a:	425b      	negs	r3, r3
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	f04a 0a04 	orr.w	sl, sl, #4
 8009092:	e7e8      	b.n	8009066 <_vfiprintf_r+0x256>
 8009094:	232b      	movs	r3, #43	; 0x2b
 8009096:	e7ed      	b.n	8009074 <_vfiprintf_r+0x264>
 8009098:	9a01      	ldr	r2, [sp, #4]
 800909a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800909e:	2b2a      	cmp	r3, #42	; 0x2a
 80090a0:	d112      	bne.n	80090c8 <_vfiprintf_r+0x2b8>
 80090a2:	f854 0b04 	ldr.w	r0, [r4], #4
 80090a6:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80090aa:	e9cd 3200 	strd	r3, r2, [sp]
 80090ae:	e7da      	b.n	8009066 <_vfiprintf_r+0x256>
 80090b0:	9b00      	ldr	r3, [sp, #0]
 80090b2:	200a      	movs	r0, #10
 80090b4:	fb00 1303 	mla	r3, r0, r3, r1
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	f812 3b01 	ldrb.w	r3, [r2], #1
 80090be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80090c2:	2909      	cmp	r1, #9
 80090c4:	d9f4      	bls.n	80090b0 <_vfiprintf_r+0x2a0>
 80090c6:	e72f      	b.n	8008f28 <_vfiprintf_r+0x118>
 80090c8:	2100      	movs	r1, #0
 80090ca:	9100      	str	r1, [sp, #0]
 80090cc:	e7f7      	b.n	80090be <_vfiprintf_r+0x2ae>
 80090ce:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80090d2:	e7c8      	b.n	8009066 <_vfiprintf_r+0x256>
 80090d4:	2100      	movs	r1, #0
 80090d6:	9a01      	ldr	r2, [sp, #4]
 80090d8:	9103      	str	r1, [sp, #12]
 80090da:	9903      	ldr	r1, [sp, #12]
 80090dc:	3b30      	subs	r3, #48	; 0x30
 80090de:	200a      	movs	r0, #10
 80090e0:	fb00 3301 	mla	r3, r0, r1, r3
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80090ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80090ee:	2909      	cmp	r1, #9
 80090f0:	d9f3      	bls.n	80090da <_vfiprintf_r+0x2ca>
 80090f2:	e719      	b.n	8008f28 <_vfiprintf_r+0x118>
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b68      	cmp	r3, #104	; 0x68
 80090fa:	bf01      	itttt	eq
 80090fc:	9b01      	ldreq	r3, [sp, #4]
 80090fe:	3301      	addeq	r3, #1
 8009100:	9301      	streq	r3, [sp, #4]
 8009102:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8009106:	bf18      	it	ne
 8009108:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800910c:	e7ab      	b.n	8009066 <_vfiprintf_r+0x256>
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b6c      	cmp	r3, #108	; 0x6c
 8009114:	d105      	bne.n	8009122 <_vfiprintf_r+0x312>
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	3301      	adds	r3, #1
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	f04a 0a20 	orr.w	sl, sl, #32
 8009120:	e7a1      	b.n	8009066 <_vfiprintf_r+0x256>
 8009122:	f04a 0a10 	orr.w	sl, sl, #16
 8009126:	e79e      	b.n	8009066 <_vfiprintf_r+0x256>
 8009128:	46a3      	mov	fp, r4
 800912a:	2100      	movs	r1, #0
 800912c:	f85b 3b04 	ldr.w	r3, [fp], #4
 8009130:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009134:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009138:	2301      	movs	r3, #1
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	460d      	mov	r5, r1
 800913e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8009142:	e0a0      	b.n	8009286 <_vfiprintf_r+0x476>
 8009144:	f04a 0a10 	orr.w	sl, sl, #16
 8009148:	f01a 0f20 	tst.w	sl, #32
 800914c:	d011      	beq.n	8009172 <_vfiprintf_r+0x362>
 800914e:	3407      	adds	r4, #7
 8009150:	f024 0b07 	bic.w	fp, r4, #7
 8009154:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009158:	2c00      	cmp	r4, #0
 800915a:	f175 0300 	sbcs.w	r3, r5, #0
 800915e:	da06      	bge.n	800916e <_vfiprintf_r+0x35e>
 8009160:	4264      	negs	r4, r4
 8009162:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009166:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800916a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800916e:	2301      	movs	r3, #1
 8009170:	e03f      	b.n	80091f2 <_vfiprintf_r+0x3e2>
 8009172:	f01a 0f10 	tst.w	sl, #16
 8009176:	f104 0b04 	add.w	fp, r4, #4
 800917a:	d002      	beq.n	8009182 <_vfiprintf_r+0x372>
 800917c:	6824      	ldr	r4, [r4, #0]
 800917e:	17e5      	asrs	r5, r4, #31
 8009180:	e7ea      	b.n	8009158 <_vfiprintf_r+0x348>
 8009182:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009186:	6824      	ldr	r4, [r4, #0]
 8009188:	d001      	beq.n	800918e <_vfiprintf_r+0x37e>
 800918a:	b224      	sxth	r4, r4
 800918c:	e7f7      	b.n	800917e <_vfiprintf_r+0x36e>
 800918e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009192:	bf18      	it	ne
 8009194:	b264      	sxtbne	r4, r4
 8009196:	e7f2      	b.n	800917e <_vfiprintf_r+0x36e>
 8009198:	f01a 0f20 	tst.w	sl, #32
 800919c:	f854 3b04 	ldr.w	r3, [r4], #4
 80091a0:	d005      	beq.n	80091ae <_vfiprintf_r+0x39e>
 80091a2:	9a02      	ldr	r2, [sp, #8]
 80091a4:	4610      	mov	r0, r2
 80091a6:	17d1      	asrs	r1, r2, #31
 80091a8:	e9c3 0100 	strd	r0, r1, [r3]
 80091ac:	e694      	b.n	8008ed8 <_vfiprintf_r+0xc8>
 80091ae:	f01a 0f10 	tst.w	sl, #16
 80091b2:	d002      	beq.n	80091ba <_vfiprintf_r+0x3aa>
 80091b4:	9a02      	ldr	r2, [sp, #8]
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e68e      	b.n	8008ed8 <_vfiprintf_r+0xc8>
 80091ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80091be:	d002      	beq.n	80091c6 <_vfiprintf_r+0x3b6>
 80091c0:	9a02      	ldr	r2, [sp, #8]
 80091c2:	801a      	strh	r2, [r3, #0]
 80091c4:	e688      	b.n	8008ed8 <_vfiprintf_r+0xc8>
 80091c6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80091ca:	d0f3      	beq.n	80091b4 <_vfiprintf_r+0x3a4>
 80091cc:	9a02      	ldr	r2, [sp, #8]
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	e682      	b.n	8008ed8 <_vfiprintf_r+0xc8>
 80091d2:	f04a 0a10 	orr.w	sl, sl, #16
 80091d6:	f01a 0f20 	tst.w	sl, #32
 80091da:	d01d      	beq.n	8009218 <_vfiprintf_r+0x408>
 80091dc:	3407      	adds	r4, #7
 80091de:	f024 0b07 	bic.w	fp, r4, #7
 80091e2:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80091e6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80091ea:	2300      	movs	r3, #0
 80091ec:	2200      	movs	r2, #0
 80091ee:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 80091f2:	9a00      	ldr	r2, [sp, #0]
 80091f4:	3201      	adds	r2, #1
 80091f6:	f000 8261 	beq.w	80096bc <_vfiprintf_r+0x8ac>
 80091fa:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 80091fe:	9204      	str	r2, [sp, #16]
 8009200:	ea54 0205 	orrs.w	r2, r4, r5
 8009204:	f040 8260 	bne.w	80096c8 <_vfiprintf_r+0x8b8>
 8009208:	9a00      	ldr	r2, [sp, #0]
 800920a:	2a00      	cmp	r2, #0
 800920c:	f000 8197 	beq.w	800953e <_vfiprintf_r+0x72e>
 8009210:	2b01      	cmp	r3, #1
 8009212:	f040 825c 	bne.w	80096ce <_vfiprintf_r+0x8be>
 8009216:	e135      	b.n	8009484 <_vfiprintf_r+0x674>
 8009218:	f01a 0f10 	tst.w	sl, #16
 800921c:	f104 0b04 	add.w	fp, r4, #4
 8009220:	d001      	beq.n	8009226 <_vfiprintf_r+0x416>
 8009222:	6824      	ldr	r4, [r4, #0]
 8009224:	e003      	b.n	800922e <_vfiprintf_r+0x41e>
 8009226:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800922a:	d002      	beq.n	8009232 <_vfiprintf_r+0x422>
 800922c:	8824      	ldrh	r4, [r4, #0]
 800922e:	2500      	movs	r5, #0
 8009230:	e7d9      	b.n	80091e6 <_vfiprintf_r+0x3d6>
 8009232:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009236:	d0f4      	beq.n	8009222 <_vfiprintf_r+0x412>
 8009238:	7824      	ldrb	r4, [r4, #0]
 800923a:	e7f8      	b.n	800922e <_vfiprintf_r+0x41e>
 800923c:	46a3      	mov	fp, r4
 800923e:	f647 0330 	movw	r3, #30768	; 0x7830
 8009242:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8009246:	f85b 4b04 	ldr.w	r4, [fp], #4
 800924a:	4b03      	ldr	r3, [pc, #12]	; (8009258 <_vfiprintf_r+0x448>)
 800924c:	9305      	str	r3, [sp, #20]
 800924e:	2500      	movs	r5, #0
 8009250:	f04a 0a02 	orr.w	sl, sl, #2
 8009254:	2302      	movs	r3, #2
 8009256:	e7c9      	b.n	80091ec <_vfiprintf_r+0x3dc>
 8009258:	0800a388 	.word	0x0800a388
 800925c:	9b00      	ldr	r3, [sp, #0]
 800925e:	46a3      	mov	fp, r4
 8009260:	2500      	movs	r5, #0
 8009262:	1c5c      	adds	r4, r3, #1
 8009264:	f85b 8b04 	ldr.w	r8, [fp], #4
 8009268:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800926c:	f000 80cf 	beq.w	800940e <_vfiprintf_r+0x5fe>
 8009270:	461a      	mov	r2, r3
 8009272:	4629      	mov	r1, r5
 8009274:	4640      	mov	r0, r8
 8009276:	f7f6 ffab 	bl	80001d0 <memchr>
 800927a:	2800      	cmp	r0, #0
 800927c:	f000 8174 	beq.w	8009568 <_vfiprintf_r+0x758>
 8009280:	eba0 0308 	sub.w	r3, r0, r8
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	42ab      	cmp	r3, r5
 800928a:	bfb8      	it	lt
 800928c:	462b      	movlt	r3, r5
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009294:	b113      	cbz	r3, 800929c <_vfiprintf_r+0x48c>
 8009296:	9b04      	ldr	r3, [sp, #16]
 8009298:	3301      	adds	r3, #1
 800929a:	9304      	str	r3, [sp, #16]
 800929c:	f01a 0302 	ands.w	r3, sl, #2
 80092a0:	9308      	str	r3, [sp, #32]
 80092a2:	bf1e      	ittt	ne
 80092a4:	9b04      	ldrne	r3, [sp, #16]
 80092a6:	3302      	addne	r3, #2
 80092a8:	9304      	strne	r3, [sp, #16]
 80092aa:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80092ae:	9309      	str	r3, [sp, #36]	; 0x24
 80092b0:	d11f      	bne.n	80092f2 <_vfiprintf_r+0x4e2>
 80092b2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80092b6:	1a9c      	subs	r4, r3, r2
 80092b8:	2c00      	cmp	r4, #0
 80092ba:	dd1a      	ble.n	80092f2 <_vfiprintf_r+0x4e2>
 80092bc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80092c0:	48b9      	ldr	r0, [pc, #740]	; (80095a8 <_vfiprintf_r+0x798>)
 80092c2:	6030      	str	r0, [r6, #0]
 80092c4:	2c10      	cmp	r4, #16
 80092c6:	f103 0301 	add.w	r3, r3, #1
 80092ca:	f106 0108 	add.w	r1, r6, #8
 80092ce:	f300 814d 	bgt.w	800956c <_vfiprintf_r+0x75c>
 80092d2:	6074      	str	r4, [r6, #4]
 80092d4:	2b07      	cmp	r3, #7
 80092d6:	4414      	add	r4, r2
 80092d8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80092dc:	f340 8158 	ble.w	8009590 <_vfiprintf_r+0x780>
 80092e0:	aa0c      	add	r2, sp, #48	; 0x30
 80092e2:	4639      	mov	r1, r7
 80092e4:	4648      	mov	r0, r9
 80092e6:	f7ff fd60 	bl	8008daa <__sprint_r>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	f040 81b8 	bne.w	8009660 <_vfiprintf_r+0x850>
 80092f0:	ae0f      	add	r6, sp, #60	; 0x3c
 80092f2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80092f6:	b173      	cbz	r3, 8009316 <_vfiprintf_r+0x506>
 80092f8:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 80092fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092fe:	6032      	str	r2, [r6, #0]
 8009300:	2201      	movs	r2, #1
 8009302:	6072      	str	r2, [r6, #4]
 8009304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009306:	3301      	adds	r3, #1
 8009308:	3201      	adds	r2, #1
 800930a:	2b07      	cmp	r3, #7
 800930c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009310:	f300 8140 	bgt.w	8009594 <_vfiprintf_r+0x784>
 8009314:	3608      	adds	r6, #8
 8009316:	9b08      	ldr	r3, [sp, #32]
 8009318:	b16b      	cbz	r3, 8009336 <_vfiprintf_r+0x526>
 800931a:	aa0b      	add	r2, sp, #44	; 0x2c
 800931c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931e:	6032      	str	r2, [r6, #0]
 8009320:	2202      	movs	r2, #2
 8009322:	6072      	str	r2, [r6, #4]
 8009324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009326:	3301      	adds	r3, #1
 8009328:	3202      	adds	r2, #2
 800932a:	2b07      	cmp	r3, #7
 800932c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009330:	f300 8140 	bgt.w	80095b4 <_vfiprintf_r+0x7a4>
 8009334:	3608      	adds	r6, #8
 8009336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009338:	2b80      	cmp	r3, #128	; 0x80
 800933a:	d11f      	bne.n	800937c <_vfiprintf_r+0x56c>
 800933c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009340:	1a9c      	subs	r4, r3, r2
 8009342:	2c00      	cmp	r4, #0
 8009344:	dd1a      	ble.n	800937c <_vfiprintf_r+0x56c>
 8009346:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800934a:	4898      	ldr	r0, [pc, #608]	; (80095ac <_vfiprintf_r+0x79c>)
 800934c:	6030      	str	r0, [r6, #0]
 800934e:	2c10      	cmp	r4, #16
 8009350:	f103 0301 	add.w	r3, r3, #1
 8009354:	f106 0108 	add.w	r1, r6, #8
 8009358:	f300 8135 	bgt.w	80095c6 <_vfiprintf_r+0x7b6>
 800935c:	6074      	str	r4, [r6, #4]
 800935e:	2b07      	cmp	r3, #7
 8009360:	4414      	add	r4, r2
 8009362:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009366:	f340 8140 	ble.w	80095ea <_vfiprintf_r+0x7da>
 800936a:	aa0c      	add	r2, sp, #48	; 0x30
 800936c:	4639      	mov	r1, r7
 800936e:	4648      	mov	r0, r9
 8009370:	f7ff fd1b 	bl	8008daa <__sprint_r>
 8009374:	2800      	cmp	r0, #0
 8009376:	f040 8173 	bne.w	8009660 <_vfiprintf_r+0x850>
 800937a:	ae0f      	add	r6, sp, #60	; 0x3c
 800937c:	9b00      	ldr	r3, [sp, #0]
 800937e:	1aec      	subs	r4, r5, r3
 8009380:	2c00      	cmp	r4, #0
 8009382:	dd1a      	ble.n	80093ba <_vfiprintf_r+0x5aa>
 8009384:	4d89      	ldr	r5, [pc, #548]	; (80095ac <_vfiprintf_r+0x79c>)
 8009386:	6035      	str	r5, [r6, #0]
 8009388:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800938c:	2c10      	cmp	r4, #16
 800938e:	f103 0301 	add.w	r3, r3, #1
 8009392:	f106 0208 	add.w	r2, r6, #8
 8009396:	f300 812a 	bgt.w	80095ee <_vfiprintf_r+0x7de>
 800939a:	6074      	str	r4, [r6, #4]
 800939c:	2b07      	cmp	r3, #7
 800939e:	440c      	add	r4, r1
 80093a0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80093a4:	f340 8134 	ble.w	8009610 <_vfiprintf_r+0x800>
 80093a8:	aa0c      	add	r2, sp, #48	; 0x30
 80093aa:	4639      	mov	r1, r7
 80093ac:	4648      	mov	r0, r9
 80093ae:	f7ff fcfc 	bl	8008daa <__sprint_r>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f040 8154 	bne.w	8009660 <_vfiprintf_r+0x850>
 80093b8:	ae0f      	add	r6, sp, #60	; 0x3c
 80093ba:	9b00      	ldr	r3, [sp, #0]
 80093bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80093be:	6073      	str	r3, [r6, #4]
 80093c0:	4418      	add	r0, r3
 80093c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c4:	f8c6 8000 	str.w	r8, [r6]
 80093c8:	3301      	adds	r3, #1
 80093ca:	2b07      	cmp	r3, #7
 80093cc:	900e      	str	r0, [sp, #56]	; 0x38
 80093ce:	930d      	str	r3, [sp, #52]	; 0x34
 80093d0:	f300 8120 	bgt.w	8009614 <_vfiprintf_r+0x804>
 80093d4:	f106 0308 	add.w	r3, r6, #8
 80093d8:	f01a 0f04 	tst.w	sl, #4
 80093dc:	f040 8122 	bne.w	8009624 <_vfiprintf_r+0x814>
 80093e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80093e4:	9904      	ldr	r1, [sp, #16]
 80093e6:	428a      	cmp	r2, r1
 80093e8:	bfac      	ite	ge
 80093ea:	189b      	addge	r3, r3, r2
 80093ec:	185b      	addlt	r3, r3, r1
 80093ee:	9302      	str	r3, [sp, #8]
 80093f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093f2:	b13b      	cbz	r3, 8009404 <_vfiprintf_r+0x5f4>
 80093f4:	aa0c      	add	r2, sp, #48	; 0x30
 80093f6:	4639      	mov	r1, r7
 80093f8:	4648      	mov	r0, r9
 80093fa:	f7ff fcd6 	bl	8008daa <__sprint_r>
 80093fe:	2800      	cmp	r0, #0
 8009400:	f040 812e 	bne.w	8009660 <_vfiprintf_r+0x850>
 8009404:	2300      	movs	r3, #0
 8009406:	930d      	str	r3, [sp, #52]	; 0x34
 8009408:	465c      	mov	r4, fp
 800940a:	ae0f      	add	r6, sp, #60	; 0x3c
 800940c:	e564      	b.n	8008ed8 <_vfiprintf_r+0xc8>
 800940e:	4640      	mov	r0, r8
 8009410:	f7f6 ff2e 	bl	8000270 <strlen>
 8009414:	9000      	str	r0, [sp, #0]
 8009416:	e736      	b.n	8009286 <_vfiprintf_r+0x476>
 8009418:	f04a 0a10 	orr.w	sl, sl, #16
 800941c:	f01a 0f20 	tst.w	sl, #32
 8009420:	d006      	beq.n	8009430 <_vfiprintf_r+0x620>
 8009422:	3407      	adds	r4, #7
 8009424:	f024 0b07 	bic.w	fp, r4, #7
 8009428:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800942c:	2301      	movs	r3, #1
 800942e:	e6dd      	b.n	80091ec <_vfiprintf_r+0x3dc>
 8009430:	f01a 0f10 	tst.w	sl, #16
 8009434:	f104 0b04 	add.w	fp, r4, #4
 8009438:	d001      	beq.n	800943e <_vfiprintf_r+0x62e>
 800943a:	6824      	ldr	r4, [r4, #0]
 800943c:	e003      	b.n	8009446 <_vfiprintf_r+0x636>
 800943e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009442:	d002      	beq.n	800944a <_vfiprintf_r+0x63a>
 8009444:	8824      	ldrh	r4, [r4, #0]
 8009446:	2500      	movs	r5, #0
 8009448:	e7f0      	b.n	800942c <_vfiprintf_r+0x61c>
 800944a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800944e:	d0f4      	beq.n	800943a <_vfiprintf_r+0x62a>
 8009450:	7824      	ldrb	r4, [r4, #0]
 8009452:	e7f8      	b.n	8009446 <_vfiprintf_r+0x636>
 8009454:	4a56      	ldr	r2, [pc, #344]	; (80095b0 <_vfiprintf_r+0x7a0>)
 8009456:	e5d5      	b.n	8009004 <_vfiprintf_r+0x1f4>
 8009458:	f01a 0f10 	tst.w	sl, #16
 800945c:	f104 0b04 	add.w	fp, r4, #4
 8009460:	d001      	beq.n	8009466 <_vfiprintf_r+0x656>
 8009462:	6824      	ldr	r4, [r4, #0]
 8009464:	e003      	b.n	800946e <_vfiprintf_r+0x65e>
 8009466:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800946a:	d002      	beq.n	8009472 <_vfiprintf_r+0x662>
 800946c:	8824      	ldrh	r4, [r4, #0]
 800946e:	2500      	movs	r5, #0
 8009470:	e5d2      	b.n	8009018 <_vfiprintf_r+0x208>
 8009472:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009476:	d0f4      	beq.n	8009462 <_vfiprintf_r+0x652>
 8009478:	7824      	ldrb	r4, [r4, #0]
 800947a:	e7f8      	b.n	800946e <_vfiprintf_r+0x65e>
 800947c:	2d00      	cmp	r5, #0
 800947e:	bf08      	it	eq
 8009480:	2c0a      	cmpeq	r4, #10
 8009482:	d205      	bcs.n	8009490 <_vfiprintf_r+0x680>
 8009484:	3430      	adds	r4, #48	; 0x30
 8009486:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800948a:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800948e:	e13c      	b.n	800970a <_vfiprintf_r+0x8fa>
 8009490:	ab38      	add	r3, sp, #224	; 0xe0
 8009492:	9308      	str	r3, [sp, #32]
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800949a:	f04f 0a00 	mov.w	sl, #0
 800949e:	9309      	str	r3, [sp, #36]	; 0x24
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	220a      	movs	r2, #10
 80094a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80094a8:	4620      	mov	r0, r4
 80094aa:	2300      	movs	r3, #0
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7f7 fbcb 	bl	8000c48 <__aeabi_uldivmod>
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	3230      	adds	r2, #48	; 0x30
 80094b6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80094ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094bc:	f10a 0a01 	add.w	sl, sl, #1
 80094c0:	b1db      	cbz	r3, 80094fa <_vfiprintf_r+0x6ea>
 80094c2:	9b06      	ldr	r3, [sp, #24]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	4553      	cmp	r3, sl
 80094c8:	d117      	bne.n	80094fa <_vfiprintf_r+0x6ea>
 80094ca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80094ce:	d014      	beq.n	80094fa <_vfiprintf_r+0x6ea>
 80094d0:	2d00      	cmp	r5, #0
 80094d2:	bf08      	it	eq
 80094d4:	2c0a      	cmpeq	r4, #10
 80094d6:	d310      	bcc.n	80094fa <_vfiprintf_r+0x6ea>
 80094d8:	9b07      	ldr	r3, [sp, #28]
 80094da:	eba8 0803 	sub.w	r8, r8, r3
 80094de:	461a      	mov	r2, r3
 80094e0:	ee18 1a10 	vmov	r1, s16
 80094e4:	4640      	mov	r0, r8
 80094e6:	f7ff fc40 	bl	8008d6a <strncpy>
 80094ea:	9b06      	ldr	r3, [sp, #24]
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	b1a3      	cbz	r3, 800951a <_vfiprintf_r+0x70a>
 80094f0:	9b06      	ldr	r3, [sp, #24]
 80094f2:	3301      	adds	r3, #1
 80094f4:	9306      	str	r3, [sp, #24]
 80094f6:	f04f 0a00 	mov.w	sl, #0
 80094fa:	220a      	movs	r2, #10
 80094fc:	2300      	movs	r3, #0
 80094fe:	4620      	mov	r0, r4
 8009500:	4629      	mov	r1, r5
 8009502:	f7f7 fba1 	bl	8000c48 <__aeabi_uldivmod>
 8009506:	2d00      	cmp	r5, #0
 8009508:	bf08      	it	eq
 800950a:	2c0a      	cmpeq	r4, #10
 800950c:	f0c0 80fd 	bcc.w	800970a <_vfiprintf_r+0x8fa>
 8009510:	4604      	mov	r4, r0
 8009512:	460d      	mov	r5, r1
 8009514:	f8cd 8020 	str.w	r8, [sp, #32]
 8009518:	e7c2      	b.n	80094a0 <_vfiprintf_r+0x690>
 800951a:	469a      	mov	sl, r3
 800951c:	e7ed      	b.n	80094fa <_vfiprintf_r+0x6ea>
 800951e:	9a05      	ldr	r2, [sp, #20]
 8009520:	f004 030f 	and.w	r3, r4, #15
 8009524:	5cd3      	ldrb	r3, [r2, r3]
 8009526:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800952a:	0923      	lsrs	r3, r4, #4
 800952c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8009530:	092a      	lsrs	r2, r5, #4
 8009532:	461c      	mov	r4, r3
 8009534:	4615      	mov	r5, r2
 8009536:	ea54 0305 	orrs.w	r3, r4, r5
 800953a:	d1f0      	bne.n	800951e <_vfiprintf_r+0x70e>
 800953c:	e0e5      	b.n	800970a <_vfiprintf_r+0x8fa>
 800953e:	b933      	cbnz	r3, 800954e <_vfiprintf_r+0x73e>
 8009540:	f01a 0f01 	tst.w	sl, #1
 8009544:	d003      	beq.n	800954e <_vfiprintf_r+0x73e>
 8009546:	2330      	movs	r3, #48	; 0x30
 8009548:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800954c:	e79d      	b.n	800948a <_vfiprintf_r+0x67a>
 800954e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8009552:	e0da      	b.n	800970a <_vfiprintf_r+0x8fa>
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 80a4 	beq.w	80096a2 <_vfiprintf_r+0x892>
 800955a:	2100      	movs	r1, #0
 800955c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009560:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009564:	46a3      	mov	fp, r4
 8009566:	e5e7      	b.n	8009138 <_vfiprintf_r+0x328>
 8009568:	4605      	mov	r5, r0
 800956a:	e68c      	b.n	8009286 <_vfiprintf_r+0x476>
 800956c:	2010      	movs	r0, #16
 800956e:	4402      	add	r2, r0
 8009570:	2b07      	cmp	r3, #7
 8009572:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009576:	6070      	str	r0, [r6, #4]
 8009578:	dd07      	ble.n	800958a <_vfiprintf_r+0x77a>
 800957a:	aa0c      	add	r2, sp, #48	; 0x30
 800957c:	4639      	mov	r1, r7
 800957e:	4648      	mov	r0, r9
 8009580:	f7ff fc13 	bl	8008daa <__sprint_r>
 8009584:	2800      	cmp	r0, #0
 8009586:	d16b      	bne.n	8009660 <_vfiprintf_r+0x850>
 8009588:	a90f      	add	r1, sp, #60	; 0x3c
 800958a:	3c10      	subs	r4, #16
 800958c:	460e      	mov	r6, r1
 800958e:	e695      	b.n	80092bc <_vfiprintf_r+0x4ac>
 8009590:	460e      	mov	r6, r1
 8009592:	e6ae      	b.n	80092f2 <_vfiprintf_r+0x4e2>
 8009594:	aa0c      	add	r2, sp, #48	; 0x30
 8009596:	4639      	mov	r1, r7
 8009598:	4648      	mov	r0, r9
 800959a:	f7ff fc06 	bl	8008daa <__sprint_r>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d15e      	bne.n	8009660 <_vfiprintf_r+0x850>
 80095a2:	ae0f      	add	r6, sp, #60	; 0x3c
 80095a4:	e6b7      	b.n	8009316 <_vfiprintf_r+0x506>
 80095a6:	bf00      	nop
 80095a8:	0800a5ac 	.word	0x0800a5ac
 80095ac:	0800a5bc 	.word	0x0800a5bc
 80095b0:	0800a399 	.word	0x0800a399
 80095b4:	aa0c      	add	r2, sp, #48	; 0x30
 80095b6:	4639      	mov	r1, r7
 80095b8:	4648      	mov	r0, r9
 80095ba:	f7ff fbf6 	bl	8008daa <__sprint_r>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d14e      	bne.n	8009660 <_vfiprintf_r+0x850>
 80095c2:	ae0f      	add	r6, sp, #60	; 0x3c
 80095c4:	e6b7      	b.n	8009336 <_vfiprintf_r+0x526>
 80095c6:	2010      	movs	r0, #16
 80095c8:	4402      	add	r2, r0
 80095ca:	2b07      	cmp	r3, #7
 80095cc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80095d0:	6070      	str	r0, [r6, #4]
 80095d2:	dd07      	ble.n	80095e4 <_vfiprintf_r+0x7d4>
 80095d4:	aa0c      	add	r2, sp, #48	; 0x30
 80095d6:	4639      	mov	r1, r7
 80095d8:	4648      	mov	r0, r9
 80095da:	f7ff fbe6 	bl	8008daa <__sprint_r>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d13e      	bne.n	8009660 <_vfiprintf_r+0x850>
 80095e2:	a90f      	add	r1, sp, #60	; 0x3c
 80095e4:	3c10      	subs	r4, #16
 80095e6:	460e      	mov	r6, r1
 80095e8:	e6ad      	b.n	8009346 <_vfiprintf_r+0x536>
 80095ea:	460e      	mov	r6, r1
 80095ec:	e6c6      	b.n	800937c <_vfiprintf_r+0x56c>
 80095ee:	2010      	movs	r0, #16
 80095f0:	4401      	add	r1, r0
 80095f2:	2b07      	cmp	r3, #7
 80095f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80095f8:	6070      	str	r0, [r6, #4]
 80095fa:	dd06      	ble.n	800960a <_vfiprintf_r+0x7fa>
 80095fc:	aa0c      	add	r2, sp, #48	; 0x30
 80095fe:	4639      	mov	r1, r7
 8009600:	4648      	mov	r0, r9
 8009602:	f7ff fbd2 	bl	8008daa <__sprint_r>
 8009606:	bb58      	cbnz	r0, 8009660 <_vfiprintf_r+0x850>
 8009608:	aa0f      	add	r2, sp, #60	; 0x3c
 800960a:	3c10      	subs	r4, #16
 800960c:	4616      	mov	r6, r2
 800960e:	e6ba      	b.n	8009386 <_vfiprintf_r+0x576>
 8009610:	4616      	mov	r6, r2
 8009612:	e6d2      	b.n	80093ba <_vfiprintf_r+0x5aa>
 8009614:	aa0c      	add	r2, sp, #48	; 0x30
 8009616:	4639      	mov	r1, r7
 8009618:	4648      	mov	r0, r9
 800961a:	f7ff fbc6 	bl	8008daa <__sprint_r>
 800961e:	b9f8      	cbnz	r0, 8009660 <_vfiprintf_r+0x850>
 8009620:	ab0f      	add	r3, sp, #60	; 0x3c
 8009622:	e6d9      	b.n	80093d8 <_vfiprintf_r+0x5c8>
 8009624:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8009628:	1a54      	subs	r4, r2, r1
 800962a:	2c00      	cmp	r4, #0
 800962c:	f77f aed8 	ble.w	80093e0 <_vfiprintf_r+0x5d0>
 8009630:	4d3a      	ldr	r5, [pc, #232]	; (800971c <_vfiprintf_r+0x90c>)
 8009632:	2610      	movs	r6, #16
 8009634:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8009638:	2c10      	cmp	r4, #16
 800963a:	f102 0201 	add.w	r2, r2, #1
 800963e:	601d      	str	r5, [r3, #0]
 8009640:	dc1d      	bgt.n	800967e <_vfiprintf_r+0x86e>
 8009642:	605c      	str	r4, [r3, #4]
 8009644:	2a07      	cmp	r2, #7
 8009646:	440c      	add	r4, r1
 8009648:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800964c:	f77f aec8 	ble.w	80093e0 <_vfiprintf_r+0x5d0>
 8009650:	aa0c      	add	r2, sp, #48	; 0x30
 8009652:	4639      	mov	r1, r7
 8009654:	4648      	mov	r0, r9
 8009656:	f7ff fba8 	bl	8008daa <__sprint_r>
 800965a:	2800      	cmp	r0, #0
 800965c:	f43f aec0 	beq.w	80093e0 <_vfiprintf_r+0x5d0>
 8009660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009662:	07d9      	lsls	r1, r3, #31
 8009664:	d405      	bmi.n	8009672 <_vfiprintf_r+0x862>
 8009666:	89bb      	ldrh	r3, [r7, #12]
 8009668:	059a      	lsls	r2, r3, #22
 800966a:	d402      	bmi.n	8009672 <_vfiprintf_r+0x862>
 800966c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800966e:	f7fe fcf8 	bl	8008062 <__retarget_lock_release_recursive>
 8009672:	89bb      	ldrh	r3, [r7, #12]
 8009674:	065b      	lsls	r3, r3, #25
 8009676:	f57f abfe 	bpl.w	8008e76 <_vfiprintf_r+0x66>
 800967a:	f7ff bbf9 	b.w	8008e70 <_vfiprintf_r+0x60>
 800967e:	3110      	adds	r1, #16
 8009680:	2a07      	cmp	r2, #7
 8009682:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8009686:	605e      	str	r6, [r3, #4]
 8009688:	dc02      	bgt.n	8009690 <_vfiprintf_r+0x880>
 800968a:	3308      	adds	r3, #8
 800968c:	3c10      	subs	r4, #16
 800968e:	e7d1      	b.n	8009634 <_vfiprintf_r+0x824>
 8009690:	aa0c      	add	r2, sp, #48	; 0x30
 8009692:	4639      	mov	r1, r7
 8009694:	4648      	mov	r0, r9
 8009696:	f7ff fb88 	bl	8008daa <__sprint_r>
 800969a:	2800      	cmp	r0, #0
 800969c:	d1e0      	bne.n	8009660 <_vfiprintf_r+0x850>
 800969e:	ab0f      	add	r3, sp, #60	; 0x3c
 80096a0:	e7f4      	b.n	800968c <_vfiprintf_r+0x87c>
 80096a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096a4:	b913      	cbnz	r3, 80096ac <_vfiprintf_r+0x89c>
 80096a6:	2300      	movs	r3, #0
 80096a8:	930d      	str	r3, [sp, #52]	; 0x34
 80096aa:	e7d9      	b.n	8009660 <_vfiprintf_r+0x850>
 80096ac:	aa0c      	add	r2, sp, #48	; 0x30
 80096ae:	4639      	mov	r1, r7
 80096b0:	4648      	mov	r0, r9
 80096b2:	f7ff fb7a 	bl	8008daa <__sprint_r>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d0f5      	beq.n	80096a6 <_vfiprintf_r+0x896>
 80096ba:	e7d1      	b.n	8009660 <_vfiprintf_r+0x850>
 80096bc:	ea54 0205 	orrs.w	r2, r4, r5
 80096c0:	f8cd a010 	str.w	sl, [sp, #16]
 80096c4:	f43f ada4 	beq.w	8009210 <_vfiprintf_r+0x400>
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	f43f aed7 	beq.w	800947c <_vfiprintf_r+0x66c>
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80096d4:	f43f af23 	beq.w	800951e <_vfiprintf_r+0x70e>
 80096d8:	08e2      	lsrs	r2, r4, #3
 80096da:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80096de:	08e8      	lsrs	r0, r5, #3
 80096e0:	f004 0307 	and.w	r3, r4, #7
 80096e4:	4605      	mov	r5, r0
 80096e6:	4614      	mov	r4, r2
 80096e8:	3330      	adds	r3, #48	; 0x30
 80096ea:	ea54 0205 	orrs.w	r2, r4, r5
 80096ee:	4641      	mov	r1, r8
 80096f0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80096f4:	d1f0      	bne.n	80096d8 <_vfiprintf_r+0x8c8>
 80096f6:	9a04      	ldr	r2, [sp, #16]
 80096f8:	07d0      	lsls	r0, r2, #31
 80096fa:	d506      	bpl.n	800970a <_vfiprintf_r+0x8fa>
 80096fc:	2b30      	cmp	r3, #48	; 0x30
 80096fe:	d004      	beq.n	800970a <_vfiprintf_r+0x8fa>
 8009700:	2330      	movs	r3, #48	; 0x30
 8009702:	f808 3c01 	strb.w	r3, [r8, #-1]
 8009706:	f1a1 0802 	sub.w	r8, r1, #2
 800970a:	ab38      	add	r3, sp, #224	; 0xe0
 800970c:	eba3 0308 	sub.w	r3, r3, r8
 8009710:	9d00      	ldr	r5, [sp, #0]
 8009712:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	e5b5      	b.n	8009286 <_vfiprintf_r+0x476>
 800971a:	bf00      	nop
 800971c:	0800a5ac 	.word	0x0800a5ac

08009720 <__sbprintf>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	460c      	mov	r4, r1
 8009724:	8989      	ldrh	r1, [r1, #12]
 8009726:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800972a:	f021 0102 	bic.w	r1, r1, #2
 800972e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009732:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009734:	911b      	str	r1, [sp, #108]	; 0x6c
 8009736:	89e1      	ldrh	r1, [r4, #14]
 8009738:	f8ad 1016 	strh.w	r1, [sp, #22]
 800973c:	69e1      	ldr	r1, [r4, #28]
 800973e:	9109      	str	r1, [sp, #36]	; 0x24
 8009740:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009742:	910b      	str	r1, [sp, #44]	; 0x2c
 8009744:	a91c      	add	r1, sp, #112	; 0x70
 8009746:	9102      	str	r1, [sp, #8]
 8009748:	9106      	str	r1, [sp, #24]
 800974a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800974e:	4606      	mov	r6, r0
 8009750:	9104      	str	r1, [sp, #16]
 8009752:	9107      	str	r1, [sp, #28]
 8009754:	a818      	add	r0, sp, #96	; 0x60
 8009756:	2100      	movs	r1, #0
 8009758:	e9cd 3200 	strd	r3, r2, [sp]
 800975c:	9108      	str	r1, [sp, #32]
 800975e:	f7fe fc7d 	bl	800805c <__retarget_lock_init_recursive>
 8009762:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009766:	a902      	add	r1, sp, #8
 8009768:	4630      	mov	r0, r6
 800976a:	f7ff fb51 	bl	8008e10 <_vfiprintf_r>
 800976e:	1e05      	subs	r5, r0, #0
 8009770:	db07      	blt.n	8009782 <__sbprintf+0x62>
 8009772:	a902      	add	r1, sp, #8
 8009774:	4630      	mov	r0, r6
 8009776:	f7fe fa91 	bl	8007c9c <_fflush_r>
 800977a:	2800      	cmp	r0, #0
 800977c:	bf18      	it	ne
 800977e:	f04f 35ff 	movne.w	r5, #4294967295
 8009782:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8009786:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009788:	065b      	lsls	r3, r3, #25
 800978a:	bf42      	ittt	mi
 800978c:	89a3      	ldrhmi	r3, [r4, #12]
 800978e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009792:	81a3      	strhmi	r3, [r4, #12]
 8009794:	f7fe fc63 	bl	800805e <__retarget_lock_close_recursive>
 8009798:	4628      	mov	r0, r5
 800979a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800979e:	bd70      	pop	{r4, r5, r6, pc}

080097a0 <_write_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	; (80097c0 <_write_r+0x20>)
 80097a4:	4604      	mov	r4, r0
 80097a6:	4608      	mov	r0, r1
 80097a8:	4611      	mov	r1, r2
 80097aa:	2200      	movs	r2, #0
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f7f7 fe73 	bl	800149a <_write>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_write_r+0x1e>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_write_r+0x1e>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20002db0 	.word	0x20002db0

080097c4 <__register_exitproc>:
 80097c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c8:	4d1c      	ldr	r5, [pc, #112]	; (800983c <__register_exitproc+0x78>)
 80097ca:	4606      	mov	r6, r0
 80097cc:	6828      	ldr	r0, [r5, #0]
 80097ce:	4698      	mov	r8, r3
 80097d0:	460f      	mov	r7, r1
 80097d2:	4691      	mov	r9, r2
 80097d4:	f7fe fc44 	bl	8008060 <__retarget_lock_acquire_recursive>
 80097d8:	4b19      	ldr	r3, [pc, #100]	; (8009840 <__register_exitproc+0x7c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80097e0:	4628      	mov	r0, r5
 80097e2:	b91c      	cbnz	r4, 80097ec <__register_exitproc+0x28>
 80097e4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80097e8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80097ec:	6865      	ldr	r5, [r4, #4]
 80097ee:	6800      	ldr	r0, [r0, #0]
 80097f0:	2d1f      	cmp	r5, #31
 80097f2:	dd05      	ble.n	8009800 <__register_exitproc+0x3c>
 80097f4:	f7fe fc35 	bl	8008062 <__retarget_lock_release_recursive>
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009800:	b19e      	cbz	r6, 800982a <__register_exitproc+0x66>
 8009802:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009806:	2201      	movs	r2, #1
 8009808:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800980c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8009810:	40aa      	lsls	r2, r5
 8009812:	4313      	orrs	r3, r2
 8009814:	2e02      	cmp	r6, #2
 8009816:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800981a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800981e:	bf02      	ittt	eq
 8009820:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8009824:	431a      	orreq	r2, r3
 8009826:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800982a:	1c6b      	adds	r3, r5, #1
 800982c:	3502      	adds	r5, #2
 800982e:	6063      	str	r3, [r4, #4]
 8009830:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009834:	f7fe fc15 	bl	8008062 <__retarget_lock_release_recursive>
 8009838:	2000      	movs	r0, #0
 800983a:	e7df      	b.n	80097fc <__register_exitproc+0x38>
 800983c:	20000450 	.word	0x20000450
 8009840:	0800a374 	.word	0x0800a374

08009844 <__assert_func>:
 8009844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009846:	4614      	mov	r4, r2
 8009848:	461a      	mov	r2, r3
 800984a:	4b09      	ldr	r3, [pc, #36]	; (8009870 <__assert_func+0x2c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4605      	mov	r5, r0
 8009850:	68d8      	ldr	r0, [r3, #12]
 8009852:	b14c      	cbz	r4, 8009868 <__assert_func+0x24>
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <__assert_func+0x30>)
 8009856:	9100      	str	r1, [sp, #0]
 8009858:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800985c:	4906      	ldr	r1, [pc, #24]	; (8009878 <__assert_func+0x34>)
 800985e:	462b      	mov	r3, r5
 8009860:	f000 f8a4 	bl	80099ac <fiprintf>
 8009864:	f000 fcf5 	bl	800a252 <abort>
 8009868:	4b04      	ldr	r3, [pc, #16]	; (800987c <__assert_func+0x38>)
 800986a:	461c      	mov	r4, r3
 800986c:	e7f3      	b.n	8009856 <__assert_func+0x12>
 800986e:	bf00      	nop
 8009870:	20000020 	.word	0x20000020
 8009874:	0800a5cc 	.word	0x0800a5cc
 8009878:	0800a5d9 	.word	0x0800a5d9
 800987c:	0800a607 	.word	0x0800a607

08009880 <_calloc_r>:
 8009880:	b510      	push	{r4, lr}
 8009882:	4351      	muls	r1, r2
 8009884:	f7fe fc5a 	bl	800813c <_malloc_r>
 8009888:	4604      	mov	r4, r0
 800988a:	b198      	cbz	r0, 80098b4 <_calloc_r+0x34>
 800988c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009890:	f022 0203 	bic.w	r2, r2, #3
 8009894:	3a04      	subs	r2, #4
 8009896:	2a24      	cmp	r2, #36	; 0x24
 8009898:	d81b      	bhi.n	80098d2 <_calloc_r+0x52>
 800989a:	2a13      	cmp	r2, #19
 800989c:	d917      	bls.n	80098ce <_calloc_r+0x4e>
 800989e:	2100      	movs	r1, #0
 80098a0:	2a1b      	cmp	r2, #27
 80098a2:	e9c0 1100 	strd	r1, r1, [r0]
 80098a6:	d807      	bhi.n	80098b8 <_calloc_r+0x38>
 80098a8:	f100 0308 	add.w	r3, r0, #8
 80098ac:	2200      	movs	r2, #0
 80098ae:	e9c3 2200 	strd	r2, r2, [r3]
 80098b2:	609a      	str	r2, [r3, #8]
 80098b4:	4620      	mov	r0, r4
 80098b6:	bd10      	pop	{r4, pc}
 80098b8:	2a24      	cmp	r2, #36	; 0x24
 80098ba:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80098be:	bf11      	iteee	ne
 80098c0:	f100 0310 	addne.w	r3, r0, #16
 80098c4:	6101      	streq	r1, [r0, #16]
 80098c6:	f100 0318 	addeq.w	r3, r0, #24
 80098ca:	6141      	streq	r1, [r0, #20]
 80098cc:	e7ee      	b.n	80098ac <_calloc_r+0x2c>
 80098ce:	4603      	mov	r3, r0
 80098d0:	e7ec      	b.n	80098ac <_calloc_r+0x2c>
 80098d2:	2100      	movs	r1, #0
 80098d4:	f7fb fffa 	bl	80058cc <memset>
 80098d8:	e7ec      	b.n	80098b4 <_calloc_r+0x34>
	...

080098dc <_close_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d06      	ldr	r5, [pc, #24]	; (80098f8 <_close_r+0x1c>)
 80098e0:	2300      	movs	r3, #0
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	f7f8 f8f9 	bl	8001ade <_close>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_close_r+0x1a>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_close_r+0x1a>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	20002db0 	.word	0x20002db0

080098fc <_fclose_r>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	4606      	mov	r6, r0
 8009900:	460c      	mov	r4, r1
 8009902:	b911      	cbnz	r1, 800990a <_fclose_r+0xe>
 8009904:	2500      	movs	r5, #0
 8009906:	4628      	mov	r0, r5
 8009908:	bd70      	pop	{r4, r5, r6, pc}
 800990a:	b118      	cbz	r0, 8009914 <_fclose_r+0x18>
 800990c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800990e:	b90b      	cbnz	r3, 8009914 <_fclose_r+0x18>
 8009910:	f7fe fa30 	bl	8007d74 <__sinit>
 8009914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009916:	07d8      	lsls	r0, r3, #31
 8009918:	d405      	bmi.n	8009926 <_fclose_r+0x2a>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	0599      	lsls	r1, r3, #22
 800991e:	d402      	bmi.n	8009926 <_fclose_r+0x2a>
 8009920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009922:	f7fe fb9d 	bl	8008060 <__retarget_lock_acquire_recursive>
 8009926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992a:	b93b      	cbnz	r3, 800993c <_fclose_r+0x40>
 800992c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800992e:	f015 0501 	ands.w	r5, r5, #1
 8009932:	d1e7      	bne.n	8009904 <_fclose_r+0x8>
 8009934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009936:	f7fe fb94 	bl	8008062 <__retarget_lock_release_recursive>
 800993a:	e7e4      	b.n	8009906 <_fclose_r+0xa>
 800993c:	4621      	mov	r1, r4
 800993e:	4630      	mov	r0, r6
 8009940:	f7fe f91e 	bl	8007b80 <__sflush_r>
 8009944:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009946:	4605      	mov	r5, r0
 8009948:	b133      	cbz	r3, 8009958 <_fclose_r+0x5c>
 800994a:	69e1      	ldr	r1, [r4, #28]
 800994c:	4630      	mov	r0, r6
 800994e:	4798      	blx	r3
 8009950:	2800      	cmp	r0, #0
 8009952:	bfb8      	it	lt
 8009954:	f04f 35ff 	movlt.w	r5, #4294967295
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	061a      	lsls	r2, r3, #24
 800995c:	d503      	bpl.n	8009966 <_fclose_r+0x6a>
 800995e:	6921      	ldr	r1, [r4, #16]
 8009960:	4630      	mov	r0, r6
 8009962:	f7fe fa97 	bl	8007e94 <_free_r>
 8009966:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009968:	b141      	cbz	r1, 800997c <_fclose_r+0x80>
 800996a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800996e:	4299      	cmp	r1, r3
 8009970:	d002      	beq.n	8009978 <_fclose_r+0x7c>
 8009972:	4630      	mov	r0, r6
 8009974:	f7fe fa8e 	bl	8007e94 <_free_r>
 8009978:	2300      	movs	r3, #0
 800997a:	6323      	str	r3, [r4, #48]	; 0x30
 800997c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800997e:	b121      	cbz	r1, 800998a <_fclose_r+0x8e>
 8009980:	4630      	mov	r0, r6
 8009982:	f7fe fa87 	bl	8007e94 <_free_r>
 8009986:	2300      	movs	r3, #0
 8009988:	6463      	str	r3, [r4, #68]	; 0x44
 800998a:	f7fe f9db 	bl	8007d44 <__sfp_lock_acquire>
 800998e:	2300      	movs	r3, #0
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009994:	07db      	lsls	r3, r3, #31
 8009996:	d402      	bmi.n	800999e <_fclose_r+0xa2>
 8009998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800999a:	f7fe fb62 	bl	8008062 <__retarget_lock_release_recursive>
 800999e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099a0:	f7fe fb5d 	bl	800805e <__retarget_lock_close_recursive>
 80099a4:	f7fe f9d4 	bl	8007d50 <__sfp_lock_release>
 80099a8:	e7ad      	b.n	8009906 <_fclose_r+0xa>
	...

080099ac <fiprintf>:
 80099ac:	b40e      	push	{r1, r2, r3}
 80099ae:	b503      	push	{r0, r1, lr}
 80099b0:	4601      	mov	r1, r0
 80099b2:	ab03      	add	r3, sp, #12
 80099b4:	4805      	ldr	r0, [pc, #20]	; (80099cc <fiprintf+0x20>)
 80099b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ba:	6800      	ldr	r0, [r0, #0]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	f7ff fa27 	bl	8008e10 <_vfiprintf_r>
 80099c2:	b002      	add	sp, #8
 80099c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c8:	b003      	add	sp, #12
 80099ca:	4770      	bx	lr
 80099cc:	20000020 	.word	0x20000020

080099d0 <__fputwc>:
 80099d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	4680      	mov	r8, r0
 80099d6:	460e      	mov	r6, r1
 80099d8:	4615      	mov	r5, r2
 80099da:	f000 f9d1 	bl	8009d80 <__locale_mb_cur_max>
 80099de:	2801      	cmp	r0, #1
 80099e0:	d11c      	bne.n	8009a1c <__fputwc+0x4c>
 80099e2:	1e73      	subs	r3, r6, #1
 80099e4:	2bfe      	cmp	r3, #254	; 0xfe
 80099e6:	d819      	bhi.n	8009a1c <__fputwc+0x4c>
 80099e8:	f88d 6004 	strb.w	r6, [sp, #4]
 80099ec:	4604      	mov	r4, r0
 80099ee:	2700      	movs	r7, #0
 80099f0:	f10d 0904 	add.w	r9, sp, #4
 80099f4:	42a7      	cmp	r7, r4
 80099f6:	d020      	beq.n	8009a3a <__fputwc+0x6a>
 80099f8:	68ab      	ldr	r3, [r5, #8]
 80099fa:	f817 1009 	ldrb.w	r1, [r7, r9]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	60ab      	str	r3, [r5, #8]
 8009a04:	da04      	bge.n	8009a10 <__fputwc+0x40>
 8009a06:	69aa      	ldr	r2, [r5, #24]
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	db1a      	blt.n	8009a42 <__fputwc+0x72>
 8009a0c:	290a      	cmp	r1, #10
 8009a0e:	d018      	beq.n	8009a42 <__fputwc+0x72>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	7019      	strb	r1, [r3, #0]
 8009a18:	3701      	adds	r7, #1
 8009a1a:	e7eb      	b.n	80099f4 <__fputwc+0x24>
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8009a22:	a901      	add	r1, sp, #4
 8009a24:	4640      	mov	r0, r8
 8009a26:	f000 fbf1 	bl	800a20c <_wcrtomb_r>
 8009a2a:	1c42      	adds	r2, r0, #1
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	d1de      	bne.n	80099ee <__fputwc+0x1e>
 8009a30:	89ab      	ldrh	r3, [r5, #12]
 8009a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a36:	81ab      	strh	r3, [r5, #12]
 8009a38:	4606      	mov	r6, r0
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	b003      	add	sp, #12
 8009a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a42:	462a      	mov	r2, r5
 8009a44:	4640      	mov	r0, r8
 8009a46:	f000 fb97 	bl	800a178 <__swbuf_r>
 8009a4a:	1c43      	adds	r3, r0, #1
 8009a4c:	d1e4      	bne.n	8009a18 <__fputwc+0x48>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	e7f3      	b.n	8009a3a <__fputwc+0x6a>

08009a52 <_fputwc_r>:
 8009a52:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a56:	4614      	mov	r4, r2
 8009a58:	07da      	lsls	r2, r3, #31
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	d407      	bmi.n	8009a6e <_fputwc_r+0x1c>
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	059b      	lsls	r3, r3, #22
 8009a62:	d404      	bmi.n	8009a6e <_fputwc_r+0x1c>
 8009a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a66:	9101      	str	r1, [sp, #4]
 8009a68:	f7fe fafa 	bl	8008060 <__retarget_lock_acquire_recursive>
 8009a6c:	9901      	ldr	r1, [sp, #4]
 8009a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a72:	0498      	lsls	r0, r3, #18
 8009a74:	d406      	bmi.n	8009a84 <_fputwc_r+0x32>
 8009a76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009a82:	6663      	str	r3, [r4, #100]	; 0x64
 8009a84:	4622      	mov	r2, r4
 8009a86:	4628      	mov	r0, r5
 8009a88:	f7ff ffa2 	bl	80099d0 <__fputwc>
 8009a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a8e:	07da      	lsls	r2, r3, #31
 8009a90:	4605      	mov	r5, r0
 8009a92:	d405      	bmi.n	8009aa0 <_fputwc_r+0x4e>
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	059b      	lsls	r3, r3, #22
 8009a98:	d402      	bmi.n	8009aa0 <_fputwc_r+0x4e>
 8009a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a9c:	f7fe fae1 	bl	8008062 <__retarget_lock_release_recursive>
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	b003      	add	sp, #12
 8009aa4:	bd30      	pop	{r4, r5, pc}
	...

08009aa8 <_fstat_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d07      	ldr	r5, [pc, #28]	; (8009ac8 <_fstat_r+0x20>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	602b      	str	r3, [r5, #0]
 8009ab6:	f7f8 f81e 	bl	8001af6 <_fstat>
 8009aba:	1c43      	adds	r3, r0, #1
 8009abc:	d102      	bne.n	8009ac4 <_fstat_r+0x1c>
 8009abe:	682b      	ldr	r3, [r5, #0]
 8009ac0:	b103      	cbz	r3, 8009ac4 <_fstat_r+0x1c>
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	bd38      	pop	{r3, r4, r5, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20002db0 	.word	0x20002db0

08009acc <__sfvwrite_r>:
 8009acc:	6893      	ldr	r3, [r2, #8]
 8009ace:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	4690      	mov	r8, r2
 8009ad8:	b91b      	cbnz	r3, 8009ae2 <__sfvwrite_r+0x16>
 8009ada:	2000      	movs	r0, #0
 8009adc:	b003      	add	sp, #12
 8009ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae2:	898b      	ldrh	r3, [r1, #12]
 8009ae4:	0718      	lsls	r0, r3, #28
 8009ae6:	d550      	bpl.n	8009b8a <__sfvwrite_r+0xbe>
 8009ae8:	690b      	ldr	r3, [r1, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d04d      	beq.n	8009b8a <__sfvwrite_r+0xbe>
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f8d8 7000 	ldr.w	r7, [r8]
 8009af4:	f013 0902 	ands.w	r9, r3, #2
 8009af8:	d16c      	bne.n	8009bd4 <__sfvwrite_r+0x108>
 8009afa:	f013 0301 	ands.w	r3, r3, #1
 8009afe:	f000 809c 	beq.w	8009c3a <__sfvwrite_r+0x16e>
 8009b02:	4648      	mov	r0, r9
 8009b04:	46ca      	mov	sl, r9
 8009b06:	46cb      	mov	fp, r9
 8009b08:	f1bb 0f00 	cmp.w	fp, #0
 8009b0c:	f000 8103 	beq.w	8009d16 <__sfvwrite_r+0x24a>
 8009b10:	b950      	cbnz	r0, 8009b28 <__sfvwrite_r+0x5c>
 8009b12:	465a      	mov	r2, fp
 8009b14:	210a      	movs	r1, #10
 8009b16:	4650      	mov	r0, sl
 8009b18:	f7f6 fb5a 	bl	80001d0 <memchr>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f000 80ff 	beq.w	8009d20 <__sfvwrite_r+0x254>
 8009b22:	3001      	adds	r0, #1
 8009b24:	eba0 090a 	sub.w	r9, r0, sl
 8009b28:	6820      	ldr	r0, [r4, #0]
 8009b2a:	6921      	ldr	r1, [r4, #16]
 8009b2c:	6963      	ldr	r3, [r4, #20]
 8009b2e:	45d9      	cmp	r9, fp
 8009b30:	464a      	mov	r2, r9
 8009b32:	bf28      	it	cs
 8009b34:	465a      	movcs	r2, fp
 8009b36:	4288      	cmp	r0, r1
 8009b38:	f240 80f5 	bls.w	8009d26 <__sfvwrite_r+0x25a>
 8009b3c:	68a5      	ldr	r5, [r4, #8]
 8009b3e:	441d      	add	r5, r3
 8009b40:	42aa      	cmp	r2, r5
 8009b42:	f340 80f0 	ble.w	8009d26 <__sfvwrite_r+0x25a>
 8009b46:	4651      	mov	r1, sl
 8009b48:	462a      	mov	r2, r5
 8009b4a:	f000 f943 	bl	8009dd4 <memmove>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	442b      	add	r3, r5
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	4621      	mov	r1, r4
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7fe f8a0 	bl	8007c9c <_fflush_r>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d167      	bne.n	8009c30 <__sfvwrite_r+0x164>
 8009b60:	ebb9 0905 	subs.w	r9, r9, r5
 8009b64:	f040 80f7 	bne.w	8009d56 <__sfvwrite_r+0x28a>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7fe f896 	bl	8007c9c <_fflush_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d15d      	bne.n	8009c30 <__sfvwrite_r+0x164>
 8009b74:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009b78:	44aa      	add	sl, r5
 8009b7a:	ebab 0b05 	sub.w	fp, fp, r5
 8009b7e:	1b55      	subs	r5, r2, r5
 8009b80:	f8c8 5008 	str.w	r5, [r8, #8]
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	d1bf      	bne.n	8009b08 <__sfvwrite_r+0x3c>
 8009b88:	e7a7      	b.n	8009ada <__sfvwrite_r+0xe>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f7fd f92d 	bl	8006dec <__swsetup_r>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d0ab      	beq.n	8009aee <__sfvwrite_r+0x22>
 8009b96:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9a:	e79f      	b.n	8009adc <__sfvwrite_r+0x10>
 8009b9c:	e9d7 b900 	ldrd	fp, r9, [r7]
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	f1b9 0f00 	cmp.w	r9, #0
 8009ba6:	d0f9      	beq.n	8009b9c <__sfvwrite_r+0xd0>
 8009ba8:	45d1      	cmp	r9, sl
 8009baa:	464b      	mov	r3, r9
 8009bac:	69e1      	ldr	r1, [r4, #28]
 8009bae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009bb0:	bf28      	it	cs
 8009bb2:	4653      	movcs	r3, sl
 8009bb4:	465a      	mov	r2, fp
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	47a8      	blx	r5
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	dd38      	ble.n	8009c30 <__sfvwrite_r+0x164>
 8009bbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bc2:	4483      	add	fp, r0
 8009bc4:	eba9 0900 	sub.w	r9, r9, r0
 8009bc8:	1a18      	subs	r0, r3, r0
 8009bca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d1e7      	bne.n	8009ba2 <__sfvwrite_r+0xd6>
 8009bd2:	e782      	b.n	8009ada <__sfvwrite_r+0xe>
 8009bd4:	f04f 0b00 	mov.w	fp, #0
 8009bd8:	f8df a180 	ldr.w	sl, [pc, #384]	; 8009d5c <__sfvwrite_r+0x290>
 8009bdc:	46d9      	mov	r9, fp
 8009bde:	e7e0      	b.n	8009ba2 <__sfvwrite_r+0xd6>
 8009be0:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8009be4:	3708      	adds	r7, #8
 8009be6:	f1ba 0f00 	cmp.w	sl, #0
 8009bea:	d0f9      	beq.n	8009be0 <__sfvwrite_r+0x114>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	68a2      	ldr	r2, [r4, #8]
 8009bf0:	6820      	ldr	r0, [r4, #0]
 8009bf2:	0599      	lsls	r1, r3, #22
 8009bf4:	d563      	bpl.n	8009cbe <__sfvwrite_r+0x1f2>
 8009bf6:	4552      	cmp	r2, sl
 8009bf8:	d836      	bhi.n	8009c68 <__sfvwrite_r+0x19c>
 8009bfa:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009bfe:	d033      	beq.n	8009c68 <__sfvwrite_r+0x19c>
 8009c00:	6921      	ldr	r1, [r4, #16]
 8009c02:	6965      	ldr	r5, [r4, #20]
 8009c04:	eba0 0b01 	sub.w	fp, r0, r1
 8009c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c10:	f10b 0201 	add.w	r2, fp, #1
 8009c14:	106d      	asrs	r5, r5, #1
 8009c16:	4452      	add	r2, sl
 8009c18:	4295      	cmp	r5, r2
 8009c1a:	bf38      	it	cc
 8009c1c:	4615      	movcc	r5, r2
 8009c1e:	055b      	lsls	r3, r3, #21
 8009c20:	d53d      	bpl.n	8009c9e <__sfvwrite_r+0x1d2>
 8009c22:	4629      	mov	r1, r5
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7fe fa89 	bl	800813c <_malloc_r>
 8009c2a:	b948      	cbnz	r0, 8009c40 <__sfvwrite_r+0x174>
 8009c2c:	230c      	movs	r3, #12
 8009c2e:	6033      	str	r3, [r6, #0]
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	e7ad      	b.n	8009b96 <__sfvwrite_r+0xca>
 8009c3a:	4699      	mov	r9, r3
 8009c3c:	469a      	mov	sl, r3
 8009c3e:	e7d2      	b.n	8009be6 <__sfvwrite_r+0x11a>
 8009c40:	465a      	mov	r2, fp
 8009c42:	6921      	ldr	r1, [r4, #16]
 8009c44:	9001      	str	r0, [sp, #4]
 8009c46:	f7fe fcbb 	bl	80085c0 <memcpy>
 8009c4a:	89a2      	ldrh	r2, [r4, #12]
 8009c4c:	9b01      	ldr	r3, [sp, #4]
 8009c4e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c56:	81a2      	strh	r2, [r4, #12]
 8009c58:	6123      	str	r3, [r4, #16]
 8009c5a:	6165      	str	r5, [r4, #20]
 8009c5c:	445b      	add	r3, fp
 8009c5e:	eba5 050b 	sub.w	r5, r5, fp
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	4652      	mov	r2, sl
 8009c66:	60a5      	str	r5, [r4, #8]
 8009c68:	4552      	cmp	r2, sl
 8009c6a:	bf28      	it	cs
 8009c6c:	4652      	movcs	r2, sl
 8009c6e:	6820      	ldr	r0, [r4, #0]
 8009c70:	9201      	str	r2, [sp, #4]
 8009c72:	4649      	mov	r1, r9
 8009c74:	f000 f8ae 	bl	8009dd4 <memmove>
 8009c78:	68a3      	ldr	r3, [r4, #8]
 8009c7a:	9a01      	ldr	r2, [sp, #4]
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	60a3      	str	r3, [r4, #8]
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	441a      	add	r2, r3
 8009c84:	4655      	mov	r5, sl
 8009c86:	6022      	str	r2, [r4, #0]
 8009c88:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8009c8c:	44a9      	add	r9, r5
 8009c8e:	ebaa 0a05 	sub.w	sl, sl, r5
 8009c92:	1b45      	subs	r5, r0, r5
 8009c94:	f8c8 5008 	str.w	r5, [r8, #8]
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	d1a4      	bne.n	8009be6 <__sfvwrite_r+0x11a>
 8009c9c:	e71d      	b.n	8009ada <__sfvwrite_r+0xe>
 8009c9e:	462a      	mov	r2, r5
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f000 f8c3 	bl	8009e2c <_realloc_r>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d1d5      	bne.n	8009c58 <__sfvwrite_r+0x18c>
 8009cac:	6921      	ldr	r1, [r4, #16]
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7fe f8f0 	bl	8007e94 <_free_r>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	e7b6      	b.n	8009c2c <__sfvwrite_r+0x160>
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	4283      	cmp	r3, r0
 8009cc2:	d302      	bcc.n	8009cca <__sfvwrite_r+0x1fe>
 8009cc4:	6961      	ldr	r1, [r4, #20]
 8009cc6:	4551      	cmp	r1, sl
 8009cc8:	d915      	bls.n	8009cf6 <__sfvwrite_r+0x22a>
 8009cca:	4552      	cmp	r2, sl
 8009ccc:	bf28      	it	cs
 8009cce:	4652      	movcs	r2, sl
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	4615      	mov	r5, r2
 8009cd4:	f000 f87e 	bl	8009dd4 <memmove>
 8009cd8:	68a3      	ldr	r3, [r4, #8]
 8009cda:	6822      	ldr	r2, [r4, #0]
 8009cdc:	1b5b      	subs	r3, r3, r5
 8009cde:	442a      	add	r2, r5
 8009ce0:	60a3      	str	r3, [r4, #8]
 8009ce2:	6022      	str	r2, [r4, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1cf      	bne.n	8009c88 <__sfvwrite_r+0x1bc>
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4630      	mov	r0, r6
 8009cec:	f7fd ffd6 	bl	8007c9c <_fflush_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d0c9      	beq.n	8009c88 <__sfvwrite_r+0x1bc>
 8009cf4:	e79c      	b.n	8009c30 <__sfvwrite_r+0x164>
 8009cf6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009cfa:	459a      	cmp	sl, r3
 8009cfc:	bf38      	it	cc
 8009cfe:	4653      	movcc	r3, sl
 8009d00:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009d02:	fb93 f3f1 	sdiv	r3, r3, r1
 8009d06:	464a      	mov	r2, r9
 8009d08:	434b      	muls	r3, r1
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	69e1      	ldr	r1, [r4, #28]
 8009d0e:	47a8      	blx	r5
 8009d10:	1e05      	subs	r5, r0, #0
 8009d12:	dcb9      	bgt.n	8009c88 <__sfvwrite_r+0x1bc>
 8009d14:	e78c      	b.n	8009c30 <__sfvwrite_r+0x164>
 8009d16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	e6f3      	b.n	8009b08 <__sfvwrite_r+0x3c>
 8009d20:	f10b 0901 	add.w	r9, fp, #1
 8009d24:	e700      	b.n	8009b28 <__sfvwrite_r+0x5c>
 8009d26:	4293      	cmp	r3, r2
 8009d28:	dc08      	bgt.n	8009d3c <__sfvwrite_r+0x270>
 8009d2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009d2c:	69e1      	ldr	r1, [r4, #28]
 8009d2e:	4652      	mov	r2, sl
 8009d30:	4630      	mov	r0, r6
 8009d32:	47a8      	blx	r5
 8009d34:	1e05      	subs	r5, r0, #0
 8009d36:	f73f af13 	bgt.w	8009b60 <__sfvwrite_r+0x94>
 8009d3a:	e779      	b.n	8009c30 <__sfvwrite_r+0x164>
 8009d3c:	4651      	mov	r1, sl
 8009d3e:	9201      	str	r2, [sp, #4]
 8009d40:	f000 f848 	bl	8009dd4 <memmove>
 8009d44:	9a01      	ldr	r2, [sp, #4]
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	1a9b      	subs	r3, r3, r2
 8009d4a:	60a3      	str	r3, [r4, #8]
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	4413      	add	r3, r2
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	4615      	mov	r5, r2
 8009d54:	e704      	b.n	8009b60 <__sfvwrite_r+0x94>
 8009d56:	2001      	movs	r0, #1
 8009d58:	e70c      	b.n	8009b74 <__sfvwrite_r+0xa8>
 8009d5a:	bf00      	nop
 8009d5c:	7ffffc00 	.word	0x7ffffc00

08009d60 <_isatty_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d06      	ldr	r5, [pc, #24]	; (8009d7c <_isatty_r+0x1c>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f7 fed3 	bl	8001b16 <_isatty>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_isatty_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_isatty_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	20002db0 	.word	0x20002db0

08009d80 <__locale_mb_cur_max>:
 8009d80:	4b01      	ldr	r3, [pc, #4]	; (8009d88 <__locale_mb_cur_max+0x8>)
 8009d82:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009d86:	4770      	bx	lr
 8009d88:	20000864 	.word	0x20000864

08009d8c <_lseek_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d07      	ldr	r5, [pc, #28]	; (8009dac <_lseek_r+0x20>)
 8009d90:	4604      	mov	r4, r0
 8009d92:	4608      	mov	r0, r1
 8009d94:	4611      	mov	r1, r2
 8009d96:	2200      	movs	r2, #0
 8009d98:	602a      	str	r2, [r5, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f7f7 fec6 	bl	8001b2c <_lseek>
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	d102      	bne.n	8009daa <_lseek_r+0x1e>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	b103      	cbz	r3, 8009daa <_lseek_r+0x1e>
 8009da8:	6023      	str	r3, [r4, #0]
 8009daa:	bd38      	pop	{r3, r4, r5, pc}
 8009dac:	20002db0 	.word	0x20002db0

08009db0 <__ascii_mbtowc>:
 8009db0:	b082      	sub	sp, #8
 8009db2:	b901      	cbnz	r1, 8009db6 <__ascii_mbtowc+0x6>
 8009db4:	a901      	add	r1, sp, #4
 8009db6:	b142      	cbz	r2, 8009dca <__ascii_mbtowc+0x1a>
 8009db8:	b14b      	cbz	r3, 8009dce <__ascii_mbtowc+0x1e>
 8009dba:	7813      	ldrb	r3, [r2, #0]
 8009dbc:	600b      	str	r3, [r1, #0]
 8009dbe:	7812      	ldrb	r2, [r2, #0]
 8009dc0:	1e10      	subs	r0, r2, #0
 8009dc2:	bf18      	it	ne
 8009dc4:	2001      	movne	r0, #1
 8009dc6:	b002      	add	sp, #8
 8009dc8:	4770      	bx	lr
 8009dca:	4610      	mov	r0, r2
 8009dcc:	e7fb      	b.n	8009dc6 <__ascii_mbtowc+0x16>
 8009dce:	f06f 0001 	mvn.w	r0, #1
 8009dd2:	e7f8      	b.n	8009dc6 <__ascii_mbtowc+0x16>

08009dd4 <memmove>:
 8009dd4:	4288      	cmp	r0, r1
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	eb01 0402 	add.w	r4, r1, r2
 8009ddc:	d902      	bls.n	8009de4 <memmove+0x10>
 8009dde:	4284      	cmp	r4, r0
 8009de0:	4623      	mov	r3, r4
 8009de2:	d807      	bhi.n	8009df4 <memmove+0x20>
 8009de4:	1e43      	subs	r3, r0, #1
 8009de6:	42a1      	cmp	r1, r4
 8009de8:	d008      	beq.n	8009dfc <memmove+0x28>
 8009dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009df2:	e7f8      	b.n	8009de6 <memmove+0x12>
 8009df4:	4402      	add	r2, r0
 8009df6:	4601      	mov	r1, r0
 8009df8:	428a      	cmp	r2, r1
 8009dfa:	d100      	bne.n	8009dfe <memmove+0x2a>
 8009dfc:	bd10      	pop	{r4, pc}
 8009dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e06:	e7f7      	b.n	8009df8 <memmove+0x24>

08009e08 <_read_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	; (8009e28 <_read_r+0x20>)
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4611      	mov	r1, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	602a      	str	r2, [r5, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	f7f7 fe44 	bl	8001aa4 <_read>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_read_r+0x1e>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_read_r+0x1e>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	20002db0 	.word	0x20002db0

08009e2c <_realloc_r>:
 8009e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	4681      	mov	r9, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	b929      	cbnz	r1, 8009e42 <_realloc_r+0x16>
 8009e36:	4611      	mov	r1, r2
 8009e38:	b003      	add	sp, #12
 8009e3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3e:	f7fe b97d 	b.w	800813c <_malloc_r>
 8009e42:	9201      	str	r2, [sp, #4]
 8009e44:	f7fe fbca 	bl	80085dc <__malloc_lock>
 8009e48:	9a01      	ldr	r2, [sp, #4]
 8009e4a:	f102 080b 	add.w	r8, r2, #11
 8009e4e:	f1b8 0f16 	cmp.w	r8, #22
 8009e52:	d90b      	bls.n	8009e6c <_realloc_r+0x40>
 8009e54:	f038 0807 	bics.w	r8, r8, #7
 8009e58:	d50a      	bpl.n	8009e70 <_realloc_r+0x44>
 8009e5a:	230c      	movs	r3, #12
 8009e5c:	f8c9 3000 	str.w	r3, [r9]
 8009e60:	f04f 0b00 	mov.w	fp, #0
 8009e64:	4658      	mov	r0, fp
 8009e66:	b003      	add	sp, #12
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	f04f 0810 	mov.w	r8, #16
 8009e70:	4590      	cmp	r8, r2
 8009e72:	d3f2      	bcc.n	8009e5a <_realloc_r+0x2e>
 8009e74:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009e78:	f025 0603 	bic.w	r6, r5, #3
 8009e7c:	45b0      	cmp	r8, r6
 8009e7e:	f1a4 0a08 	sub.w	sl, r4, #8
 8009e82:	f340 8170 	ble.w	800a166 <_realloc_r+0x33a>
 8009e86:	48a9      	ldr	r0, [pc, #676]	; (800a12c <_realloc_r+0x300>)
 8009e88:	9001      	str	r0, [sp, #4]
 8009e8a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8009e8e:	eb0a 0306 	add.w	r3, sl, r6
 8009e92:	459c      	cmp	ip, r3
 8009e94:	6859      	ldr	r1, [r3, #4]
 8009e96:	d005      	beq.n	8009ea4 <_realloc_r+0x78>
 8009e98:	f021 0001 	bic.w	r0, r1, #1
 8009e9c:	4418      	add	r0, r3
 8009e9e:	6840      	ldr	r0, [r0, #4]
 8009ea0:	07c7      	lsls	r7, r0, #31
 8009ea2:	d427      	bmi.n	8009ef4 <_realloc_r+0xc8>
 8009ea4:	f021 0103 	bic.w	r1, r1, #3
 8009ea8:	459c      	cmp	ip, r3
 8009eaa:	eb06 0701 	add.w	r7, r6, r1
 8009eae:	d119      	bne.n	8009ee4 <_realloc_r+0xb8>
 8009eb0:	f108 0010 	add.w	r0, r8, #16
 8009eb4:	42b8      	cmp	r0, r7
 8009eb6:	dc1f      	bgt.n	8009ef8 <_realloc_r+0xcc>
 8009eb8:	eb0a 0308 	add.w	r3, sl, r8
 8009ebc:	9a01      	ldr	r2, [sp, #4]
 8009ebe:	eba7 0708 	sub.w	r7, r7, r8
 8009ec2:	f047 0701 	orr.w	r7, r7, #1
 8009ec6:	6093      	str	r3, [r2, #8]
 8009ec8:	605f      	str	r7, [r3, #4]
 8009eca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	ea43 0308 	orr.w	r3, r3, r8
 8009ed6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eda:	4648      	mov	r0, r9
 8009edc:	f7fe fb84 	bl	80085e8 <__malloc_unlock>
 8009ee0:	46a3      	mov	fp, r4
 8009ee2:	e7bf      	b.n	8009e64 <_realloc_r+0x38>
 8009ee4:	45b8      	cmp	r8, r7
 8009ee6:	dc07      	bgt.n	8009ef8 <_realloc_r+0xcc>
 8009ee8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009eec:	60da      	str	r2, [r3, #12]
 8009eee:	6093      	str	r3, [r2, #8]
 8009ef0:	4655      	mov	r5, sl
 8009ef2:	e07f      	b.n	8009ff4 <_realloc_r+0x1c8>
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	07e8      	lsls	r0, r5, #31
 8009efa:	f100 80e5 	bmi.w	800a0c8 <_realloc_r+0x29c>
 8009efe:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009f02:	ebaa 0505 	sub.w	r5, sl, r5
 8009f06:	6868      	ldr	r0, [r5, #4]
 8009f08:	f020 0003 	bic.w	r0, r0, #3
 8009f0c:	eb00 0b06 	add.w	fp, r0, r6
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 80a5 	beq.w	800a060 <_realloc_r+0x234>
 8009f16:	459c      	cmp	ip, r3
 8009f18:	eb01 070b 	add.w	r7, r1, fp
 8009f1c:	d14a      	bne.n	8009fb4 <_realloc_r+0x188>
 8009f1e:	f108 0310 	add.w	r3, r8, #16
 8009f22:	42bb      	cmp	r3, r7
 8009f24:	f300 809c 	bgt.w	800a060 <_realloc_r+0x234>
 8009f28:	46ab      	mov	fp, r5
 8009f2a:	68eb      	ldr	r3, [r5, #12]
 8009f2c:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8009f30:	60d3      	str	r3, [r2, #12]
 8009f32:	609a      	str	r2, [r3, #8]
 8009f34:	1f32      	subs	r2, r6, #4
 8009f36:	2a24      	cmp	r2, #36	; 0x24
 8009f38:	d837      	bhi.n	8009faa <_realloc_r+0x17e>
 8009f3a:	2a13      	cmp	r2, #19
 8009f3c:	d933      	bls.n	8009fa6 <_realloc_r+0x17a>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	60ab      	str	r3, [r5, #8]
 8009f42:	6863      	ldr	r3, [r4, #4]
 8009f44:	60eb      	str	r3, [r5, #12]
 8009f46:	2a1b      	cmp	r2, #27
 8009f48:	d81b      	bhi.n	8009f82 <_realloc_r+0x156>
 8009f4a:	3408      	adds	r4, #8
 8009f4c:	f105 0310 	add.w	r3, r5, #16
 8009f50:	6822      	ldr	r2, [r4, #0]
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	6862      	ldr	r2, [r4, #4]
 8009f56:	605a      	str	r2, [r3, #4]
 8009f58:	68a2      	ldr	r2, [r4, #8]
 8009f5a:	609a      	str	r2, [r3, #8]
 8009f5c:	eb05 0308 	add.w	r3, r5, r8
 8009f60:	9a01      	ldr	r2, [sp, #4]
 8009f62:	eba7 0708 	sub.w	r7, r7, r8
 8009f66:	f047 0701 	orr.w	r7, r7, #1
 8009f6a:	6093      	str	r3, [r2, #8]
 8009f6c:	605f      	str	r7, [r3, #4]
 8009f6e:	686b      	ldr	r3, [r5, #4]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	ea43 0308 	orr.w	r3, r3, r8
 8009f78:	606b      	str	r3, [r5, #4]
 8009f7a:	4648      	mov	r0, r9
 8009f7c:	f7fe fb34 	bl	80085e8 <__malloc_unlock>
 8009f80:	e770      	b.n	8009e64 <_realloc_r+0x38>
 8009f82:	68a3      	ldr	r3, [r4, #8]
 8009f84:	612b      	str	r3, [r5, #16]
 8009f86:	68e3      	ldr	r3, [r4, #12]
 8009f88:	616b      	str	r3, [r5, #20]
 8009f8a:	2a24      	cmp	r2, #36	; 0x24
 8009f8c:	bf01      	itttt	eq
 8009f8e:	6923      	ldreq	r3, [r4, #16]
 8009f90:	61ab      	streq	r3, [r5, #24]
 8009f92:	6962      	ldreq	r2, [r4, #20]
 8009f94:	61ea      	streq	r2, [r5, #28]
 8009f96:	bf19      	ittee	ne
 8009f98:	3410      	addne	r4, #16
 8009f9a:	f105 0318 	addne.w	r3, r5, #24
 8009f9e:	f105 0320 	addeq.w	r3, r5, #32
 8009fa2:	3418      	addeq	r4, #24
 8009fa4:	e7d4      	b.n	8009f50 <_realloc_r+0x124>
 8009fa6:	465b      	mov	r3, fp
 8009fa8:	e7d2      	b.n	8009f50 <_realloc_r+0x124>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4658      	mov	r0, fp
 8009fae:	f7ff ff11 	bl	8009dd4 <memmove>
 8009fb2:	e7d3      	b.n	8009f5c <_realloc_r+0x130>
 8009fb4:	45b8      	cmp	r8, r7
 8009fb6:	dc53      	bgt.n	800a060 <_realloc_r+0x234>
 8009fb8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	60da      	str	r2, [r3, #12]
 8009fc0:	6093      	str	r3, [r2, #8]
 8009fc2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009fc6:	68eb      	ldr	r3, [r5, #12]
 8009fc8:	60d3      	str	r3, [r2, #12]
 8009fca:	609a      	str	r2, [r3, #8]
 8009fcc:	1f32      	subs	r2, r6, #4
 8009fce:	2a24      	cmp	r2, #36	; 0x24
 8009fd0:	d842      	bhi.n	800a058 <_realloc_r+0x22c>
 8009fd2:	2a13      	cmp	r2, #19
 8009fd4:	d908      	bls.n	8009fe8 <_realloc_r+0x1bc>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	60ab      	str	r3, [r5, #8]
 8009fda:	6863      	ldr	r3, [r4, #4]
 8009fdc:	60eb      	str	r3, [r5, #12]
 8009fde:	2a1b      	cmp	r2, #27
 8009fe0:	d828      	bhi.n	800a034 <_realloc_r+0x208>
 8009fe2:	3408      	adds	r4, #8
 8009fe4:	f105 0010 	add.w	r0, r5, #16
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	6003      	str	r3, [r0, #0]
 8009fec:	6863      	ldr	r3, [r4, #4]
 8009fee:	6043      	str	r3, [r0, #4]
 8009ff0:	68a3      	ldr	r3, [r4, #8]
 8009ff2:	6083      	str	r3, [r0, #8]
 8009ff4:	686a      	ldr	r2, [r5, #4]
 8009ff6:	eba7 0008 	sub.w	r0, r7, r8
 8009ffa:	280f      	cmp	r0, #15
 8009ffc:	f002 0201 	and.w	r2, r2, #1
 800a000:	eb05 0307 	add.w	r3, r5, r7
 800a004:	f240 80b1 	bls.w	800a16a <_realloc_r+0x33e>
 800a008:	eb05 0108 	add.w	r1, r5, r8
 800a00c:	ea48 0202 	orr.w	r2, r8, r2
 800a010:	f040 0001 	orr.w	r0, r0, #1
 800a014:	606a      	str	r2, [r5, #4]
 800a016:	6048      	str	r0, [r1, #4]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	605a      	str	r2, [r3, #4]
 800a020:	3108      	adds	r1, #8
 800a022:	4648      	mov	r0, r9
 800a024:	f7fd ff36 	bl	8007e94 <_free_r>
 800a028:	4648      	mov	r0, r9
 800a02a:	f7fe fadd 	bl	80085e8 <__malloc_unlock>
 800a02e:	f105 0b08 	add.w	fp, r5, #8
 800a032:	e717      	b.n	8009e64 <_realloc_r+0x38>
 800a034:	68a3      	ldr	r3, [r4, #8]
 800a036:	612b      	str	r3, [r5, #16]
 800a038:	68e3      	ldr	r3, [r4, #12]
 800a03a:	616b      	str	r3, [r5, #20]
 800a03c:	2a24      	cmp	r2, #36	; 0x24
 800a03e:	bf01      	itttt	eq
 800a040:	6923      	ldreq	r3, [r4, #16]
 800a042:	61ab      	streq	r3, [r5, #24]
 800a044:	6963      	ldreq	r3, [r4, #20]
 800a046:	61eb      	streq	r3, [r5, #28]
 800a048:	bf19      	ittee	ne
 800a04a:	3410      	addne	r4, #16
 800a04c:	f105 0018 	addne.w	r0, r5, #24
 800a050:	f105 0020 	addeq.w	r0, r5, #32
 800a054:	3418      	addeq	r4, #24
 800a056:	e7c7      	b.n	8009fe8 <_realloc_r+0x1bc>
 800a058:	4621      	mov	r1, r4
 800a05a:	f7ff febb 	bl	8009dd4 <memmove>
 800a05e:	e7c9      	b.n	8009ff4 <_realloc_r+0x1c8>
 800a060:	45d8      	cmp	r8, fp
 800a062:	dc31      	bgt.n	800a0c8 <_realloc_r+0x29c>
 800a064:	4628      	mov	r0, r5
 800a066:	68eb      	ldr	r3, [r5, #12]
 800a068:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a06c:	60d3      	str	r3, [r2, #12]
 800a06e:	609a      	str	r2, [r3, #8]
 800a070:	1f32      	subs	r2, r6, #4
 800a072:	2a24      	cmp	r2, #36	; 0x24
 800a074:	d824      	bhi.n	800a0c0 <_realloc_r+0x294>
 800a076:	2a13      	cmp	r2, #19
 800a078:	d908      	bls.n	800a08c <_realloc_r+0x260>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	60ab      	str	r3, [r5, #8]
 800a07e:	6863      	ldr	r3, [r4, #4]
 800a080:	60eb      	str	r3, [r5, #12]
 800a082:	2a1b      	cmp	r2, #27
 800a084:	d80a      	bhi.n	800a09c <_realloc_r+0x270>
 800a086:	3408      	adds	r4, #8
 800a088:	f105 0010 	add.w	r0, r5, #16
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	6003      	str	r3, [r0, #0]
 800a090:	6863      	ldr	r3, [r4, #4]
 800a092:	6043      	str	r3, [r0, #4]
 800a094:	68a3      	ldr	r3, [r4, #8]
 800a096:	6083      	str	r3, [r0, #8]
 800a098:	465f      	mov	r7, fp
 800a09a:	e7ab      	b.n	8009ff4 <_realloc_r+0x1c8>
 800a09c:	68a3      	ldr	r3, [r4, #8]
 800a09e:	612b      	str	r3, [r5, #16]
 800a0a0:	68e3      	ldr	r3, [r4, #12]
 800a0a2:	616b      	str	r3, [r5, #20]
 800a0a4:	2a24      	cmp	r2, #36	; 0x24
 800a0a6:	bf01      	itttt	eq
 800a0a8:	6923      	ldreq	r3, [r4, #16]
 800a0aa:	61ab      	streq	r3, [r5, #24]
 800a0ac:	6963      	ldreq	r3, [r4, #20]
 800a0ae:	61eb      	streq	r3, [r5, #28]
 800a0b0:	bf19      	ittee	ne
 800a0b2:	3410      	addne	r4, #16
 800a0b4:	f105 0018 	addne.w	r0, r5, #24
 800a0b8:	f105 0020 	addeq.w	r0, r5, #32
 800a0bc:	3418      	addeq	r4, #24
 800a0be:	e7e5      	b.n	800a08c <_realloc_r+0x260>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	f7ff fe87 	bl	8009dd4 <memmove>
 800a0c6:	e7e7      	b.n	800a098 <_realloc_r+0x26c>
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4648      	mov	r0, r9
 800a0cc:	f7fe f836 	bl	800813c <_malloc_r>
 800a0d0:	4683      	mov	fp, r0
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	f43f af51 	beq.w	8009f7a <_realloc_r+0x14e>
 800a0d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a0dc:	f023 0301 	bic.w	r3, r3, #1
 800a0e0:	4453      	add	r3, sl
 800a0e2:	f1a0 0208 	sub.w	r2, r0, #8
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d105      	bne.n	800a0f6 <_realloc_r+0x2ca>
 800a0ea:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a0ee:	f027 0703 	bic.w	r7, r7, #3
 800a0f2:	4437      	add	r7, r6
 800a0f4:	e6fc      	b.n	8009ef0 <_realloc_r+0xc4>
 800a0f6:	1f32      	subs	r2, r6, #4
 800a0f8:	2a24      	cmp	r2, #36	; 0x24
 800a0fa:	d830      	bhi.n	800a15e <_realloc_r+0x332>
 800a0fc:	2a13      	cmp	r2, #19
 800a0fe:	d92b      	bls.n	800a158 <_realloc_r+0x32c>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	6003      	str	r3, [r0, #0]
 800a104:	6863      	ldr	r3, [r4, #4]
 800a106:	6043      	str	r3, [r0, #4]
 800a108:	2a1b      	cmp	r2, #27
 800a10a:	d811      	bhi.n	800a130 <_realloc_r+0x304>
 800a10c:	f104 0208 	add.w	r2, r4, #8
 800a110:	f100 0308 	add.w	r3, r0, #8
 800a114:	6811      	ldr	r1, [r2, #0]
 800a116:	6019      	str	r1, [r3, #0]
 800a118:	6851      	ldr	r1, [r2, #4]
 800a11a:	6059      	str	r1, [r3, #4]
 800a11c:	6892      	ldr	r2, [r2, #8]
 800a11e:	609a      	str	r2, [r3, #8]
 800a120:	4621      	mov	r1, r4
 800a122:	4648      	mov	r0, r9
 800a124:	f7fd feb6 	bl	8007e94 <_free_r>
 800a128:	e727      	b.n	8009f7a <_realloc_r+0x14e>
 800a12a:	bf00      	nop
 800a12c:	20000454 	.word	0x20000454
 800a130:	68a3      	ldr	r3, [r4, #8]
 800a132:	6083      	str	r3, [r0, #8]
 800a134:	68e3      	ldr	r3, [r4, #12]
 800a136:	60c3      	str	r3, [r0, #12]
 800a138:	2a24      	cmp	r2, #36	; 0x24
 800a13a:	bf01      	itttt	eq
 800a13c:	6923      	ldreq	r3, [r4, #16]
 800a13e:	6103      	streq	r3, [r0, #16]
 800a140:	6961      	ldreq	r1, [r4, #20]
 800a142:	6141      	streq	r1, [r0, #20]
 800a144:	bf19      	ittee	ne
 800a146:	f104 0210 	addne.w	r2, r4, #16
 800a14a:	f100 0310 	addne.w	r3, r0, #16
 800a14e:	f104 0218 	addeq.w	r2, r4, #24
 800a152:	f100 0318 	addeq.w	r3, r0, #24
 800a156:	e7dd      	b.n	800a114 <_realloc_r+0x2e8>
 800a158:	4603      	mov	r3, r0
 800a15a:	4622      	mov	r2, r4
 800a15c:	e7da      	b.n	800a114 <_realloc_r+0x2e8>
 800a15e:	4621      	mov	r1, r4
 800a160:	f7ff fe38 	bl	8009dd4 <memmove>
 800a164:	e7dc      	b.n	800a120 <_realloc_r+0x2f4>
 800a166:	4637      	mov	r7, r6
 800a168:	e6c2      	b.n	8009ef0 <_realloc_r+0xc4>
 800a16a:	4317      	orrs	r7, r2
 800a16c:	606f      	str	r7, [r5, #4]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	f042 0201 	orr.w	r2, r2, #1
 800a174:	605a      	str	r2, [r3, #4]
 800a176:	e757      	b.n	800a028 <_realloc_r+0x1fc>

0800a178 <__swbuf_r>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	460e      	mov	r6, r1
 800a17c:	4614      	mov	r4, r2
 800a17e:	4605      	mov	r5, r0
 800a180:	b118      	cbz	r0, 800a18a <__swbuf_r+0x12>
 800a182:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a184:	b90b      	cbnz	r3, 800a18a <__swbuf_r+0x12>
 800a186:	f7fd fdf5 	bl	8007d74 <__sinit>
 800a18a:	69a3      	ldr	r3, [r4, #24]
 800a18c:	60a3      	str	r3, [r4, #8]
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	0719      	lsls	r1, r3, #28
 800a192:	d529      	bpl.n	800a1e8 <__swbuf_r+0x70>
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	b33b      	cbz	r3, 800a1e8 <__swbuf_r+0x70>
 800a198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19c:	b2f6      	uxtb	r6, r6
 800a19e:	049a      	lsls	r2, r3, #18
 800a1a0:	4637      	mov	r7, r6
 800a1a2:	d52a      	bpl.n	800a1fa <__swbuf_r+0x82>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	6920      	ldr	r0, [r4, #16]
 800a1a8:	1a18      	subs	r0, r3, r0
 800a1aa:	6963      	ldr	r3, [r4, #20]
 800a1ac:	4283      	cmp	r3, r0
 800a1ae:	dc04      	bgt.n	800a1ba <__swbuf_r+0x42>
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f7fd fd72 	bl	8007c9c <_fflush_r>
 800a1b8:	b9e0      	cbnz	r0, 800a1f4 <__swbuf_r+0x7c>
 800a1ba:	68a3      	ldr	r3, [r4, #8]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	60a3      	str	r3, [r4, #8]
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	6022      	str	r2, [r4, #0]
 800a1c6:	701e      	strb	r6, [r3, #0]
 800a1c8:	6962      	ldr	r2, [r4, #20]
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d004      	beq.n	800a1da <__swbuf_r+0x62>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	07db      	lsls	r3, r3, #31
 800a1d4:	d506      	bpl.n	800a1e4 <__swbuf_r+0x6c>
 800a1d6:	2e0a      	cmp	r6, #10
 800a1d8:	d104      	bne.n	800a1e4 <__swbuf_r+0x6c>
 800a1da:	4621      	mov	r1, r4
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f7fd fd5d 	bl	8007c9c <_fflush_r>
 800a1e2:	b938      	cbnz	r0, 800a1f4 <__swbuf_r+0x7c>
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f7fc fdfe 	bl	8006dec <__swsetup_r>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d0d1      	beq.n	800a198 <__swbuf_r+0x20>
 800a1f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a1f8:	e7f4      	b.n	800a1e4 <__swbuf_r+0x6c>
 800a1fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a206:	6663      	str	r3, [r4, #100]	; 0x64
 800a208:	e7cc      	b.n	800a1a4 <__swbuf_r+0x2c>
	...

0800a20c <_wcrtomb_r>:
 800a20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a20e:	4c09      	ldr	r4, [pc, #36]	; (800a234 <_wcrtomb_r+0x28>)
 800a210:	b085      	sub	sp, #20
 800a212:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800a216:	4605      	mov	r5, r0
 800a218:	461e      	mov	r6, r3
 800a21a:	b909      	cbnz	r1, 800a220 <_wcrtomb_r+0x14>
 800a21c:	460a      	mov	r2, r1
 800a21e:	a901      	add	r1, sp, #4
 800a220:	47b8      	blx	r7
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	bf01      	itttt	eq
 800a226:	2300      	moveq	r3, #0
 800a228:	6033      	streq	r3, [r6, #0]
 800a22a:	238a      	moveq	r3, #138	; 0x8a
 800a22c:	602b      	streq	r3, [r5, #0]
 800a22e:	b005      	add	sp, #20
 800a230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a232:	bf00      	nop
 800a234:	20000864 	.word	0x20000864

0800a238 <__ascii_wctomb>:
 800a238:	b149      	cbz	r1, 800a24e <__ascii_wctomb+0x16>
 800a23a:	2aff      	cmp	r2, #255	; 0xff
 800a23c:	bf85      	ittet	hi
 800a23e:	238a      	movhi	r3, #138	; 0x8a
 800a240:	6003      	strhi	r3, [r0, #0]
 800a242:	700a      	strbls	r2, [r1, #0]
 800a244:	f04f 30ff 	movhi.w	r0, #4294967295
 800a248:	bf98      	it	ls
 800a24a:	2001      	movls	r0, #1
 800a24c:	4770      	bx	lr
 800a24e:	4608      	mov	r0, r1
 800a250:	4770      	bx	lr

0800a252 <abort>:
 800a252:	b508      	push	{r3, lr}
 800a254:	2006      	movs	r0, #6
 800a256:	f000 f82d 	bl	800a2b4 <raise>
 800a25a:	2001      	movs	r0, #1
 800a25c:	f7f7 fc18 	bl	8001a90 <_exit>

0800a260 <_raise_r>:
 800a260:	291f      	cmp	r1, #31
 800a262:	b538      	push	{r3, r4, r5, lr}
 800a264:	4604      	mov	r4, r0
 800a266:	460d      	mov	r5, r1
 800a268:	d904      	bls.n	800a274 <_raise_r+0x14>
 800a26a:	2316      	movs	r3, #22
 800a26c:	6003      	str	r3, [r0, #0]
 800a26e:	f04f 30ff 	mov.w	r0, #4294967295
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a278:	b112      	cbz	r2, 800a280 <_raise_r+0x20>
 800a27a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a27e:	b94b      	cbnz	r3, 800a294 <_raise_r+0x34>
 800a280:	4620      	mov	r0, r4
 800a282:	f000 f831 	bl	800a2e8 <_getpid_r>
 800a286:	462a      	mov	r2, r5
 800a288:	4601      	mov	r1, r0
 800a28a:	4620      	mov	r0, r4
 800a28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a290:	f000 b818 	b.w	800a2c4 <_kill_r>
 800a294:	2b01      	cmp	r3, #1
 800a296:	d00a      	beq.n	800a2ae <_raise_r+0x4e>
 800a298:	1c59      	adds	r1, r3, #1
 800a29a:	d103      	bne.n	800a2a4 <_raise_r+0x44>
 800a29c:	2316      	movs	r3, #22
 800a29e:	6003      	str	r3, [r0, #0]
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	e7e6      	b.n	800a272 <_raise_r+0x12>
 800a2a4:	2400      	movs	r4, #0
 800a2a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	4798      	blx	r3
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e7df      	b.n	800a272 <_raise_r+0x12>
	...

0800a2b4 <raise>:
 800a2b4:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <raise+0xc>)
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f7ff bfd1 	b.w	800a260 <_raise_r>
 800a2be:	bf00      	nop
 800a2c0:	20000020 	.word	0x20000020

0800a2c4 <_kill_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d07      	ldr	r5, [pc, #28]	; (800a2e4 <_kill_r+0x20>)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	f7f7 fbcd 	bl	8001a70 <_kill>
 800a2d6:	1c43      	adds	r3, r0, #1
 800a2d8:	d102      	bne.n	800a2e0 <_kill_r+0x1c>
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	b103      	cbz	r3, 800a2e0 <_kill_r+0x1c>
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20002db0 	.word	0x20002db0

0800a2e8 <_getpid_r>:
 800a2e8:	f7f7 bbba 	b.w	8001a60 <_getpid>

0800a2ec <_init>:
 800a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ee:	bf00      	nop
 800a2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2f2:	bc08      	pop	{r3}
 800a2f4:	469e      	mov	lr, r3
 800a2f6:	4770      	bx	lr

0800a2f8 <_fini>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	bf00      	nop
 800a2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fe:	bc08      	pop	{r3}
 800a300:	469e      	mov	lr, r3
 800a302:	4770      	bx	lr
