
STM_SR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a54  08005a54  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023ac  20000084  08005ae0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002430  08005ae0  00022430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f01c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e00  00000000  00000000  0003f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00042ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  000445a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4d6  00000000  00000000  00045a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdab  00000000  00000000  00070f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff6fb  00000000  00000000  0008dd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d404  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006608  00000000  00000000  0018d458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005944 	.word	0x08005944

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005944 	.word	0x08005944

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b44      	ldr	r3, [pc, #272]	; (8000690 <MX_GPIO_Init+0x128>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a43      	ldr	r2, [pc, #268]	; (8000690 <MX_GPIO_Init+0x128>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <MX_GPIO_Init+0x128>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4b3e      	ldr	r3, [pc, #248]	; (8000690 <MX_GPIO_Init+0x128>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a3d      	ldr	r2, [pc, #244]	; (8000690 <MX_GPIO_Init+0x128>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <MX_GPIO_Init+0x128>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b38      	ldr	r3, [pc, #224]	; (8000690 <MX_GPIO_Init+0x128>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a37      	ldr	r2, [pc, #220]	; (8000690 <MX_GPIO_Init+0x128>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <MX_GPIO_Init+0x128>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <MX_GPIO_Init+0x128>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a31      	ldr	r2, [pc, #196]	; (8000690 <MX_GPIO_Init+0x128>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <MX_GPIO_Init+0x128>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_DIODE_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2111      	movs	r1, #17
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f001 f9b5 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4826      	ldr	r0, [pc, #152]	; (8000698 <MX_GPIO_Init+0x130>)
 8000600:	f000 fffe 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_DIODE_Pin;
 8000604:	2301      	movs	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_DIODE_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f000 ffef 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 ffe0 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_SENSOR_Pin;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_GPIO_Init+0x12c>)
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 ffd2 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HS711_out_Pin|HS711_SCK_Pin;
 800065c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_GPIO_Init+0x130>)
 8000672:	f000 ffc5 	bl	8001600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2017      	movs	r0, #23
 800067c:	f000 ff49 	bl	8001512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000680:	2017      	movs	r0, #23
 8000682:	f000 ff62 	bl	800154a <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	10210000 	.word	0x10210000
 8000698:	48000800 	.word	0x48000800

0800069c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_I2C1_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_I2C1_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_I2C1_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_I2C1_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_I2C1_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_I2C1_Init+0x74>)
 80006d8:	f001 f96c 	bl	80019b4 <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f000 f991 	bl	8000a08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ea:	f001 f9f2 	bl	8001ad2 <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f988 	bl	8000a08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2C1_Init+0x74>)
 80006fc:	f001 fa34 	bl	8001b68 <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 f97f 	bl	8000a08 <Error_Handler>
  }

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000c0 	.word	0x200000c0
 8000714:	40005400 	.word	0x40005400
 8000718:	10909cec 	.word	0x10909cec

0800071c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_I2C_MspInit+0x7c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d127      	bne.n	800078e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_I2C_MspInit+0x80>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <HAL_I2C_MspInit+0x80>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_I2C_MspInit+0x80>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000756:	23c0      	movs	r3, #192	; 0xc0
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075a:	2312      	movs	r3, #18
 800075c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075e:	2301      	movs	r3, #1
 8000760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000766:	2304      	movs	r3, #4
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <HAL_I2C_MspInit+0x84>)
 8000772:	f000 ff45 	bl	8001600 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_I2C_MspInit+0x80>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_I2C_MspInit+0x80>)
 800077c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000780:	6593      	str	r3, [r2, #88]	; 0x58
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_I2C_MspInit+0x80>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40005400 	.word	0x40005400
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400

080007a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d013      	beq.n	80007e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00b      	beq.n	80007e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007cc:	e000      	b.n	80007d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f9      	beq.n	80007ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// for debugging purposes
int _write(int file, char *ptr, int len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e009      	b.n	8000818 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffc9 	bl	80007a4 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf1      	blt.n	8000804 <_write+0x12>
	}
	return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == RPM_SENSOR_Pin)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800083c:	d104      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    pulse_count++; // increase count each time we got an low on sensor pin
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_GPIO_EXTI_Callback+0x28>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	4a03      	ldr	r2, [pc, #12]	; (8000854 <HAL_GPIO_EXTI_Callback+0x28>)
 8000846:	6013      	str	r3, [r2, #0]
  }
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	200000a0 	.word	0x200000a0

08000858 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d10b      	bne.n	8000880 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		rpm = pulse_count * 60; // pulses per second to minute
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4613      	mov	r3, r2
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	461a      	mov	r2, r3
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000878:	601a      	str	r2, [r3, #0]
		pulse_count = 0;
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
	}
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	200001e0 	.word	0x200001e0
 8000890:	200000a0 	.word	0x200000a0
 8000894:	200000a4 	.word	0x200000a4

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f000 fcbe 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f82e 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f7ff fe60 	bl	8000568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008a8:	f000 fb78 	bl	8000f9c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008ac:	f7ff fef6 	bl	800069c <MX_I2C1_Init>
  MX_SPI1_Init();
 80008b0:	f000 f8f6 	bl	8000aa0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008b4:	f000 fb42 	bl	8000f3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80008b8:	f000 fba0 	bl	8000ffc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80008bc:	f003 fff4 	bl	80048a8 <MX_FATFS_Init>
  MX_RTC_Init();
 80008c0:	f000 f8aa 	bl	8000a18 <MX_RTC_Init>
  MX_TIM6_Init();
 80008c4:	f000 faa2 	bl	8000e0c <MX_TIM6_Init>
  MX_TIM16_Init();
 80008c8:	f000 fad6 	bl	8000e78 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <main+0x5c>)
 80008ce:	f002 feaf 	bl	8003630 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2101      	movs	r1, #1
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f001 f83b 	bl	8001954 <HAL_GPIO_WritePin>
  {
	  /*if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_SET);
	  else
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);*/
	  printf("RPM value: %lu\n", rpm);
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <main+0x60>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <main+0x64>)
 80008e6:	f004 f8d7 	bl	8004a98 <iprintf>
	  HAL_Delay(100);
 80008ea:	2064      	movs	r0, #100	; 0x64
 80008ec:	f000 fd12 	bl	8001314 <HAL_Delay>
	  printf("RPM value: %lu\n", rpm);
 80008f0:	e7f5      	b.n	80008de <main+0x46>
 80008f2:	bf00      	nop
 80008f4:	200001e0 	.word	0x200001e0
 80008f8:	200000a4 	.word	0x200000a4
 80008fc:	0800595c 	.word	0x0800595c

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b0b8      	sub	sp, #224	; 0xe0
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090a:	2244      	movs	r2, #68	; 0x44
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f004 f8ba 	bl	8004a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2288      	movs	r2, #136	; 0x88
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 f8ac 	bl	8004a88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000930:	230a      	movs	r3, #10
 8000932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2310      	movs	r3, #16
 8000940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000956:	2301      	movs	r3, #1
 8000958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800095c:	230a      	movs	r3, #10
 800095e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000962:	2307      	movs	r3, #7
 8000964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000968:	2302      	movs	r3, #2
 800096a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800096e:	2302      	movs	r3, #2
 8000970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000978:	4618      	mov	r0, r3
 800097a:	f001 f9a5 	bl	8001cc8 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000984:	f000 f840 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2303      	movs	r3, #3
 8000990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009aa:	2104      	movs	r1, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fd71 	bl	8002494 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80009b8:	f000 f826 	bl	8000a08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <SystemClock_Config+0x104>)
 80009be:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 ff60 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009e6:	f000 f80f 	bl	8000a08 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ee:	f001 f915 	bl	8001c1c <HAL_PWREx_ControlVoltageScaling>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80009f8:	f000 f806 	bl	8000a08 <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	37e0      	adds	r7, #224	; 0xe0
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	00020047 	.word	0x00020047

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <MX_RTC_Init+0x4c>)
 8000a20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a2a:	227f      	movs	r2, #127	; 0x7f
 8000a2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a30:	22ff      	movs	r2, #255	; 0xff
 8000a32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_RTC_Init+0x48>)
 8000a4e:	f002 fbe3 	bl	8003218 <HAL_RTC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a58:	f7ff ffd6 	bl	8000a08 <Error_Handler>
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000010c 	.word	0x2000010c
 8000a64:	40002800 	.word	0x40002800

08000a68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_RTC_MspInit+0x30>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d107      	bne.n	8000a8a <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_RTC_MspInit+0x34>)
 8000a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_RTC_MspInit+0x34>)
 8000a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40002800 	.word	0x40002800
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000aba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000abe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000aee:	2207      	movs	r2, #7
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000afa:	2208      	movs	r2, #8
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000b00:	f002 fc9c 	bl	800343c <HAL_SPI_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f7ff ff7d 	bl	8000a08 <Error_Handler>
  }

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000130 	.word	0x20000130
 8000b18:	40013000 	.word	0x40013000

08000b1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_SPI_MspInit+0x7c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d128      	bne.n	8000b90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_SPI_MspInit+0x80>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <HAL_SPI_MspInit+0x80>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b48:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_SPI_MspInit+0x80>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_SPI_MspInit+0x80>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_SPI_MspInit+0x80>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_SPI_MspInit+0x80>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b6e:	23e0      	movs	r3, #224	; 0xe0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f000 fd38 	bl	8001600 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 fb4a 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c4c:	f000 fe9a 	bl	8001984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c5a:	f002 fd59 	bl	8003710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200001e0 	.word	0x200001e0

08000c68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <USART1_IRQHandler+0x10>)
 8000c6e:	f003 f87b 	bl	8003d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200002ac 	.word	0x200002ac

08000c7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <USART2_IRQHandler+0x10>)
 8000c82:	f003 f871 	bl	8003d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000032c 	.word	0x2000032c

08000c90 <_read>:
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	2300      	movs	r3, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
 8000d64:	f003 fe66 	bl	8004a34 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20018000 	.word	0x20018000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200000a8 	.word	0x200000a8
 8000d9c:	20002430 	.word	0x20002430

08000da0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <SystemInit+0x64>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <SystemInit+0x64>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <SystemInit+0x68>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <SystemInit+0x68>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <SystemInit+0x68>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <SystemInit+0x68>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <SystemInit+0x68>)
 8000dcc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dd0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <SystemInit+0x68>)
 8000dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ddc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <SystemInit+0x68>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <SystemInit+0x68>)
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SystemInit+0x68>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SystemInit+0x64>)
 8000df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df6:	609a      	str	r2, [r3, #8]
#endif
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_TIM6_Init+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e3e:	f002 fba0 	bl	8003582 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e48:	f7ff fdde 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e5a:	f002 fe3b 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e64:	f7ff fdd0 	bl	8000a08 <Error_Handler>
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000194 	.word	0x20000194
 8000e74:	40001000 	.word	0x40001000

08000e78 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <MX_TIM16_Init+0x4c>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000e84:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e88:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000e92:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000eac:	f002 fb69 	bl	8003582 <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000eb6:	f7ff fda7 	bl	8000a08 <Error_Handler>
  }

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200001e0 	.word	0x200001e0
 8000ec4:	40014400 	.word	0x40014400

08000ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_TIM_Base_MspInit+0x68>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_TIM_Base_MspInit+0x6c>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <HAL_TIM_Base_MspInit+0x6c>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_TIM_Base_MspInit+0x6c>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000ef2:	e018      	b.n	8000f26 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <HAL_TIM_Base_MspInit+0x70>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d113      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_TIM_Base_MspInit+0x6c>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_TIM_Base_MspInit+0x6c>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_TIM_Base_MspInit+0x6c>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2019      	movs	r0, #25
 8000f1c:	f000 faf9 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f20:	2019      	movs	r0, #25
 8000f22:	f000 fb12 	bl	800154a <HAL_NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40014400 	.word	0x40014400

08000f3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f42:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <MX_USART1_UART_Init+0x5c>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART1_UART_Init+0x58>)
 8000f80:	f002 fe9c 	bl	8003cbc <HAL_HalfDuplex_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f7ff fd3d 	bl	8000a08 <Error_Handler>
  }

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200002ac 	.word	0x200002ac
 8000f98:	40013800 	.word	0x40013800

08000f9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <MX_USART2_UART_Init+0x5c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fe0:	f002 fe1e 	bl	8003c20 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fea:	f7ff fd0d 	bl	8000a08 <Error_Handler>
  }

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000032c 	.word	0x2000032c
 8000ff8:	40004400 	.word	0x40004400

08000ffc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_USART3_UART_Init+0x58>)
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <MX_USART3_UART_Init+0x5c>)
 8001004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_USART3_UART_Init+0x58>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART3_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_USART3_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART3_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART3_UART_Init+0x58>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART3_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART3_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART3_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART3_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART3_UART_Init+0x58>)
 8001040:	f002 fdee 	bl	8003c20 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800104a:	f7ff fcdd 	bl	8000a08 <Error_Handler>
  }

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000022c 	.word	0x2000022c
 8001058:	40004800 	.word	0x40004800

0800105c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a4e      	ldr	r2, [pc, #312]	; (80011b4 <HAL_UART_MspInit+0x158>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d132      	bne.n	80010e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800107e:	4b4e      	ldr	r3, [pc, #312]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a47      	ldr	r2, [pc, #284]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DS18B20_ONE_WIRE_Pin;
 80010ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b4:	2312      	movs	r3, #18
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c0:	2307      	movs	r3, #7
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DS18B20_ONE_WIRE_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f000 fa97 	bl	8001600 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2025      	movs	r0, #37	; 0x25
 80010d8:	f000 fa1b 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010dc:	2025      	movs	r0, #37	; 0x25
 80010de:	f000 fa34 	bl	800154a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010e2:	e063      	b.n	80011ac <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a34      	ldr	r2, [pc, #208]	; (80011bc <HAL_UART_MspInit+0x160>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d131      	bne.n	8001152 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ee:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	6593      	str	r3, [r2, #88]	; 0x58
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 800111e:	230c      	movs	r3, #12
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112e:	2307      	movs	r3, #7
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f000 fa60 	bl	8001600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2026      	movs	r0, #38	; 0x26
 8001146:	f000 f9e4 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800114a:	2026      	movs	r0, #38	; 0x26
 800114c:	f000 f9fd 	bl	800154a <HAL_NVIC_EnableIRQ>
}
 8001150:	e02c      	b.n	80011ac <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART3)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_UART_MspInit+0x164>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d127      	bne.n	80011ac <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 8001162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001166:	6593      	str	r3, [r2, #88]	; 0x58
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_UART_MspInit+0x15c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HC_05_TX_Pin|HC_05_RX_Pin;
 800118c:	2330      	movs	r3, #48	; 0x30
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800119c:	2307      	movs	r3, #7
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	4807      	ldr	r0, [pc, #28]	; (80011c4 <HAL_UART_MspInit+0x168>)
 80011a8:	f000 fa2a 	bl	8001600 <HAL_GPIO_Init>
}
 80011ac:	bf00      	nop
 80011ae:	3738      	adds	r7, #56	; 0x38
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40004800 	.word	0x40004800
 80011c4:	48000800 	.word	0x48000800

080011c8 <Reset_Handler>:
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopForever+0x2>
 80011cc:	f7ff fde8 	bl	8000da0 <SystemInit>
 80011d0:	2100      	movs	r1, #0
 80011d2:	e003      	b.n	80011dc <LoopCopyDataInit>

080011d4 <CopyDataInit>:
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopForever+0x6>)
 80011d6:	585b      	ldr	r3, [r3, r1]
 80011d8:	5043      	str	r3, [r0, r1]
 80011da:	3104      	adds	r1, #4

080011dc <LoopCopyDataInit>:
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <LoopForever+0xa>)
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <LoopForever+0xe>)
 80011e0:	1842      	adds	r2, r0, r1
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3f6      	bcc.n	80011d4 <CopyDataInit>
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopForever+0x12>)
 80011e8:	e002      	b.n	80011f0 <LoopFillZerobss>

080011ea <FillZerobss>:
 80011ea:	2300      	movs	r3, #0
 80011ec:	f842 3b04 	str.w	r3, [r2], #4

080011f0 <LoopFillZerobss>:
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <LoopForever+0x16>)
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3f9      	bcc.n	80011ea <FillZerobss>
 80011f6:	f003 fc23 	bl	8004a40 <__libc_init_array>
 80011fa:	f7ff fb4d 	bl	8000898 <main>

080011fe <LoopForever>:
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
 8001200:	20018000 	.word	0x20018000
 8001204:	08005a5c 	.word	0x08005a5c
 8001208:	20000000 	.word	0x20000000
 800120c:	20000084 	.word	0x20000084
 8001210:	20000084 	.word	0x20000084
 8001214:	20002430 	.word	0x20002430

08001218 <ADC1_2_IRQHandler>:
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>
	...

0800121c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_Init+0x3c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_Init+0x3c>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f962 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f80f 	bl	800125c <HAL_InitTick>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	e001      	b.n	800124e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800124a:	f7ff fca9 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124e:	79fb      	ldrb	r3, [r7, #7]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40022000 	.word	0x40022000

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_InitTick+0x6c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d023      	beq.n	80012b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_InitTick+0x70>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_InitTick+0x6c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f96d 	bl	8001566 <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10f      	bne.n	80012b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d809      	bhi.n	80012ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f937 	bl	8001512 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_InitTick+0x74>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e007      	b.n	80012bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e004      	b.n	80012bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e001      	b.n	80012bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	200003ac 	.word	0x200003ac

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200003ac 	.word	0x200003ac

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff ffee 	bl	80012fc <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffde 	bl	80012fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <__NVIC_SetPriorityGrouping>:
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <__NVIC_EnableIRQ+0x38>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e100 	.word	0xe000e100

080013fc <__NVIC_SetPriority>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <SysTick_Config>:
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff ff8e 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff29 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff3e 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff8e 	bl	8001450 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5d 	bl	80013fc <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff31 	bl	80013c0 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d005      	beq.n	80015a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2204      	movs	r2, #4
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e029      	b.n	80015f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 020e 	bic.w	r2, r2, #14
 80015b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f003 021c 	and.w	r2, r3, #28
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	4798      	blx	r3
    }
  }
  return status;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	e17f      	b.n	8001910 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8171 	beq.w	800190a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d00b      	beq.n	8001648 <HAL_GPIO_Init+0x48>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163c:	2b11      	cmp	r3, #17
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b12      	cmp	r3, #18
 8001646:	d130      	bne.n	80016aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167e:	2201      	movs	r2, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 0201 	and.w	r2, r3, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d118      	bne.n	80016e8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x128>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b12      	cmp	r3, #18
 8001726:	d123      	bne.n	8001770 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	6939      	ldr	r1, [r7, #16]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80ac 	beq.w	800190a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_GPIO_Init+0x330>)
 80017b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b6:	4a5e      	ldr	r2, [pc, #376]	; (8001930 <HAL_GPIO_Init+0x330>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6613      	str	r3, [r2, #96]	; 0x60
 80017be:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_GPIO_Init+0x330>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ca:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <HAL_GPIO_Init+0x334>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017f4:	d025      	beq.n	8001842 <HAL_GPIO_Init+0x242>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_GPIO_Init+0x338>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01f      	beq.n	800183e <HAL_GPIO_Init+0x23e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_GPIO_Init+0x33c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d019      	beq.n	800183a <HAL_GPIO_Init+0x23a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_GPIO_Init+0x340>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x236>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_GPIO_Init+0x344>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x232>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <HAL_GPIO_Init+0x348>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x22e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4a      	ldr	r2, [pc, #296]	; (800194c <HAL_GPIO_Init+0x34c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x22a>
 8001826:	2306      	movs	r3, #6
 8001828:	e00c      	b.n	8001844 <HAL_GPIO_Init+0x244>
 800182a:	2307      	movs	r3, #7
 800182c:	e00a      	b.n	8001844 <HAL_GPIO_Init+0x244>
 800182e:	2305      	movs	r3, #5
 8001830:	e008      	b.n	8001844 <HAL_GPIO_Init+0x244>
 8001832:	2304      	movs	r3, #4
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x244>
 8001836:	2303      	movs	r3, #3
 8001838:	e004      	b.n	8001844 <HAL_GPIO_Init+0x244>
 800183a:	2302      	movs	r3, #2
 800183c:	e002      	b.n	8001844 <HAL_GPIO_Init+0x244>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_GPIO_Init+0x244>
 8001842:	2300      	movs	r3, #0
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	f002 0203 	and.w	r2, r2, #3
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4093      	lsls	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001854:	4937      	ldr	r1, [pc, #220]	; (8001934 <HAL_GPIO_Init+0x334>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_GPIO_Init+0x350>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001886:	4a32      	ldr	r2, [pc, #200]	; (8001950 <HAL_GPIO_Init+0x350>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <HAL_GPIO_Init+0x350>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_GPIO_Init+0x350>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_GPIO_Init+0x350>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018da:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_GPIO_Init+0x350>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_GPIO_Init+0x350>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <HAL_GPIO_Init+0x350>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	f47f ae78 	bne.w	8001610 <HAL_GPIO_Init+0x10>
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800
 8001940:	48000c00 	.word	0x48000c00
 8001944:	48001000 	.word	0x48001000
 8001948:	48001400 	.word	0x48001400
 800194c:	48001800 	.word	0x48001800
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e002      	b.n	8001978 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe ff42 	bl	800082c <HAL_GPIO_EXTI_Callback>
  }
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e081      	b.n	8001aca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fe9e 	bl	800071c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	; 0x24
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e006      	b.n	8001a3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d104      	bne.n	8001a4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	ea42 0103 	orr.w	r1, r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	021a      	lsls	r2, r3, #8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69d9      	ldr	r1, [r3, #28]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d138      	bne.n	8001b5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e032      	b.n	8001b5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2224      	movs	r2, #36	; 0x24
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0201 	orr.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b5a:	2302      	movs	r3, #2
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d139      	bne.n	8001bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e033      	b.n	8001bf4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0201 	orr.w	r2, r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
  }
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40007000 	.word	0x40007000

08001c1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2a:	d130      	bne.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c38:	d038      	beq.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2232      	movs	r2, #50	; 0x32
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9b      	lsrs	r3, r3, #18
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c60:	e002      	b.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c74:	d102      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f2      	bne.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c88:	d110      	bne.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e00f      	b.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9a:	d007      	beq.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001caa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	431bde83 	.word	0x431bde83

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e3d4      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cda:	4ba1      	ldr	r3, [pc, #644]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce4:	4b9e      	ldr	r3, [pc, #632]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80e4 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4a>
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	f040 808b 	bne.w	8001e20 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	f040 8087 	bne.w	8001e20 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d12:	4b93      	ldr	r3, [pc, #588]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x62>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e3ac      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1a      	ldr	r2, [r3, #32]
 8001d2e:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_RCC_OscConfig+0x7c>
 8001d3a:	4b89      	ldr	r3, [pc, #548]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d42:	e005      	b.n	8001d50 <HAL_RCC_OscConfig+0x88>
 8001d44:	4b86      	ldr	r3, [pc, #536]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d223      	bcs.n	8001d9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fd41 	bl	80027e0 <RCC_SetFlashLatencyFromMSIRange>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e38d      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d68:	4b7d      	ldr	r3, [pc, #500]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a7c      	ldr	r2, [pc, #496]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4977      	ldr	r1, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d86:	4b76      	ldr	r3, [pc, #472]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	4972      	ldr	r1, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
 8001d9a:	e025      	b.n	8001de8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9c:	4b70      	ldr	r3, [pc, #448]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6f      	ldr	r2, [pc, #444]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001da2:	f043 0308 	orr.w	r3, r3, #8
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	496a      	ldr	r1, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dba:	4b69      	ldr	r3, [pc, #420]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	4965      	ldr	r1, [pc, #404]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fd01 	bl	80027e0 <RCC_SetFlashLatencyFromMSIRange>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e34d      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001de8:	f000 fc36 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b5c      	ldr	r3, [pc, #368]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	495a      	ldr	r1, [pc, #360]	; (8001f64 <HAL_RCC_OscConfig+0x29c>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
 8001e04:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <HAL_RCC_OscConfig+0x2a0>)
 8001e06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e08:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <HAL_RCC_OscConfig+0x2a4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fa25 	bl	800125c <HAL_InitTick>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d052      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	e331      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d032      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e28:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a4c      	ldr	r2, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fa62 	bl	80012fc <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fa5e 	bl	80012fc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e31a      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e4e:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5a:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a40      	ldr	r2, [pc, #256]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	493b      	ldr	r1, [pc, #236]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	4936      	ldr	r1, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e01a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a33      	ldr	r2, [pc, #204]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fa2f 	bl	80012fc <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fa2b 	bl	80012fc <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e2e7      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x1da>
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ec2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d074      	beq.n	8001fba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d005      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x21a>
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d10e      	bne.n	8001efa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d064      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d160      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e2c4      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x24a>
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e01d      	b.n	8001f4e <HAL_RCC_OscConfig+0x286>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x26e>
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x286>
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x298>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff f9d1 	bl	80012fc <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5c:	e011      	b.n	8001f82 <HAL_RCC_OscConfig+0x2ba>
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	0800596c 	.word	0x0800596c
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f9c4 	bl	80012fc <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e280      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f82:	4baf      	ldr	r3, [pc, #700]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x2a8>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f9b4 	bl	80012fc <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff f9b0 	bl	80012fc <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e26c      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001faa:	4ba5      	ldr	r3, [pc, #660]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2d0>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d060      	beq.n	8002088 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x310>
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d119      	bne.n	8002006 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d116      	bne.n	8002006 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd8:	4b99      	ldr	r3, [pc, #612]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x328>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e249      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b93      	ldr	r3, [pc, #588]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	4990      	ldr	r1, [pc, #576]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002004:	e040      	b.n	8002088 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d023      	beq.n	8002056 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200e:	4b8c      	ldr	r3, [pc, #560]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a8b      	ldr	r2, [pc, #556]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff f96f 	bl	80012fc <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002022:	f7ff f96b 	bl	80012fc <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e227      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002034:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	061b      	lsls	r3, r3, #24
 800204e:	497c      	ldr	r1, [pc, #496]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	e018      	b.n	8002088 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b7a      	ldr	r3, [pc, #488]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a79      	ldr	r2, [pc, #484]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 800205c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff f94b 	bl	80012fc <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7ff f947 	bl	80012fc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e203      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800207c:	4b70      	ldr	r3, [pc, #448]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d03c      	beq.n	800210e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209c:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a2:	4a67      	ldr	r2, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7ff f926 	bl	80012fc <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff f922 	bl	80012fc <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1de      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c6:	4b5e      	ldr	r3, [pc, #376]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80020c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ef      	beq.n	80020b4 <HAL_RCC_OscConfig+0x3ec>
 80020d4:	e01b      	b.n	800210e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d6:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80020d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020dc:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7ff f909 	bl	80012fc <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7ff f905 	bl	80012fc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1c1      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002100:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ef      	bne.n	80020ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80a6 	beq.w	8002268 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002120:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10d      	bne.n	8002148 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	4a43      	ldr	r2, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002136:	6593      	str	r3, [r2, #88]	; 0x58
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002144:	2301      	movs	r3, #1
 8002146:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002148:	4b3e      	ldr	r3, [pc, #248]	; (8002244 <HAL_RCC_OscConfig+0x57c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d118      	bne.n	8002186 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_RCC_OscConfig+0x57c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_RCC_OscConfig+0x57c>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002160:	f7ff f8cc 	bl	80012fc <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7ff f8c8 	bl	80012fc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e184      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217a:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_RCC_OscConfig+0x57c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4d8>
 800218e:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800219e:	e024      	b.n	80021ea <HAL_RCC_OscConfig+0x522>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d110      	bne.n	80021ca <HAL_RCC_OscConfig+0x502>
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	4a24      	ldr	r2, [pc, #144]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	4a20      	ldr	r2, [pc, #128]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c8:	e00f      	b.n	80021ea <HAL_RCC_OscConfig+0x522>
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	4a17      	ldr	r2, [pc, #92]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7ff f883 	bl	80012fc <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff f87f 	bl	80012fc <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e139      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x578>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0ed      	beq.n	80021fa <HAL_RCC_OscConfig+0x532>
 800221e:	e01a      	b.n	8002256 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff f86c 	bl	80012fc <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002226:	e00f      	b.n	8002248 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7ff f868 	bl	80012fc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d906      	bls.n	8002248 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e122      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002248:	4b90      	ldr	r3, [pc, #576]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e8      	bne.n	8002228 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002256:	7ffb      	ldrb	r3, [r7, #31]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002266:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8108 	beq.w	8002482 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	2b02      	cmp	r3, #2
 8002278:	f040 80d0 	bne.w	800241c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800227c:	4b83      	ldr	r3, [pc, #524]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	429a      	cmp	r2, r3
 800228e:	d130      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	3b01      	subs	r3, #1
 800229c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d127      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d11f      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022bc:	2a07      	cmp	r2, #7
 80022be:	bf14      	ite	ne
 80022c0:	2201      	movne	r2, #1
 80022c2:	2200      	moveq	r2, #0
 80022c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d113      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	3b01      	subs	r3, #1
 80022d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d06e      	beq.n	80023d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	d069      	beq.n	80023cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022f8:	4b64      	ldr	r3, [pc, #400]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002304:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b7      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002314:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a5c      	ldr	r2, [pc, #368]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002320:	f7fe ffec 	bl	80012fc <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe ffe8 	bl	80012fc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e0a4      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233a:	4b54      	ldr	r3, [pc, #336]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4b51      	ldr	r3, [pc, #324]	; (8002490 <HAL_RCC_OscConfig+0x7c8>)
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002356:	3a01      	subs	r2, #1
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	4311      	orrs	r1, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002360:	0212      	lsls	r2, r2, #8
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002368:	0852      	lsrs	r2, r2, #1
 800236a:	3a01      	subs	r2, #1
 800236c:	0552      	lsls	r2, r2, #21
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002374:	0852      	lsrs	r2, r2, #1
 8002376:	3a01      	subs	r2, #1
 8002378:	0652      	lsls	r2, r2, #25
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002380:	0912      	lsrs	r2, r2, #4
 8002382:	0452      	lsls	r2, r2, #17
 8002384:	430a      	orrs	r2, r1
 8002386:	4941      	ldr	r1, [pc, #260]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800238c:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3e      	ldr	r2, [pc, #248]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002396:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002398:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a3b      	ldr	r2, [pc, #236]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a4:	f7fe ffaa 	bl	80012fc <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe ffa6 	bl	80012fc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e062      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023be:	4b33      	ldr	r3, [pc, #204]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ca:	e05a      	b.n	8002482 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e059      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d0:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d152      	bne.n	8002482 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023dc:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a27      	ldr	r2, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f4:	f7fe ff82 	bl	80012fc <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe ff7e 	bl	80012fc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e03a      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x734>
 800241a:	e032      	b.n	8002482 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d02d      	beq.n	800247e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a19      	ldr	r2, [pc, #100]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800242c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002440:	f023 0303 	bic.w	r3, r3, #3
 8002444:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4a10      	ldr	r2, [pc, #64]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 800244c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe ff51 	bl	80012fc <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245e:	f7fe ff4d 	bl	80012fc <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e009      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_OscConfig+0x7c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f0      	bne.n	800245e <HAL_RCC_OscConfig+0x796>
 800247c:	e001      	b.n	8002482 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	f99d808c 	.word	0xf99d808c

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0c8      	b.n	800263a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b66      	ldr	r3, [pc, #408]	; (8002644 <HAL_RCC_ClockConfig+0x1b0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d910      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1b0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4961      	ldr	r1, [pc, #388]	; (8002644 <HAL_RCC_ClockConfig+0x1b0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b5f      	ldr	r3, [pc, #380]	; (8002644 <HAL_RCC_ClockConfig+0x1b0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b0      	b.n	800263a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d04c      	beq.n	800257e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ec:	4b56      	ldr	r3, [pc, #344]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d121      	bne.n	800253c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e09e      	b.n	800263a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d115      	bne.n	800253c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e092      	b.n	800263a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d107      	bne.n	800252c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251c:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e086      	b.n	800263a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252c:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e07e      	b.n	800263a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 0203 	bic.w	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	493f      	ldr	r1, [pc, #252]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254e:	f7fe fed5 	bl	80012fc <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002554:	e00a      	b.n	800256c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f7fe fed1 	bl	80012fc <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e066      	b.n	800263a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256c:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 020c 	and.w	r2, r3, #12
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	429a      	cmp	r2, r3
 800257c:	d1eb      	bne.n	8002556 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	492c      	ldr	r1, [pc, #176]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCC_ClockConfig+0x1b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d210      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCC_ClockConfig+0x1b0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	4924      	ldr	r1, [pc, #144]	; (8002644 <HAL_RCC_ClockConfig+0x1b0>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x1b0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e036      	b.n	800263a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4918      	ldr	r1, [pc, #96]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4910      	ldr	r1, [pc, #64]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800260a:	f000 f825 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_RCC_ClockConfig+0x1b4>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490c      	ldr	r1, [pc, #48]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	fa22 f303 	lsr.w	r3, r2, r3
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fe14 	bl	800125c <HAL_InitTick>
 8002634:	4603      	mov	r3, r0
 8002636:	72fb      	strb	r3, [r7, #11]

  return status;
 8002638:	7afb      	ldrb	r3, [r7, #11]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000
 8002648:	40021000 	.word	0x40021000
 800264c:	0800596c 	.word	0x0800596c
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002666:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002670:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x34>
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d121      	bne.n	80026ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d11e      	bne.n	80026ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800268c:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002698:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e005      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026a8:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026b4:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10d      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d102      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <HAL_RCC_GetSysClockFreq+0x110>)
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	e004      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_RCC_GetSysClockFreq+0x114>)
 80026de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d134      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0xa6>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d003      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0xac>
 80026fc:	e005      	b.n	800270a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_RCC_GetSysClockFreq+0x110>)
 8002700:	617b      	str	r3, [r7, #20]
      break;
 8002702:	e005      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_GetSysClockFreq+0x114>)
 8002706:	617b      	str	r3, [r7, #20]
      break;
 8002708:	e002      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	617b      	str	r3, [r7, #20]
      break;
 800270e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	3301      	adds	r3, #1
 800271c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	fb02 f203 	mul.w	r2, r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_GetSysClockFreq+0x108>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	0e5b      	lsrs	r3, r3, #25
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	3301      	adds	r3, #1
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002750:	69bb      	ldr	r3, [r7, #24]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	08005984 	.word	0x08005984
 8002768:	00f42400 	.word	0x00f42400
 800276c:	007a1200 	.word	0x007a1200

08002770 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_RCC_GetHCLKFreq+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000000 	.word	0x20000000

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800278c:	f7ff fff0 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4904      	ldr	r1, [pc, #16]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	0800597c 	.word	0x0800597c

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027b8:	f7ff ffda 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0adb      	lsrs	r3, r3, #11
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4904      	ldr	r1, [pc, #16]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	0800597c 	.word	0x0800597c

080027e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027f8:	f7ff fa02 	bl	8001c00 <HAL_PWREx_GetVoltageRange>
 80027fc:	6178      	str	r0, [r7, #20]
 80027fe:	e014      	b.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	4a24      	ldr	r2, [pc, #144]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	6593      	str	r3, [r2, #88]	; 0x58
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002818:	f7ff f9f2 	bl	8001c00 <HAL_PWREx_GetVoltageRange>
 800281c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002828:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002830:	d10b      	bne.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d919      	bls.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2ba0      	cmp	r3, #160	; 0xa0
 800283c:	d902      	bls.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800283e:	2302      	movs	r3, #2
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	e013      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e010      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d902      	bls.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002850:	2303      	movs	r3, #3
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e00a      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d102      	bne.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285c:	2302      	movs	r3, #2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	e004      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d101      	bne.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002868:	2301      	movs	r3, #1
 800286a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 0207 	bic.w	r2, r3, #7
 8002874:	4909      	ldr	r1, [pc, #36]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d001      	beq.n	800288e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	40022000 	.word	0x40022000

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a8:	2300      	movs	r3, #0
 80028aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ac:	2300      	movs	r3, #0
 80028ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d041      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028c4:	d02a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ca:	d824      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028d0:	d008      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028d6:	d81e      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e0:	d010      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028e2:	e018      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028e4:	4b86      	ldr	r3, [pc, #536]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a85      	ldr	r2, [pc, #532]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028f0:	e015      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fabb 	bl	8002e74 <RCCEx_PLLSAI1_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002902:	e00c      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3320      	adds	r3, #32
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fba6 	bl	800305c <RCCEx_PLLSAI2_Config>
 8002910:	4603      	mov	r3, r0
 8002912:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002914:	e003      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	74fb      	strb	r3, [r7, #19]
      break;
 800291a:	e000      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800291c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002924:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002932:	4973      	ldr	r1, [pc, #460]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800293a:	e001      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d041      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002950:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002954:	d02a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002956:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800295a:	d824      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800295c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002960:	d008      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002966:	d81e      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002970:	d010      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002972:	e018      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002974:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a61      	ldr	r2, [pc, #388]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002980:	e015      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fa73 	bl	8002e74 <RCCEx_PLLSAI1_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002992:	e00c      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3320      	adds	r3, #32
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fb5e 	bl	800305c <RCCEx_PLLSAI2_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029a4:	e003      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	74fb      	strb	r3, [r7, #19]
      break;
 80029aa:	e000      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029b4:	4b52      	ldr	r3, [pc, #328]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c2:	494f      	ldr	r1, [pc, #316]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ca:	e001      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a0 	beq.w	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f8:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6593      	str	r3, [r2, #88]	; 0x58
 8002a04:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a14:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3a      	ldr	r2, [pc, #232]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a20:	f7fe fc6c 	bl	80012fc <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a26:	e009      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe fc68 	bl	80012fc <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d902      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	74fb      	strb	r3, [r7, #19]
        break;
 8002a3a:	e005      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a3c:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d15c      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01f      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d019      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a78:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	4a20      	ldr	r2, [pc, #128]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fc27 	bl	80012fc <HAL_GetTick>
 8002aae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab0:	e00b      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fc23 	bl	80012fc <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d902      	bls.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ac8:	e006      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ec      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aee:	4904      	ldr	r1, [pc, #16]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002af6:	e009      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
 8002afc:	e006      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b0c:	7c7b      	ldrb	r3, [r7, #17]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d105      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b12:	4b9e      	ldr	r3, [pc, #632]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	4a9d      	ldr	r2, [pc, #628]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b2a:	4b98      	ldr	r3, [pc, #608]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f023 0203 	bic.w	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	4994      	ldr	r1, [pc, #592]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b4c:	4b8f      	ldr	r3, [pc, #572]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 020c 	bic.w	r2, r3, #12
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	498c      	ldr	r1, [pc, #560]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b6e:	4b87      	ldr	r3, [pc, #540]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4983      	ldr	r1, [pc, #524]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b90:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	497b      	ldr	r1, [pc, #492]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	4972      	ldr	r1, [pc, #456]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bd4:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	496a      	ldr	r1, [pc, #424]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bf6:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	4961      	ldr	r1, [pc, #388]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c18:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c26:	4959      	ldr	r1, [pc, #356]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c3a:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c48:	4950      	ldr	r1, [pc, #320]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c5c:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	4948      	ldr	r1, [pc, #288]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c7e:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	493f      	ldr	r1, [pc, #252]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d028      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ca0:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cae:	4937      	ldr	r1, [pc, #220]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cbe:	d106      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a31      	ldr	r2, [pc, #196]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cca:	60d3      	str	r3, [r2, #12]
 8002ccc:	e011      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f8c8 	bl	8002e74 <RCCEx_PLLSAI1_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cfe:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	491f      	ldr	r1, [pc, #124]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d28:	60d3      	str	r3, [r2, #12]
 8002d2a:	e011      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f899 	bl	8002e74 <RCCEx_PLLSAI1_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d02b      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a02      	ldr	r2, [pc, #8]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d86:	60d3      	str	r3, [r2, #12]
 8002d88:	e014      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 f867 	bl	8002e74 <RCCEx_PLLSAI1_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002daa:	7cfb      	ldrb	r3, [r7, #19]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d02f      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dce:	4928      	ldr	r1, [pc, #160]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dde:	d10d      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3304      	adds	r3, #4
 8002de4:	2102      	movs	r1, #2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f844 	bl	8002e74 <RCCEx_PLLSAI1_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d014      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	74bb      	strb	r3, [r7, #18]
 8002dfa:	e011      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3320      	adds	r3, #32
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f925 	bl	800305c <RCCEx_PLLSAI2_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e3a:	490d      	ldr	r1, [pc, #52]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5e:	4904      	ldr	r1, [pc, #16]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e66:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000

08002e74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e82:	4b75      	ldr	r3, [pc, #468]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0203 	and.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d10d      	bne.n	8002eba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ea6:	4b6c      	ldr	r3, [pc, #432]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
       ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d047      	beq.n	8002f4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e044      	b.n	8002f4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d018      	beq.n	8002efa <RCCEx_PLLSAI1_Config+0x86>
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d825      	bhi.n	8002f18 <RCCEx_PLLSAI1_Config+0xa4>
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d002      	beq.n	8002ed6 <RCCEx_PLLSAI1_Config+0x62>
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d009      	beq.n	8002ee8 <RCCEx_PLLSAI1_Config+0x74>
 8002ed4:	e020      	b.n	8002f18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ed6:	4b60      	ldr	r3, [pc, #384]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee6:	e01a      	b.n	8002f1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee8:	4b5b      	ldr	r3, [pc, #364]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e013      	b.n	8002f22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002efa:	4b57      	ldr	r3, [pc, #348]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10f      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f06:	4b54      	ldr	r3, [pc, #336]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f16:	e006      	b.n	8002f26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	e004      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f2e:	4b4a      	ldr	r3, [pc, #296]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	430b      	orrs	r3, r1
 8002f44:	4944      	ldr	r1, [pc, #272]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d17d      	bne.n	800304c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f50:	4b41      	ldr	r3, [pc, #260]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a40      	ldr	r2, [pc, #256]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5c:	f7fe f9ce 	bl	80012fc <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f62:	e009      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f64:	f7fe f9ca 	bl	80012fc <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	73fb      	strb	r3, [r7, #15]
        break;
 8002f76:	e005      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f78:	4b37      	ldr	r3, [pc, #220]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ef      	bne.n	8002f64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d160      	bne.n	800304c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d111      	bne.n	8002fb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f90:	4b31      	ldr	r3, [pc, #196]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6892      	ldr	r2, [r2, #8]
 8002fa0:	0211      	lsls	r1, r2, #8
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	0912      	lsrs	r2, r2, #4
 8002fa8:	0452      	lsls	r2, r2, #17
 8002faa:	430a      	orrs	r2, r1
 8002fac:	492a      	ldr	r1, [pc, #168]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	610b      	str	r3, [r1, #16]
 8002fb2:	e027      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d112      	bne.n	8002fe0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fba:	4b27      	ldr	r3, [pc, #156]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6892      	ldr	r2, [r2, #8]
 8002fca:	0211      	lsls	r1, r2, #8
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6912      	ldr	r2, [r2, #16]
 8002fd0:	0852      	lsrs	r2, r2, #1
 8002fd2:	3a01      	subs	r2, #1
 8002fd4:	0552      	lsls	r2, r2, #21
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	491f      	ldr	r1, [pc, #124]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	610b      	str	r3, [r1, #16]
 8002fde:	e011      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6892      	ldr	r2, [r2, #8]
 8002ff0:	0211      	lsls	r1, r2, #8
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6952      	ldr	r2, [r2, #20]
 8002ff6:	0852      	lsrs	r2, r2, #1
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	0652      	lsls	r2, r2, #25
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	4916      	ldr	r1, [pc, #88]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800300e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe f974 	bl	80012fc <HAL_GetTick>
 8003014:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003016:	e009      	b.n	800302c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003018:	f7fe f970 	bl	80012fc <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d902      	bls.n	800302c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	73fb      	strb	r3, [r7, #15]
          break;
 800302a:	e005      	b.n	8003038 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ef      	beq.n	8003018 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4904      	ldr	r1, [pc, #16]	; (8003058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000

0800305c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800306a:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0203 	and.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d10d      	bne.n	80030a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
       ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800308e:	4b61      	ldr	r3, [pc, #388]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
       ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d047      	beq.n	8003132 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e044      	b.n	8003132 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d018      	beq.n	80030e2 <RCCEx_PLLSAI2_Config+0x86>
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d825      	bhi.n	8003100 <RCCEx_PLLSAI2_Config+0xa4>
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d002      	beq.n	80030be <RCCEx_PLLSAI2_Config+0x62>
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d009      	beq.n	80030d0 <RCCEx_PLLSAI2_Config+0x74>
 80030bc:	e020      	b.n	8003100 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030be:	4b55      	ldr	r3, [pc, #340]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11d      	bne.n	8003106 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ce:	e01a      	b.n	8003106 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d116      	bne.n	800310a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e013      	b.n	800310a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030e2:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ee:	4b49      	ldr	r3, [pc, #292]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030fe:	e006      	b.n	800310e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e004      	b.n	8003110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003106:	bf00      	nop
 8003108:	e002      	b.n	8003110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800310a:	bf00      	nop
 800310c:	e000      	b.n	8003110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800310e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003116:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	430b      	orrs	r3, r1
 800312c:	4939      	ldr	r1, [pc, #228]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d167      	bne.n	8003208 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a35      	ldr	r2, [pc, #212]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fe f8da 	bl	80012fc <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800314a:	e009      	b.n	8003160 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800314c:	f7fe f8d6 	bl	80012fc <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	73fb      	strb	r3, [r7, #15]
        break;
 800315e:	e005      	b.n	800316c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003160:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ef      	bne.n	800314c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d14a      	bne.n	8003208 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d111      	bne.n	800319c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003178:	4b26      	ldr	r3, [pc, #152]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6892      	ldr	r2, [r2, #8]
 8003188:	0211      	lsls	r1, r2, #8
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	0912      	lsrs	r2, r2, #4
 8003190:	0452      	lsls	r2, r2, #17
 8003192:	430a      	orrs	r2, r1
 8003194:	491f      	ldr	r1, [pc, #124]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	614b      	str	r3, [r1, #20]
 800319a:	e011      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6892      	ldr	r2, [r2, #8]
 80031ac:	0211      	lsls	r1, r2, #8
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6912      	ldr	r2, [r2, #16]
 80031b2:	0852      	lsrs	r2, r2, #1
 80031b4:	3a01      	subs	r2, #1
 80031b6:	0652      	lsls	r2, r2, #25
 80031b8:	430a      	orrs	r2, r1
 80031ba:	4916      	ldr	r1, [pc, #88]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a13      	ldr	r2, [pc, #76]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe f896 	bl	80012fc <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031d2:	e009      	b.n	80031e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031d4:	f7fe f892 	bl	80012fc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d902      	bls.n	80031e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	73fb      	strb	r3, [r7, #15]
          break;
 80031e6:	e005      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ef      	beq.n	80031d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4904      	ldr	r1, [pc, #16]	; (8003214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000

08003218 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d06c      	beq.n	8003304 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fc12 	bl	8000a68 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	22ca      	movs	r2, #202	; 0xca
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2253      	movs	r2, #83	; 0x53
 800325a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f87c 	bl	800335a <RTC_EnterInitMode>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d14b      	bne.n	8003304 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800327a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68d2      	ldr	r2, [r2, #12]
 80032a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6919      	ldr	r1, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	041a      	lsls	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f87f 	bl	80033c0 <RTC_ExitInitMode>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11b      	bne.n	8003304 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0203 	bic.w	r2, r2, #3
 80032da:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	22ff      	movs	r2, #255	; 0xff
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003324:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003326:	f7fd ffe9 	bl	80012fc <HAL_GetTick>
 800332a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800332c:	e009      	b.n	8003342 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800332e:	f7fd ffe5 	bl	80012fc <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800333c:	d901      	bls.n	8003342 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e007      	b.n	8003352 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ee      	beq.n	800332e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d120      	bne.n	80033b6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800337e:	f7fd ffbd 	bl	80012fc <HAL_GetTick>
 8003382:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003384:	e00d      	b.n	80033a2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003386:	f7fd ffb9 	bl	80012fc <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003394:	d905      	bls.n	80033a2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2203      	movs	r2, #3
 800339e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <RTC_EnterInitMode+0x5c>
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d1e7      	bne.n	8003386 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80033cc:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <RTC_ExitInitMode+0x78>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a19      	ldr	r2, [pc, #100]	; (8003438 <RTC_ExitInitMode+0x78>)
 80033d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <RTC_ExitInitMode+0x78>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10c      	bne.n	80033fe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff92 	bl	800330e <HAL_RTC_WaitForSynchro>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01e      	beq.n	800342e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2203      	movs	r2, #3
 80033f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	e017      	b.n	800342e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <RTC_ExitInitMode+0x78>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <RTC_ExitInitMode+0x78>)
 8003404:	f023 0320 	bic.w	r3, r3, #32
 8003408:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff ff7f 	bl	800330e <HAL_RTC_WaitForSynchro>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2203      	movs	r2, #3
 800341a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <RTC_ExitInitMode+0x78>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4a04      	ldr	r2, [pc, #16]	; (8003438 <RTC_ExitInitMode+0x78>)
 8003428:	f043 0320 	orr.w	r3, r3, #32
 800342c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40002800 	.word	0x40002800

0800343c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e095      	b.n	800357a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345e:	d009      	beq.n	8003474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	61da      	str	r2, [r3, #28]
 8003466:	e005      	b.n	8003474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fb44 	bl	8000b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034b4:	d902      	bls.n	80034bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e002      	b.n	80034c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034ca:	d007      	beq.n	80034dc <HAL_SPI_Init+0xa0>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	ea42 0103 	orr.w	r1, r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	f003 0204 	and.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003558:	ea42 0103 	orr.w	r1, r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e049      	b.n	8003628 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd fc8d 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 f9ed 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04f      	b.n	80036e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <HAL_TIM_Base_Start_IT+0x76>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d018      	beq.n	80036a6 <HAL_TIM_Base_Start_IT+0x76>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_TIM_Base_Start_IT+0x76>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_TIM_Base_Start_IT+0x76>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_TIM_Base_Start_IT+0xd0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_TIM_Base_Start_IT+0x76>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIM_Base_Start_IT+0xd4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_TIM_Base_Start_IT+0x76>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_TIM_Base_Start_IT+0xd8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d115      	bne.n	80036d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_TIM_Base_Start_IT+0xdc>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d015      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0xb4>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036be:	d011      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d0:	e008      	b.n	80036e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e000      	b.n	80036e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40013400 	.word	0x40013400
 8003708:	40014000 	.word	0x40014000
 800370c:	00010007 	.word	0x00010007

08003710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d122      	bne.n	800376c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d11b      	bne.n	800376c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0202 	mvn.w	r2, #2
 800373c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f905 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 8003758:	e005      	b.n	8003766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8f7 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f908 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b04      	cmp	r3, #4
 8003778:	d122      	bne.n	80037c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b04      	cmp	r3, #4
 8003786:	d11b      	bne.n	80037c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0204 	mvn.w	r2, #4
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8db 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8cd 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8de 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d122      	bne.n	8003814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0208 	mvn.w	r2, #8
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2204      	movs	r2, #4
 80037ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8b1 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8a3 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8b4 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b10      	cmp	r3, #16
 8003820:	d122      	bne.n	8003868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b10      	cmp	r3, #16
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0210 	mvn.w	r2, #16
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2208      	movs	r2, #8
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f887 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f879 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f88a 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0201 	mvn.w	r2, #1
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fc ffe2 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b80      	cmp	r3, #128	; 0x80
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f99c 	bl	8003bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ce:	d10e      	bne.n	80038ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d107      	bne.n	80038ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f98f 	bl	8003c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d10e      	bne.n	800391a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d107      	bne.n	800391a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f838 	bl	800398a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b20      	cmp	r3, #32
 8003926:	d10e      	bne.n	8003946 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b20      	cmp	r3, #32
 8003934:	d107      	bne.n	8003946 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f06f 0220 	mvn.w	r2, #32
 800393e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f94f 	bl	8003be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d00f      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3d      	ldr	r2, [pc, #244]	; (8003ab8 <TIM_Base_SetConfig+0x118>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3c      	ldr	r2, [pc, #240]	; (8003abc <TIM_Base_SetConfig+0x11c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d007      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3b      	ldr	r2, [pc, #236]	; (8003ac0 <TIM_Base_SetConfig+0x120>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d01b      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <TIM_Base_SetConfig+0x118>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d017      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <TIM_Base_SetConfig+0x11c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <TIM_Base_SetConfig+0x120>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00f      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <TIM_Base_SetConfig+0x128>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a27      	ldr	r2, [pc, #156]	; (8003acc <TIM_Base_SetConfig+0x12c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d003      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <TIM_Base_SetConfig+0x130>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d108      	bne.n	8003a4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00f      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <TIM_Base_SetConfig+0x128>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <TIM_Base_SetConfig+0x12c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <TIM_Base_SetConfig+0x130>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d103      	bne.n	8003aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	615a      	str	r2, [r3, #20]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e068      	b.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2e      	ldr	r2, [pc, #184]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01d      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5e:	d018      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1b      	ldr	r2, [pc, #108]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00e      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10c      	bne.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40013400 	.word	0x40013400
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40014000 	.word	0x40014000

08003be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e040      	b.n	8003cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd fa0a 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9dc 	bl	800401c <UART_SetConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e022      	b.n	8003cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fc5a 	bl	8004530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fce1 	bl	8004674 <UART_CheckIdleState>
 8003cb2:	4603      	mov	r3, r0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e048      	b.n	8003d60 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd f9bc 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f98e 	bl	800401c <UART_SetConfig>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e02a      	b.n	8003d60 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fc0c 	bl	8004530 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003d36:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fc8b 	bl	8004674 <UART_CheckIdleState>
 8003d5e:	4603      	mov	r3, r0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d113      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8113 	beq.w	8003fdc <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
      }
      return;
 8003dbe:	e10d      	b.n	8003fdc <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80d6 	beq.w	8003f74 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4b85      	ldr	r3, [pc, #532]	; (8003fec <HAL_UART_IRQHandler+0x284>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80cb 	beq.w	8003f74 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <HAL_UART_IRQHandler+0x9e>
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <HAL_UART_IRQHandler+0xc6>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e26:	f043 0204 	orr.w	r2, r3, #4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <HAL_UART_IRQHandler+0xee>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2204      	movs	r2, #4
 8003e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4e:	f043 0202 	orr.w	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d013      	beq.n	8003e88 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d104      	bne.n	8003e74 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e80:	f043 0208 	orr.w	r2, r3, #8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00f      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x14a>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8092 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d004      	beq.n	8003efe <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d031      	beq.n	8003f62 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fc78 	bl	80047f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d123      	bne.n	8003f5a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d013      	beq.n	8003f52 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2e:	4a30      	ldr	r2, [pc, #192]	; (8003ff0 <HAL_UART_IRQHandler+0x288>)
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd fb21 	bl	800157e <HAL_DMA_Abort_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	e00e      	b.n	8003f70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f858 	bl	8004008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e00a      	b.n	8003f70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f854 	bl	8004008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e006      	b.n	8003f70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f850 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003f6e:	e037      	b.n	8003fe0 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	bf00      	nop
    return;
 8003f72:	e035      	b.n	8003fe0 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <HAL_UART_IRQHandler+0x232>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fc7d 	bl	8004892 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f98:	e025      	b.n	8003fe6 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
    }
    return;
 8003fbe:	e011      	b.n	8003fe4 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x27e>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fc43 	bl	8004860 <UART_EndTransmit_IT>
    return;
 8003fda:	e004      	b.n	8003fe6 <HAL_UART_IRQHandler+0x27e>
      return;
 8003fdc:	bf00      	nop
 8003fde:	e002      	b.n	8003fe6 <HAL_UART_IRQHandler+0x27e>
    return;
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <HAL_UART_IRQHandler+0x27e>
    return;
 8003fe4:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	04000120 	.word	0x04000120
 8003ff0:	08004835 	.word	0x08004835

08003ff4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	b5b0      	push	{r4, r5, r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4313      	orrs	r3, r2
 800403e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4bad      	ldr	r3, [pc, #692]	; (80042fc <UART_SetConfig+0x2e0>)
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	69f9      	ldr	r1, [r7, #28]
 8004050:	430b      	orrs	r3, r1
 8004052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4aa2      	ldr	r2, [pc, #648]	; (8004300 <UART_SetConfig+0x2e4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	4313      	orrs	r3, r2
 8004082:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	430a      	orrs	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a99      	ldr	r2, [pc, #612]	; (8004304 <UART_SetConfig+0x2e8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d121      	bne.n	80040e6 <UART_SetConfig+0xca>
 80040a2:	4b99      	ldr	r3, [pc, #612]	; (8004308 <UART_SetConfig+0x2ec>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d817      	bhi.n	80040e0 <UART_SetConfig+0xc4>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0x9c>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040d5 	.word	0x080040d5
 80040c0:	080040cf 	.word	0x080040cf
 80040c4:	080040db 	.word	0x080040db
 80040c8:	2301      	movs	r3, #1
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	e0e7      	b.n	800429e <UART_SetConfig+0x282>
 80040ce:	2302      	movs	r3, #2
 80040d0:	76fb      	strb	r3, [r7, #27]
 80040d2:	e0e4      	b.n	800429e <UART_SetConfig+0x282>
 80040d4:	2304      	movs	r3, #4
 80040d6:	76fb      	strb	r3, [r7, #27]
 80040d8:	e0e1      	b.n	800429e <UART_SetConfig+0x282>
 80040da:	2308      	movs	r3, #8
 80040dc:	76fb      	strb	r3, [r7, #27]
 80040de:	e0de      	b.n	800429e <UART_SetConfig+0x282>
 80040e0:	2310      	movs	r3, #16
 80040e2:	76fb      	strb	r3, [r7, #27]
 80040e4:	e0db      	b.n	800429e <UART_SetConfig+0x282>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a88      	ldr	r2, [pc, #544]	; (800430c <UART_SetConfig+0x2f0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d132      	bne.n	8004156 <UART_SetConfig+0x13a>
 80040f0:	4b85      	ldr	r3, [pc, #532]	; (8004308 <UART_SetConfig+0x2ec>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d828      	bhi.n	8004150 <UART_SetConfig+0x134>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <UART_SetConfig+0xe8>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004139 	.word	0x08004139
 8004108:	08004151 	.word	0x08004151
 800410c:	08004151 	.word	0x08004151
 8004110:	08004151 	.word	0x08004151
 8004114:	08004145 	.word	0x08004145
 8004118:	08004151 	.word	0x08004151
 800411c:	08004151 	.word	0x08004151
 8004120:	08004151 	.word	0x08004151
 8004124:	0800413f 	.word	0x0800413f
 8004128:	08004151 	.word	0x08004151
 800412c:	08004151 	.word	0x08004151
 8004130:	08004151 	.word	0x08004151
 8004134:	0800414b 	.word	0x0800414b
 8004138:	2300      	movs	r3, #0
 800413a:	76fb      	strb	r3, [r7, #27]
 800413c:	e0af      	b.n	800429e <UART_SetConfig+0x282>
 800413e:	2302      	movs	r3, #2
 8004140:	76fb      	strb	r3, [r7, #27]
 8004142:	e0ac      	b.n	800429e <UART_SetConfig+0x282>
 8004144:	2304      	movs	r3, #4
 8004146:	76fb      	strb	r3, [r7, #27]
 8004148:	e0a9      	b.n	800429e <UART_SetConfig+0x282>
 800414a:	2308      	movs	r3, #8
 800414c:	76fb      	strb	r3, [r7, #27]
 800414e:	e0a6      	b.n	800429e <UART_SetConfig+0x282>
 8004150:	2310      	movs	r3, #16
 8004152:	76fb      	strb	r3, [r7, #27]
 8004154:	e0a3      	b.n	800429e <UART_SetConfig+0x282>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6d      	ldr	r2, [pc, #436]	; (8004310 <UART_SetConfig+0x2f4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d120      	bne.n	80041a2 <UART_SetConfig+0x186>
 8004160:	4b69      	ldr	r3, [pc, #420]	; (8004308 <UART_SetConfig+0x2ec>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800416a:	2b30      	cmp	r3, #48	; 0x30
 800416c:	d013      	beq.n	8004196 <UART_SetConfig+0x17a>
 800416e:	2b30      	cmp	r3, #48	; 0x30
 8004170:	d814      	bhi.n	800419c <UART_SetConfig+0x180>
 8004172:	2b20      	cmp	r3, #32
 8004174:	d009      	beq.n	800418a <UART_SetConfig+0x16e>
 8004176:	2b20      	cmp	r3, #32
 8004178:	d810      	bhi.n	800419c <UART_SetConfig+0x180>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <UART_SetConfig+0x168>
 800417e:	2b10      	cmp	r3, #16
 8004180:	d006      	beq.n	8004190 <UART_SetConfig+0x174>
 8004182:	e00b      	b.n	800419c <UART_SetConfig+0x180>
 8004184:	2300      	movs	r3, #0
 8004186:	76fb      	strb	r3, [r7, #27]
 8004188:	e089      	b.n	800429e <UART_SetConfig+0x282>
 800418a:	2302      	movs	r3, #2
 800418c:	76fb      	strb	r3, [r7, #27]
 800418e:	e086      	b.n	800429e <UART_SetConfig+0x282>
 8004190:	2304      	movs	r3, #4
 8004192:	76fb      	strb	r3, [r7, #27]
 8004194:	e083      	b.n	800429e <UART_SetConfig+0x282>
 8004196:	2308      	movs	r3, #8
 8004198:	76fb      	strb	r3, [r7, #27]
 800419a:	e080      	b.n	800429e <UART_SetConfig+0x282>
 800419c:	2310      	movs	r3, #16
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	e07d      	b.n	800429e <UART_SetConfig+0x282>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a5b      	ldr	r2, [pc, #364]	; (8004314 <UART_SetConfig+0x2f8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d120      	bne.n	80041ee <UART_SetConfig+0x1d2>
 80041ac:	4b56      	ldr	r3, [pc, #344]	; (8004308 <UART_SetConfig+0x2ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041b6:	2bc0      	cmp	r3, #192	; 0xc0
 80041b8:	d013      	beq.n	80041e2 <UART_SetConfig+0x1c6>
 80041ba:	2bc0      	cmp	r3, #192	; 0xc0
 80041bc:	d814      	bhi.n	80041e8 <UART_SetConfig+0x1cc>
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d009      	beq.n	80041d6 <UART_SetConfig+0x1ba>
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d810      	bhi.n	80041e8 <UART_SetConfig+0x1cc>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <UART_SetConfig+0x1b4>
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d006      	beq.n	80041dc <UART_SetConfig+0x1c0>
 80041ce:	e00b      	b.n	80041e8 <UART_SetConfig+0x1cc>
 80041d0:	2300      	movs	r3, #0
 80041d2:	76fb      	strb	r3, [r7, #27]
 80041d4:	e063      	b.n	800429e <UART_SetConfig+0x282>
 80041d6:	2302      	movs	r3, #2
 80041d8:	76fb      	strb	r3, [r7, #27]
 80041da:	e060      	b.n	800429e <UART_SetConfig+0x282>
 80041dc:	2304      	movs	r3, #4
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	e05d      	b.n	800429e <UART_SetConfig+0x282>
 80041e2:	2308      	movs	r3, #8
 80041e4:	76fb      	strb	r3, [r7, #27]
 80041e6:	e05a      	b.n	800429e <UART_SetConfig+0x282>
 80041e8:	2310      	movs	r3, #16
 80041ea:	76fb      	strb	r3, [r7, #27]
 80041ec:	e057      	b.n	800429e <UART_SetConfig+0x282>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a49      	ldr	r2, [pc, #292]	; (8004318 <UART_SetConfig+0x2fc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d125      	bne.n	8004244 <UART_SetConfig+0x228>
 80041f8:	4b43      	ldr	r3, [pc, #268]	; (8004308 <UART_SetConfig+0x2ec>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004206:	d017      	beq.n	8004238 <UART_SetConfig+0x21c>
 8004208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420c:	d817      	bhi.n	800423e <UART_SetConfig+0x222>
 800420e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004212:	d00b      	beq.n	800422c <UART_SetConfig+0x210>
 8004214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004218:	d811      	bhi.n	800423e <UART_SetConfig+0x222>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <UART_SetConfig+0x20a>
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d006      	beq.n	8004232 <UART_SetConfig+0x216>
 8004224:	e00b      	b.n	800423e <UART_SetConfig+0x222>
 8004226:	2300      	movs	r3, #0
 8004228:	76fb      	strb	r3, [r7, #27]
 800422a:	e038      	b.n	800429e <UART_SetConfig+0x282>
 800422c:	2302      	movs	r3, #2
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	e035      	b.n	800429e <UART_SetConfig+0x282>
 8004232:	2304      	movs	r3, #4
 8004234:	76fb      	strb	r3, [r7, #27]
 8004236:	e032      	b.n	800429e <UART_SetConfig+0x282>
 8004238:	2308      	movs	r3, #8
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	e02f      	b.n	800429e <UART_SetConfig+0x282>
 800423e:	2310      	movs	r3, #16
 8004240:	76fb      	strb	r3, [r7, #27]
 8004242:	e02c      	b.n	800429e <UART_SetConfig+0x282>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2d      	ldr	r2, [pc, #180]	; (8004300 <UART_SetConfig+0x2e4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d125      	bne.n	800429a <UART_SetConfig+0x27e>
 800424e:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <UART_SetConfig+0x2ec>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800425c:	d017      	beq.n	800428e <UART_SetConfig+0x272>
 800425e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004262:	d817      	bhi.n	8004294 <UART_SetConfig+0x278>
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004268:	d00b      	beq.n	8004282 <UART_SetConfig+0x266>
 800426a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426e:	d811      	bhi.n	8004294 <UART_SetConfig+0x278>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <UART_SetConfig+0x260>
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d006      	beq.n	8004288 <UART_SetConfig+0x26c>
 800427a:	e00b      	b.n	8004294 <UART_SetConfig+0x278>
 800427c:	2300      	movs	r3, #0
 800427e:	76fb      	strb	r3, [r7, #27]
 8004280:	e00d      	b.n	800429e <UART_SetConfig+0x282>
 8004282:	2302      	movs	r3, #2
 8004284:	76fb      	strb	r3, [r7, #27]
 8004286:	e00a      	b.n	800429e <UART_SetConfig+0x282>
 8004288:	2304      	movs	r3, #4
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	e007      	b.n	800429e <UART_SetConfig+0x282>
 800428e:	2308      	movs	r3, #8
 8004290:	76fb      	strb	r3, [r7, #27]
 8004292:	e004      	b.n	800429e <UART_SetConfig+0x282>
 8004294:	2310      	movs	r3, #16
 8004296:	76fb      	strb	r3, [r7, #27]
 8004298:	e001      	b.n	800429e <UART_SetConfig+0x282>
 800429a:	2310      	movs	r3, #16
 800429c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a17      	ldr	r2, [pc, #92]	; (8004300 <UART_SetConfig+0x2e4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	f040 8087 	bne.w	80043b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042aa:	7efb      	ldrb	r3, [r7, #27]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d837      	bhi.n	8004320 <UART_SetConfig+0x304>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <UART_SetConfig+0x29c>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042dd 	.word	0x080042dd
 80042bc:	08004321 	.word	0x08004321
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	08004321 	.word	0x08004321
 80042c8:	080042eb 	.word	0x080042eb
 80042cc:	08004321 	.word	0x08004321
 80042d0:	08004321 	.word	0x08004321
 80042d4:	08004321 	.word	0x08004321
 80042d8:	080042f3 	.word	0x080042f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042dc:	f7fe fa54 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80042e0:	6178      	str	r0, [r7, #20]
        break;
 80042e2:	e022      	b.n	800432a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <UART_SetConfig+0x300>)
 80042e6:	617b      	str	r3, [r7, #20]
        break;
 80042e8:	e01f      	b.n	800432a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ea:	f7fe f9b5 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 80042ee:	6178      	str	r0, [r7, #20]
        break;
 80042f0:	e01b      	b.n	800432a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f6:	617b      	str	r3, [r7, #20]
        break;
 80042f8:	e017      	b.n	800432a <UART_SetConfig+0x30e>
 80042fa:	bf00      	nop
 80042fc:	efff69f3 	.word	0xefff69f3
 8004300:	40008000 	.word	0x40008000
 8004304:	40013800 	.word	0x40013800
 8004308:	40021000 	.word	0x40021000
 800430c:	40004400 	.word	0x40004400
 8004310:	40004800 	.word	0x40004800
 8004314:	40004c00 	.word	0x40004c00
 8004318:	40005000 	.word	0x40005000
 800431c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	76bb      	strb	r3, [r7, #26]
        break;
 8004328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80f1 	beq.w	8004514 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	429a      	cmp	r2, r3
 8004340:	d305      	bcc.n	800434e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	429a      	cmp	r2, r3
 800434c:	d902      	bls.n	8004354 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	76bb      	strb	r3, [r7, #26]
 8004352:	e0df      	b.n	8004514 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4618      	mov	r0, r3
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	020b      	lsls	r3, r1, #8
 8004366:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800436a:	0202      	lsls	r2, r0, #8
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	6849      	ldr	r1, [r1, #4]
 8004370:	0849      	lsrs	r1, r1, #1
 8004372:	4608      	mov	r0, r1
 8004374:	f04f 0100 	mov.w	r1, #0
 8004378:	1814      	adds	r4, r2, r0
 800437a:	eb43 0501 	adc.w	r5, r3, r1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	461a      	mov	r2, r3
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f7fb ff70 	bl	8000270 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4613      	mov	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439e:	d308      	bcc.n	80043b2 <UART_SetConfig+0x396>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a6:	d204      	bcs.n	80043b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	e0b0      	b.n	8004514 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	76bb      	strb	r3, [r7, #26]
 80043b6:	e0ad      	b.n	8004514 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c0:	d15c      	bne.n	800447c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80043c2:	7efb      	ldrb	r3, [r7, #27]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d828      	bhi.n	800441a <UART_SetConfig+0x3fe>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <UART_SetConfig+0x3b4>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	08004405 	.word	0x08004405
 80043dc:	0800441b 	.word	0x0800441b
 80043e0:	0800440b 	.word	0x0800440b
 80043e4:	0800441b 	.word	0x0800441b
 80043e8:	0800441b 	.word	0x0800441b
 80043ec:	0800441b 	.word	0x0800441b
 80043f0:	08004413 	.word	0x08004413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7fe f9c8 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80043f8:	6178      	str	r0, [r7, #20]
        break;
 80043fa:	e013      	b.n	8004424 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7fe f9da 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8004400:	6178      	str	r0, [r7, #20]
        break;
 8004402:	e00f      	b.n	8004424 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004404:	4b49      	ldr	r3, [pc, #292]	; (800452c <UART_SetConfig+0x510>)
 8004406:	617b      	str	r3, [r7, #20]
        break;
 8004408:	e00c      	b.n	8004424 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440a:	f7fe f925 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 800440e:	6178      	str	r0, [r7, #20]
        break;
 8004410:	e008      	b.n	8004424 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004416:	617b      	str	r3, [r7, #20]
        break;
 8004418:	e004      	b.n	8004424 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	76bb      	strb	r3, [r7, #26]
        break;
 8004422:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d074      	beq.n	8004514 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	005a      	lsls	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b0f      	cmp	r3, #15
 8004446:	d916      	bls.n	8004476 <UART_SetConfig+0x45a>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444e:	d212      	bcs.n	8004476 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f023 030f 	bic.w	r3, r3, #15
 8004458:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	b29b      	uxth	r3, r3
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	b29a      	uxth	r2, r3
 8004466:	89fb      	ldrh	r3, [r7, #14]
 8004468:	4313      	orrs	r3, r2
 800446a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	89fa      	ldrh	r2, [r7, #14]
 8004472:	60da      	str	r2, [r3, #12]
 8004474:	e04e      	b.n	8004514 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	76bb      	strb	r3, [r7, #26]
 800447a:	e04b      	b.n	8004514 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800447c:	7efb      	ldrb	r3, [r7, #27]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d827      	bhi.n	80044d2 <UART_SetConfig+0x4b6>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x46c>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044bd 	.word	0x080044bd
 8004494:	080044d3 	.word	0x080044d3
 8004498:	080044c3 	.word	0x080044c3
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044d3 	.word	0x080044d3
 80044a4:	080044d3 	.word	0x080044d3
 80044a8:	080044cb 	.word	0x080044cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe f96c 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80044b0:	6178      	str	r0, [r7, #20]
        break;
 80044b2:	e013      	b.n	80044dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe f97e 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 80044b8:	6178      	str	r0, [r7, #20]
        break;
 80044ba:	e00f      	b.n	80044dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044bc:	4b1b      	ldr	r3, [pc, #108]	; (800452c <UART_SetConfig+0x510>)
 80044be:	617b      	str	r3, [r7, #20]
        break;
 80044c0:	e00c      	b.n	80044dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c2:	f7fe f8c9 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 80044c6:	6178      	str	r0, [r7, #20]
        break;
 80044c8:	e008      	b.n	80044dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ce:	617b      	str	r3, [r7, #20]
        break;
 80044d0:	e004      	b.n	80044dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	76bb      	strb	r3, [r7, #26]
        break;
 80044da:	bf00      	nop
    }

    if (pclk != 0U)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d018      	beq.n	8004514 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	085a      	lsrs	r2, r3, #1
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	441a      	add	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b0f      	cmp	r3, #15
 80044fc:	d908      	bls.n	8004510 <UART_SetConfig+0x4f4>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	d204      	bcs.n	8004510 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	e001      	b.n	8004514 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004520:	7ebb      	ldrb	r3, [r7, #26]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bdb0      	pop	{r4, r5, r7, pc}
 800452a:	bf00      	nop
 800452c:	00f42400 	.word	0x00f42400

08004530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01a      	beq.n	8004646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462e:	d10a      	bne.n	8004646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af02      	add	r7, sp, #8
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004682:	f7fc fe3b 	bl	80012fc <HAL_GetTick>
 8004686:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b08      	cmp	r3, #8
 8004694:	d10e      	bne.n	80046b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004696:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f82a 	bl	80046fe <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e020      	b.n	80046f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d10e      	bne.n	80046e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f814 	bl	80046fe <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e00a      	b.n	80046f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470e:	e05d      	b.n	80047cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d059      	beq.n	80047cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004718:	f7fc fdf0 	bl	80012fc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	429a      	cmp	r2, r3
 8004726:	d302      	bcc.n	800472e <UART_WaitOnFlagUntilTimeout+0x30>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d11b      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800473c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e042      	b.n	80047ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d02b      	beq.n	80047cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004782:	d123      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800479c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e00f      	b.n	80047ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	429a      	cmp	r2, r3
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d092      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800480a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fbd8 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004876:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fbb5 	bl	8003ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80048ac:	4904      	ldr	r1, [pc, #16]	; (80048c0 <MX_FATFS_Init+0x18>)
 80048ae:	4805      	ldr	r0, [pc, #20]	; (80048c4 <MX_FATFS_Init+0x1c>)
 80048b0:	f000 f8b0 	bl	8004a14 <FATFS_LinkDriver>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <MX_FATFS_Init+0x20>)
 80048ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80048bc:	bf00      	nop
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	200003b0 	.word	0x200003b0
 80048c4:	2000000c 	.word	0x2000000c
 80048c8:	200003b4 	.word	0x200003b4

080048cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <USER_initialize+0x24>)
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
    return Stat;
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <USER_initialize+0x24>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000009 	.word	0x20000009

080048f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <USER_status+0x24>)
 8004900:	2201      	movs	r2, #1
 8004902:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <USER_status+0x24>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000009 	.word	0x20000009

0800491c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800492c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4603      	mov	r3, r0
 8004948:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800494a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	603a      	str	r2, [r7, #0]
 8004962:	71fb      	strb	r3, [r7, #7]
 8004964:	460b      	mov	r3, r1
 8004966:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
    return res;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004992:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 8004994:	7a5b      	ldrb	r3, [r3, #9]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d131      	bne.n	8004a00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800499c:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 800499e:	7a5b      	ldrb	r3, [r3, #9]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80049aa:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 80049ac:	7a5b      	ldrb	r3, [r3, #9]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 80049bc:	7a5b      	ldrb	r3, [r3, #9]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 80049c4:	4413      	add	r3, r2
 80049c6:	79fa      	ldrb	r2, [r7, #7]
 80049c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80049ca:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 80049cc:	7a5b      	ldrb	r3, [r3, #9]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	b2d1      	uxtb	r1, r2
 80049d4:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <FATFS_LinkDriverEx+0x94>)
 80049d6:	7251      	strb	r1, [r2, #9]
 80049d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80049da:	7dbb      	ldrb	r3, [r7, #22]
 80049dc:	3330      	adds	r3, #48	; 0x30
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	3301      	adds	r3, #1
 80049e8:	223a      	movs	r2, #58	; 0x3a
 80049ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3302      	adds	r3, #2
 80049f0:	222f      	movs	r2, #47	; 0x2f
 80049f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	3303      	adds	r3, #3
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	200000ac 	.word	0x200000ac

08004a14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ffaa 	bl	800497c <FATFS_LinkDriverEx>
 8004a28:	4603      	mov	r3, r0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <__errno>:
 8004a34:	4b01      	ldr	r3, [pc, #4]	; (8004a3c <__errno+0x8>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20000020 	.word	0x20000020

08004a40 <__libc_init_array>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4d0d      	ldr	r5, [pc, #52]	; (8004a78 <__libc_init_array+0x38>)
 8004a44:	4c0d      	ldr	r4, [pc, #52]	; (8004a7c <__libc_init_array+0x3c>)
 8004a46:	1b64      	subs	r4, r4, r5
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	42a6      	cmp	r6, r4
 8004a4e:	d109      	bne.n	8004a64 <__libc_init_array+0x24>
 8004a50:	4d0b      	ldr	r5, [pc, #44]	; (8004a80 <__libc_init_array+0x40>)
 8004a52:	4c0c      	ldr	r4, [pc, #48]	; (8004a84 <__libc_init_array+0x44>)
 8004a54:	f000 ff76 	bl	8005944 <_init>
 8004a58:	1b64      	subs	r4, r4, r5
 8004a5a:	10a4      	asrs	r4, r4, #2
 8004a5c:	2600      	movs	r6, #0
 8004a5e:	42a6      	cmp	r6, r4
 8004a60:	d105      	bne.n	8004a6e <__libc_init_array+0x2e>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a68:	4798      	blx	r3
 8004a6a:	3601      	adds	r6, #1
 8004a6c:	e7ee      	b.n	8004a4c <__libc_init_array+0xc>
 8004a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a72:	4798      	blx	r3
 8004a74:	3601      	adds	r6, #1
 8004a76:	e7f2      	b.n	8004a5e <__libc_init_array+0x1e>
 8004a78:	08005a54 	.word	0x08005a54
 8004a7c:	08005a54 	.word	0x08005a54
 8004a80:	08005a54 	.word	0x08005a54
 8004a84:	08005a58 	.word	0x08005a58

08004a88 <memset>:
 8004a88:	4402      	add	r2, r0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <memset+0xa>
 8004a90:	4770      	bx	lr
 8004a92:	f803 1b01 	strb.w	r1, [r3], #1
 8004a96:	e7f9      	b.n	8004a8c <memset+0x4>

08004a98 <iprintf>:
 8004a98:	b40f      	push	{r0, r1, r2, r3}
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <iprintf+0x2c>)
 8004a9c:	b513      	push	{r0, r1, r4, lr}
 8004a9e:	681c      	ldr	r4, [r3, #0]
 8004aa0:	b124      	cbz	r4, 8004aac <iprintf+0x14>
 8004aa2:	69a3      	ldr	r3, [r4, #24]
 8004aa4:	b913      	cbnz	r3, 8004aac <iprintf+0x14>
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 f866 	bl	8004b78 <__sinit>
 8004aac:	ab05      	add	r3, sp, #20
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	68a1      	ldr	r1, [r4, #8]
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 f983 	bl	8004dc0 <_vfiprintf_r>
 8004aba:	b002      	add	sp, #8
 8004abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac0:	b004      	add	sp, #16
 8004ac2:	4770      	bx	lr
 8004ac4:	20000020 	.word	0x20000020

08004ac8 <std>:
 8004ac8:	2300      	movs	r3, #0
 8004aca:	b510      	push	{r4, lr}
 8004acc:	4604      	mov	r4, r0
 8004ace:	e9c0 3300 	strd	r3, r3, [r0]
 8004ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ad6:	6083      	str	r3, [r0, #8]
 8004ad8:	8181      	strh	r1, [r0, #12]
 8004ada:	6643      	str	r3, [r0, #100]	; 0x64
 8004adc:	81c2      	strh	r2, [r0, #14]
 8004ade:	6183      	str	r3, [r0, #24]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	305c      	adds	r0, #92	; 0x5c
 8004ae6:	f7ff ffcf 	bl	8004a88 <memset>
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <std+0x38>)
 8004aec:	6263      	str	r3, [r4, #36]	; 0x24
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <std+0x3c>)
 8004af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <std+0x40>)
 8004af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <std+0x44>)
 8004af8:	6224      	str	r4, [r4, #32]
 8004afa:	6323      	str	r3, [r4, #48]	; 0x30
 8004afc:	bd10      	pop	{r4, pc}
 8004afe:	bf00      	nop
 8004b00:	08005369 	.word	0x08005369
 8004b04:	0800538b 	.word	0x0800538b
 8004b08:	080053c3 	.word	0x080053c3
 8004b0c:	080053e7 	.word	0x080053e7

08004b10 <_cleanup_r>:
 8004b10:	4901      	ldr	r1, [pc, #4]	; (8004b18 <_cleanup_r+0x8>)
 8004b12:	f000 b8af 	b.w	8004c74 <_fwalk_reent>
 8004b16:	bf00      	nop
 8004b18:	080056c1 	.word	0x080056c1

08004b1c <__sfmoreglue>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	1e4a      	subs	r2, r1, #1
 8004b20:	2568      	movs	r5, #104	; 0x68
 8004b22:	4355      	muls	r5, r2
 8004b24:	460e      	mov	r6, r1
 8004b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b2a:	f000 f8c5 	bl	8004cb8 <_malloc_r>
 8004b2e:	4604      	mov	r4, r0
 8004b30:	b140      	cbz	r0, 8004b44 <__sfmoreglue+0x28>
 8004b32:	2100      	movs	r1, #0
 8004b34:	e9c0 1600 	strd	r1, r6, [r0]
 8004b38:	300c      	adds	r0, #12
 8004b3a:	60a0      	str	r0, [r4, #8]
 8004b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b40:	f7ff ffa2 	bl	8004a88 <memset>
 8004b44:	4620      	mov	r0, r4
 8004b46:	bd70      	pop	{r4, r5, r6, pc}

08004b48 <__sfp_lock_acquire>:
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <__sfp_lock_acquire+0x8>)
 8004b4a:	f000 b8b3 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	20002428 	.word	0x20002428

08004b54 <__sfp_lock_release>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__sfp_lock_release+0x8>)
 8004b56:	f000 b8ae 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20002428 	.word	0x20002428

08004b60 <__sinit_lock_acquire>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__sinit_lock_acquire+0x8>)
 8004b62:	f000 b8a7 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8004b66:	bf00      	nop
 8004b68:	20002423 	.word	0x20002423

08004b6c <__sinit_lock_release>:
 8004b6c:	4801      	ldr	r0, [pc, #4]	; (8004b74 <__sinit_lock_release+0x8>)
 8004b6e:	f000 b8a2 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8004b72:	bf00      	nop
 8004b74:	20002423 	.word	0x20002423

08004b78 <__sinit>:
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	f7ff fff0 	bl	8004b60 <__sinit_lock_acquire>
 8004b80:	69a3      	ldr	r3, [r4, #24]
 8004b82:	b11b      	cbz	r3, 8004b8c <__sinit+0x14>
 8004b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b88:	f7ff bff0 	b.w	8004b6c <__sinit_lock_release>
 8004b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b90:	6523      	str	r3, [r4, #80]	; 0x50
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <__sinit+0x68>)
 8004b94:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <__sinit+0x6c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	bf04      	itt	eq
 8004b9e:	2301      	moveq	r3, #1
 8004ba0:	61a3      	streq	r3, [r4, #24]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f000 f820 	bl	8004be8 <__sfp>
 8004ba8:	6060      	str	r0, [r4, #4]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 f81c 	bl	8004be8 <__sfp>
 8004bb0:	60a0      	str	r0, [r4, #8]
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 f818 	bl	8004be8 <__sfp>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60e0      	str	r0, [r4, #12]
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	6860      	ldr	r0, [r4, #4]
 8004bc0:	f7ff ff82 	bl	8004ac8 <std>
 8004bc4:	68a0      	ldr	r0, [r4, #8]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	2109      	movs	r1, #9
 8004bca:	f7ff ff7d 	bl	8004ac8 <std>
 8004bce:	68e0      	ldr	r0, [r4, #12]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	2112      	movs	r1, #18
 8004bd4:	f7ff ff78 	bl	8004ac8 <std>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	61a3      	str	r3, [r4, #24]
 8004bdc:	e7d2      	b.n	8004b84 <__sinit+0xc>
 8004bde:	bf00      	nop
 8004be0:	080059b4 	.word	0x080059b4
 8004be4:	08004b11 	.word	0x08004b11

08004be8 <__sfp>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	4607      	mov	r7, r0
 8004bec:	f7ff ffac 	bl	8004b48 <__sfp_lock_acquire>
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <__sfp+0x84>)
 8004bf2:	681e      	ldr	r6, [r3, #0]
 8004bf4:	69b3      	ldr	r3, [r6, #24]
 8004bf6:	b913      	cbnz	r3, 8004bfe <__sfp+0x16>
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff ffbd 	bl	8004b78 <__sinit>
 8004bfe:	3648      	adds	r6, #72	; 0x48
 8004c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	d503      	bpl.n	8004c10 <__sfp+0x28>
 8004c08:	6833      	ldr	r3, [r6, #0]
 8004c0a:	b30b      	cbz	r3, 8004c50 <__sfp+0x68>
 8004c0c:	6836      	ldr	r6, [r6, #0]
 8004c0e:	e7f7      	b.n	8004c00 <__sfp+0x18>
 8004c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c14:	b9d5      	cbnz	r5, 8004c4c <__sfp+0x64>
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <__sfp+0x88>)
 8004c18:	60e3      	str	r3, [r4, #12]
 8004c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8004c20:	f000 f847 	bl	8004cb2 <__retarget_lock_init_recursive>
 8004c24:	f7ff ff96 	bl	8004b54 <__sfp_lock_release>
 8004c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c30:	6025      	str	r5, [r4, #0]
 8004c32:	61a5      	str	r5, [r4, #24]
 8004c34:	2208      	movs	r2, #8
 8004c36:	4629      	mov	r1, r5
 8004c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c3c:	f7ff ff24 	bl	8004a88 <memset>
 8004c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c48:	4620      	mov	r0, r4
 8004c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4c:	3468      	adds	r4, #104	; 0x68
 8004c4e:	e7d9      	b.n	8004c04 <__sfp+0x1c>
 8004c50:	2104      	movs	r1, #4
 8004c52:	4638      	mov	r0, r7
 8004c54:	f7ff ff62 	bl	8004b1c <__sfmoreglue>
 8004c58:	4604      	mov	r4, r0
 8004c5a:	6030      	str	r0, [r6, #0]
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d1d5      	bne.n	8004c0c <__sfp+0x24>
 8004c60:	f7ff ff78 	bl	8004b54 <__sfp_lock_release>
 8004c64:	230c      	movs	r3, #12
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	e7ee      	b.n	8004c48 <__sfp+0x60>
 8004c6a:	bf00      	nop
 8004c6c:	080059b4 	.word	0x080059b4
 8004c70:	ffff0001 	.word	0xffff0001

08004c74 <_fwalk_reent>:
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	4606      	mov	r6, r0
 8004c7a:	4688      	mov	r8, r1
 8004c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c80:	2700      	movs	r7, #0
 8004c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c86:	f1b9 0901 	subs.w	r9, r9, #1
 8004c8a:	d505      	bpl.n	8004c98 <_fwalk_reent+0x24>
 8004c8c:	6824      	ldr	r4, [r4, #0]
 8004c8e:	2c00      	cmp	r4, #0
 8004c90:	d1f7      	bne.n	8004c82 <_fwalk_reent+0xe>
 8004c92:	4638      	mov	r0, r7
 8004c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c98:	89ab      	ldrh	r3, [r5, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d907      	bls.n	8004cae <_fwalk_reent+0x3a>
 8004c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	d003      	beq.n	8004cae <_fwalk_reent+0x3a>
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4630      	mov	r0, r6
 8004caa:	47c0      	blx	r8
 8004cac:	4307      	orrs	r7, r0
 8004cae:	3568      	adds	r5, #104	; 0x68
 8004cb0:	e7e9      	b.n	8004c86 <_fwalk_reent+0x12>

08004cb2 <__retarget_lock_init_recursive>:
 8004cb2:	4770      	bx	lr

08004cb4 <__retarget_lock_acquire_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <__retarget_lock_release_recursive>:
 8004cb6:	4770      	bx	lr

08004cb8 <_malloc_r>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	1ccd      	adds	r5, r1, #3
 8004cbc:	f025 0503 	bic.w	r5, r5, #3
 8004cc0:	3508      	adds	r5, #8
 8004cc2:	2d0c      	cmp	r5, #12
 8004cc4:	bf38      	it	cc
 8004cc6:	250c      	movcc	r5, #12
 8004cc8:	2d00      	cmp	r5, #0
 8004cca:	4606      	mov	r6, r0
 8004ccc:	db01      	blt.n	8004cd2 <_malloc_r+0x1a>
 8004cce:	42a9      	cmp	r1, r5
 8004cd0:	d903      	bls.n	8004cda <_malloc_r+0x22>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	6033      	str	r3, [r6, #0]
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cda:	f000 fda3 	bl	8005824 <__malloc_lock>
 8004cde:	4921      	ldr	r1, [pc, #132]	; (8004d64 <_malloc_r+0xac>)
 8004ce0:	680a      	ldr	r2, [r1, #0]
 8004ce2:	4614      	mov	r4, r2
 8004ce4:	b99c      	cbnz	r4, 8004d0e <_malloc_r+0x56>
 8004ce6:	4f20      	ldr	r7, [pc, #128]	; (8004d68 <_malloc_r+0xb0>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	b923      	cbnz	r3, 8004cf6 <_malloc_r+0x3e>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f000 fb2a 	bl	8005348 <_sbrk_r>
 8004cf4:	6038      	str	r0, [r7, #0]
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 fb25 	bl	8005348 <_sbrk_r>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	d123      	bne.n	8004d4a <_malloc_r+0x92>
 8004d02:	230c      	movs	r3, #12
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	4630      	mov	r0, r6
 8004d08:	f000 fd92 	bl	8005830 <__malloc_unlock>
 8004d0c:	e7e3      	b.n	8004cd6 <_malloc_r+0x1e>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	1b5b      	subs	r3, r3, r5
 8004d12:	d417      	bmi.n	8004d44 <_malloc_r+0x8c>
 8004d14:	2b0b      	cmp	r3, #11
 8004d16:	d903      	bls.n	8004d20 <_malloc_r+0x68>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	441c      	add	r4, r3
 8004d1c:	6025      	str	r5, [r4, #0]
 8004d1e:	e004      	b.n	8004d2a <_malloc_r+0x72>
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	42a2      	cmp	r2, r4
 8004d24:	bf0c      	ite	eq
 8004d26:	600b      	streq	r3, [r1, #0]
 8004d28:	6053      	strne	r3, [r2, #4]
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 fd80 	bl	8005830 <__malloc_unlock>
 8004d30:	f104 000b 	add.w	r0, r4, #11
 8004d34:	1d23      	adds	r3, r4, #4
 8004d36:	f020 0007 	bic.w	r0, r0, #7
 8004d3a:	1ac2      	subs	r2, r0, r3
 8004d3c:	d0cc      	beq.n	8004cd8 <_malloc_r+0x20>
 8004d3e:	1a1b      	subs	r3, r3, r0
 8004d40:	50a3      	str	r3, [r4, r2]
 8004d42:	e7c9      	b.n	8004cd8 <_malloc_r+0x20>
 8004d44:	4622      	mov	r2, r4
 8004d46:	6864      	ldr	r4, [r4, #4]
 8004d48:	e7cc      	b.n	8004ce4 <_malloc_r+0x2c>
 8004d4a:	1cc4      	adds	r4, r0, #3
 8004d4c:	f024 0403 	bic.w	r4, r4, #3
 8004d50:	42a0      	cmp	r0, r4
 8004d52:	d0e3      	beq.n	8004d1c <_malloc_r+0x64>
 8004d54:	1a21      	subs	r1, r4, r0
 8004d56:	4630      	mov	r0, r6
 8004d58:	f000 faf6 	bl	8005348 <_sbrk_r>
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d1dd      	bne.n	8004d1c <_malloc_r+0x64>
 8004d60:	e7cf      	b.n	8004d02 <_malloc_r+0x4a>
 8004d62:	bf00      	nop
 8004d64:	200000b8 	.word	0x200000b8
 8004d68:	200000bc 	.word	0x200000bc

08004d6c <__sfputc_r>:
 8004d6c:	6893      	ldr	r3, [r2, #8]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	b410      	push	{r4}
 8004d74:	6093      	str	r3, [r2, #8]
 8004d76:	da08      	bge.n	8004d8a <__sfputc_r+0x1e>
 8004d78:	6994      	ldr	r4, [r2, #24]
 8004d7a:	42a3      	cmp	r3, r4
 8004d7c:	db01      	blt.n	8004d82 <__sfputc_r+0x16>
 8004d7e:	290a      	cmp	r1, #10
 8004d80:	d103      	bne.n	8004d8a <__sfputc_r+0x1e>
 8004d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d86:	f000 bb33 	b.w	80053f0 <__swbuf_r>
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	1c58      	adds	r0, r3, #1
 8004d8e:	6010      	str	r0, [r2, #0]
 8004d90:	7019      	strb	r1, [r3, #0]
 8004d92:	4608      	mov	r0, r1
 8004d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <__sfputs_r>:
 8004d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	460f      	mov	r7, r1
 8004da0:	4614      	mov	r4, r2
 8004da2:	18d5      	adds	r5, r2, r3
 8004da4:	42ac      	cmp	r4, r5
 8004da6:	d101      	bne.n	8004dac <__sfputs_r+0x12>
 8004da8:	2000      	movs	r0, #0
 8004daa:	e007      	b.n	8004dbc <__sfputs_r+0x22>
 8004dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db0:	463a      	mov	r2, r7
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7ff ffda 	bl	8004d6c <__sfputc_r>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d1f3      	bne.n	8004da4 <__sfputs_r+0xa>
 8004dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dc0 <_vfiprintf_r>:
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	460d      	mov	r5, r1
 8004dc6:	b09d      	sub	sp, #116	; 0x74
 8004dc8:	4614      	mov	r4, r2
 8004dca:	4698      	mov	r8, r3
 8004dcc:	4606      	mov	r6, r0
 8004dce:	b118      	cbz	r0, 8004dd8 <_vfiprintf_r+0x18>
 8004dd0:	6983      	ldr	r3, [r0, #24]
 8004dd2:	b90b      	cbnz	r3, 8004dd8 <_vfiprintf_r+0x18>
 8004dd4:	f7ff fed0 	bl	8004b78 <__sinit>
 8004dd8:	4b89      	ldr	r3, [pc, #548]	; (8005000 <_vfiprintf_r+0x240>)
 8004dda:	429d      	cmp	r5, r3
 8004ddc:	d11b      	bne.n	8004e16 <_vfiprintf_r+0x56>
 8004dde:	6875      	ldr	r5, [r6, #4]
 8004de0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004de2:	07d9      	lsls	r1, r3, #31
 8004de4:	d405      	bmi.n	8004df2 <_vfiprintf_r+0x32>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	059a      	lsls	r2, r3, #22
 8004dea:	d402      	bmi.n	8004df2 <_vfiprintf_r+0x32>
 8004dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dee:	f7ff ff61 	bl	8004cb4 <__retarget_lock_acquire_recursive>
 8004df2:	89ab      	ldrh	r3, [r5, #12]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	d501      	bpl.n	8004dfc <_vfiprintf_r+0x3c>
 8004df8:	692b      	ldr	r3, [r5, #16]
 8004dfa:	b9eb      	cbnz	r3, 8004e38 <_vfiprintf_r+0x78>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f000 fb5a 	bl	80054b8 <__swsetup_r>
 8004e04:	b1c0      	cbz	r0, 8004e38 <_vfiprintf_r+0x78>
 8004e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e08:	07dc      	lsls	r4, r3, #31
 8004e0a:	d50e      	bpl.n	8004e2a <_vfiprintf_r+0x6a>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	b01d      	add	sp, #116	; 0x74
 8004e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e16:	4b7b      	ldr	r3, [pc, #492]	; (8005004 <_vfiprintf_r+0x244>)
 8004e18:	429d      	cmp	r5, r3
 8004e1a:	d101      	bne.n	8004e20 <_vfiprintf_r+0x60>
 8004e1c:	68b5      	ldr	r5, [r6, #8]
 8004e1e:	e7df      	b.n	8004de0 <_vfiprintf_r+0x20>
 8004e20:	4b79      	ldr	r3, [pc, #484]	; (8005008 <_vfiprintf_r+0x248>)
 8004e22:	429d      	cmp	r5, r3
 8004e24:	bf08      	it	eq
 8004e26:	68f5      	ldreq	r5, [r6, #12]
 8004e28:	e7da      	b.n	8004de0 <_vfiprintf_r+0x20>
 8004e2a:	89ab      	ldrh	r3, [r5, #12]
 8004e2c:	0598      	lsls	r0, r3, #22
 8004e2e:	d4ed      	bmi.n	8004e0c <_vfiprintf_r+0x4c>
 8004e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e32:	f7ff ff40 	bl	8004cb6 <__retarget_lock_release_recursive>
 8004e36:	e7e9      	b.n	8004e0c <_vfiprintf_r+0x4c>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3c:	2320      	movs	r3, #32
 8004e3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e46:	2330      	movs	r3, #48	; 0x30
 8004e48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800500c <_vfiprintf_r+0x24c>
 8004e4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e50:	f04f 0901 	mov.w	r9, #1
 8004e54:	4623      	mov	r3, r4
 8004e56:	469a      	mov	sl, r3
 8004e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5c:	b10a      	cbz	r2, 8004e62 <_vfiprintf_r+0xa2>
 8004e5e:	2a25      	cmp	r2, #37	; 0x25
 8004e60:	d1f9      	bne.n	8004e56 <_vfiprintf_r+0x96>
 8004e62:	ebba 0b04 	subs.w	fp, sl, r4
 8004e66:	d00b      	beq.n	8004e80 <_vfiprintf_r+0xc0>
 8004e68:	465b      	mov	r3, fp
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7ff ff93 	bl	8004d9a <__sfputs_r>
 8004e74:	3001      	adds	r0, #1
 8004e76:	f000 80aa 	beq.w	8004fce <_vfiprintf_r+0x20e>
 8004e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7c:	445a      	add	r2, fp
 8004e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e80:	f89a 3000 	ldrb.w	r3, [sl]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80a2 	beq.w	8004fce <_vfiprintf_r+0x20e>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e94:	f10a 0a01 	add.w	sl, sl, #1
 8004e98:	9304      	str	r3, [sp, #16]
 8004e9a:	9307      	str	r3, [sp, #28]
 8004e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea2:	4654      	mov	r4, sl
 8004ea4:	2205      	movs	r2, #5
 8004ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eaa:	4858      	ldr	r0, [pc, #352]	; (800500c <_vfiprintf_r+0x24c>)
 8004eac:	f7fb f990 	bl	80001d0 <memchr>
 8004eb0:	9a04      	ldr	r2, [sp, #16]
 8004eb2:	b9d8      	cbnz	r0, 8004eec <_vfiprintf_r+0x12c>
 8004eb4:	06d1      	lsls	r1, r2, #27
 8004eb6:	bf44      	itt	mi
 8004eb8:	2320      	movmi	r3, #32
 8004eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ebe:	0713      	lsls	r3, r2, #28
 8004ec0:	bf44      	itt	mi
 8004ec2:	232b      	movmi	r3, #43	; 0x2b
 8004ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ece:	d015      	beq.n	8004efc <_vfiprintf_r+0x13c>
 8004ed0:	9a07      	ldr	r2, [sp, #28]
 8004ed2:	4654      	mov	r4, sl
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f04f 0c0a 	mov.w	ip, #10
 8004eda:	4621      	mov	r1, r4
 8004edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee0:	3b30      	subs	r3, #48	; 0x30
 8004ee2:	2b09      	cmp	r3, #9
 8004ee4:	d94e      	bls.n	8004f84 <_vfiprintf_r+0x1c4>
 8004ee6:	b1b0      	cbz	r0, 8004f16 <_vfiprintf_r+0x156>
 8004ee8:	9207      	str	r2, [sp, #28]
 8004eea:	e014      	b.n	8004f16 <_vfiprintf_r+0x156>
 8004eec:	eba0 0308 	sub.w	r3, r0, r8
 8004ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	46a2      	mov	sl, r4
 8004efa:	e7d2      	b.n	8004ea2 <_vfiprintf_r+0xe2>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	1d19      	adds	r1, r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	9103      	str	r1, [sp, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bfbb      	ittet	lt
 8004f08:	425b      	neglt	r3, r3
 8004f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8004f0e:	9307      	strge	r3, [sp, #28]
 8004f10:	9307      	strlt	r3, [sp, #28]
 8004f12:	bfb8      	it	lt
 8004f14:	9204      	strlt	r2, [sp, #16]
 8004f16:	7823      	ldrb	r3, [r4, #0]
 8004f18:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1a:	d10c      	bne.n	8004f36 <_vfiprintf_r+0x176>
 8004f1c:	7863      	ldrb	r3, [r4, #1]
 8004f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f20:	d135      	bne.n	8004f8e <_vfiprintf_r+0x1ce>
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	1d1a      	adds	r2, r3, #4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	9203      	str	r2, [sp, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bfb8      	it	lt
 8004f2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f32:	3402      	adds	r4, #2
 8004f34:	9305      	str	r3, [sp, #20]
 8004f36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800501c <_vfiprintf_r+0x25c>
 8004f3a:	7821      	ldrb	r1, [r4, #0]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	4650      	mov	r0, sl
 8004f40:	f7fb f946 	bl	80001d0 <memchr>
 8004f44:	b140      	cbz	r0, 8004f58 <_vfiprintf_r+0x198>
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	eba0 000a 	sub.w	r0, r0, sl
 8004f4c:	fa03 f000 	lsl.w	r0, r3, r0
 8004f50:	9b04      	ldr	r3, [sp, #16]
 8004f52:	4303      	orrs	r3, r0
 8004f54:	3401      	adds	r4, #1
 8004f56:	9304      	str	r3, [sp, #16]
 8004f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5c:	482c      	ldr	r0, [pc, #176]	; (8005010 <_vfiprintf_r+0x250>)
 8004f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f62:	2206      	movs	r2, #6
 8004f64:	f7fb f934 	bl	80001d0 <memchr>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d03f      	beq.n	8004fec <_vfiprintf_r+0x22c>
 8004f6c:	4b29      	ldr	r3, [pc, #164]	; (8005014 <_vfiprintf_r+0x254>)
 8004f6e:	bb1b      	cbnz	r3, 8004fb8 <_vfiprintf_r+0x1f8>
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	3307      	adds	r3, #7
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	3308      	adds	r3, #8
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7e:	443b      	add	r3, r7
 8004f80:	9309      	str	r3, [sp, #36]	; 0x24
 8004f82:	e767      	b.n	8004e54 <_vfiprintf_r+0x94>
 8004f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f88:	460c      	mov	r4, r1
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	e7a5      	b.n	8004eda <_vfiprintf_r+0x11a>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	3401      	adds	r4, #1
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	4619      	mov	r1, r3
 8004f96:	f04f 0c0a 	mov.w	ip, #10
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa0:	3a30      	subs	r2, #48	; 0x30
 8004fa2:	2a09      	cmp	r2, #9
 8004fa4:	d903      	bls.n	8004fae <_vfiprintf_r+0x1ee>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0c5      	beq.n	8004f36 <_vfiprintf_r+0x176>
 8004faa:	9105      	str	r1, [sp, #20]
 8004fac:	e7c3      	b.n	8004f36 <_vfiprintf_r+0x176>
 8004fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e7f0      	b.n	8004f9a <_vfiprintf_r+0x1da>
 8004fb8:	ab03      	add	r3, sp, #12
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	462a      	mov	r2, r5
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <_vfiprintf_r+0x258>)
 8004fc0:	a904      	add	r1, sp, #16
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f3af 8000 	nop.w
 8004fc8:	4607      	mov	r7, r0
 8004fca:	1c78      	adds	r0, r7, #1
 8004fcc:	d1d6      	bne.n	8004f7c <_vfiprintf_r+0x1bc>
 8004fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fd0:	07d9      	lsls	r1, r3, #31
 8004fd2:	d405      	bmi.n	8004fe0 <_vfiprintf_r+0x220>
 8004fd4:	89ab      	ldrh	r3, [r5, #12]
 8004fd6:	059a      	lsls	r2, r3, #22
 8004fd8:	d402      	bmi.n	8004fe0 <_vfiprintf_r+0x220>
 8004fda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fdc:	f7ff fe6b 	bl	8004cb6 <__retarget_lock_release_recursive>
 8004fe0:	89ab      	ldrh	r3, [r5, #12]
 8004fe2:	065b      	lsls	r3, r3, #25
 8004fe4:	f53f af12 	bmi.w	8004e0c <_vfiprintf_r+0x4c>
 8004fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fea:	e711      	b.n	8004e10 <_vfiprintf_r+0x50>
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <_vfiprintf_r+0x258>)
 8004ff4:	a904      	add	r1, sp, #16
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f000 f880 	bl	80050fc <_printf_i>
 8004ffc:	e7e4      	b.n	8004fc8 <_vfiprintf_r+0x208>
 8004ffe:	bf00      	nop
 8005000:	080059d8 	.word	0x080059d8
 8005004:	080059f8 	.word	0x080059f8
 8005008:	080059b8 	.word	0x080059b8
 800500c:	08005a18 	.word	0x08005a18
 8005010:	08005a22 	.word	0x08005a22
 8005014:	00000000 	.word	0x00000000
 8005018:	08004d9b 	.word	0x08004d9b
 800501c:	08005a1e 	.word	0x08005a1e

08005020 <_printf_common>:
 8005020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	4616      	mov	r6, r2
 8005026:	4699      	mov	r9, r3
 8005028:	688a      	ldr	r2, [r1, #8]
 800502a:	690b      	ldr	r3, [r1, #16]
 800502c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005030:	4293      	cmp	r3, r2
 8005032:	bfb8      	it	lt
 8005034:	4613      	movlt	r3, r2
 8005036:	6033      	str	r3, [r6, #0]
 8005038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800503c:	4607      	mov	r7, r0
 800503e:	460c      	mov	r4, r1
 8005040:	b10a      	cbz	r2, 8005046 <_printf_common+0x26>
 8005042:	3301      	adds	r3, #1
 8005044:	6033      	str	r3, [r6, #0]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	0699      	lsls	r1, r3, #26
 800504a:	bf42      	ittt	mi
 800504c:	6833      	ldrmi	r3, [r6, #0]
 800504e:	3302      	addmi	r3, #2
 8005050:	6033      	strmi	r3, [r6, #0]
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	f015 0506 	ands.w	r5, r5, #6
 8005058:	d106      	bne.n	8005068 <_printf_common+0x48>
 800505a:	f104 0a19 	add.w	sl, r4, #25
 800505e:	68e3      	ldr	r3, [r4, #12]
 8005060:	6832      	ldr	r2, [r6, #0]
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	42ab      	cmp	r3, r5
 8005066:	dc26      	bgt.n	80050b6 <_printf_common+0x96>
 8005068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800506c:	1e13      	subs	r3, r2, #0
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	bf18      	it	ne
 8005072:	2301      	movne	r3, #1
 8005074:	0692      	lsls	r2, r2, #26
 8005076:	d42b      	bmi.n	80050d0 <_printf_common+0xb0>
 8005078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507c:	4649      	mov	r1, r9
 800507e:	4638      	mov	r0, r7
 8005080:	47c0      	blx	r8
 8005082:	3001      	adds	r0, #1
 8005084:	d01e      	beq.n	80050c4 <_printf_common+0xa4>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	68e5      	ldr	r5, [r4, #12]
 800508a:	6832      	ldr	r2, [r6, #0]
 800508c:	f003 0306 	and.w	r3, r3, #6
 8005090:	2b04      	cmp	r3, #4
 8005092:	bf08      	it	eq
 8005094:	1aad      	subeq	r5, r5, r2
 8005096:	68a3      	ldr	r3, [r4, #8]
 8005098:	6922      	ldr	r2, [r4, #16]
 800509a:	bf0c      	ite	eq
 800509c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a0:	2500      	movne	r5, #0
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bfc4      	itt	gt
 80050a6:	1a9b      	subgt	r3, r3, r2
 80050a8:	18ed      	addgt	r5, r5, r3
 80050aa:	2600      	movs	r6, #0
 80050ac:	341a      	adds	r4, #26
 80050ae:	42b5      	cmp	r5, r6
 80050b0:	d11a      	bne.n	80050e8 <_printf_common+0xc8>
 80050b2:	2000      	movs	r0, #0
 80050b4:	e008      	b.n	80050c8 <_printf_common+0xa8>
 80050b6:	2301      	movs	r3, #1
 80050b8:	4652      	mov	r2, sl
 80050ba:	4649      	mov	r1, r9
 80050bc:	4638      	mov	r0, r7
 80050be:	47c0      	blx	r8
 80050c0:	3001      	adds	r0, #1
 80050c2:	d103      	bne.n	80050cc <_printf_common+0xac>
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050cc:	3501      	adds	r5, #1
 80050ce:	e7c6      	b.n	800505e <_printf_common+0x3e>
 80050d0:	18e1      	adds	r1, r4, r3
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	2030      	movs	r0, #48	; 0x30
 80050d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050da:	4422      	add	r2, r4
 80050dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050e4:	3302      	adds	r3, #2
 80050e6:	e7c7      	b.n	8005078 <_printf_common+0x58>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4622      	mov	r2, r4
 80050ec:	4649      	mov	r1, r9
 80050ee:	4638      	mov	r0, r7
 80050f0:	47c0      	blx	r8
 80050f2:	3001      	adds	r0, #1
 80050f4:	d0e6      	beq.n	80050c4 <_printf_common+0xa4>
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7d9      	b.n	80050ae <_printf_common+0x8e>
	...

080050fc <_printf_i>:
 80050fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	460c      	mov	r4, r1
 8005102:	4691      	mov	r9, r2
 8005104:	7e27      	ldrb	r7, [r4, #24]
 8005106:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005108:	2f78      	cmp	r7, #120	; 0x78
 800510a:	4680      	mov	r8, r0
 800510c:	469a      	mov	sl, r3
 800510e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005112:	d807      	bhi.n	8005124 <_printf_i+0x28>
 8005114:	2f62      	cmp	r7, #98	; 0x62
 8005116:	d80a      	bhi.n	800512e <_printf_i+0x32>
 8005118:	2f00      	cmp	r7, #0
 800511a:	f000 80d8 	beq.w	80052ce <_printf_i+0x1d2>
 800511e:	2f58      	cmp	r7, #88	; 0x58
 8005120:	f000 80a3 	beq.w	800526a <_printf_i+0x16e>
 8005124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800512c:	e03a      	b.n	80051a4 <_printf_i+0xa8>
 800512e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005132:	2b15      	cmp	r3, #21
 8005134:	d8f6      	bhi.n	8005124 <_printf_i+0x28>
 8005136:	a001      	add	r0, pc, #4	; (adr r0, 800513c <_printf_i+0x40>)
 8005138:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800513c:	08005195 	.word	0x08005195
 8005140:	080051a9 	.word	0x080051a9
 8005144:	08005125 	.word	0x08005125
 8005148:	08005125 	.word	0x08005125
 800514c:	08005125 	.word	0x08005125
 8005150:	08005125 	.word	0x08005125
 8005154:	080051a9 	.word	0x080051a9
 8005158:	08005125 	.word	0x08005125
 800515c:	08005125 	.word	0x08005125
 8005160:	08005125 	.word	0x08005125
 8005164:	08005125 	.word	0x08005125
 8005168:	080052b5 	.word	0x080052b5
 800516c:	080051d9 	.word	0x080051d9
 8005170:	08005297 	.word	0x08005297
 8005174:	08005125 	.word	0x08005125
 8005178:	08005125 	.word	0x08005125
 800517c:	080052d7 	.word	0x080052d7
 8005180:	08005125 	.word	0x08005125
 8005184:	080051d9 	.word	0x080051d9
 8005188:	08005125 	.word	0x08005125
 800518c:	08005125 	.word	0x08005125
 8005190:	0800529f 	.word	0x0800529f
 8005194:	680b      	ldr	r3, [r1, #0]
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	600a      	str	r2, [r1, #0]
 800519c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0a3      	b.n	80052f0 <_printf_i+0x1f4>
 80051a8:	6825      	ldr	r5, [r4, #0]
 80051aa:	6808      	ldr	r0, [r1, #0]
 80051ac:	062e      	lsls	r6, r5, #24
 80051ae:	f100 0304 	add.w	r3, r0, #4
 80051b2:	d50a      	bpl.n	80051ca <_printf_i+0xce>
 80051b4:	6805      	ldr	r5, [r0, #0]
 80051b6:	600b      	str	r3, [r1, #0]
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	da03      	bge.n	80051c4 <_printf_i+0xc8>
 80051bc:	232d      	movs	r3, #45	; 0x2d
 80051be:	426d      	negs	r5, r5
 80051c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c4:	485e      	ldr	r0, [pc, #376]	; (8005340 <_printf_i+0x244>)
 80051c6:	230a      	movs	r3, #10
 80051c8:	e019      	b.n	80051fe <_printf_i+0x102>
 80051ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051ce:	6805      	ldr	r5, [r0, #0]
 80051d0:	600b      	str	r3, [r1, #0]
 80051d2:	bf18      	it	ne
 80051d4:	b22d      	sxthne	r5, r5
 80051d6:	e7ef      	b.n	80051b8 <_printf_i+0xbc>
 80051d8:	680b      	ldr	r3, [r1, #0]
 80051da:	6825      	ldr	r5, [r4, #0]
 80051dc:	1d18      	adds	r0, r3, #4
 80051de:	6008      	str	r0, [r1, #0]
 80051e0:	0628      	lsls	r0, r5, #24
 80051e2:	d501      	bpl.n	80051e8 <_printf_i+0xec>
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	e002      	b.n	80051ee <_printf_i+0xf2>
 80051e8:	0669      	lsls	r1, r5, #25
 80051ea:	d5fb      	bpl.n	80051e4 <_printf_i+0xe8>
 80051ec:	881d      	ldrh	r5, [r3, #0]
 80051ee:	4854      	ldr	r0, [pc, #336]	; (8005340 <_printf_i+0x244>)
 80051f0:	2f6f      	cmp	r7, #111	; 0x6f
 80051f2:	bf0c      	ite	eq
 80051f4:	2308      	moveq	r3, #8
 80051f6:	230a      	movne	r3, #10
 80051f8:	2100      	movs	r1, #0
 80051fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051fe:	6866      	ldr	r6, [r4, #4]
 8005200:	60a6      	str	r6, [r4, #8]
 8005202:	2e00      	cmp	r6, #0
 8005204:	bfa2      	ittt	ge
 8005206:	6821      	ldrge	r1, [r4, #0]
 8005208:	f021 0104 	bicge.w	r1, r1, #4
 800520c:	6021      	strge	r1, [r4, #0]
 800520e:	b90d      	cbnz	r5, 8005214 <_printf_i+0x118>
 8005210:	2e00      	cmp	r6, #0
 8005212:	d04d      	beq.n	80052b0 <_printf_i+0x1b4>
 8005214:	4616      	mov	r6, r2
 8005216:	fbb5 f1f3 	udiv	r1, r5, r3
 800521a:	fb03 5711 	mls	r7, r3, r1, r5
 800521e:	5dc7      	ldrb	r7, [r0, r7]
 8005220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005224:	462f      	mov	r7, r5
 8005226:	42bb      	cmp	r3, r7
 8005228:	460d      	mov	r5, r1
 800522a:	d9f4      	bls.n	8005216 <_printf_i+0x11a>
 800522c:	2b08      	cmp	r3, #8
 800522e:	d10b      	bne.n	8005248 <_printf_i+0x14c>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	07df      	lsls	r7, r3, #31
 8005234:	d508      	bpl.n	8005248 <_printf_i+0x14c>
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	6861      	ldr	r1, [r4, #4]
 800523a:	4299      	cmp	r1, r3
 800523c:	bfde      	ittt	le
 800523e:	2330      	movle	r3, #48	; 0x30
 8005240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005244:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005248:	1b92      	subs	r2, r2, r6
 800524a:	6122      	str	r2, [r4, #16]
 800524c:	f8cd a000 	str.w	sl, [sp]
 8005250:	464b      	mov	r3, r9
 8005252:	aa03      	add	r2, sp, #12
 8005254:	4621      	mov	r1, r4
 8005256:	4640      	mov	r0, r8
 8005258:	f7ff fee2 	bl	8005020 <_printf_common>
 800525c:	3001      	adds	r0, #1
 800525e:	d14c      	bne.n	80052fa <_printf_i+0x1fe>
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	b004      	add	sp, #16
 8005266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526a:	4835      	ldr	r0, [pc, #212]	; (8005340 <_printf_i+0x244>)
 800526c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	680e      	ldr	r6, [r1, #0]
 8005274:	061f      	lsls	r7, r3, #24
 8005276:	f856 5b04 	ldr.w	r5, [r6], #4
 800527a:	600e      	str	r6, [r1, #0]
 800527c:	d514      	bpl.n	80052a8 <_printf_i+0x1ac>
 800527e:	07d9      	lsls	r1, r3, #31
 8005280:	bf44      	itt	mi
 8005282:	f043 0320 	orrmi.w	r3, r3, #32
 8005286:	6023      	strmi	r3, [r4, #0]
 8005288:	b91d      	cbnz	r5, 8005292 <_printf_i+0x196>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	f023 0320 	bic.w	r3, r3, #32
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	2310      	movs	r3, #16
 8005294:	e7b0      	b.n	80051f8 <_printf_i+0xfc>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	f043 0320 	orr.w	r3, r3, #32
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	2378      	movs	r3, #120	; 0x78
 80052a0:	4828      	ldr	r0, [pc, #160]	; (8005344 <_printf_i+0x248>)
 80052a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052a6:	e7e3      	b.n	8005270 <_printf_i+0x174>
 80052a8:	065e      	lsls	r6, r3, #25
 80052aa:	bf48      	it	mi
 80052ac:	b2ad      	uxthmi	r5, r5
 80052ae:	e7e6      	b.n	800527e <_printf_i+0x182>
 80052b0:	4616      	mov	r6, r2
 80052b2:	e7bb      	b.n	800522c <_printf_i+0x130>
 80052b4:	680b      	ldr	r3, [r1, #0]
 80052b6:	6826      	ldr	r6, [r4, #0]
 80052b8:	6960      	ldr	r0, [r4, #20]
 80052ba:	1d1d      	adds	r5, r3, #4
 80052bc:	600d      	str	r5, [r1, #0]
 80052be:	0635      	lsls	r5, r6, #24
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	d501      	bpl.n	80052c8 <_printf_i+0x1cc>
 80052c4:	6018      	str	r0, [r3, #0]
 80052c6:	e002      	b.n	80052ce <_printf_i+0x1d2>
 80052c8:	0671      	lsls	r1, r6, #25
 80052ca:	d5fb      	bpl.n	80052c4 <_printf_i+0x1c8>
 80052cc:	8018      	strh	r0, [r3, #0]
 80052ce:	2300      	movs	r3, #0
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	4616      	mov	r6, r2
 80052d4:	e7ba      	b.n	800524c <_printf_i+0x150>
 80052d6:	680b      	ldr	r3, [r1, #0]
 80052d8:	1d1a      	adds	r2, r3, #4
 80052da:	600a      	str	r2, [r1, #0]
 80052dc:	681e      	ldr	r6, [r3, #0]
 80052de:	6862      	ldr	r2, [r4, #4]
 80052e0:	2100      	movs	r1, #0
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7fa ff74 	bl	80001d0 <memchr>
 80052e8:	b108      	cbz	r0, 80052ee <_printf_i+0x1f2>
 80052ea:	1b80      	subs	r0, r0, r6
 80052ec:	6060      	str	r0, [r4, #4]
 80052ee:	6863      	ldr	r3, [r4, #4]
 80052f0:	6123      	str	r3, [r4, #16]
 80052f2:	2300      	movs	r3, #0
 80052f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f8:	e7a8      	b.n	800524c <_printf_i+0x150>
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	4632      	mov	r2, r6
 80052fe:	4649      	mov	r1, r9
 8005300:	4640      	mov	r0, r8
 8005302:	47d0      	blx	sl
 8005304:	3001      	adds	r0, #1
 8005306:	d0ab      	beq.n	8005260 <_printf_i+0x164>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	079b      	lsls	r3, r3, #30
 800530c:	d413      	bmi.n	8005336 <_printf_i+0x23a>
 800530e:	68e0      	ldr	r0, [r4, #12]
 8005310:	9b03      	ldr	r3, [sp, #12]
 8005312:	4298      	cmp	r0, r3
 8005314:	bfb8      	it	lt
 8005316:	4618      	movlt	r0, r3
 8005318:	e7a4      	b.n	8005264 <_printf_i+0x168>
 800531a:	2301      	movs	r3, #1
 800531c:	4632      	mov	r2, r6
 800531e:	4649      	mov	r1, r9
 8005320:	4640      	mov	r0, r8
 8005322:	47d0      	blx	sl
 8005324:	3001      	adds	r0, #1
 8005326:	d09b      	beq.n	8005260 <_printf_i+0x164>
 8005328:	3501      	adds	r5, #1
 800532a:	68e3      	ldr	r3, [r4, #12]
 800532c:	9903      	ldr	r1, [sp, #12]
 800532e:	1a5b      	subs	r3, r3, r1
 8005330:	42ab      	cmp	r3, r5
 8005332:	dcf2      	bgt.n	800531a <_printf_i+0x21e>
 8005334:	e7eb      	b.n	800530e <_printf_i+0x212>
 8005336:	2500      	movs	r5, #0
 8005338:	f104 0619 	add.w	r6, r4, #25
 800533c:	e7f5      	b.n	800532a <_printf_i+0x22e>
 800533e:	bf00      	nop
 8005340:	08005a29 	.word	0x08005a29
 8005344:	08005a3a 	.word	0x08005a3a

08005348 <_sbrk_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d06      	ldr	r5, [pc, #24]	; (8005364 <_sbrk_r+0x1c>)
 800534c:	2300      	movs	r3, #0
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	f7fb fcee 	bl	8000d34 <_sbrk>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_sbrk_r+0x1a>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_sbrk_r+0x1a>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	2000242c 	.word	0x2000242c

08005368 <__sread>:
 8005368:	b510      	push	{r4, lr}
 800536a:	460c      	mov	r4, r1
 800536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005370:	f000 fab4 	bl	80058dc <_read_r>
 8005374:	2800      	cmp	r0, #0
 8005376:	bfab      	itete	ge
 8005378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800537a:	89a3      	ldrhlt	r3, [r4, #12]
 800537c:	181b      	addge	r3, r3, r0
 800537e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005382:	bfac      	ite	ge
 8005384:	6563      	strge	r3, [r4, #84]	; 0x54
 8005386:	81a3      	strhlt	r3, [r4, #12]
 8005388:	bd10      	pop	{r4, pc}

0800538a <__swrite>:
 800538a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800538e:	461f      	mov	r7, r3
 8005390:	898b      	ldrh	r3, [r1, #12]
 8005392:	05db      	lsls	r3, r3, #23
 8005394:	4605      	mov	r5, r0
 8005396:	460c      	mov	r4, r1
 8005398:	4616      	mov	r6, r2
 800539a:	d505      	bpl.n	80053a8 <__swrite+0x1e>
 800539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a0:	2302      	movs	r3, #2
 80053a2:	2200      	movs	r2, #0
 80053a4:	f000 f9c8 	bl	8005738 <_lseek_r>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	4632      	mov	r2, r6
 80053b6:	463b      	mov	r3, r7
 80053b8:	4628      	mov	r0, r5
 80053ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	f000 b869 	b.w	8005494 <_write_r>

080053c2 <__sseek>:
 80053c2:	b510      	push	{r4, lr}
 80053c4:	460c      	mov	r4, r1
 80053c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ca:	f000 f9b5 	bl	8005738 <_lseek_r>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	bf15      	itete	ne
 80053d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80053d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053de:	81a3      	strheq	r3, [r4, #12]
 80053e0:	bf18      	it	ne
 80053e2:	81a3      	strhne	r3, [r4, #12]
 80053e4:	bd10      	pop	{r4, pc}

080053e6 <__sclose>:
 80053e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ea:	f000 b8d3 	b.w	8005594 <_close_r>
	...

080053f0 <__swbuf_r>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	460e      	mov	r6, r1
 80053f4:	4614      	mov	r4, r2
 80053f6:	4605      	mov	r5, r0
 80053f8:	b118      	cbz	r0, 8005402 <__swbuf_r+0x12>
 80053fa:	6983      	ldr	r3, [r0, #24]
 80053fc:	b90b      	cbnz	r3, 8005402 <__swbuf_r+0x12>
 80053fe:	f7ff fbbb 	bl	8004b78 <__sinit>
 8005402:	4b21      	ldr	r3, [pc, #132]	; (8005488 <__swbuf_r+0x98>)
 8005404:	429c      	cmp	r4, r3
 8005406:	d12b      	bne.n	8005460 <__swbuf_r+0x70>
 8005408:	686c      	ldr	r4, [r5, #4]
 800540a:	69a3      	ldr	r3, [r4, #24]
 800540c:	60a3      	str	r3, [r4, #8]
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	071a      	lsls	r2, r3, #28
 8005412:	d52f      	bpl.n	8005474 <__swbuf_r+0x84>
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	b36b      	cbz	r3, 8005474 <__swbuf_r+0x84>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	6820      	ldr	r0, [r4, #0]
 800541c:	1ac0      	subs	r0, r0, r3
 800541e:	6963      	ldr	r3, [r4, #20]
 8005420:	b2f6      	uxtb	r6, r6
 8005422:	4283      	cmp	r3, r0
 8005424:	4637      	mov	r7, r6
 8005426:	dc04      	bgt.n	8005432 <__swbuf_r+0x42>
 8005428:	4621      	mov	r1, r4
 800542a:	4628      	mov	r0, r5
 800542c:	f000 f948 	bl	80056c0 <_fflush_r>
 8005430:	bb30      	cbnz	r0, 8005480 <__swbuf_r+0x90>
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	3b01      	subs	r3, #1
 8005436:	60a3      	str	r3, [r4, #8]
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	6022      	str	r2, [r4, #0]
 800543e:	701e      	strb	r6, [r3, #0]
 8005440:	6963      	ldr	r3, [r4, #20]
 8005442:	3001      	adds	r0, #1
 8005444:	4283      	cmp	r3, r0
 8005446:	d004      	beq.n	8005452 <__swbuf_r+0x62>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	07db      	lsls	r3, r3, #31
 800544c:	d506      	bpl.n	800545c <__swbuf_r+0x6c>
 800544e:	2e0a      	cmp	r6, #10
 8005450:	d104      	bne.n	800545c <__swbuf_r+0x6c>
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f933 	bl	80056c0 <_fflush_r>
 800545a:	b988      	cbnz	r0, 8005480 <__swbuf_r+0x90>
 800545c:	4638      	mov	r0, r7
 800545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <__swbuf_r+0x9c>)
 8005462:	429c      	cmp	r4, r3
 8005464:	d101      	bne.n	800546a <__swbuf_r+0x7a>
 8005466:	68ac      	ldr	r4, [r5, #8]
 8005468:	e7cf      	b.n	800540a <__swbuf_r+0x1a>
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <__swbuf_r+0xa0>)
 800546c:	429c      	cmp	r4, r3
 800546e:	bf08      	it	eq
 8005470:	68ec      	ldreq	r4, [r5, #12]
 8005472:	e7ca      	b.n	800540a <__swbuf_r+0x1a>
 8005474:	4621      	mov	r1, r4
 8005476:	4628      	mov	r0, r5
 8005478:	f000 f81e 	bl	80054b8 <__swsetup_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	d0cb      	beq.n	8005418 <__swbuf_r+0x28>
 8005480:	f04f 37ff 	mov.w	r7, #4294967295
 8005484:	e7ea      	b.n	800545c <__swbuf_r+0x6c>
 8005486:	bf00      	nop
 8005488:	080059d8 	.word	0x080059d8
 800548c:	080059f8 	.word	0x080059f8
 8005490:	080059b8 	.word	0x080059b8

08005494 <_write_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d07      	ldr	r5, [pc, #28]	; (80054b4 <_write_r+0x20>)
 8005498:	4604      	mov	r4, r0
 800549a:	4608      	mov	r0, r1
 800549c:	4611      	mov	r1, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	602a      	str	r2, [r5, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f7fb f9a5 	bl	80007f2 <_write>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_write_r+0x1e>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_write_r+0x1e>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	2000242c 	.word	0x2000242c

080054b8 <__swsetup_r>:
 80054b8:	4b32      	ldr	r3, [pc, #200]	; (8005584 <__swsetup_r+0xcc>)
 80054ba:	b570      	push	{r4, r5, r6, lr}
 80054bc:	681d      	ldr	r5, [r3, #0]
 80054be:	4606      	mov	r6, r0
 80054c0:	460c      	mov	r4, r1
 80054c2:	b125      	cbz	r5, 80054ce <__swsetup_r+0x16>
 80054c4:	69ab      	ldr	r3, [r5, #24]
 80054c6:	b913      	cbnz	r3, 80054ce <__swsetup_r+0x16>
 80054c8:	4628      	mov	r0, r5
 80054ca:	f7ff fb55 	bl	8004b78 <__sinit>
 80054ce:	4b2e      	ldr	r3, [pc, #184]	; (8005588 <__swsetup_r+0xd0>)
 80054d0:	429c      	cmp	r4, r3
 80054d2:	d10f      	bne.n	80054f4 <__swsetup_r+0x3c>
 80054d4:	686c      	ldr	r4, [r5, #4]
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054dc:	0719      	lsls	r1, r3, #28
 80054de:	d42c      	bmi.n	800553a <__swsetup_r+0x82>
 80054e0:	06dd      	lsls	r5, r3, #27
 80054e2:	d411      	bmi.n	8005508 <__swsetup_r+0x50>
 80054e4:	2309      	movs	r3, #9
 80054e6:	6033      	str	r3, [r6, #0]
 80054e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	f04f 30ff 	mov.w	r0, #4294967295
 80054f2:	e03e      	b.n	8005572 <__swsetup_r+0xba>
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <__swsetup_r+0xd4>)
 80054f6:	429c      	cmp	r4, r3
 80054f8:	d101      	bne.n	80054fe <__swsetup_r+0x46>
 80054fa:	68ac      	ldr	r4, [r5, #8]
 80054fc:	e7eb      	b.n	80054d6 <__swsetup_r+0x1e>
 80054fe:	4b24      	ldr	r3, [pc, #144]	; (8005590 <__swsetup_r+0xd8>)
 8005500:	429c      	cmp	r4, r3
 8005502:	bf08      	it	eq
 8005504:	68ec      	ldreq	r4, [r5, #12]
 8005506:	e7e6      	b.n	80054d6 <__swsetup_r+0x1e>
 8005508:	0758      	lsls	r0, r3, #29
 800550a:	d512      	bpl.n	8005532 <__swsetup_r+0x7a>
 800550c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800550e:	b141      	cbz	r1, 8005522 <__swsetup_r+0x6a>
 8005510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005514:	4299      	cmp	r1, r3
 8005516:	d002      	beq.n	800551e <__swsetup_r+0x66>
 8005518:	4630      	mov	r0, r6
 800551a:	f000 f98f 	bl	800583c <_free_r>
 800551e:	2300      	movs	r3, #0
 8005520:	6363      	str	r3, [r4, #52]	; 0x34
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	2300      	movs	r3, #0
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	89a3      	ldrh	r3, [r4, #12]
 8005534:	f043 0308 	orr.w	r3, r3, #8
 8005538:	81a3      	strh	r3, [r4, #12]
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	b94b      	cbnz	r3, 8005552 <__swsetup_r+0x9a>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005548:	d003      	beq.n	8005552 <__swsetup_r+0x9a>
 800554a:	4621      	mov	r1, r4
 800554c:	4630      	mov	r0, r6
 800554e:	f000 f929 	bl	80057a4 <__smakebuf_r>
 8005552:	89a0      	ldrh	r0, [r4, #12]
 8005554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005558:	f010 0301 	ands.w	r3, r0, #1
 800555c:	d00a      	beq.n	8005574 <__swsetup_r+0xbc>
 800555e:	2300      	movs	r3, #0
 8005560:	60a3      	str	r3, [r4, #8]
 8005562:	6963      	ldr	r3, [r4, #20]
 8005564:	425b      	negs	r3, r3
 8005566:	61a3      	str	r3, [r4, #24]
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	b943      	cbnz	r3, 800557e <__swsetup_r+0xc6>
 800556c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005570:	d1ba      	bne.n	80054e8 <__swsetup_r+0x30>
 8005572:	bd70      	pop	{r4, r5, r6, pc}
 8005574:	0781      	lsls	r1, r0, #30
 8005576:	bf58      	it	pl
 8005578:	6963      	ldrpl	r3, [r4, #20]
 800557a:	60a3      	str	r3, [r4, #8]
 800557c:	e7f4      	b.n	8005568 <__swsetup_r+0xb0>
 800557e:	2000      	movs	r0, #0
 8005580:	e7f7      	b.n	8005572 <__swsetup_r+0xba>
 8005582:	bf00      	nop
 8005584:	20000020 	.word	0x20000020
 8005588:	080059d8 	.word	0x080059d8
 800558c:	080059f8 	.word	0x080059f8
 8005590:	080059b8 	.word	0x080059b8

08005594 <_close_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d06      	ldr	r5, [pc, #24]	; (80055b0 <_close_r+0x1c>)
 8005598:	2300      	movs	r3, #0
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	f7fb fb93 	bl	8000cca <_close>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_close_r+0x1a>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_close_r+0x1a>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	2000242c 	.word	0x2000242c

080055b4 <__sflush_r>:
 80055b4:	898a      	ldrh	r2, [r1, #12]
 80055b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ba:	4605      	mov	r5, r0
 80055bc:	0710      	lsls	r0, r2, #28
 80055be:	460c      	mov	r4, r1
 80055c0:	d458      	bmi.n	8005674 <__sflush_r+0xc0>
 80055c2:	684b      	ldr	r3, [r1, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dc05      	bgt.n	80055d4 <__sflush_r+0x20>
 80055c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dc02      	bgt.n	80055d4 <__sflush_r+0x20>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d0f9      	beq.n	80055ce <__sflush_r+0x1a>
 80055da:	2300      	movs	r3, #0
 80055dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055e0:	682f      	ldr	r7, [r5, #0]
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	d032      	beq.n	800564c <__sflush_r+0x98>
 80055e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	075a      	lsls	r2, r3, #29
 80055ec:	d505      	bpl.n	80055fa <__sflush_r+0x46>
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	1ac0      	subs	r0, r0, r3
 80055f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055f4:	b10b      	cbz	r3, 80055fa <__sflush_r+0x46>
 80055f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f8:	1ac0      	subs	r0, r0, r3
 80055fa:	2300      	movs	r3, #0
 80055fc:	4602      	mov	r2, r0
 80055fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005600:	6a21      	ldr	r1, [r4, #32]
 8005602:	4628      	mov	r0, r5
 8005604:	47b0      	blx	r6
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	d106      	bne.n	800561a <__sflush_r+0x66>
 800560c:	6829      	ldr	r1, [r5, #0]
 800560e:	291d      	cmp	r1, #29
 8005610:	d82c      	bhi.n	800566c <__sflush_r+0xb8>
 8005612:	4a2a      	ldr	r2, [pc, #168]	; (80056bc <__sflush_r+0x108>)
 8005614:	40ca      	lsrs	r2, r1
 8005616:	07d6      	lsls	r6, r2, #31
 8005618:	d528      	bpl.n	800566c <__sflush_r+0xb8>
 800561a:	2200      	movs	r2, #0
 800561c:	6062      	str	r2, [r4, #4]
 800561e:	04d9      	lsls	r1, r3, #19
 8005620:	6922      	ldr	r2, [r4, #16]
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	d504      	bpl.n	8005630 <__sflush_r+0x7c>
 8005626:	1c42      	adds	r2, r0, #1
 8005628:	d101      	bne.n	800562e <__sflush_r+0x7a>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	b903      	cbnz	r3, 8005630 <__sflush_r+0x7c>
 800562e:	6560      	str	r0, [r4, #84]	; 0x54
 8005630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005632:	602f      	str	r7, [r5, #0]
 8005634:	2900      	cmp	r1, #0
 8005636:	d0ca      	beq.n	80055ce <__sflush_r+0x1a>
 8005638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800563c:	4299      	cmp	r1, r3
 800563e:	d002      	beq.n	8005646 <__sflush_r+0x92>
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f8fb 	bl	800583c <_free_r>
 8005646:	2000      	movs	r0, #0
 8005648:	6360      	str	r0, [r4, #52]	; 0x34
 800564a:	e7c1      	b.n	80055d0 <__sflush_r+0x1c>
 800564c:	6a21      	ldr	r1, [r4, #32]
 800564e:	2301      	movs	r3, #1
 8005650:	4628      	mov	r0, r5
 8005652:	47b0      	blx	r6
 8005654:	1c41      	adds	r1, r0, #1
 8005656:	d1c7      	bne.n	80055e8 <__sflush_r+0x34>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0c4      	beq.n	80055e8 <__sflush_r+0x34>
 800565e:	2b1d      	cmp	r3, #29
 8005660:	d001      	beq.n	8005666 <__sflush_r+0xb2>
 8005662:	2b16      	cmp	r3, #22
 8005664:	d101      	bne.n	800566a <__sflush_r+0xb6>
 8005666:	602f      	str	r7, [r5, #0]
 8005668:	e7b1      	b.n	80055ce <__sflush_r+0x1a>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	e7ad      	b.n	80055d0 <__sflush_r+0x1c>
 8005674:	690f      	ldr	r7, [r1, #16]
 8005676:	2f00      	cmp	r7, #0
 8005678:	d0a9      	beq.n	80055ce <__sflush_r+0x1a>
 800567a:	0793      	lsls	r3, r2, #30
 800567c:	680e      	ldr	r6, [r1, #0]
 800567e:	bf08      	it	eq
 8005680:	694b      	ldreq	r3, [r1, #20]
 8005682:	600f      	str	r7, [r1, #0]
 8005684:	bf18      	it	ne
 8005686:	2300      	movne	r3, #0
 8005688:	eba6 0807 	sub.w	r8, r6, r7
 800568c:	608b      	str	r3, [r1, #8]
 800568e:	f1b8 0f00 	cmp.w	r8, #0
 8005692:	dd9c      	ble.n	80055ce <__sflush_r+0x1a>
 8005694:	6a21      	ldr	r1, [r4, #32]
 8005696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005698:	4643      	mov	r3, r8
 800569a:	463a      	mov	r2, r7
 800569c:	4628      	mov	r0, r5
 800569e:	47b0      	blx	r6
 80056a0:	2800      	cmp	r0, #0
 80056a2:	dc06      	bgt.n	80056b2 <__sflush_r+0xfe>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	e78e      	b.n	80055d0 <__sflush_r+0x1c>
 80056b2:	4407      	add	r7, r0
 80056b4:	eba8 0800 	sub.w	r8, r8, r0
 80056b8:	e7e9      	b.n	800568e <__sflush_r+0xda>
 80056ba:	bf00      	nop
 80056bc:	20400001 	.word	0x20400001

080056c0 <_fflush_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	690b      	ldr	r3, [r1, #16]
 80056c4:	4605      	mov	r5, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	b913      	cbnz	r3, 80056d0 <_fflush_r+0x10>
 80056ca:	2500      	movs	r5, #0
 80056cc:	4628      	mov	r0, r5
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	b118      	cbz	r0, 80056da <_fflush_r+0x1a>
 80056d2:	6983      	ldr	r3, [r0, #24]
 80056d4:	b90b      	cbnz	r3, 80056da <_fflush_r+0x1a>
 80056d6:	f7ff fa4f 	bl	8004b78 <__sinit>
 80056da:	4b14      	ldr	r3, [pc, #80]	; (800572c <_fflush_r+0x6c>)
 80056dc:	429c      	cmp	r4, r3
 80056de:	d11b      	bne.n	8005718 <_fflush_r+0x58>
 80056e0:	686c      	ldr	r4, [r5, #4]
 80056e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0ef      	beq.n	80056ca <_fflush_r+0xa>
 80056ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056ec:	07d0      	lsls	r0, r2, #31
 80056ee:	d404      	bmi.n	80056fa <_fflush_r+0x3a>
 80056f0:	0599      	lsls	r1, r3, #22
 80056f2:	d402      	bmi.n	80056fa <_fflush_r+0x3a>
 80056f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056f6:	f7ff fadd 	bl	8004cb4 <__retarget_lock_acquire_recursive>
 80056fa:	4628      	mov	r0, r5
 80056fc:	4621      	mov	r1, r4
 80056fe:	f7ff ff59 	bl	80055b4 <__sflush_r>
 8005702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005704:	07da      	lsls	r2, r3, #31
 8005706:	4605      	mov	r5, r0
 8005708:	d4e0      	bmi.n	80056cc <_fflush_r+0xc>
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	059b      	lsls	r3, r3, #22
 800570e:	d4dd      	bmi.n	80056cc <_fflush_r+0xc>
 8005710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005712:	f7ff fad0 	bl	8004cb6 <__retarget_lock_release_recursive>
 8005716:	e7d9      	b.n	80056cc <_fflush_r+0xc>
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <_fflush_r+0x70>)
 800571a:	429c      	cmp	r4, r3
 800571c:	d101      	bne.n	8005722 <_fflush_r+0x62>
 800571e:	68ac      	ldr	r4, [r5, #8]
 8005720:	e7df      	b.n	80056e2 <_fflush_r+0x22>
 8005722:	4b04      	ldr	r3, [pc, #16]	; (8005734 <_fflush_r+0x74>)
 8005724:	429c      	cmp	r4, r3
 8005726:	bf08      	it	eq
 8005728:	68ec      	ldreq	r4, [r5, #12]
 800572a:	e7da      	b.n	80056e2 <_fflush_r+0x22>
 800572c:	080059d8 	.word	0x080059d8
 8005730:	080059f8 	.word	0x080059f8
 8005734:	080059b8 	.word	0x080059b8

08005738 <_lseek_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d07      	ldr	r5, [pc, #28]	; (8005758 <_lseek_r+0x20>)
 800573c:	4604      	mov	r4, r0
 800573e:	4608      	mov	r0, r1
 8005740:	4611      	mov	r1, r2
 8005742:	2200      	movs	r2, #0
 8005744:	602a      	str	r2, [r5, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	f7fb fae6 	bl	8000d18 <_lseek>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_lseek_r+0x1e>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_lseek_r+0x1e>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	2000242c 	.word	0x2000242c

0800575c <__swhatbuf_r>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	460e      	mov	r6, r1
 8005760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005764:	2900      	cmp	r1, #0
 8005766:	b096      	sub	sp, #88	; 0x58
 8005768:	4614      	mov	r4, r2
 800576a:	461d      	mov	r5, r3
 800576c:	da07      	bge.n	800577e <__swhatbuf_r+0x22>
 800576e:	2300      	movs	r3, #0
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	89b3      	ldrh	r3, [r6, #12]
 8005774:	061a      	lsls	r2, r3, #24
 8005776:	d410      	bmi.n	800579a <__swhatbuf_r+0x3e>
 8005778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800577c:	e00e      	b.n	800579c <__swhatbuf_r+0x40>
 800577e:	466a      	mov	r2, sp
 8005780:	f000 f8be 	bl	8005900 <_fstat_r>
 8005784:	2800      	cmp	r0, #0
 8005786:	dbf2      	blt.n	800576e <__swhatbuf_r+0x12>
 8005788:	9a01      	ldr	r2, [sp, #4]
 800578a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800578e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005792:	425a      	negs	r2, r3
 8005794:	415a      	adcs	r2, r3
 8005796:	602a      	str	r2, [r5, #0]
 8005798:	e7ee      	b.n	8005778 <__swhatbuf_r+0x1c>
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	2000      	movs	r0, #0
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	b016      	add	sp, #88	; 0x58
 80057a2:	bd70      	pop	{r4, r5, r6, pc}

080057a4 <__smakebuf_r>:
 80057a4:	898b      	ldrh	r3, [r1, #12]
 80057a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057a8:	079d      	lsls	r5, r3, #30
 80057aa:	4606      	mov	r6, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	d507      	bpl.n	80057c0 <__smakebuf_r+0x1c>
 80057b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	6123      	str	r3, [r4, #16]
 80057b8:	2301      	movs	r3, #1
 80057ba:	6163      	str	r3, [r4, #20]
 80057bc:	b002      	add	sp, #8
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	ab01      	add	r3, sp, #4
 80057c2:	466a      	mov	r2, sp
 80057c4:	f7ff ffca 	bl	800575c <__swhatbuf_r>
 80057c8:	9900      	ldr	r1, [sp, #0]
 80057ca:	4605      	mov	r5, r0
 80057cc:	4630      	mov	r0, r6
 80057ce:	f7ff fa73 	bl	8004cb8 <_malloc_r>
 80057d2:	b948      	cbnz	r0, 80057e8 <__smakebuf_r+0x44>
 80057d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d8:	059a      	lsls	r2, r3, #22
 80057da:	d4ef      	bmi.n	80057bc <__smakebuf_r+0x18>
 80057dc:	f023 0303 	bic.w	r3, r3, #3
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	e7e3      	b.n	80057b0 <__smakebuf_r+0xc>
 80057e8:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <__smakebuf_r+0x7c>)
 80057ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	6020      	str	r0, [r4, #0]
 80057f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	9b00      	ldr	r3, [sp, #0]
 80057f8:	6163      	str	r3, [r4, #20]
 80057fa:	9b01      	ldr	r3, [sp, #4]
 80057fc:	6120      	str	r0, [r4, #16]
 80057fe:	b15b      	cbz	r3, 8005818 <__smakebuf_r+0x74>
 8005800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005804:	4630      	mov	r0, r6
 8005806:	f000 f88d 	bl	8005924 <_isatty_r>
 800580a:	b128      	cbz	r0, 8005818 <__smakebuf_r+0x74>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	f023 0303 	bic.w	r3, r3, #3
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	89a0      	ldrh	r0, [r4, #12]
 800581a:	4305      	orrs	r5, r0
 800581c:	81a5      	strh	r5, [r4, #12]
 800581e:	e7cd      	b.n	80057bc <__smakebuf_r+0x18>
 8005820:	08004b11 	.word	0x08004b11

08005824 <__malloc_lock>:
 8005824:	4801      	ldr	r0, [pc, #4]	; (800582c <__malloc_lock+0x8>)
 8005826:	f7ff ba45 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 800582a:	bf00      	nop
 800582c:	20002424 	.word	0x20002424

08005830 <__malloc_unlock>:
 8005830:	4801      	ldr	r0, [pc, #4]	; (8005838 <__malloc_unlock+0x8>)
 8005832:	f7ff ba40 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8005836:	bf00      	nop
 8005838:	20002424 	.word	0x20002424

0800583c <_free_r>:
 800583c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800583e:	2900      	cmp	r1, #0
 8005840:	d048      	beq.n	80058d4 <_free_r+0x98>
 8005842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005846:	9001      	str	r0, [sp, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f1a1 0404 	sub.w	r4, r1, #4
 800584e:	bfb8      	it	lt
 8005850:	18e4      	addlt	r4, r4, r3
 8005852:	f7ff ffe7 	bl	8005824 <__malloc_lock>
 8005856:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <_free_r+0x9c>)
 8005858:	9801      	ldr	r0, [sp, #4]
 800585a:	6813      	ldr	r3, [r2, #0]
 800585c:	4615      	mov	r5, r2
 800585e:	b933      	cbnz	r3, 800586e <_free_r+0x32>
 8005860:	6063      	str	r3, [r4, #4]
 8005862:	6014      	str	r4, [r2, #0]
 8005864:	b003      	add	sp, #12
 8005866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800586a:	f7ff bfe1 	b.w	8005830 <__malloc_unlock>
 800586e:	42a3      	cmp	r3, r4
 8005870:	d90b      	bls.n	800588a <_free_r+0x4e>
 8005872:	6821      	ldr	r1, [r4, #0]
 8005874:	1862      	adds	r2, r4, r1
 8005876:	4293      	cmp	r3, r2
 8005878:	bf04      	itt	eq
 800587a:	681a      	ldreq	r2, [r3, #0]
 800587c:	685b      	ldreq	r3, [r3, #4]
 800587e:	6063      	str	r3, [r4, #4]
 8005880:	bf04      	itt	eq
 8005882:	1852      	addeq	r2, r2, r1
 8005884:	6022      	streq	r2, [r4, #0]
 8005886:	602c      	str	r4, [r5, #0]
 8005888:	e7ec      	b.n	8005864 <_free_r+0x28>
 800588a:	461a      	mov	r2, r3
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	b10b      	cbz	r3, 8005894 <_free_r+0x58>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d9fa      	bls.n	800588a <_free_r+0x4e>
 8005894:	6811      	ldr	r1, [r2, #0]
 8005896:	1855      	adds	r5, r2, r1
 8005898:	42a5      	cmp	r5, r4
 800589a:	d10b      	bne.n	80058b4 <_free_r+0x78>
 800589c:	6824      	ldr	r4, [r4, #0]
 800589e:	4421      	add	r1, r4
 80058a0:	1854      	adds	r4, r2, r1
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	6011      	str	r1, [r2, #0]
 80058a6:	d1dd      	bne.n	8005864 <_free_r+0x28>
 80058a8:	681c      	ldr	r4, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	6053      	str	r3, [r2, #4]
 80058ae:	4421      	add	r1, r4
 80058b0:	6011      	str	r1, [r2, #0]
 80058b2:	e7d7      	b.n	8005864 <_free_r+0x28>
 80058b4:	d902      	bls.n	80058bc <_free_r+0x80>
 80058b6:	230c      	movs	r3, #12
 80058b8:	6003      	str	r3, [r0, #0]
 80058ba:	e7d3      	b.n	8005864 <_free_r+0x28>
 80058bc:	6825      	ldr	r5, [r4, #0]
 80058be:	1961      	adds	r1, r4, r5
 80058c0:	428b      	cmp	r3, r1
 80058c2:	bf04      	itt	eq
 80058c4:	6819      	ldreq	r1, [r3, #0]
 80058c6:	685b      	ldreq	r3, [r3, #4]
 80058c8:	6063      	str	r3, [r4, #4]
 80058ca:	bf04      	itt	eq
 80058cc:	1949      	addeq	r1, r1, r5
 80058ce:	6021      	streq	r1, [r4, #0]
 80058d0:	6054      	str	r4, [r2, #4]
 80058d2:	e7c7      	b.n	8005864 <_free_r+0x28>
 80058d4:	b003      	add	sp, #12
 80058d6:	bd30      	pop	{r4, r5, pc}
 80058d8:	200000b8 	.word	0x200000b8

080058dc <_read_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d07      	ldr	r5, [pc, #28]	; (80058fc <_read_r+0x20>)
 80058e0:	4604      	mov	r4, r0
 80058e2:	4608      	mov	r0, r1
 80058e4:	4611      	mov	r1, r2
 80058e6:	2200      	movs	r2, #0
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fb f9d0 	bl	8000c90 <_read>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_read_r+0x1e>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_read_r+0x1e>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	2000242c 	.word	0x2000242c

08005900 <_fstat_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d07      	ldr	r5, [pc, #28]	; (8005920 <_fstat_r+0x20>)
 8005904:	2300      	movs	r3, #0
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	f7fb f9e8 	bl	8000ce2 <_fstat>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d102      	bne.n	800591c <_fstat_r+0x1c>
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	b103      	cbz	r3, 800591c <_fstat_r+0x1c>
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	2000242c 	.word	0x2000242c

08005924 <_isatty_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d06      	ldr	r5, [pc, #24]	; (8005940 <_isatty_r+0x1c>)
 8005928:	2300      	movs	r3, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	f7fb f9e7 	bl	8000d02 <_isatty>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_isatty_r+0x1a>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_isatty_r+0x1a>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	2000242c 	.word	0x2000242c

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
