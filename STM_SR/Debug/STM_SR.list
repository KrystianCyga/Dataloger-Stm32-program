
STM_SR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005858  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad8  08005ad8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae0  08005ae0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023b8  20000084  08005b6c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000243c  08005b6c  0002243c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f10c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ded  00000000  00000000  0003f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00042fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00044688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4d6  00000000  00000000  00045b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce0d  00000000  00000000  0007104e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff74d  00000000  00000000  0008de5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d5a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006634  00000000  00000000  0018d5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059d0 	.word	0x080059d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080059d0 	.word	0x080059d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b44      	ldr	r3, [pc, #272]	; (8000690 <MX_GPIO_Init+0x128>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a43      	ldr	r2, [pc, #268]	; (8000690 <MX_GPIO_Init+0x128>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <MX_GPIO_Init+0x128>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4b3e      	ldr	r3, [pc, #248]	; (8000690 <MX_GPIO_Init+0x128>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a3d      	ldr	r2, [pc, #244]	; (8000690 <MX_GPIO_Init+0x128>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <MX_GPIO_Init+0x128>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b38      	ldr	r3, [pc, #224]	; (8000690 <MX_GPIO_Init+0x128>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a37      	ldr	r2, [pc, #220]	; (8000690 <MX_GPIO_Init+0x128>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <MX_GPIO_Init+0x128>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <MX_GPIO_Init+0x128>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a31      	ldr	r2, [pc, #196]	; (8000690 <MX_GPIO_Init+0x128>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <MX_GPIO_Init+0x128>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_DIODE_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2111      	movs	r1, #17
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f001 f9fb 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4826      	ldr	r0, [pc, #152]	; (8000698 <MX_GPIO_Init+0x130>)
 8000600:	f001 f844 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_DIODE_Pin;
 8000604:	2301      	movs	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_DIODE_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f001 f835 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f001 f826 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_SENSOR_Pin;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_GPIO_Init+0x12c>)
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f001 f818 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HS711_out_Pin|HS711_SCK_Pin;
 800065c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_GPIO_Init+0x130>)
 8000672:	f001 f80b 	bl	800168c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2017      	movs	r0, #23
 800067c:	f000 ff8f 	bl	800159e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000680:	2017      	movs	r0, #23
 8000682:	f000 ffa8 	bl	80015d6 <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	10210000 	.word	0x10210000
 8000698:	48000800 	.word	0x48000800

0800069c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_I2C1_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_I2C1_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_I2C1_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_I2C1_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_I2C1_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_I2C1_Init+0x74>)
 80006d8:	f001 f9b2 	bl	8001a40 <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f000 f9fb 	bl	8000adc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ea:	f001 fa38 	bl	8001b5e <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f9f2 	bl	8000adc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2C1_Init+0x74>)
 80006fc:	f001 fa7a 	bl	8001bf4 <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 f9e9 	bl	8000adc <Error_Handler>
  }

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000cc 	.word	0x200000cc
 8000714:	40005400 	.word	0x40005400
 8000718:	10909cec 	.word	0x10909cec

0800071c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_I2C_MspInit+0x7c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d127      	bne.n	800078e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_I2C_MspInit+0x80>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <HAL_I2C_MspInit+0x80>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_I2C_MspInit+0x80>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000756:	23c0      	movs	r3, #192	; 0xc0
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075a:	2312      	movs	r3, #18
 800075c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075e:	2301      	movs	r3, #1
 8000760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000766:	2304      	movs	r3, #4
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <HAL_I2C_MspInit+0x84>)
 8000772:	f000 ff8b 	bl	800168c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_I2C_MspInit+0x80>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_I2C_MspInit+0x80>)
 800077c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000780:	6593      	str	r3, [r2, #88]	; 0x58
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_I2C_MspInit+0x80>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40005400 	.word	0x40005400
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400

080007a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d013      	beq.n	80007e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00b      	beq.n	80007e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007cc:	e000      	b.n	80007d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f9      	beq.n	80007ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// for debugging purposes
int _write(int file, char *ptr, int len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e009      	b.n	8000818 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffc9 	bl	80007a4 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf1      	blt.n	8000804 <_write+0x12>
	}
	return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800082c:	b480      	push	{r7}
 800082e:	b087      	sub	sp, #28
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == RPM_SENSOR_Pin)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800083c:	d126      	bne.n	800088c <HAL_GPIO_EXTI_Callback+0x60>
  {
	  uint32_t now = TIM16->CNT; // Get current timer count + compensation
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	617b      	str	r3, [r7, #20]
	  uint32_t tmp_compensation = compensation;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_GPIO_EXTI_Callback+0x70>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	613b      	str	r3, [r7, #16]
	  compensation = 0; // zero compensation value
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_GPIO_EXTI_Callback+0x70>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
	  uint32_t delta = now + tmp_compensation - lastCapture; // Calculate time difference
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	441a      	add	r2, r3
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	60fb      	str	r3, [r7, #12]
	  lastCapture = now;
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	6013      	str	r3, [r2, #0]
	  capturedBuffer[bufferIndex] = delta; // Store time difference in buffer
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4619      	mov	r1, r3
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  bufferIndex = (bufferIndex + 1) % 2; // Wrap buffer index
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	3301      	adds	r3, #1
 800087c:	2b00      	cmp	r3, #0
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	bfb8      	it	lt
 8000884:	425b      	neglt	r3, r3
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x78>)
 800088a:	701a      	strb	r2, [r3, #0]
  }
}
 800088c:	bf00      	nop
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40014400 	.word	0x40014400
 800089c:	200000b0 	.word	0x200000b0
 80008a0:	200000a0 	.word	0x200000a0
 80008a4:	200000ac 	.word	0x200000ac
 80008a8:	200000a4 	.word	0x200000a4

080008ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d106      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		//if(lastCapture == 0) return;
		compensation += 0xFFFF; // compensate for timer overflow
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80008c4:	33ff      	adds	r3, #255	; 0xff
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008c8:	6013      	str	r3, [r2, #0]
	}
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200001ec 	.word	0x200001ec
 80008dc:	200000b0 	.word	0x200000b0

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 fd03 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f82d 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f7ff fe3b 	bl	8000568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f2:	f000 fbbd 	bl	8001070 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008f6:	f7ff fed1 	bl	800069c <MX_I2C1_Init>
  MX_SPI1_Init();
 80008fa:	f000 f93b 	bl	8000b74 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008fe:	f000 fb87 	bl	8001010 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000902:	f000 fbe5 	bl	80010d0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000906:	f004 f815 	bl	8004934 <MX_FATFS_Init>
  MX_RTC_Init();
 800090a:	f000 f8ef 	bl	8000aec <MX_RTC_Init>
  MX_TIM6_Init();
 800090e:	f000 fae7 	bl	8000ee0 <MX_TIM6_Init>
  MX_TIM16_Init();
 8000912:	f000 fb1b 	bl	8000f4c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <main+0x60>)
 8000918:	f002 fed0 	bl	80036bc <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2101      	movs	r1, #1
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f001 f85c 	bl	80019e0 <HAL_GPIO_WritePin>
  {
	  /*if(HAL_GPIO_ReadPin(RPM_SENSOR_GPIO_Port, RPM_SENSOR_Pin) == GPIO_PIN_RESET)
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_SET);
	  else
		  HAL_GPIO_WritePin(RED_DIODE_GPIO_Port, RED_DIODE_Pin, GPIO_PIN_RESET);*/
	  uint32_t rpm = measure_RPM();
 8000928:	f000 f892 	bl	8000a50 <measure_RPM>
 800092c:	6078      	str	r0, [r7, #4]
	  if(rpm > 0) printf("RPM value: %lu\n", rpm);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0f9      	beq.n	8000928 <main+0x48>
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <main+0x64>)
 8000938:	f004 f8f4 	bl	8004b24 <iprintf>
  {
 800093c:	e7f4      	b.n	8000928 <main+0x48>
 800093e:	bf00      	nop
 8000940:	200001ec 	.word	0x200001ec
 8000944:	080059e8 	.word	0x080059e8

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0b8      	sub	sp, #224	; 0xe0
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000952:	2244      	movs	r2, #68	; 0x44
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f004 f8dc 	bl	8004b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2288      	movs	r2, #136	; 0x88
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f004 f8ce 	bl	8004b14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000978:	230a      	movs	r3, #10
 800097a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000986:	2310      	movs	r3, #16
 8000988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009a4:	230a      	movs	r3, #10
 80009a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009aa:	2307      	movs	r3, #7
 80009ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f9c7 	bl	8001d54 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009cc:	f000 f886 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2303      	movs	r3, #3
 80009d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009f2:	2104      	movs	r1, #4
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fd93 	bl	8002520 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a00:	f000 f86c 	bl	8000adc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <SystemClock_Config+0x104>)
 8000a06:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 ff82 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a2e:	f000 f855 	bl	8000adc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a36:	f001 f937 	bl	8001ca8 <HAL_PWREx_ControlVoltageScaling>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000a40:	f000 f84c 	bl	8000adc <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	37e0      	adds	r7, #224	; 0xe0
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	00020047 	.word	0x00020047

08000a50 <measure_RPM>:

/* USER CODE BEGIN 4 */
uint32_t measure_RPM(){
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
	uint32_t delta1 = capturedBuffer[0];
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <measure_RPM+0x80>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	617b      	str	r3, [r7, #20]
	uint32_t delta2 = capturedBuffer[1];
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <measure_RPM+0x80>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	613b      	str	r3, [r7, #16]
	if (delta1 > 0 && delta2 > 0) {
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d02c      	beq.n	8000ac2 <measure_RPM+0x72>
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d029      	beq.n	8000ac2 <measure_RPM+0x72>
		uint32_t delta = delta1 + delta2;
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
		float frequency = 1.0f / (delta / 2.0f / 10000.0f ); // Calculate frequency in Hz
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a88:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000ad4 <measure_RPM+0x84>
 8000a8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a98:	edc7 7a02 	vstr	s15, [r7, #8]
		uint32_t rpm = frequency * 60.0f; // Calculate RPM
 8000a9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aa0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000ad8 <measure_RPM+0x88>
 8000aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aac:	ee17 3a90 	vmov	r3, s15
 8000ab0:	607b      	str	r3, [r7, #4]
		capturedBuffer[0] = 0;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <measure_RPM+0x80>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
		capturedBuffer[1] = 0;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <measure_RPM+0x80>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
		return rpm;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	e000      	b.n	8000ac4 <measure_RPM+0x74>
	}
	else return 0;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	200000a4 	.word	0x200000a4
 8000ad4:	461c4000 	.word	0x461c4000
 8000ad8:	42700000 	.word	0x42700000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_RTC_Init+0x48>)
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <MX_RTC_Init+0x4c>)
 8000af4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_RTC_Init+0x48>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_RTC_Init+0x48>)
 8000afe:	227f      	movs	r2, #127	; 0x7f
 8000b00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_RTC_Init+0x48>)
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_RTC_Init+0x48>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_RTC_Init+0x48>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_RTC_Init+0x48>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_RTC_Init+0x48>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_RTC_Init+0x48>)
 8000b22:	f002 fbbf 	bl	80032a4 <HAL_RTC_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b2c:	f7ff ffd6 	bl	8000adc <Error_Handler>
  }

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000118 	.word	0x20000118
 8000b38:	40002800 	.word	0x40002800

08000b3c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_RTC_MspInit+0x30>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d107      	bne.n	8000b5e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_RTC_MspInit+0x34>)
 8000b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_RTC_MspInit+0x34>)
 8000b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40002800 	.word	0x40002800
 8000b70:	40021000 	.word	0x40021000

08000b74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_SPI1_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000b8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000bce:	2208      	movs	r2, #8
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_SPI1_Init+0x74>)
 8000bd4:	f002 fc78 	bl	80034c8 <HAL_SPI_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f7ff ff7d 	bl	8000adc <Error_Handler>
  }

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000013c 	.word	0x2000013c
 8000bec:	40013000 	.word	0x40013000

08000bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_SPI_MspInit+0x7c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d128      	bne.n	8000c64 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_SPI_MspInit+0x80>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <HAL_SPI_MspInit+0x80>)
 8000c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_SPI_MspInit+0x80>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_SPI_MspInit+0x80>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_SPI_MspInit+0x80>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_SPI_MspInit+0x80>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c42:	23e0      	movs	r3, #224	; 0xe0
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c52:	2305      	movs	r3, #5
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f000 fd14 	bl	800168c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6613      	str	r3, [r2, #96]	; 0x60
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_MspInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 fb4a 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d20:	f000 fe76 	bl	8001a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d2e:	f002 fd35 	bl	800379c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001ec 	.word	0x200001ec

08000d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <USART1_IRQHandler+0x10>)
 8000d42:	f003 f857 	bl	8003df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200002b8 	.word	0x200002b8

08000d50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART2_IRQHandler+0x10>)
 8000d56:	f003 f84d 	bl	8003df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000338 	.word	0x20000338

08000d64 <_read>:
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	e00a      	b.n	8000d8c <_read+0x28>
 8000d76:	f3af 8000 	nop.w
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf0      	blt.n	8000d76 <_read+0x12>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_close>:
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_fstat>:
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_isatty>:
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	2301      	movs	r3, #1
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_lseek>:
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <_sbrk>:
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
 8000e38:	f003 fe42 	bl	8004ac0 <__errno>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	220c      	movs	r2, #12
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20018000 	.word	0x20018000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	200000b4 	.word	0x200000b4
 8000e70:	20002440 	.word	0x20002440

08000e74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <SystemInit+0x64>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <SystemInit+0x64>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <SystemInit+0x68>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a13      	ldr	r2, [pc, #76]	; (8000edc <SystemInit+0x68>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <SystemInit+0x68>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <SystemInit+0x68>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <SystemInit+0x68>)
 8000ea0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ea4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ea8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <SystemInit+0x68>)
 8000eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <SystemInit+0x68>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <SystemInit+0x68>)
 8000eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <SystemInit+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SystemInit+0x64>)
 8000ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eca:	609a      	str	r2, [r3, #8]
#endif
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	40021000 	.word	0x40021000

08000ee0 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_TIM6_Init+0x64>)
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <MX_TIM6_Init+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_TIM6_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_TIM6_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_TIM6_Init+0x64>)
 8000f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_TIM6_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_TIM6_Init+0x64>)
 8000f12:	f002 fb7c 	bl	800360e <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f1c:	f7ff fdde 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_TIM6_Init+0x64>)
 8000f2e:	f002 fe17 	bl	8003b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f38:	f7ff fdd0 	bl	8000adc <Error_Handler>
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001a0 	.word	0x200001a0
 8000f48:	40001000 	.word	0x40001000

08000f4c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_TIM16_Init+0x48>)
 8000f52:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <MX_TIM16_Init+0x4c>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_TIM16_Init+0x48>)
 8000f58:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f5c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_TIM16_Init+0x48>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_TIM16_Init+0x48>)
 8000f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_TIM16_Init+0x48>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_TIM16_Init+0x48>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_TIM16_Init+0x48>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM16_Init+0x48>)
 8000f80:	f002 fb45 	bl	800360e <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000f8a:	f7ff fda7 	bl	8000adc <Error_Handler>
  }

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001ec 	.word	0x200001ec
 8000f98:	40014400 	.word	0x40014400

08000f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_TIM_Base_MspInit+0x68>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10c      	bne.n	8000fc8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000fc6:	e018      	b.n	8000ffa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_TIM_Base_MspInit+0x70>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d113      	bne.n	8000ffa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2019      	movs	r0, #25
 8000ff0:	f000 fad5 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ff4:	2019      	movs	r0, #25
 8000ff6:	f000 faee 	bl	80015d6 <HAL_NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40001000 	.word	0x40001000
 8001008:	40021000 	.word	0x40021000
 800100c:	40014400 	.word	0x40014400

08001010 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <MX_USART1_UART_Init+0x5c>)
 8001018:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_USART1_UART_Init+0x58>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_USART1_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART1_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART1_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001054:	f002 fe78 	bl	8003d48 <HAL_HalfDuplex_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800105e:	f7ff fd3d 	bl	8000adc <Error_Handler>
  }

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200002b8 	.word	0x200002b8
 800106c:	40013800 	.word	0x40013800

08001070 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <MX_USART2_UART_Init+0x5c>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010b4:	f002 fdfa 	bl	8003cac <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010be:	f7ff fd0d 	bl	8000adc <Error_Handler>
  }

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000338 	.word	0x20000338
 80010cc:	40004400 	.word	0x40004400

080010d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_USART3_UART_Init+0x5c>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART3_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001114:	f002 fdca 	bl	8003cac <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800111e:	f7ff fcdd 	bl	8000adc <Error_Handler>
  }

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000238 	.word	0x20000238
 800112c:	40004800 	.word	0x40004800

08001130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_UART_MspInit+0x158>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d132      	bne.n	80011b8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001152:	4b4e      	ldr	r3, [pc, #312]	; (800128c <HAL_UART_MspInit+0x15c>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	4a4d      	ldr	r2, [pc, #308]	; (800128c <HAL_UART_MspInit+0x15c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6613      	str	r3, [r2, #96]	; 0x60
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <HAL_UART_MspInit+0x15c>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	623b      	str	r3, [r7, #32]
 8001168:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b48      	ldr	r3, [pc, #288]	; (800128c <HAL_UART_MspInit+0x15c>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a47      	ldr	r2, [pc, #284]	; (800128c <HAL_UART_MspInit+0x15c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b45      	ldr	r3, [pc, #276]	; (800128c <HAL_UART_MspInit+0x15c>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DS18B20_ONE_WIRE_Pin;
 8001182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001188:	2312      	movs	r3, #18
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001194:	2307      	movs	r3, #7
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DS18B20_ONE_WIRE_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f000 fa73 	bl	800168c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2025      	movs	r0, #37	; 0x25
 80011ac:	f000 f9f7 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b0:	2025      	movs	r0, #37	; 0x25
 80011b2:	f000 fa10 	bl	80015d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011b6:	e063      	b.n	8001280 <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a34      	ldr	r2, [pc, #208]	; (8001290 <HAL_UART_MspInit+0x160>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d131      	bne.n	8001226 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c2:	4b32      	ldr	r3, [pc, #200]	; (800128c <HAL_UART_MspInit+0x15c>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a31      	ldr	r2, [pc, #196]	; (800128c <HAL_UART_MspInit+0x15c>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <HAL_UART_MspInit+0x15c>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b2c      	ldr	r3, [pc, #176]	; (800128c <HAL_UART_MspInit+0x15c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a2b      	ldr	r2, [pc, #172]	; (800128c <HAL_UART_MspInit+0x15c>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <HAL_UART_MspInit+0x15c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 80011f2:	230c      	movs	r3, #12
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001202:	2307      	movs	r3, #7
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f000 fa3c 	bl	800168c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2026      	movs	r0, #38	; 0x26
 800121a:	f000 f9c0 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800121e:	2026      	movs	r0, #38	; 0x26
 8001220:	f000 f9d9 	bl	80015d6 <HAL_NVIC_EnableIRQ>
}
 8001224:	e02c      	b.n	8001280 <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART3)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_UART_MspInit+0x164>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d127      	bne.n	8001280 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_UART_MspInit+0x15c>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <HAL_UART_MspInit+0x15c>)
 8001236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123a:	6593      	str	r3, [r2, #88]	; 0x58
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_UART_MspInit+0x15c>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_UART_MspInit+0x15c>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_UART_MspInit+0x15c>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_UART_MspInit+0x15c>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HC_05_TX_Pin|HC_05_RX_Pin;
 8001260:	2330      	movs	r3, #48	; 0x30
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001270:	2307      	movs	r3, #7
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <HAL_UART_MspInit+0x168>)
 800127c:	f000 fa06 	bl	800168c <HAL_GPIO_Init>
}
 8001280:	bf00      	nop
 8001282:	3738      	adds	r7, #56	; 0x38
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40013800 	.word	0x40013800
 800128c:	40021000 	.word	0x40021000
 8001290:	40004400 	.word	0x40004400
 8001294:	40004800 	.word	0x40004800
 8001298:	48000800 	.word	0x48000800

0800129c <Reset_Handler>:
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopForever+0x2>
 80012a0:	f7ff fde8 	bl	8000e74 <SystemInit>
 80012a4:	2100      	movs	r1, #0
 80012a6:	e003      	b.n	80012b0 <LoopCopyDataInit>

080012a8 <CopyDataInit>:
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <LoopForever+0x6>)
 80012aa:	585b      	ldr	r3, [r3, r1]
 80012ac:	5043      	str	r3, [r0, r1]
 80012ae:	3104      	adds	r1, #4

080012b0 <LoopCopyDataInit>:
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <LoopForever+0xa>)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <LoopForever+0xe>)
 80012b4:	1842      	adds	r2, r0, r1
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3f6      	bcc.n	80012a8 <CopyDataInit>
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopForever+0x12>)
 80012bc:	e002      	b.n	80012c4 <LoopFillZerobss>

080012be <FillZerobss>:
 80012be:	2300      	movs	r3, #0
 80012c0:	f842 3b04 	str.w	r3, [r2], #4

080012c4 <LoopFillZerobss>:
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LoopForever+0x16>)
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3f9      	bcc.n	80012be <FillZerobss>
 80012ca:	f003 fbff 	bl	8004acc <__libc_init_array>
 80012ce:	f7ff fb07 	bl	80008e0 <main>

080012d2 <LoopForever>:
 80012d2:	e7fe      	b.n	80012d2 <LoopForever>
 80012d4:	20018000 	.word	0x20018000
 80012d8:	08005ae8 	.word	0x08005ae8
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000084 	.word	0x20000084
 80012e4:	20000084 	.word	0x20000084
 80012e8:	2000243c 	.word	0x2000243c

080012ec <ADC1_2_IRQHandler>:
 80012ec:	e7fe      	b.n	80012ec <ADC1_2_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_Init+0x3c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_Init+0x3c>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001306:	2003      	movs	r0, #3
 8001308:	f000 f93e 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130c:	2000      	movs	r0, #0
 800130e:	f000 f80f 	bl	8001330 <HAL_InitTick>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	e001      	b.n	8001322 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800131e:	f7ff fca9 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001322:	79fb      	ldrb	r3, [r7, #7]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_InitTick+0x6c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d023      	beq.n	800138c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_InitTick+0x70>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_InitTick+0x6c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f949 	bl	80015f2 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d809      	bhi.n	8001380 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f913 	bl	800159e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_InitTick+0x74>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e007      	b.n	8001390 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e004      	b.n	8001390 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e001      	b.n	8001390 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	200003b8 	.word	0x200003b8

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200003b8 	.word	0x200003b8

080013e8 <__NVIC_SetPriorityGrouping>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <SysTick_Config>:
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff8e 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff29 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff3e 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff8e 	bl	80014dc <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5d 	bl	8001488 <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff31 	bl	800144c <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d005      	beq.n	800162e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e029      	b.n	8001682 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 020e 	bic.w	r2, r2, #14
 800163c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f003 021c 	and.w	r2, r3, #28
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2101      	movs	r1, #1
 800165c:	fa01 f202 	lsl.w	r2, r1, r2
 8001660:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
    }
  }
  return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169a:	e17f      	b.n	800199c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8171 	beq.w	8001996 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d00b      	beq.n	80016d4 <HAL_GPIO_Init+0x48>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d007      	beq.n	80016d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c8:	2b11      	cmp	r3, #17
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b12      	cmp	r3, #18
 80016d2:	d130      	bne.n	8001736 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800170a:	2201      	movs	r2, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 0201 	and.w	r2, r3, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b03      	cmp	r3, #3
 8001740:	d118      	bne.n	8001774 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x128>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	6939      	ldr	r1, [r7, #16]
 80017f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80ac 	beq.w	8001996 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <HAL_GPIO_Init+0x330>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	4a5e      	ldr	r2, [pc, #376]	; (80019bc <HAL_GPIO_Init+0x330>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6613      	str	r3, [r2, #96]	; 0x60
 800184a:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_GPIO_Init+0x330>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001856:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <HAL_GPIO_Init+0x334>)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001880:	d025      	beq.n	80018ce <HAL_GPIO_Init+0x242>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4f      	ldr	r2, [pc, #316]	; (80019c4 <HAL_GPIO_Init+0x338>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01f      	beq.n	80018ca <HAL_GPIO_Init+0x23e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4e      	ldr	r2, [pc, #312]	; (80019c8 <HAL_GPIO_Init+0x33c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d019      	beq.n	80018c6 <HAL_GPIO_Init+0x23a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4d      	ldr	r2, [pc, #308]	; (80019cc <HAL_GPIO_Init+0x340>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x236>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4c      	ldr	r2, [pc, #304]	; (80019d0 <HAL_GPIO_Init+0x344>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x232>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4b      	ldr	r2, [pc, #300]	; (80019d4 <HAL_GPIO_Init+0x348>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x22e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_GPIO_Init+0x34c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x22a>
 80018b2:	2306      	movs	r3, #6
 80018b4:	e00c      	b.n	80018d0 <HAL_GPIO_Init+0x244>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e00a      	b.n	80018d0 <HAL_GPIO_Init+0x244>
 80018ba:	2305      	movs	r3, #5
 80018bc:	e008      	b.n	80018d0 <HAL_GPIO_Init+0x244>
 80018be:	2304      	movs	r3, #4
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x244>
 80018c2:	2303      	movs	r3, #3
 80018c4:	e004      	b.n	80018d0 <HAL_GPIO_Init+0x244>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_Init+0x244>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x244>
 80018ce:	2300      	movs	r3, #0
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	f002 0203 	and.w	r2, r2, #3
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	4093      	lsls	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e0:	4937      	ldr	r1, [pc, #220]	; (80019c0 <HAL_GPIO_Init+0x334>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_GPIO_Init+0x350>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001912:	4a32      	ldr	r2, [pc, #200]	; (80019dc <HAL_GPIO_Init+0x350>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001918:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_GPIO_Init+0x350>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <HAL_GPIO_Init+0x350>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_GPIO_Init+0x350>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001966:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_GPIO_Init+0x350>)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_GPIO_Init+0x350>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_GPIO_Init+0x350>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f47f ae78 	bne.w	800169c <HAL_GPIO_Init+0x10>
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	48000400 	.word	0x48000400
 80019c8:	48000800 	.word	0x48000800
 80019cc:	48000c00 	.word	0x48000c00
 80019d0:	48001000 	.word	0x48001000
 80019d4:	48001400 	.word	0x48001400
 80019d8:	48001800 	.word	0x48001800
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fefc 	bl	800082c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e081      	b.n	8001b56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7fe fe58 	bl	800071c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2224      	movs	r2, #36	; 0x24
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ac6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d104      	bne.n	8001ada <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	ea42 0103 	orr.w	r1, r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	021a      	lsls	r2, r3, #8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69d9      	ldr	r1, [r3, #28]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d138      	bne.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e032      	b.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2224      	movs	r2, #36	; 0x24
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bb0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d139      	bne.n	8001c7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e033      	b.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb6:	d130      	bne.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc4:	d038      	beq.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cce:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2232      	movs	r2, #50	; 0x32
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	0c9b      	lsrs	r3, r3, #18
 8001ce8:	3301      	adds	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cec:	e002      	b.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d00:	d102      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f2      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d14:	d110      	bne.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e00f      	b.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d007      	beq.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d30:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	431bde83 	.word	0x431bde83

08001d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e3d4      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d66:	4ba1      	ldr	r3, [pc, #644]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d70:	4b9e      	ldr	r3, [pc, #632]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80e4 	beq.w	8001f50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_RCC_OscConfig+0x4a>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	f040 808b 	bne.w	8001eac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	f040 8087 	bne.w	8001eac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d9e:	4b93      	ldr	r3, [pc, #588]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x62>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e3ac      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1a      	ldr	r2, [r3, #32]
 8001dba:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x7c>
 8001dc6:	4b89      	ldr	r3, [pc, #548]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dce:	e005      	b.n	8001ddc <HAL_RCC_OscConfig+0x88>
 8001dd0:	4b86      	ldr	r3, [pc, #536]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d223      	bcs.n	8001e28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fd41 	bl	800286c <RCC_SetFlashLatencyFromMSIRange>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e38d      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df4:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7c      	ldr	r2, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4977      	ldr	r1, [pc, #476]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	4972      	ldr	r1, [pc, #456]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
 8001e26:	e025      	b.n	8001e74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e28:	4b70      	ldr	r3, [pc, #448]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a6f      	ldr	r2, [pc, #444]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b6d      	ldr	r3, [pc, #436]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	496a      	ldr	r1, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e46:	4b69      	ldr	r3, [pc, #420]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	4965      	ldr	r1, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fd01 	bl	800286c <RCC_SetFlashLatencyFromMSIRange>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e34d      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e74:	f000 fc36 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	495a      	ldr	r1, [pc, #360]	; (8001ff0 <HAL_RCC_OscConfig+0x29c>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_RCC_OscConfig+0x2a0>)
 8001e92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e94:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_RCC_OscConfig+0x2a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fa49 	bl	8001330 <HAL_InitTick>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d052      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	e331      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d032      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb4:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fa86 	bl	80013d0 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fa82 	bl	80013d0 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e31a      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001eec:	f043 0308 	orr.w	r3, r3, #8
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	493b      	ldr	r1, [pc, #236]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f04:	4b39      	ldr	r3, [pc, #228]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	4936      	ldr	r1, [pc, #216]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
 8001f18:	e01a      	b.n	8001f50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f1a:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a33      	ldr	r2, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fa53 	bl	80013d0 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fa4f 	bl	80013d0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e2e7      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1da>
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d074      	beq.n	8002046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x21a>
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d10e      	bne.n	8001f86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d10b      	bne.n	8001f86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d064      	beq.n	8002044 <HAL_RCC_OscConfig+0x2f0>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d160      	bne.n	8002044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e2c4      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x24a>
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e01d      	b.n	8001fda <HAL_RCC_OscConfig+0x286>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x26e>
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x286>
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01c      	beq.n	800201c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe2:	f7ff f9f5 	bl	80013d0 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe8:	e011      	b.n	800200e <HAL_RCC_OscConfig+0x2ba>
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	080059f8 	.word	0x080059f8
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f9e8 	bl	80013d0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e280      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200e:	4baf      	ldr	r3, [pc, #700]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2a8>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f9d8 	bl	80013d0 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff f9d4 	bl	80013d0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e26c      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002036:	4ba5      	ldr	r3, [pc, #660]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x2d0>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d060      	beq.n	8002114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d005      	beq.n	8002064 <HAL_RCC_OscConfig+0x310>
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d119      	bne.n	8002092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d116      	bne.n	8002092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002064:	4b99      	ldr	r3, [pc, #612]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_OscConfig+0x328>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e249      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b93      	ldr	r3, [pc, #588]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	4990      	ldr	r1, [pc, #576]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002090:	e040      	b.n	8002114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d023      	beq.n	80020e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209a:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a8b      	ldr	r2, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7ff f993 	bl	80013d0 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ae:	f7ff f98f 	bl	80013d0 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e227      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c0:	4b82      	ldr	r3, [pc, #520]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b7f      	ldr	r3, [pc, #508]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	497c      	ldr	r1, [pc, #496]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
 80020e0:	e018      	b.n	8002114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a79      	ldr	r2, [pc, #484]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7ff f96f 	bl	80013d0 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff f96b 	bl	80013d0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e203      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002108:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d03c      	beq.n	800219a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01c      	beq.n	8002162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002128:	4b68      	ldr	r3, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212e:	4a67      	ldr	r2, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7ff f94a 	bl	80013d0 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002140:	f7ff f946 	bl	80013d0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1de      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002152:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ef      	beq.n	8002140 <HAL_RCC_OscConfig+0x3ec>
 8002160:	e01b      	b.n	800219a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7ff f92d 	bl	80013d0 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217a:	f7ff f929 	bl	80013d0 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1c1      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1ef      	bne.n	800217a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a6 	beq.w	80022f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021ac:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10d      	bne.n	80021d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	4b44      	ldr	r3, [pc, #272]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	4a43      	ldr	r2, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80021be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c2:	6593      	str	r3, [r2, #88]	; 0x58
 80021c4:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d0:	2301      	movs	r3, #1
 80021d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCC_OscConfig+0x57c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d118      	bne.n	8002212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_RCC_OscConfig+0x57c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <HAL_RCC_OscConfig+0x57c>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ec:	f7ff f8f0 	bl	80013d0 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7ff f8ec 	bl	80013d0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e184      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002206:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <HAL_RCC_OscConfig+0x57c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d108      	bne.n	800222c <HAL_RCC_OscConfig+0x4d8>
 800221a:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800222a:	e024      	b.n	8002276 <HAL_RCC_OscConfig+0x522>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d110      	bne.n	8002256 <HAL_RCC_OscConfig+0x502>
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	4a24      	ldr	r2, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	4a20      	ldr	r2, [pc, #128]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002254:	e00f      	b.n	8002276 <HAL_RCC_OscConfig+0x522>
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7ff f8a7 	bl	80013d0 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f8a3 	bl	80013d0 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e139      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ed      	beq.n	8002286 <HAL_RCC_OscConfig+0x532>
 80022aa:	e01a      	b.n	80022e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7ff f890 	bl	80013d0 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7ff f88c 	bl	80013d0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d906      	bls.n	80022d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e122      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d4:	4b90      	ldr	r3, [pc, #576]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e8      	bne.n	80022b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e8:	4b8b      	ldr	r3, [pc, #556]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	4a8a      	ldr	r2, [pc, #552]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8108 	beq.w	800250e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	2b02      	cmp	r3, #2
 8002304:	f040 80d0 	bne.w	80024a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002308:	4b83      	ldr	r3, [pc, #524]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0203 	and.w	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	429a      	cmp	r2, r3
 800231a:	d130      	bne.n	800237e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	3b01      	subs	r3, #1
 8002328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d127      	bne.n	800237e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002338:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d11f      	bne.n	800237e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002348:	2a07      	cmp	r2, #7
 800234a:	bf14      	ite	ne
 800234c:	2201      	movne	r2, #1
 800234e:	2200      	moveq	r2, #0
 8002350:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002352:	4293      	cmp	r3, r2
 8002354:	d113      	bne.n	800237e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	3b01      	subs	r3, #1
 8002364:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d109      	bne.n	800237e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	3b01      	subs	r3, #1
 8002378:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d06e      	beq.n	800245c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b0c      	cmp	r3, #12
 8002382:	d069      	beq.n	8002458 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002384:	4b64      	ldr	r3, [pc, #400]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002390:	4b61      	ldr	r3, [pc, #388]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b7      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023a0:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5c      	ldr	r2, [pc, #368]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80023a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ac:	f7ff f810 	bl	80013d0 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff f80c 	bl	80013d0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0a4      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d2:	4b51      	ldr	r3, [pc, #324]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b51      	ldr	r3, [pc, #324]	; (800251c <HAL_RCC_OscConfig+0x7c8>)
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023e2:	3a01      	subs	r2, #1
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ec:	0212      	lsls	r2, r2, #8
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023f4:	0852      	lsrs	r2, r2, #1
 80023f6:	3a01      	subs	r2, #1
 80023f8:	0552      	lsls	r2, r2, #21
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002400:	0852      	lsrs	r2, r2, #1
 8002402:	3a01      	subs	r2, #1
 8002404:	0652      	lsls	r2, r2, #25
 8002406:	4311      	orrs	r1, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800240c:	0912      	lsrs	r2, r2, #4
 800240e:	0452      	lsls	r2, r2, #17
 8002410:	430a      	orrs	r2, r1
 8002412:	4941      	ldr	r1, [pc, #260]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 8002414:	4313      	orrs	r3, r2
 8002416:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3e      	ldr	r2, [pc, #248]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002422:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002424:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a3b      	ldr	r2, [pc, #236]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002430:	f7fe ffce 	bl	80013d0 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe ffca 	bl	80013d0 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e062      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244a:	4b33      	ldr	r3, [pc, #204]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002456:	e05a      	b.n	800250e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e059      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d152      	bne.n	800250e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002468:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2a      	ldr	r2, [pc, #168]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002474:	4b28      	ldr	r3, [pc, #160]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800247a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002480:	f7fe ffa6 	bl	80013d0 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe ffa2 	bl	80013d0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e03a      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x734>
 80024a6:	e032      	b.n	800250e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d02d      	beq.n	800250a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a19      	ldr	r2, [pc, #100]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80024b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80024cc:	f023 0303 	bic.w	r3, r3, #3
 80024d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80024d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe ff75 	bl	80013d0 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe ff71 	bl	80013d0 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e009      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCC_OscConfig+0x7c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x796>
 8002508:	e001      	b.n	800250e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3720      	adds	r7, #32
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000
 800251c:	f99d808c 	.word	0xf99d808c

08002520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0c8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002534:	4b66      	ldr	r3, [pc, #408]	; (80026d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d910      	bls.n	8002564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 0207 	bic.w	r2, r3, #7
 800254a:	4961      	ldr	r1, [pc, #388]	; (80026d0 <HAL_RCC_ClockConfig+0x1b0>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b5f      	ldr	r3, [pc, #380]	; (80026d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0b0      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d04c      	beq.n	800260a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d107      	bne.n	8002588 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002578:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d121      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e09e      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d115      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e092      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a8:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e086      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b8:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e07e      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 0203 	bic.w	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	493f      	ldr	r1, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025da:	f7fe fef9 	bl	80013d0 <HAL_GetTick>
 80025de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e2:	f7fe fef5 	bl	80013d0 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e066      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 020c 	and.w	r2, r3, #12
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	429a      	cmp	r2, r3
 8002608:	d1eb      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002616:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	492c      	ldr	r1, [pc, #176]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_RCC_ClockConfig+0x1b0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d210      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0207 	bic.w	r2, r3, #7
 800263e:	4924      	ldr	r1, [pc, #144]	; (80026d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e036      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4918      	ldr	r1, [pc, #96]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4910      	ldr	r1, [pc, #64]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002696:	f000 f825 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_RCC_ClockConfig+0x1b4>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490c      	ldr	r1, [pc, #48]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fe38 	bl	8001330 <HAL_InitTick>
 80026c0:	4603      	mov	r3, r0
 80026c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80026c4:	7afb      	ldrb	r3, [r7, #11]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	080059f8 	.word	0x080059f8
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fc:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x34>
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d121      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d11e      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002718:	4b34      	ldr	r3, [pc, #208]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	e005      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002740:	4a2b      	ldr	r2, [pc, #172]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002754:	e00a      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d102      	bne.n	8002762 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800275c:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e004      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b08      	cmp	r3, #8
 8002766:	d101      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800276a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d134      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0xa6>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d003      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0xac>
 8002788:	e005      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800278c:	617b      	str	r3, [r7, #20]
      break;
 800278e:	e005      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002792:	617b      	str	r3, [r7, #20]
      break;
 8002794:	e002      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	617b      	str	r3, [r7, #20]
      break;
 800279a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	3301      	adds	r3, #1
 80027a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	fb02 f203 	mul.w	r2, r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_RCC_GetSysClockFreq+0x108>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	0e5b      	lsrs	r3, r3, #25
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	3301      	adds	r3, #1
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027dc:	69bb      	ldr	r3, [r7, #24]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08005a10 	.word	0x08005a10
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	007a1200 	.word	0x007a1200

080027fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_GetHCLKFreq+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002818:	f7ff fff0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4904      	ldr	r1, [pc, #16]	; (800283c <HAL_RCC_GetPCLK1Freq+0x28>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	08005a08 	.word	0x08005a08

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002844:	f7ff ffda 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0adb      	lsrs	r3, r3, #11
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4904      	ldr	r1, [pc, #16]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	08005a08 	.word	0x08005a08

0800286c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002878:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002884:	f7ff fa02 	bl	8001c8c <HAL_PWREx_GetVoltageRange>
 8002888:	6178      	str	r0, [r7, #20]
 800288a:	e014      	b.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	; 0x58
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028a4:	f7ff f9f2 	bl	8001c8c <HAL_PWREx_GetVoltageRange>
 80028a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028bc:	d10b      	bne.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d919      	bls.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2ba0      	cmp	r3, #160	; 0xa0
 80028c8:	d902      	bls.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ca:	2302      	movs	r3, #2
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e013      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d0:	2301      	movs	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e010      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d902      	bls.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028dc:	2303      	movs	r3, #3
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e00a      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d102      	bne.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e8:	2302      	movs	r3, #2
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e004      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b70      	cmp	r3, #112	; 0x70
 80028f2:	d101      	bne.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 0207 	bic.w	r2, r3, #7
 8002900:	4909      	ldr	r1, [pc, #36]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	40022000 	.word	0x40022000

0800292c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002934:	2300      	movs	r3, #0
 8002936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002938:	2300      	movs	r3, #0
 800293a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002944:	2b00      	cmp	r3, #0
 8002946:	d041      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002950:	d02a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002952:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002956:	d824      	bhi.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002958:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800295c:	d008      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800295e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002962:	d81e      	bhi.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296c:	d010      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800296e:	e018      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002970:	4b86      	ldr	r3, [pc, #536]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a85      	ldr	r2, [pc, #532]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800297c:	e015      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fabb 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800298e:	e00c      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3320      	adds	r3, #32
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fba6 	bl	80030e8 <RCCEx_PLLSAI2_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a0:	e003      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	74fb      	strb	r3, [r7, #19]
      break;
 80029a6:	e000      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029b0:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029be:	4973      	ldr	r1, [pc, #460]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029c6:	e001      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d041      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029e0:	d02a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029e6:	d824      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029f2:	d81e      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d010      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029fe:	e018      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a00:	4b62      	ldr	r3, [pc, #392]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a61      	ldr	r2, [pc, #388]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a0c:	e015      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fa73 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a1e:	e00c      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3320      	adds	r3, #32
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fb5e 	bl	80030e8 <RCCEx_PLLSAI2_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a30:	e003      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	74fb      	strb	r3, [r7, #19]
      break;
 8002a36:	e000      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a40:	4b52      	ldr	r3, [pc, #328]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a4e:	494f      	ldr	r1, [pc, #316]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a56:	e001      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a0 	beq.w	8002baa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00d      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	4a40      	ldr	r2, [pc, #256]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a90:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa0:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aac:	f7fe fc90 	bl	80013d0 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ab2:	e009      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe fc8c 	bl	80013d0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d902      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ac6:	e005      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ac8:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d15c      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01f      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d019      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b04:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fc4b 	bl	80013d0 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3c:	e00b      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe fc47 	bl	80013d0 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d902      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	74fb      	strb	r3, [r7, #19]
            break;
 8002b54:	e006      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ec      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7a:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b82:	e009      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
 8002b88:	e006      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b98:	7c7b      	ldrb	r3, [r7, #17]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9e:	4b9e      	ldr	r3, [pc, #632]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	4a9d      	ldr	r2, [pc, #628]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bb6:	4b98      	ldr	r3, [pc, #608]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f023 0203 	bic.w	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	4994      	ldr	r1, [pc, #592]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd8:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f023 020c 	bic.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	498c      	ldr	r1, [pc, #560]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bfa:	4b87      	ldr	r3, [pc, #540]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	4983      	ldr	r1, [pc, #524]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c1c:	4b7e      	ldr	r3, [pc, #504]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	497b      	ldr	r1, [pc, #492]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4c:	4972      	ldr	r1, [pc, #456]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c60:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	496a      	ldr	r1, [pc, #424]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c82:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	4961      	ldr	r1, [pc, #388]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ca4:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	4959      	ldr	r1, [pc, #356]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ccc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	4950      	ldr	r1, [pc, #320]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	4948      	ldr	r1, [pc, #288]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0a:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	493f      	ldr	r1, [pc, #252]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d028      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3a:	4937      	ldr	r1, [pc, #220]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d56:	60d3      	str	r3, [r2, #12]
 8002d58:	e011      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d62:	d10c      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f8c8 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	491f      	ldr	r1, [pc, #124]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da8:	d106      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db4:	60d3      	str	r3, [r2, #12]
 8002db6:	e011      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 f899 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	4908      	ldr	r1, [pc, #32]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e06:	d109      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a02      	ldr	r2, [pc, #8]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e12:	60d3      	str	r3, [r2, #12]
 8002e14:	e014      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f867 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d02f      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5a:	4928      	ldr	r1, [pc, #160]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f844 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d014      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	74bb      	strb	r3, [r7, #18]
 8002e86:	e011      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3320      	adds	r3, #32
 8002e96:	2102      	movs	r1, #2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f925 	bl	80030e8 <RCCEx_PLLSAI2_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec6:	490d      	ldr	r1, [pc, #52]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	4904      	ldr	r1, [pc, #16]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ef2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000

08002f00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f0e:	4b75      	ldr	r3, [pc, #468]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f1a:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0203 	and.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d10d      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f32:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
       ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d047      	beq.n	8002fd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e044      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d018      	beq.n	8002f86 <RCCEx_PLLSAI1_Config+0x86>
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d825      	bhi.n	8002fa4 <RCCEx_PLLSAI1_Config+0xa4>
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d002      	beq.n	8002f62 <RCCEx_PLLSAI1_Config+0x62>
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d009      	beq.n	8002f74 <RCCEx_PLLSAI1_Config+0x74>
 8002f60:	e020      	b.n	8002fa4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f62:	4b60      	ldr	r3, [pc, #384]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11d      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f72:	e01a      	b.n	8002faa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f74:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e013      	b.n	8002fae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f86:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f92:	4b54      	ldr	r3, [pc, #336]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fa2:	e006      	b.n	8002fb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e004      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	4944      	ldr	r1, [pc, #272]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d17d      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fdc:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a40      	ldr	r2, [pc, #256]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe8:	f7fe f9f2 	bl	80013d0 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fee:	e009      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff0:	f7fe f9ee 	bl	80013d0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	73fb      	strb	r3, [r7, #15]
        break;
 8003002:	e005      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003004:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ef      	bne.n	8002ff0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d160      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800301c:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6892      	ldr	r2, [r2, #8]
 800302c:	0211      	lsls	r1, r2, #8
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	0912      	lsrs	r2, r2, #4
 8003034:	0452      	lsls	r2, r2, #17
 8003036:	430a      	orrs	r2, r1
 8003038:	492a      	ldr	r1, [pc, #168]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	610b      	str	r3, [r1, #16]
 800303e:	e027      	b.n	8003090 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d112      	bne.n	800306c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800304e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6892      	ldr	r2, [r2, #8]
 8003056:	0211      	lsls	r1, r2, #8
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6912      	ldr	r2, [r2, #16]
 800305c:	0852      	lsrs	r2, r2, #1
 800305e:	3a01      	subs	r2, #1
 8003060:	0552      	lsls	r2, r2, #21
 8003062:	430a      	orrs	r2, r1
 8003064:	491f      	ldr	r1, [pc, #124]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
 800306a:	e011      	b.n	8003090 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003074:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6892      	ldr	r2, [r2, #8]
 800307c:	0211      	lsls	r1, r2, #8
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6952      	ldr	r2, [r2, #20]
 8003082:	0852      	lsrs	r2, r2, #1
 8003084:	3a01      	subs	r2, #1
 8003086:	0652      	lsls	r2, r2, #25
 8003088:	430a      	orrs	r2, r1
 800308a:	4916      	ldr	r1, [pc, #88]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800309a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe f998 	bl	80013d0 <HAL_GetTick>
 80030a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030a2:	e009      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a4:	f7fe f994 	bl	80013d0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d902      	bls.n	80030b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	73fb      	strb	r3, [r7, #15]
          break;
 80030b6:	e005      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ef      	beq.n	80030a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	4904      	ldr	r1, [pc, #16]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000

080030e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030f6:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003102:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0203 	and.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d10d      	bne.n	800312e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
       ||
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800311a:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
       ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d047      	beq.n	80031be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e044      	b.n	80031be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d018      	beq.n	800316e <RCCEx_PLLSAI2_Config+0x86>
 800313c:	2b03      	cmp	r3, #3
 800313e:	d825      	bhi.n	800318c <RCCEx_PLLSAI2_Config+0xa4>
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <RCCEx_PLLSAI2_Config+0x62>
 8003144:	2b02      	cmp	r3, #2
 8003146:	d009      	beq.n	800315c <RCCEx_PLLSAI2_Config+0x74>
 8003148:	e020      	b.n	800318c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314a:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11d      	bne.n	8003192 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315a:	e01a      	b.n	8003192 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800315c:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316c:	e013      	b.n	8003196 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800316e:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800318a:	e006      	b.n	800319a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      break;
 8003190:	e004      	b.n	800319c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800319a:	bf00      	nop
    }

    if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	430b      	orrs	r3, r1
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d167      	bne.n	8003294 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031c4:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a35      	ldr	r2, [pc, #212]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe f8fe 	bl	80013d0 <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031d6:	e009      	b.n	80031ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031d8:	f7fe f8fa 	bl	80013d0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d902      	bls.n	80031ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ea:	e005      	b.n	80031f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ec:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ef      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d14a      	bne.n	8003294 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003204:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800320c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6892      	ldr	r2, [r2, #8]
 8003214:	0211      	lsls	r1, r2, #8
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	0912      	lsrs	r2, r2, #4
 800321c:	0452      	lsls	r2, r2, #17
 800321e:	430a      	orrs	r2, r1
 8003220:	491f      	ldr	r1, [pc, #124]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	4313      	orrs	r3, r2
 8003224:	614b      	str	r3, [r1, #20]
 8003226:	e011      	b.n	800324c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003230:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6892      	ldr	r2, [r2, #8]
 8003238:	0211      	lsls	r1, r2, #8
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6912      	ldr	r2, [r2, #16]
 800323e:	0852      	lsrs	r2, r2, #1
 8003240:	3a01      	subs	r2, #1
 8003242:	0652      	lsls	r2, r2, #25
 8003244:	430a      	orrs	r2, r1
 8003246:	4916      	ldr	r1, [pc, #88]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003248:	4313      	orrs	r3, r2
 800324a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003256:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe f8ba 	bl	80013d0 <HAL_GetTick>
 800325c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800325e:	e009      	b.n	8003274 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003260:	f7fe f8b6 	bl	80013d0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d902      	bls.n	8003274 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	73fb      	strb	r3, [r7, #15]
          break;
 8003272:	e005      	b.n	8003280 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ef      	beq.n	8003260 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4904      	ldr	r1, [pc, #16]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	4313      	orrs	r3, r2
 8003292:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d06c      	beq.n	8003390 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fc36 	bl	8000b3c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	22ca      	movs	r2, #202	; 0xca
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2253      	movs	r2, #83	; 0x53
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f87c 	bl	80033e6 <RTC_EnterInitMode>
 80032ee:	4603      	mov	r3, r0
 80032f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d14b      	bne.n	8003390 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6899      	ldr	r1, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6919      	ldr	r1, [r3, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	041a      	lsls	r2, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f87f 	bl	800344c <RTC_ExitInitMode>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11b      	bne.n	8003390 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0203 	bic.w	r2, r2, #3
 8003366:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	22ff      	movs	r2, #255	; 0xff
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80033b2:	f7fe f80d 	bl	80013d0 <HAL_GetTick>
 80033b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033b8:	e009      	b.n	80033ce <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033ba:	f7fe f809 	bl	80013d0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c8:	d901      	bls.n	80033ce <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e007      	b.n	80033de <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ee      	beq.n	80033ba <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d120      	bne.n	8003442 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800340a:	f7fd ffe1 	bl	80013d0 <HAL_GetTick>
 800340e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003410:	e00d      	b.n	800342e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003412:	f7fd ffdd 	bl	80013d0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003420:	d905      	bls.n	800342e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <RTC_EnterInitMode+0x5c>
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d1e7      	bne.n	8003412 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <RTC_ExitInitMode+0x78>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <RTC_ExitInitMode+0x78>)
 800345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003462:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <RTC_ExitInitMode+0x78>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10c      	bne.n	800348a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff92 	bl	800339a <HAL_RTC_WaitForSynchro>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01e      	beq.n	80034ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2203      	movs	r2, #3
 8003480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	e017      	b.n	80034ba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <RTC_ExitInitMode+0x78>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <RTC_ExitInitMode+0x78>)
 8003490:	f023 0320 	bic.w	r3, r3, #32
 8003494:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ff7f 	bl	800339a <HAL_RTC_WaitForSynchro>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <RTC_ExitInitMode+0x78>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <RTC_ExitInitMode+0x78>)
 80034b4:	f043 0320 	orr.w	r3, r3, #32
 80034b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40002800 	.word	0x40002800

080034c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e095      	b.n	8003606 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ea:	d009      	beq.n	8003500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
 80034f2:	e005      	b.n	8003500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fb68 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003540:	d902      	bls.n	8003548 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e002      	b.n	800354e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800354c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003556:	d007      	beq.n	8003568 <HAL_SPI_Init+0xa0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003560:	d002      	beq.n	8003568 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	ea42 0103 	orr.w	r1, r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	f003 0204 	and.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e049      	b.n	80036b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d106      	bne.n	800363a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fd fcb1 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f000 f9ed 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d001      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e04f      	b.n	8003774 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a23      	ldr	r2, [pc, #140]	; (8003780 <HAL_TIM_Base_Start_IT+0xc4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01d      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0x76>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d018      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0x76>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <HAL_TIM_Base_Start_IT+0xc8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0x76>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1e      	ldr	r2, [pc, #120]	; (8003788 <HAL_TIM_Base_Start_IT+0xcc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0x76>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_TIM_Base_Start_IT+0xd0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0x76>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_TIM_Base_Start_IT+0xd4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0x76>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_TIM_Base_Start_IT+0xd8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d115      	bne.n	800375e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	4b17      	ldr	r3, [pc, #92]	; (8003798 <HAL_TIM_Base_Start_IT+0xdc>)
 800373a:	4013      	ands	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d015      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0xb4>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374a:	d011      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	e008      	b.n	8003770 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e000      	b.n	8003772 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003770:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40013400 	.word	0x40013400
 8003794:	40014000 	.word	0x40014000
 8003798:	00010007 	.word	0x00010007

0800379c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d122      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d11b      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0202 	mvn.w	r2, #2
 80037c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f905 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80037e4:	e005      	b.n	80037f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f8f7 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f908 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d122      	bne.n	800384c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b04      	cmp	r3, #4
 8003812:	d11b      	bne.n	800384c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0204 	mvn.w	r2, #4
 800381c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8db 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003838:	e005      	b.n	8003846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8cd 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8de 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b08      	cmp	r3, #8
 8003858:	d122      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b08      	cmp	r3, #8
 8003866:	d11b      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0208 	mvn.w	r2, #8
 8003870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2204      	movs	r2, #4
 8003876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8b1 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 800388c:	e005      	b.n	800389a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f8a3 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8b4 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d122      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d11b      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0210 	mvn.w	r2, #16
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2208      	movs	r2, #8
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f887 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f879 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f88a 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d10e      	bne.n	8003920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d107      	bne.n	8003920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0201 	mvn.w	r2, #1
 8003918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fc ffc6 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b80      	cmp	r3, #128	; 0x80
 800392c:	d10e      	bne.n	800394c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d107      	bne.n	800394c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f99c 	bl	8003c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395a:	d10e      	bne.n	800397a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d107      	bne.n	800397a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f98f 	bl	8003c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d10e      	bne.n	80039a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d107      	bne.n	80039a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800399e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f838 	bl	8003a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d10e      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d107      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f06f 0220 	mvn.w	r2, #32
 80039ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f94f 	bl	8003c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d00f      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3d      	ldr	r2, [pc, #244]	; (8003b44 <TIM_Base_SetConfig+0x118>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <TIM_Base_SetConfig+0x11c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <TIM_Base_SetConfig+0x120>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3a      	ldr	r2, [pc, #232]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01f      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d01b      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	; (8003b44 <TIM_Base_SetConfig+0x118>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d017      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <TIM_Base_SetConfig+0x11c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <TIM_Base_SetConfig+0x120>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00f      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <TIM_Base_SetConfig+0x128>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_Base_SetConfig+0x9a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <TIM_Base_SetConfig+0x130>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d108      	bne.n	8003ad8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a10      	ldr	r2, [pc, #64]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00f      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00b      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <TIM_Base_SetConfig+0x128>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d007      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <TIM_Base_SetConfig+0x130>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	615a      	str	r2, [r3, #20]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40013400 	.word	0x40013400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e068      	b.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2d      	ldr	r2, [pc, #180]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d108      	bne.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d018      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	40014000 	.word	0x40014000

08003c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e040      	b.n	8003d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd fa2e 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	; 0x24
 8003cd8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f9dc 	bl	80040a8 <UART_SetConfig>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e022      	b.n	8003d40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fc5a 	bl	80045bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fce1 	bl	8004700 <UART_CheckIdleState>
 8003d3e:	4603      	mov	r3, r0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e048      	b.n	8003dec <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd f9e0 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f98e 	bl	80040a8 <UART_SetConfig>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e02a      	b.n	8003dec <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fc0c 	bl	80045bc <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003dc2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fc8b 	bl	8004700 <UART_CheckIdleState>
 8003dea:	4603      	mov	r3, r0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d113      	bne.n	8003e4c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00e      	beq.n	8003e4c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8113 	beq.w	8004068 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
      }
      return;
 8003e4a:	e10d      	b.n	8004068 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80d6 	beq.w	8004000 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_UART_IRQHandler+0x284>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80cb 	beq.w	8004000 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <HAL_UART_IRQHandler+0x9e>
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2201      	movs	r2, #1
 8003e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e8a:	f043 0201 	orr.w	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00e      	beq.n	8003eba <HAL_UART_IRQHandler+0xc6>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb2:	f043 0204 	orr.w	r2, r3, #4
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xee>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eda:	f043 0202 	orr.w	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d013      	beq.n	8003f14 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2208      	movs	r2, #8
 8003f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f0c:	f043 0208 	orr.w	r2, r3, #8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00f      	beq.n	8003f3e <HAL_UART_IRQHandler+0x14a>
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8092 	beq.w	800406c <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00c      	beq.n	8003f6c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f70:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d004      	beq.n	8003f8a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d031      	beq.n	8003fee <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fc78 	bl	8004880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d123      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d013      	beq.n	8003fde <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fba:	4a30      	ldr	r2, [pc, #192]	; (800407c <HAL_UART_IRQHandler+0x288>)
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd fb21 	bl	800160a <HAL_DMA_Abort_IT>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	e00e      	b.n	8003ffc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f858 	bl	8004094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e00a      	b.n	8003ffc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f854 	bl	8004094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e006      	b.n	8003ffc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f850 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003ffa:	e037      	b.n	800406c <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	bf00      	nop
    return;
 8003ffe:	e035      	b.n	800406c <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <HAL_UART_IRQHandler+0x232>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800401c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fc7d 	bl	800491e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004024:	e025      	b.n	8004072 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
    }
    return;
 800404a:	e011      	b.n	8004070 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <HAL_UART_IRQHandler+0x27e>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fc43 	bl	80048ec <UART_EndTransmit_IT>
    return;
 8004066:	e004      	b.n	8004072 <HAL_UART_IRQHandler+0x27e>
      return;
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <HAL_UART_IRQHandler+0x27e>
    return;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_UART_IRQHandler+0x27e>
    return;
 8004070:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	04000120 	.word	0x04000120
 800407c:	080048c1 	.word	0x080048c1

08004080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4bad      	ldr	r3, [pc, #692]	; (8004388 <UART_SetConfig+0x2e0>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	69f9      	ldr	r1, [r7, #28]
 80040dc:	430b      	orrs	r3, r1
 80040de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4aa2      	ldr	r2, [pc, #648]	; (800438c <UART_SetConfig+0x2e4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	4313      	orrs	r3, r2
 800410e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a99      	ldr	r2, [pc, #612]	; (8004390 <UART_SetConfig+0x2e8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d121      	bne.n	8004172 <UART_SetConfig+0xca>
 800412e:	4b99      	ldr	r3, [pc, #612]	; (8004394 <UART_SetConfig+0x2ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b03      	cmp	r3, #3
 800413a:	d817      	bhi.n	800416c <UART_SetConfig+0xc4>
 800413c:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <UART_SetConfig+0x9c>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004155 	.word	0x08004155
 8004148:	08004161 	.word	0x08004161
 800414c:	0800415b 	.word	0x0800415b
 8004150:	08004167 	.word	0x08004167
 8004154:	2301      	movs	r3, #1
 8004156:	76fb      	strb	r3, [r7, #27]
 8004158:	e0e7      	b.n	800432a <UART_SetConfig+0x282>
 800415a:	2302      	movs	r3, #2
 800415c:	76fb      	strb	r3, [r7, #27]
 800415e:	e0e4      	b.n	800432a <UART_SetConfig+0x282>
 8004160:	2304      	movs	r3, #4
 8004162:	76fb      	strb	r3, [r7, #27]
 8004164:	e0e1      	b.n	800432a <UART_SetConfig+0x282>
 8004166:	2308      	movs	r3, #8
 8004168:	76fb      	strb	r3, [r7, #27]
 800416a:	e0de      	b.n	800432a <UART_SetConfig+0x282>
 800416c:	2310      	movs	r3, #16
 800416e:	76fb      	strb	r3, [r7, #27]
 8004170:	e0db      	b.n	800432a <UART_SetConfig+0x282>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a88      	ldr	r2, [pc, #544]	; (8004398 <UART_SetConfig+0x2f0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d132      	bne.n	80041e2 <UART_SetConfig+0x13a>
 800417c:	4b85      	ldr	r3, [pc, #532]	; (8004394 <UART_SetConfig+0x2ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d828      	bhi.n	80041dc <UART_SetConfig+0x134>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0xe8>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041dd 	.word	0x080041dd
 8004198:	080041dd 	.word	0x080041dd
 800419c:	080041dd 	.word	0x080041dd
 80041a0:	080041d1 	.word	0x080041d1
 80041a4:	080041dd 	.word	0x080041dd
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	080041dd 	.word	0x080041dd
 80041b0:	080041cb 	.word	0x080041cb
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	080041dd 	.word	0x080041dd
 80041c0:	080041d7 	.word	0x080041d7
 80041c4:	2300      	movs	r3, #0
 80041c6:	76fb      	strb	r3, [r7, #27]
 80041c8:	e0af      	b.n	800432a <UART_SetConfig+0x282>
 80041ca:	2302      	movs	r3, #2
 80041cc:	76fb      	strb	r3, [r7, #27]
 80041ce:	e0ac      	b.n	800432a <UART_SetConfig+0x282>
 80041d0:	2304      	movs	r3, #4
 80041d2:	76fb      	strb	r3, [r7, #27]
 80041d4:	e0a9      	b.n	800432a <UART_SetConfig+0x282>
 80041d6:	2308      	movs	r3, #8
 80041d8:	76fb      	strb	r3, [r7, #27]
 80041da:	e0a6      	b.n	800432a <UART_SetConfig+0x282>
 80041dc:	2310      	movs	r3, #16
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	e0a3      	b.n	800432a <UART_SetConfig+0x282>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6d      	ldr	r2, [pc, #436]	; (800439c <UART_SetConfig+0x2f4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d120      	bne.n	800422e <UART_SetConfig+0x186>
 80041ec:	4b69      	ldr	r3, [pc, #420]	; (8004394 <UART_SetConfig+0x2ec>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041f6:	2b30      	cmp	r3, #48	; 0x30
 80041f8:	d013      	beq.n	8004222 <UART_SetConfig+0x17a>
 80041fa:	2b30      	cmp	r3, #48	; 0x30
 80041fc:	d814      	bhi.n	8004228 <UART_SetConfig+0x180>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d009      	beq.n	8004216 <UART_SetConfig+0x16e>
 8004202:	2b20      	cmp	r3, #32
 8004204:	d810      	bhi.n	8004228 <UART_SetConfig+0x180>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <UART_SetConfig+0x168>
 800420a:	2b10      	cmp	r3, #16
 800420c:	d006      	beq.n	800421c <UART_SetConfig+0x174>
 800420e:	e00b      	b.n	8004228 <UART_SetConfig+0x180>
 8004210:	2300      	movs	r3, #0
 8004212:	76fb      	strb	r3, [r7, #27]
 8004214:	e089      	b.n	800432a <UART_SetConfig+0x282>
 8004216:	2302      	movs	r3, #2
 8004218:	76fb      	strb	r3, [r7, #27]
 800421a:	e086      	b.n	800432a <UART_SetConfig+0x282>
 800421c:	2304      	movs	r3, #4
 800421e:	76fb      	strb	r3, [r7, #27]
 8004220:	e083      	b.n	800432a <UART_SetConfig+0x282>
 8004222:	2308      	movs	r3, #8
 8004224:	76fb      	strb	r3, [r7, #27]
 8004226:	e080      	b.n	800432a <UART_SetConfig+0x282>
 8004228:	2310      	movs	r3, #16
 800422a:	76fb      	strb	r3, [r7, #27]
 800422c:	e07d      	b.n	800432a <UART_SetConfig+0x282>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a5b      	ldr	r2, [pc, #364]	; (80043a0 <UART_SetConfig+0x2f8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d120      	bne.n	800427a <UART_SetConfig+0x1d2>
 8004238:	4b56      	ldr	r3, [pc, #344]	; (8004394 <UART_SetConfig+0x2ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004242:	2bc0      	cmp	r3, #192	; 0xc0
 8004244:	d013      	beq.n	800426e <UART_SetConfig+0x1c6>
 8004246:	2bc0      	cmp	r3, #192	; 0xc0
 8004248:	d814      	bhi.n	8004274 <UART_SetConfig+0x1cc>
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d009      	beq.n	8004262 <UART_SetConfig+0x1ba>
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d810      	bhi.n	8004274 <UART_SetConfig+0x1cc>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <UART_SetConfig+0x1b4>
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d006      	beq.n	8004268 <UART_SetConfig+0x1c0>
 800425a:	e00b      	b.n	8004274 <UART_SetConfig+0x1cc>
 800425c:	2300      	movs	r3, #0
 800425e:	76fb      	strb	r3, [r7, #27]
 8004260:	e063      	b.n	800432a <UART_SetConfig+0x282>
 8004262:	2302      	movs	r3, #2
 8004264:	76fb      	strb	r3, [r7, #27]
 8004266:	e060      	b.n	800432a <UART_SetConfig+0x282>
 8004268:	2304      	movs	r3, #4
 800426a:	76fb      	strb	r3, [r7, #27]
 800426c:	e05d      	b.n	800432a <UART_SetConfig+0x282>
 800426e:	2308      	movs	r3, #8
 8004270:	76fb      	strb	r3, [r7, #27]
 8004272:	e05a      	b.n	800432a <UART_SetConfig+0x282>
 8004274:	2310      	movs	r3, #16
 8004276:	76fb      	strb	r3, [r7, #27]
 8004278:	e057      	b.n	800432a <UART_SetConfig+0x282>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a49      	ldr	r2, [pc, #292]	; (80043a4 <UART_SetConfig+0x2fc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d125      	bne.n	80042d0 <UART_SetConfig+0x228>
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <UART_SetConfig+0x2ec>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004292:	d017      	beq.n	80042c4 <UART_SetConfig+0x21c>
 8004294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004298:	d817      	bhi.n	80042ca <UART_SetConfig+0x222>
 800429a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429e:	d00b      	beq.n	80042b8 <UART_SetConfig+0x210>
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d811      	bhi.n	80042ca <UART_SetConfig+0x222>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <UART_SetConfig+0x20a>
 80042aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ae:	d006      	beq.n	80042be <UART_SetConfig+0x216>
 80042b0:	e00b      	b.n	80042ca <UART_SetConfig+0x222>
 80042b2:	2300      	movs	r3, #0
 80042b4:	76fb      	strb	r3, [r7, #27]
 80042b6:	e038      	b.n	800432a <UART_SetConfig+0x282>
 80042b8:	2302      	movs	r3, #2
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e035      	b.n	800432a <UART_SetConfig+0x282>
 80042be:	2304      	movs	r3, #4
 80042c0:	76fb      	strb	r3, [r7, #27]
 80042c2:	e032      	b.n	800432a <UART_SetConfig+0x282>
 80042c4:	2308      	movs	r3, #8
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e02f      	b.n	800432a <UART_SetConfig+0x282>
 80042ca:	2310      	movs	r3, #16
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e02c      	b.n	800432a <UART_SetConfig+0x282>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2d      	ldr	r2, [pc, #180]	; (800438c <UART_SetConfig+0x2e4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d125      	bne.n	8004326 <UART_SetConfig+0x27e>
 80042da:	4b2e      	ldr	r3, [pc, #184]	; (8004394 <UART_SetConfig+0x2ec>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e8:	d017      	beq.n	800431a <UART_SetConfig+0x272>
 80042ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ee:	d817      	bhi.n	8004320 <UART_SetConfig+0x278>
 80042f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f4:	d00b      	beq.n	800430e <UART_SetConfig+0x266>
 80042f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fa:	d811      	bhi.n	8004320 <UART_SetConfig+0x278>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <UART_SetConfig+0x260>
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d006      	beq.n	8004314 <UART_SetConfig+0x26c>
 8004306:	e00b      	b.n	8004320 <UART_SetConfig+0x278>
 8004308:	2300      	movs	r3, #0
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e00d      	b.n	800432a <UART_SetConfig+0x282>
 800430e:	2302      	movs	r3, #2
 8004310:	76fb      	strb	r3, [r7, #27]
 8004312:	e00a      	b.n	800432a <UART_SetConfig+0x282>
 8004314:	2304      	movs	r3, #4
 8004316:	76fb      	strb	r3, [r7, #27]
 8004318:	e007      	b.n	800432a <UART_SetConfig+0x282>
 800431a:	2308      	movs	r3, #8
 800431c:	76fb      	strb	r3, [r7, #27]
 800431e:	e004      	b.n	800432a <UART_SetConfig+0x282>
 8004320:	2310      	movs	r3, #16
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	e001      	b.n	800432a <UART_SetConfig+0x282>
 8004326:	2310      	movs	r3, #16
 8004328:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <UART_SetConfig+0x2e4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	f040 8087 	bne.w	8004444 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004336:	7efb      	ldrb	r3, [r7, #27]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d837      	bhi.n	80043ac <UART_SetConfig+0x304>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <UART_SetConfig+0x29c>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004369 	.word	0x08004369
 8004348:	080043ad 	.word	0x080043ad
 800434c:	08004371 	.word	0x08004371
 8004350:	080043ad 	.word	0x080043ad
 8004354:	08004377 	.word	0x08004377
 8004358:	080043ad 	.word	0x080043ad
 800435c:	080043ad 	.word	0x080043ad
 8004360:	080043ad 	.word	0x080043ad
 8004364:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7fe fa54 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 800436c:	6178      	str	r0, [r7, #20]
        break;
 800436e:	e022      	b.n	80043b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <UART_SetConfig+0x300>)
 8004372:	617b      	str	r3, [r7, #20]
        break;
 8004374:	e01f      	b.n	80043b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fe f9b5 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 800437a:	6178      	str	r0, [r7, #20]
        break;
 800437c:	e01b      	b.n	80043b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	617b      	str	r3, [r7, #20]
        break;
 8004384:	e017      	b.n	80043b6 <UART_SetConfig+0x30e>
 8004386:	bf00      	nop
 8004388:	efff69f3 	.word	0xefff69f3
 800438c:	40008000 	.word	0x40008000
 8004390:	40013800 	.word	0x40013800
 8004394:	40021000 	.word	0x40021000
 8004398:	40004400 	.word	0x40004400
 800439c:	40004800 	.word	0x40004800
 80043a0:	40004c00 	.word	0x40004c00
 80043a4:	40005000 	.word	0x40005000
 80043a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	76bb      	strb	r3, [r7, #26]
        break;
 80043b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80f1 	beq.w	80045a0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	4413      	add	r3, r2
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d305      	bcc.n	80043da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d902      	bls.n	80043e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	76bb      	strb	r3, [r7, #26]
 80043de:	e0df      	b.n	80045a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	020b      	lsls	r3, r1, #8
 80043f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043f6:	0202      	lsls	r2, r0, #8
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	6849      	ldr	r1, [r1, #4]
 80043fc:	0849      	lsrs	r1, r1, #1
 80043fe:	4608      	mov	r0, r1
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	1814      	adds	r4, r2, r0
 8004406:	eb43 0501 	adc.w	r5, r3, r1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	461a      	mov	r2, r3
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	4620      	mov	r0, r4
 8004416:	4629      	mov	r1, r5
 8004418:	f7fb ff2a 	bl	8000270 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442a:	d308      	bcc.n	800443e <UART_SetConfig+0x396>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004432:	d204      	bcs.n	800443e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	e0b0      	b.n	80045a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	76bb      	strb	r3, [r7, #26]
 8004442:	e0ad      	b.n	80045a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444c:	d15c      	bne.n	8004508 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800444e:	7efb      	ldrb	r3, [r7, #27]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d828      	bhi.n	80044a6 <UART_SetConfig+0x3fe>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <UART_SetConfig+0x3b4>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	08004481 	.word	0x08004481
 8004460:	08004489 	.word	0x08004489
 8004464:	08004491 	.word	0x08004491
 8004468:	080044a7 	.word	0x080044a7
 800446c:	08004497 	.word	0x08004497
 8004470:	080044a7 	.word	0x080044a7
 8004474:	080044a7 	.word	0x080044a7
 8004478:	080044a7 	.word	0x080044a7
 800447c:	0800449f 	.word	0x0800449f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004480:	f7fe f9c8 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8004484:	6178      	str	r0, [r7, #20]
        break;
 8004486:	e013      	b.n	80044b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004488:	f7fe f9da 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 800448c:	6178      	str	r0, [r7, #20]
        break;
 800448e:	e00f      	b.n	80044b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004490:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <UART_SetConfig+0x510>)
 8004492:	617b      	str	r3, [r7, #20]
        break;
 8004494:	e00c      	b.n	80044b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004496:	f7fe f925 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 800449a:	6178      	str	r0, [r7, #20]
        break;
 800449c:	e008      	b.n	80044b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a2:	617b      	str	r3, [r7, #20]
        break;
 80044a4:	e004      	b.n	80044b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	76bb      	strb	r3, [r7, #26]
        break;
 80044ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d074      	beq.n	80045a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	005a      	lsls	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d916      	bls.n	8004502 <UART_SetConfig+0x45a>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044da:	d212      	bcs.n	8004502 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f023 030f 	bic.w	r3, r3, #15
 80044e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	89fb      	ldrh	r3, [r7, #14]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	89fa      	ldrh	r2, [r7, #14]
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	e04e      	b.n	80045a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	76bb      	strb	r3, [r7, #26]
 8004506:	e04b      	b.n	80045a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004508:	7efb      	ldrb	r3, [r7, #27]
 800450a:	2b08      	cmp	r3, #8
 800450c:	d827      	bhi.n	800455e <UART_SetConfig+0x4b6>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0x46c>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004539 	.word	0x08004539
 8004518:	08004541 	.word	0x08004541
 800451c:	08004549 	.word	0x08004549
 8004520:	0800455f 	.word	0x0800455f
 8004524:	0800454f 	.word	0x0800454f
 8004528:	0800455f 	.word	0x0800455f
 800452c:	0800455f 	.word	0x0800455f
 8004530:	0800455f 	.word	0x0800455f
 8004534:	08004557 	.word	0x08004557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004538:	f7fe f96c 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 800453c:	6178      	str	r0, [r7, #20]
        break;
 800453e:	e013      	b.n	8004568 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7fe f97e 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8004544:	6178      	str	r0, [r7, #20]
        break;
 8004546:	e00f      	b.n	8004568 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <UART_SetConfig+0x510>)
 800454a:	617b      	str	r3, [r7, #20]
        break;
 800454c:	e00c      	b.n	8004568 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454e:	f7fe f8c9 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 8004552:	6178      	str	r0, [r7, #20]
        break;
 8004554:	e008      	b.n	8004568 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455a:	617b      	str	r3, [r7, #20]
        break;
 800455c:	e004      	b.n	8004568 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	76bb      	strb	r3, [r7, #26]
        break;
 8004566:	bf00      	nop
    }

    if (pclk != 0U)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d018      	beq.n	80045a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	085a      	lsrs	r2, r3, #1
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	441a      	add	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	b29b      	uxth	r3, r3
 8004582:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	d908      	bls.n	800459c <UART_SetConfig+0x4f4>
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d204      	bcs.n	800459c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	e001      	b.n	80045a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bdb0      	pop	{r4, r5, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	00f42400 	.word	0x00f42400

080045bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01a      	beq.n	80046d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ba:	d10a      	bne.n	80046d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
  }
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af02      	add	r7, sp, #8
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800470e:	f7fc fe5f 	bl	80013d0 <HAL_GetTick>
 8004712:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b08      	cmp	r3, #8
 8004720:	d10e      	bne.n	8004740 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004722:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f82a 	bl	800478a <UART_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e020      	b.n	8004782 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b04      	cmp	r3, #4
 800474c:	d10e      	bne.n	800476c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f814 	bl	800478a <UART_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e00a      	b.n	8004782 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479a:	e05d      	b.n	8004858 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a2:	d059      	beq.n	8004858 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a4:	f7fc fe14 	bl	80013d0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d302      	bcc.n	80047ba <UART_WaitOnFlagUntilTimeout+0x30>
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d11b      	bne.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e042      	b.n	8004878 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02b      	beq.n	8004858 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d123      	bne.n	8004858 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004818:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004828:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e00f      	b.n	8004878 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4013      	ands	r3, r2
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	429a      	cmp	r2, r3
 8004874:	d092      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004896:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff fbd8 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004902:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff fbb5 	bl	8004080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004938:	4904      	ldr	r1, [pc, #16]	; (800494c <MX_FATFS_Init+0x18>)
 800493a:	4805      	ldr	r0, [pc, #20]	; (8004950 <MX_FATFS_Init+0x1c>)
 800493c:	f000 f8b0 	bl	8004aa0 <FATFS_LinkDriver>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <MX_FATFS_Init+0x20>)
 8004946:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200003bc 	.word	0x200003bc
 8004950:	2000000c 	.word	0x2000000c
 8004954:	200003c0 	.word	0x200003c0

08004958 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <USER_initialize+0x24>)
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004968:	4b04      	ldr	r3, [pc, #16]	; (800497c <USER_initialize+0x24>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000009 	.word	0x20000009

08004980 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <USER_status+0x24>)
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <USER_status+0x24>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000009 	.word	0x20000009

080049a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4603      	mov	r3, r0
 80049b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80049b8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4603      	mov	r3, r0
 80049d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80049d6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	603a      	str	r2, [r7, #0]
 80049ee:	71fb      	strb	r3, [r7, #7]
 80049f0:	460b      	mov	r3, r1
 80049f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
    return res;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a20:	7a5b      	ldrb	r3, [r3, #9]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d131      	bne.n	8004a8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004a28:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a2a:	7a5b      	ldrb	r3, [r3, #9]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004a36:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a38:	7a5b      	ldrb	r3, [r3, #9]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a48:	7a5b      	ldrb	r3, [r3, #9]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a50:	4413      	add	r3, r2
 8004a52:	79fa      	ldrb	r2, [r7, #7]
 8004a54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004a56:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a58:	7a5b      	ldrb	r3, [r3, #9]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	b2d1      	uxtb	r1, r2
 8004a60:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <FATFS_LinkDriverEx+0x94>)
 8004a62:	7251      	strb	r1, [r2, #9]
 8004a64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004a66:	7dbb      	ldrb	r3, [r7, #22]
 8004a68:	3330      	adds	r3, #48	; 0x30
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	3301      	adds	r3, #1
 8004a74:	223a      	movs	r2, #58	; 0x3a
 8004a76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	222f      	movs	r2, #47	; 0x2f
 8004a7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	3303      	adds	r3, #3
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	200000b8 	.word	0x200000b8

08004aa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004aaa:	2200      	movs	r2, #0
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ffaa 	bl	8004a08 <FATFS_LinkDriverEx>
 8004ab4:	4603      	mov	r3, r0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <__errno>:
 8004ac0:	4b01      	ldr	r3, [pc, #4]	; (8004ac8 <__errno+0x8>)
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000020 	.word	0x20000020

08004acc <__libc_init_array>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4d0d      	ldr	r5, [pc, #52]	; (8004b04 <__libc_init_array+0x38>)
 8004ad0:	4c0d      	ldr	r4, [pc, #52]	; (8004b08 <__libc_init_array+0x3c>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	42a6      	cmp	r6, r4
 8004ada:	d109      	bne.n	8004af0 <__libc_init_array+0x24>
 8004adc:	4d0b      	ldr	r5, [pc, #44]	; (8004b0c <__libc_init_array+0x40>)
 8004ade:	4c0c      	ldr	r4, [pc, #48]	; (8004b10 <__libc_init_array+0x44>)
 8004ae0:	f000 ff76 	bl	80059d0 <_init>
 8004ae4:	1b64      	subs	r4, r4, r5
 8004ae6:	10a4      	asrs	r4, r4, #2
 8004ae8:	2600      	movs	r6, #0
 8004aea:	42a6      	cmp	r6, r4
 8004aec:	d105      	bne.n	8004afa <__libc_init_array+0x2e>
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af4:	4798      	blx	r3
 8004af6:	3601      	adds	r6, #1
 8004af8:	e7ee      	b.n	8004ad8 <__libc_init_array+0xc>
 8004afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afe:	4798      	blx	r3
 8004b00:	3601      	adds	r6, #1
 8004b02:	e7f2      	b.n	8004aea <__libc_init_array+0x1e>
 8004b04:	08005ae0 	.word	0x08005ae0
 8004b08:	08005ae0 	.word	0x08005ae0
 8004b0c:	08005ae0 	.word	0x08005ae0
 8004b10:	08005ae4 	.word	0x08005ae4

08004b14 <memset>:
 8004b14:	4402      	add	r2, r0
 8004b16:	4603      	mov	r3, r0
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <memset+0xa>
 8004b1c:	4770      	bx	lr
 8004b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b22:	e7f9      	b.n	8004b18 <memset+0x4>

08004b24 <iprintf>:
 8004b24:	b40f      	push	{r0, r1, r2, r3}
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <iprintf+0x2c>)
 8004b28:	b513      	push	{r0, r1, r4, lr}
 8004b2a:	681c      	ldr	r4, [r3, #0]
 8004b2c:	b124      	cbz	r4, 8004b38 <iprintf+0x14>
 8004b2e:	69a3      	ldr	r3, [r4, #24]
 8004b30:	b913      	cbnz	r3, 8004b38 <iprintf+0x14>
 8004b32:	4620      	mov	r0, r4
 8004b34:	f000 f866 	bl	8004c04 <__sinit>
 8004b38:	ab05      	add	r3, sp, #20
 8004b3a:	9a04      	ldr	r2, [sp, #16]
 8004b3c:	68a1      	ldr	r1, [r4, #8]
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 f983 	bl	8004e4c <_vfiprintf_r>
 8004b46:	b002      	add	sp, #8
 8004b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b4c:	b004      	add	sp, #16
 8004b4e:	4770      	bx	lr
 8004b50:	20000020 	.word	0x20000020

08004b54 <std>:
 8004b54:	2300      	movs	r3, #0
 8004b56:	b510      	push	{r4, lr}
 8004b58:	4604      	mov	r4, r0
 8004b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b62:	6083      	str	r3, [r0, #8]
 8004b64:	8181      	strh	r1, [r0, #12]
 8004b66:	6643      	str	r3, [r0, #100]	; 0x64
 8004b68:	81c2      	strh	r2, [r0, #14]
 8004b6a:	6183      	str	r3, [r0, #24]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	2208      	movs	r2, #8
 8004b70:	305c      	adds	r0, #92	; 0x5c
 8004b72:	f7ff ffcf 	bl	8004b14 <memset>
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <std+0x38>)
 8004b78:	6263      	str	r3, [r4, #36]	; 0x24
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <std+0x3c>)
 8004b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b7e:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <std+0x40>)
 8004b80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <std+0x44>)
 8004b84:	6224      	str	r4, [r4, #32]
 8004b86:	6323      	str	r3, [r4, #48]	; 0x30
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	bf00      	nop
 8004b8c:	080053f5 	.word	0x080053f5
 8004b90:	08005417 	.word	0x08005417
 8004b94:	0800544f 	.word	0x0800544f
 8004b98:	08005473 	.word	0x08005473

08004b9c <_cleanup_r>:
 8004b9c:	4901      	ldr	r1, [pc, #4]	; (8004ba4 <_cleanup_r+0x8>)
 8004b9e:	f000 b8af 	b.w	8004d00 <_fwalk_reent>
 8004ba2:	bf00      	nop
 8004ba4:	0800574d 	.word	0x0800574d

08004ba8 <__sfmoreglue>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	1e4a      	subs	r2, r1, #1
 8004bac:	2568      	movs	r5, #104	; 0x68
 8004bae:	4355      	muls	r5, r2
 8004bb0:	460e      	mov	r6, r1
 8004bb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bb6:	f000 f8c5 	bl	8004d44 <_malloc_r>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	b140      	cbz	r0, 8004bd0 <__sfmoreglue+0x28>
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	e9c0 1600 	strd	r1, r6, [r0]
 8004bc4:	300c      	adds	r0, #12
 8004bc6:	60a0      	str	r0, [r4, #8]
 8004bc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bcc:	f7ff ffa2 	bl	8004b14 <memset>
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}

08004bd4 <__sfp_lock_acquire>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	; (8004bdc <__sfp_lock_acquire+0x8>)
 8004bd6:	f000 b8b3 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20002434 	.word	0x20002434

08004be0 <__sfp_lock_release>:
 8004be0:	4801      	ldr	r0, [pc, #4]	; (8004be8 <__sfp_lock_release+0x8>)
 8004be2:	f000 b8ae 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004be6:	bf00      	nop
 8004be8:	20002434 	.word	0x20002434

08004bec <__sinit_lock_acquire>:
 8004bec:	4801      	ldr	r0, [pc, #4]	; (8004bf4 <__sinit_lock_acquire+0x8>)
 8004bee:	f000 b8a7 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	2000242f 	.word	0x2000242f

08004bf8 <__sinit_lock_release>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__sinit_lock_release+0x8>)
 8004bfa:	f000 b8a2 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004bfe:	bf00      	nop
 8004c00:	2000242f 	.word	0x2000242f

08004c04 <__sinit>:
 8004c04:	b510      	push	{r4, lr}
 8004c06:	4604      	mov	r4, r0
 8004c08:	f7ff fff0 	bl	8004bec <__sinit_lock_acquire>
 8004c0c:	69a3      	ldr	r3, [r4, #24]
 8004c0e:	b11b      	cbz	r3, 8004c18 <__sinit+0x14>
 8004c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c14:	f7ff bff0 	b.w	8004bf8 <__sinit_lock_release>
 8004c18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c1c:	6523      	str	r3, [r4, #80]	; 0x50
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <__sinit+0x68>)
 8004c20:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <__sinit+0x6c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c26:	42a3      	cmp	r3, r4
 8004c28:	bf04      	itt	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	61a3      	streq	r3, [r4, #24]
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f000 f820 	bl	8004c74 <__sfp>
 8004c34:	6060      	str	r0, [r4, #4]
 8004c36:	4620      	mov	r0, r4
 8004c38:	f000 f81c 	bl	8004c74 <__sfp>
 8004c3c:	60a0      	str	r0, [r4, #8]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 f818 	bl	8004c74 <__sfp>
 8004c44:	2200      	movs	r2, #0
 8004c46:	60e0      	str	r0, [r4, #12]
 8004c48:	2104      	movs	r1, #4
 8004c4a:	6860      	ldr	r0, [r4, #4]
 8004c4c:	f7ff ff82 	bl	8004b54 <std>
 8004c50:	68a0      	ldr	r0, [r4, #8]
 8004c52:	2201      	movs	r2, #1
 8004c54:	2109      	movs	r1, #9
 8004c56:	f7ff ff7d 	bl	8004b54 <std>
 8004c5a:	68e0      	ldr	r0, [r4, #12]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	2112      	movs	r1, #18
 8004c60:	f7ff ff78 	bl	8004b54 <std>
 8004c64:	2301      	movs	r3, #1
 8004c66:	61a3      	str	r3, [r4, #24]
 8004c68:	e7d2      	b.n	8004c10 <__sinit+0xc>
 8004c6a:	bf00      	nop
 8004c6c:	08005a40 	.word	0x08005a40
 8004c70:	08004b9d 	.word	0x08004b9d

08004c74 <__sfp>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	4607      	mov	r7, r0
 8004c78:	f7ff ffac 	bl	8004bd4 <__sfp_lock_acquire>
 8004c7c:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <__sfp+0x84>)
 8004c7e:	681e      	ldr	r6, [r3, #0]
 8004c80:	69b3      	ldr	r3, [r6, #24]
 8004c82:	b913      	cbnz	r3, 8004c8a <__sfp+0x16>
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7ff ffbd 	bl	8004c04 <__sinit>
 8004c8a:	3648      	adds	r6, #72	; 0x48
 8004c8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	d503      	bpl.n	8004c9c <__sfp+0x28>
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	b30b      	cbz	r3, 8004cdc <__sfp+0x68>
 8004c98:	6836      	ldr	r6, [r6, #0]
 8004c9a:	e7f7      	b.n	8004c8c <__sfp+0x18>
 8004c9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ca0:	b9d5      	cbnz	r5, 8004cd8 <__sfp+0x64>
 8004ca2:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <__sfp+0x88>)
 8004ca4:	60e3      	str	r3, [r4, #12]
 8004ca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004caa:	6665      	str	r5, [r4, #100]	; 0x64
 8004cac:	f000 f847 	bl	8004d3e <__retarget_lock_init_recursive>
 8004cb0:	f7ff ff96 	bl	8004be0 <__sfp_lock_release>
 8004cb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004cbc:	6025      	str	r5, [r4, #0]
 8004cbe:	61a5      	str	r5, [r4, #24]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cc8:	f7ff ff24 	bl	8004b14 <memset>
 8004ccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004cd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd8:	3468      	adds	r4, #104	; 0x68
 8004cda:	e7d9      	b.n	8004c90 <__sfp+0x1c>
 8004cdc:	2104      	movs	r1, #4
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f7ff ff62 	bl	8004ba8 <__sfmoreglue>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	6030      	str	r0, [r6, #0]
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d1d5      	bne.n	8004c98 <__sfp+0x24>
 8004cec:	f7ff ff78 	bl	8004be0 <__sfp_lock_release>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	e7ee      	b.n	8004cd4 <__sfp+0x60>
 8004cf6:	bf00      	nop
 8004cf8:	08005a40 	.word	0x08005a40
 8004cfc:	ffff0001 	.word	0xffff0001

08004d00 <_fwalk_reent>:
 8004d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d04:	4606      	mov	r6, r0
 8004d06:	4688      	mov	r8, r1
 8004d08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d0c:	2700      	movs	r7, #0
 8004d0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d12:	f1b9 0901 	subs.w	r9, r9, #1
 8004d16:	d505      	bpl.n	8004d24 <_fwalk_reent+0x24>
 8004d18:	6824      	ldr	r4, [r4, #0]
 8004d1a:	2c00      	cmp	r4, #0
 8004d1c:	d1f7      	bne.n	8004d0e <_fwalk_reent+0xe>
 8004d1e:	4638      	mov	r0, r7
 8004d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d24:	89ab      	ldrh	r3, [r5, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d907      	bls.n	8004d3a <_fwalk_reent+0x3a>
 8004d2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	d003      	beq.n	8004d3a <_fwalk_reent+0x3a>
 8004d32:	4629      	mov	r1, r5
 8004d34:	4630      	mov	r0, r6
 8004d36:	47c0      	blx	r8
 8004d38:	4307      	orrs	r7, r0
 8004d3a:	3568      	adds	r5, #104	; 0x68
 8004d3c:	e7e9      	b.n	8004d12 <_fwalk_reent+0x12>

08004d3e <__retarget_lock_init_recursive>:
 8004d3e:	4770      	bx	lr

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <_malloc_r>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	1ccd      	adds	r5, r1, #3
 8004d48:	f025 0503 	bic.w	r5, r5, #3
 8004d4c:	3508      	adds	r5, #8
 8004d4e:	2d0c      	cmp	r5, #12
 8004d50:	bf38      	it	cc
 8004d52:	250c      	movcc	r5, #12
 8004d54:	2d00      	cmp	r5, #0
 8004d56:	4606      	mov	r6, r0
 8004d58:	db01      	blt.n	8004d5e <_malloc_r+0x1a>
 8004d5a:	42a9      	cmp	r1, r5
 8004d5c:	d903      	bls.n	8004d66 <_malloc_r+0x22>
 8004d5e:	230c      	movs	r3, #12
 8004d60:	6033      	str	r3, [r6, #0]
 8004d62:	2000      	movs	r0, #0
 8004d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d66:	f000 fda3 	bl	80058b0 <__malloc_lock>
 8004d6a:	4921      	ldr	r1, [pc, #132]	; (8004df0 <_malloc_r+0xac>)
 8004d6c:	680a      	ldr	r2, [r1, #0]
 8004d6e:	4614      	mov	r4, r2
 8004d70:	b99c      	cbnz	r4, 8004d9a <_malloc_r+0x56>
 8004d72:	4f20      	ldr	r7, [pc, #128]	; (8004df4 <_malloc_r+0xb0>)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	b923      	cbnz	r3, 8004d82 <_malloc_r+0x3e>
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f000 fb2a 	bl	80053d4 <_sbrk_r>
 8004d80:	6038      	str	r0, [r7, #0]
 8004d82:	4629      	mov	r1, r5
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 fb25 	bl	80053d4 <_sbrk_r>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	d123      	bne.n	8004dd6 <_malloc_r+0x92>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	4630      	mov	r0, r6
 8004d94:	f000 fd92 	bl	80058bc <__malloc_unlock>
 8004d98:	e7e3      	b.n	8004d62 <_malloc_r+0x1e>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	1b5b      	subs	r3, r3, r5
 8004d9e:	d417      	bmi.n	8004dd0 <_malloc_r+0x8c>
 8004da0:	2b0b      	cmp	r3, #11
 8004da2:	d903      	bls.n	8004dac <_malloc_r+0x68>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	441c      	add	r4, r3
 8004da8:	6025      	str	r5, [r4, #0]
 8004daa:	e004      	b.n	8004db6 <_malloc_r+0x72>
 8004dac:	6863      	ldr	r3, [r4, #4]
 8004dae:	42a2      	cmp	r2, r4
 8004db0:	bf0c      	ite	eq
 8004db2:	600b      	streq	r3, [r1, #0]
 8004db4:	6053      	strne	r3, [r2, #4]
 8004db6:	4630      	mov	r0, r6
 8004db8:	f000 fd80 	bl	80058bc <__malloc_unlock>
 8004dbc:	f104 000b 	add.w	r0, r4, #11
 8004dc0:	1d23      	adds	r3, r4, #4
 8004dc2:	f020 0007 	bic.w	r0, r0, #7
 8004dc6:	1ac2      	subs	r2, r0, r3
 8004dc8:	d0cc      	beq.n	8004d64 <_malloc_r+0x20>
 8004dca:	1a1b      	subs	r3, r3, r0
 8004dcc:	50a3      	str	r3, [r4, r2]
 8004dce:	e7c9      	b.n	8004d64 <_malloc_r+0x20>
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	6864      	ldr	r4, [r4, #4]
 8004dd4:	e7cc      	b.n	8004d70 <_malloc_r+0x2c>
 8004dd6:	1cc4      	adds	r4, r0, #3
 8004dd8:	f024 0403 	bic.w	r4, r4, #3
 8004ddc:	42a0      	cmp	r0, r4
 8004dde:	d0e3      	beq.n	8004da8 <_malloc_r+0x64>
 8004de0:	1a21      	subs	r1, r4, r0
 8004de2:	4630      	mov	r0, r6
 8004de4:	f000 faf6 	bl	80053d4 <_sbrk_r>
 8004de8:	3001      	adds	r0, #1
 8004dea:	d1dd      	bne.n	8004da8 <_malloc_r+0x64>
 8004dec:	e7cf      	b.n	8004d8e <_malloc_r+0x4a>
 8004dee:	bf00      	nop
 8004df0:	200000c4 	.word	0x200000c4
 8004df4:	200000c8 	.word	0x200000c8

08004df8 <__sfputc_r>:
 8004df8:	6893      	ldr	r3, [r2, #8]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	b410      	push	{r4}
 8004e00:	6093      	str	r3, [r2, #8]
 8004e02:	da08      	bge.n	8004e16 <__sfputc_r+0x1e>
 8004e04:	6994      	ldr	r4, [r2, #24]
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	db01      	blt.n	8004e0e <__sfputc_r+0x16>
 8004e0a:	290a      	cmp	r1, #10
 8004e0c:	d103      	bne.n	8004e16 <__sfputc_r+0x1e>
 8004e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e12:	f000 bb33 	b.w	800547c <__swbuf_r>
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	1c58      	adds	r0, r3, #1
 8004e1a:	6010      	str	r0, [r2, #0]
 8004e1c:	7019      	strb	r1, [r3, #0]
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <__sfputs_r>:
 8004e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e28:	4606      	mov	r6, r0
 8004e2a:	460f      	mov	r7, r1
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	18d5      	adds	r5, r2, r3
 8004e30:	42ac      	cmp	r4, r5
 8004e32:	d101      	bne.n	8004e38 <__sfputs_r+0x12>
 8004e34:	2000      	movs	r0, #0
 8004e36:	e007      	b.n	8004e48 <__sfputs_r+0x22>
 8004e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff ffda 	bl	8004df8 <__sfputc_r>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d1f3      	bne.n	8004e30 <__sfputs_r+0xa>
 8004e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e4c <_vfiprintf_r>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	460d      	mov	r5, r1
 8004e52:	b09d      	sub	sp, #116	; 0x74
 8004e54:	4614      	mov	r4, r2
 8004e56:	4698      	mov	r8, r3
 8004e58:	4606      	mov	r6, r0
 8004e5a:	b118      	cbz	r0, 8004e64 <_vfiprintf_r+0x18>
 8004e5c:	6983      	ldr	r3, [r0, #24]
 8004e5e:	b90b      	cbnz	r3, 8004e64 <_vfiprintf_r+0x18>
 8004e60:	f7ff fed0 	bl	8004c04 <__sinit>
 8004e64:	4b89      	ldr	r3, [pc, #548]	; (800508c <_vfiprintf_r+0x240>)
 8004e66:	429d      	cmp	r5, r3
 8004e68:	d11b      	bne.n	8004ea2 <_vfiprintf_r+0x56>
 8004e6a:	6875      	ldr	r5, [r6, #4]
 8004e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e6e:	07d9      	lsls	r1, r3, #31
 8004e70:	d405      	bmi.n	8004e7e <_vfiprintf_r+0x32>
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	059a      	lsls	r2, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_vfiprintf_r+0x32>
 8004e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e7a:	f7ff ff61 	bl	8004d40 <__retarget_lock_acquire_recursive>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	d501      	bpl.n	8004e88 <_vfiprintf_r+0x3c>
 8004e84:	692b      	ldr	r3, [r5, #16]
 8004e86:	b9eb      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x78>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f000 fb5a 	bl	8005544 <__swsetup_r>
 8004e90:	b1c0      	cbz	r0, 8004ec4 <_vfiprintf_r+0x78>
 8004e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e94:	07dc      	lsls	r4, r3, #31
 8004e96:	d50e      	bpl.n	8004eb6 <_vfiprintf_r+0x6a>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	b01d      	add	sp, #116	; 0x74
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	4b7b      	ldr	r3, [pc, #492]	; (8005090 <_vfiprintf_r+0x244>)
 8004ea4:	429d      	cmp	r5, r3
 8004ea6:	d101      	bne.n	8004eac <_vfiprintf_r+0x60>
 8004ea8:	68b5      	ldr	r5, [r6, #8]
 8004eaa:	e7df      	b.n	8004e6c <_vfiprintf_r+0x20>
 8004eac:	4b79      	ldr	r3, [pc, #484]	; (8005094 <_vfiprintf_r+0x248>)
 8004eae:	429d      	cmp	r5, r3
 8004eb0:	bf08      	it	eq
 8004eb2:	68f5      	ldreq	r5, [r6, #12]
 8004eb4:	e7da      	b.n	8004e6c <_vfiprintf_r+0x20>
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	0598      	lsls	r0, r3, #22
 8004eba:	d4ed      	bmi.n	8004e98 <_vfiprintf_r+0x4c>
 8004ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ebe:	f7ff ff40 	bl	8004d42 <__retarget_lock_release_recursive>
 8004ec2:	e7e9      	b.n	8004e98 <_vfiprintf_r+0x4c>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec8:	2320      	movs	r3, #32
 8004eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed2:	2330      	movs	r3, #48	; 0x30
 8004ed4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005098 <_vfiprintf_r+0x24c>
 8004ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004edc:	f04f 0901 	mov.w	r9, #1
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	469a      	mov	sl, r3
 8004ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee8:	b10a      	cbz	r2, 8004eee <_vfiprintf_r+0xa2>
 8004eea:	2a25      	cmp	r2, #37	; 0x25
 8004eec:	d1f9      	bne.n	8004ee2 <_vfiprintf_r+0x96>
 8004eee:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef2:	d00b      	beq.n	8004f0c <_vfiprintf_r+0xc0>
 8004ef4:	465b      	mov	r3, fp
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff ff93 	bl	8004e26 <__sfputs_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	f000 80aa 	beq.w	800505a <_vfiprintf_r+0x20e>
 8004f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f08:	445a      	add	r2, fp
 8004f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a2 	beq.w	800505a <_vfiprintf_r+0x20e>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f20:	f10a 0a01 	add.w	sl, sl, #1
 8004f24:	9304      	str	r3, [sp, #16]
 8004f26:	9307      	str	r3, [sp, #28]
 8004f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2e:	4654      	mov	r4, sl
 8004f30:	2205      	movs	r2, #5
 8004f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f36:	4858      	ldr	r0, [pc, #352]	; (8005098 <_vfiprintf_r+0x24c>)
 8004f38:	f7fb f94a 	bl	80001d0 <memchr>
 8004f3c:	9a04      	ldr	r2, [sp, #16]
 8004f3e:	b9d8      	cbnz	r0, 8004f78 <_vfiprintf_r+0x12c>
 8004f40:	06d1      	lsls	r1, r2, #27
 8004f42:	bf44      	itt	mi
 8004f44:	2320      	movmi	r3, #32
 8004f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f4a:	0713      	lsls	r3, r2, #28
 8004f4c:	bf44      	itt	mi
 8004f4e:	232b      	movmi	r3, #43	; 0x2b
 8004f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f54:	f89a 3000 	ldrb.w	r3, [sl]
 8004f58:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5a:	d015      	beq.n	8004f88 <_vfiprintf_r+0x13c>
 8004f5c:	9a07      	ldr	r2, [sp, #28]
 8004f5e:	4654      	mov	r4, sl
 8004f60:	2000      	movs	r0, #0
 8004f62:	f04f 0c0a 	mov.w	ip, #10
 8004f66:	4621      	mov	r1, r4
 8004f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6c:	3b30      	subs	r3, #48	; 0x30
 8004f6e:	2b09      	cmp	r3, #9
 8004f70:	d94e      	bls.n	8005010 <_vfiprintf_r+0x1c4>
 8004f72:	b1b0      	cbz	r0, 8004fa2 <_vfiprintf_r+0x156>
 8004f74:	9207      	str	r2, [sp, #28]
 8004f76:	e014      	b.n	8004fa2 <_vfiprintf_r+0x156>
 8004f78:	eba0 0308 	sub.w	r3, r0, r8
 8004f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	46a2      	mov	sl, r4
 8004f86:	e7d2      	b.n	8004f2e <_vfiprintf_r+0xe2>
 8004f88:	9b03      	ldr	r3, [sp, #12]
 8004f8a:	1d19      	adds	r1, r3, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	9103      	str	r1, [sp, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfbb      	ittet	lt
 8004f94:	425b      	neglt	r3, r3
 8004f96:	f042 0202 	orrlt.w	r2, r2, #2
 8004f9a:	9307      	strge	r3, [sp, #28]
 8004f9c:	9307      	strlt	r3, [sp, #28]
 8004f9e:	bfb8      	it	lt
 8004fa0:	9204      	strlt	r2, [sp, #16]
 8004fa2:	7823      	ldrb	r3, [r4, #0]
 8004fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa6:	d10c      	bne.n	8004fc2 <_vfiprintf_r+0x176>
 8004fa8:	7863      	ldrb	r3, [r4, #1]
 8004faa:	2b2a      	cmp	r3, #42	; 0x2a
 8004fac:	d135      	bne.n	800501a <_vfiprintf_r+0x1ce>
 8004fae:	9b03      	ldr	r3, [sp, #12]
 8004fb0:	1d1a      	adds	r2, r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	9203      	str	r2, [sp, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bfb8      	it	lt
 8004fba:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fbe:	3402      	adds	r4, #2
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050a8 <_vfiprintf_r+0x25c>
 8004fc6:	7821      	ldrb	r1, [r4, #0]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	4650      	mov	r0, sl
 8004fcc:	f7fb f900 	bl	80001d0 <memchr>
 8004fd0:	b140      	cbz	r0, 8004fe4 <_vfiprintf_r+0x198>
 8004fd2:	2340      	movs	r3, #64	; 0x40
 8004fd4:	eba0 000a 	sub.w	r0, r0, sl
 8004fd8:	fa03 f000 	lsl.w	r0, r3, r0
 8004fdc:	9b04      	ldr	r3, [sp, #16]
 8004fde:	4303      	orrs	r3, r0
 8004fe0:	3401      	adds	r4, #1
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe8:	482c      	ldr	r0, [pc, #176]	; (800509c <_vfiprintf_r+0x250>)
 8004fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fee:	2206      	movs	r2, #6
 8004ff0:	f7fb f8ee 	bl	80001d0 <memchr>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d03f      	beq.n	8005078 <_vfiprintf_r+0x22c>
 8004ff8:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <_vfiprintf_r+0x254>)
 8004ffa:	bb1b      	cbnz	r3, 8005044 <_vfiprintf_r+0x1f8>
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	3307      	adds	r3, #7
 8005000:	f023 0307 	bic.w	r3, r3, #7
 8005004:	3308      	adds	r3, #8
 8005006:	9303      	str	r3, [sp, #12]
 8005008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500a:	443b      	add	r3, r7
 800500c:	9309      	str	r3, [sp, #36]	; 0x24
 800500e:	e767      	b.n	8004ee0 <_vfiprintf_r+0x94>
 8005010:	fb0c 3202 	mla	r2, ip, r2, r3
 8005014:	460c      	mov	r4, r1
 8005016:	2001      	movs	r0, #1
 8005018:	e7a5      	b.n	8004f66 <_vfiprintf_r+0x11a>
 800501a:	2300      	movs	r3, #0
 800501c:	3401      	adds	r4, #1
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	4619      	mov	r1, r3
 8005022:	f04f 0c0a 	mov.w	ip, #10
 8005026:	4620      	mov	r0, r4
 8005028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800502c:	3a30      	subs	r2, #48	; 0x30
 800502e:	2a09      	cmp	r2, #9
 8005030:	d903      	bls.n	800503a <_vfiprintf_r+0x1ee>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0c5      	beq.n	8004fc2 <_vfiprintf_r+0x176>
 8005036:	9105      	str	r1, [sp, #20]
 8005038:	e7c3      	b.n	8004fc2 <_vfiprintf_r+0x176>
 800503a:	fb0c 2101 	mla	r1, ip, r1, r2
 800503e:	4604      	mov	r4, r0
 8005040:	2301      	movs	r3, #1
 8005042:	e7f0      	b.n	8005026 <_vfiprintf_r+0x1da>
 8005044:	ab03      	add	r3, sp, #12
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	462a      	mov	r2, r5
 800504a:	4b16      	ldr	r3, [pc, #88]	; (80050a4 <_vfiprintf_r+0x258>)
 800504c:	a904      	add	r1, sp, #16
 800504e:	4630      	mov	r0, r6
 8005050:	f3af 8000 	nop.w
 8005054:	4607      	mov	r7, r0
 8005056:	1c78      	adds	r0, r7, #1
 8005058:	d1d6      	bne.n	8005008 <_vfiprintf_r+0x1bc>
 800505a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800505c:	07d9      	lsls	r1, r3, #31
 800505e:	d405      	bmi.n	800506c <_vfiprintf_r+0x220>
 8005060:	89ab      	ldrh	r3, [r5, #12]
 8005062:	059a      	lsls	r2, r3, #22
 8005064:	d402      	bmi.n	800506c <_vfiprintf_r+0x220>
 8005066:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005068:	f7ff fe6b 	bl	8004d42 <__retarget_lock_release_recursive>
 800506c:	89ab      	ldrh	r3, [r5, #12]
 800506e:	065b      	lsls	r3, r3, #25
 8005070:	f53f af12 	bmi.w	8004e98 <_vfiprintf_r+0x4c>
 8005074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005076:	e711      	b.n	8004e9c <_vfiprintf_r+0x50>
 8005078:	ab03      	add	r3, sp, #12
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	462a      	mov	r2, r5
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <_vfiprintf_r+0x258>)
 8005080:	a904      	add	r1, sp, #16
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f880 	bl	8005188 <_printf_i>
 8005088:	e7e4      	b.n	8005054 <_vfiprintf_r+0x208>
 800508a:	bf00      	nop
 800508c:	08005a64 	.word	0x08005a64
 8005090:	08005a84 	.word	0x08005a84
 8005094:	08005a44 	.word	0x08005a44
 8005098:	08005aa4 	.word	0x08005aa4
 800509c:	08005aae 	.word	0x08005aae
 80050a0:	00000000 	.word	0x00000000
 80050a4:	08004e27 	.word	0x08004e27
 80050a8:	08005aaa 	.word	0x08005aaa

080050ac <_printf_common>:
 80050ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	4616      	mov	r6, r2
 80050b2:	4699      	mov	r9, r3
 80050b4:	688a      	ldr	r2, [r1, #8]
 80050b6:	690b      	ldr	r3, [r1, #16]
 80050b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050bc:	4293      	cmp	r3, r2
 80050be:	bfb8      	it	lt
 80050c0:	4613      	movlt	r3, r2
 80050c2:	6033      	str	r3, [r6, #0]
 80050c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c8:	4607      	mov	r7, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	b10a      	cbz	r2, 80050d2 <_printf_common+0x26>
 80050ce:	3301      	adds	r3, #1
 80050d0:	6033      	str	r3, [r6, #0]
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	0699      	lsls	r1, r3, #26
 80050d6:	bf42      	ittt	mi
 80050d8:	6833      	ldrmi	r3, [r6, #0]
 80050da:	3302      	addmi	r3, #2
 80050dc:	6033      	strmi	r3, [r6, #0]
 80050de:	6825      	ldr	r5, [r4, #0]
 80050e0:	f015 0506 	ands.w	r5, r5, #6
 80050e4:	d106      	bne.n	80050f4 <_printf_common+0x48>
 80050e6:	f104 0a19 	add.w	sl, r4, #25
 80050ea:	68e3      	ldr	r3, [r4, #12]
 80050ec:	6832      	ldr	r2, [r6, #0]
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	42ab      	cmp	r3, r5
 80050f2:	dc26      	bgt.n	8005142 <_printf_common+0x96>
 80050f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050f8:	1e13      	subs	r3, r2, #0
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	bf18      	it	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	0692      	lsls	r2, r2, #26
 8005102:	d42b      	bmi.n	800515c <_printf_common+0xb0>
 8005104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005108:	4649      	mov	r1, r9
 800510a:	4638      	mov	r0, r7
 800510c:	47c0      	blx	r8
 800510e:	3001      	adds	r0, #1
 8005110:	d01e      	beq.n	8005150 <_printf_common+0xa4>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	68e5      	ldr	r5, [r4, #12]
 8005116:	6832      	ldr	r2, [r6, #0]
 8005118:	f003 0306 	and.w	r3, r3, #6
 800511c:	2b04      	cmp	r3, #4
 800511e:	bf08      	it	eq
 8005120:	1aad      	subeq	r5, r5, r2
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	6922      	ldr	r2, [r4, #16]
 8005126:	bf0c      	ite	eq
 8005128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800512c:	2500      	movne	r5, #0
 800512e:	4293      	cmp	r3, r2
 8005130:	bfc4      	itt	gt
 8005132:	1a9b      	subgt	r3, r3, r2
 8005134:	18ed      	addgt	r5, r5, r3
 8005136:	2600      	movs	r6, #0
 8005138:	341a      	adds	r4, #26
 800513a:	42b5      	cmp	r5, r6
 800513c:	d11a      	bne.n	8005174 <_printf_common+0xc8>
 800513e:	2000      	movs	r0, #0
 8005140:	e008      	b.n	8005154 <_printf_common+0xa8>
 8005142:	2301      	movs	r3, #1
 8005144:	4652      	mov	r2, sl
 8005146:	4649      	mov	r1, r9
 8005148:	4638      	mov	r0, r7
 800514a:	47c0      	blx	r8
 800514c:	3001      	adds	r0, #1
 800514e:	d103      	bne.n	8005158 <_printf_common+0xac>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	3501      	adds	r5, #1
 800515a:	e7c6      	b.n	80050ea <_printf_common+0x3e>
 800515c:	18e1      	adds	r1, r4, r3
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	2030      	movs	r0, #48	; 0x30
 8005162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005166:	4422      	add	r2, r4
 8005168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800516c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005170:	3302      	adds	r3, #2
 8005172:	e7c7      	b.n	8005104 <_printf_common+0x58>
 8005174:	2301      	movs	r3, #1
 8005176:	4622      	mov	r2, r4
 8005178:	4649      	mov	r1, r9
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d0e6      	beq.n	8005150 <_printf_common+0xa4>
 8005182:	3601      	adds	r6, #1
 8005184:	e7d9      	b.n	800513a <_printf_common+0x8e>
	...

08005188 <_printf_i>:
 8005188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800518c:	460c      	mov	r4, r1
 800518e:	4691      	mov	r9, r2
 8005190:	7e27      	ldrb	r7, [r4, #24]
 8005192:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005194:	2f78      	cmp	r7, #120	; 0x78
 8005196:	4680      	mov	r8, r0
 8005198:	469a      	mov	sl, r3
 800519a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800519e:	d807      	bhi.n	80051b0 <_printf_i+0x28>
 80051a0:	2f62      	cmp	r7, #98	; 0x62
 80051a2:	d80a      	bhi.n	80051ba <_printf_i+0x32>
 80051a4:	2f00      	cmp	r7, #0
 80051a6:	f000 80d8 	beq.w	800535a <_printf_i+0x1d2>
 80051aa:	2f58      	cmp	r7, #88	; 0x58
 80051ac:	f000 80a3 	beq.w	80052f6 <_printf_i+0x16e>
 80051b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b8:	e03a      	b.n	8005230 <_printf_i+0xa8>
 80051ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051be:	2b15      	cmp	r3, #21
 80051c0:	d8f6      	bhi.n	80051b0 <_printf_i+0x28>
 80051c2:	a001      	add	r0, pc, #4	; (adr r0, 80051c8 <_printf_i+0x40>)
 80051c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005235 	.word	0x08005235
 80051d0:	080051b1 	.word	0x080051b1
 80051d4:	080051b1 	.word	0x080051b1
 80051d8:	080051b1 	.word	0x080051b1
 80051dc:	080051b1 	.word	0x080051b1
 80051e0:	08005235 	.word	0x08005235
 80051e4:	080051b1 	.word	0x080051b1
 80051e8:	080051b1 	.word	0x080051b1
 80051ec:	080051b1 	.word	0x080051b1
 80051f0:	080051b1 	.word	0x080051b1
 80051f4:	08005341 	.word	0x08005341
 80051f8:	08005265 	.word	0x08005265
 80051fc:	08005323 	.word	0x08005323
 8005200:	080051b1 	.word	0x080051b1
 8005204:	080051b1 	.word	0x080051b1
 8005208:	08005363 	.word	0x08005363
 800520c:	080051b1 	.word	0x080051b1
 8005210:	08005265 	.word	0x08005265
 8005214:	080051b1 	.word	0x080051b1
 8005218:	080051b1 	.word	0x080051b1
 800521c:	0800532b 	.word	0x0800532b
 8005220:	680b      	ldr	r3, [r1, #0]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	600a      	str	r2, [r1, #0]
 8005228:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800522c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005230:	2301      	movs	r3, #1
 8005232:	e0a3      	b.n	800537c <_printf_i+0x1f4>
 8005234:	6825      	ldr	r5, [r4, #0]
 8005236:	6808      	ldr	r0, [r1, #0]
 8005238:	062e      	lsls	r6, r5, #24
 800523a:	f100 0304 	add.w	r3, r0, #4
 800523e:	d50a      	bpl.n	8005256 <_printf_i+0xce>
 8005240:	6805      	ldr	r5, [r0, #0]
 8005242:	600b      	str	r3, [r1, #0]
 8005244:	2d00      	cmp	r5, #0
 8005246:	da03      	bge.n	8005250 <_printf_i+0xc8>
 8005248:	232d      	movs	r3, #45	; 0x2d
 800524a:	426d      	negs	r5, r5
 800524c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005250:	485e      	ldr	r0, [pc, #376]	; (80053cc <_printf_i+0x244>)
 8005252:	230a      	movs	r3, #10
 8005254:	e019      	b.n	800528a <_printf_i+0x102>
 8005256:	f015 0f40 	tst.w	r5, #64	; 0x40
 800525a:	6805      	ldr	r5, [r0, #0]
 800525c:	600b      	str	r3, [r1, #0]
 800525e:	bf18      	it	ne
 8005260:	b22d      	sxthne	r5, r5
 8005262:	e7ef      	b.n	8005244 <_printf_i+0xbc>
 8005264:	680b      	ldr	r3, [r1, #0]
 8005266:	6825      	ldr	r5, [r4, #0]
 8005268:	1d18      	adds	r0, r3, #4
 800526a:	6008      	str	r0, [r1, #0]
 800526c:	0628      	lsls	r0, r5, #24
 800526e:	d501      	bpl.n	8005274 <_printf_i+0xec>
 8005270:	681d      	ldr	r5, [r3, #0]
 8005272:	e002      	b.n	800527a <_printf_i+0xf2>
 8005274:	0669      	lsls	r1, r5, #25
 8005276:	d5fb      	bpl.n	8005270 <_printf_i+0xe8>
 8005278:	881d      	ldrh	r5, [r3, #0]
 800527a:	4854      	ldr	r0, [pc, #336]	; (80053cc <_printf_i+0x244>)
 800527c:	2f6f      	cmp	r7, #111	; 0x6f
 800527e:	bf0c      	ite	eq
 8005280:	2308      	moveq	r3, #8
 8005282:	230a      	movne	r3, #10
 8005284:	2100      	movs	r1, #0
 8005286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800528a:	6866      	ldr	r6, [r4, #4]
 800528c:	60a6      	str	r6, [r4, #8]
 800528e:	2e00      	cmp	r6, #0
 8005290:	bfa2      	ittt	ge
 8005292:	6821      	ldrge	r1, [r4, #0]
 8005294:	f021 0104 	bicge.w	r1, r1, #4
 8005298:	6021      	strge	r1, [r4, #0]
 800529a:	b90d      	cbnz	r5, 80052a0 <_printf_i+0x118>
 800529c:	2e00      	cmp	r6, #0
 800529e:	d04d      	beq.n	800533c <_printf_i+0x1b4>
 80052a0:	4616      	mov	r6, r2
 80052a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80052a6:	fb03 5711 	mls	r7, r3, r1, r5
 80052aa:	5dc7      	ldrb	r7, [r0, r7]
 80052ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052b0:	462f      	mov	r7, r5
 80052b2:	42bb      	cmp	r3, r7
 80052b4:	460d      	mov	r5, r1
 80052b6:	d9f4      	bls.n	80052a2 <_printf_i+0x11a>
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d10b      	bne.n	80052d4 <_printf_i+0x14c>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	07df      	lsls	r7, r3, #31
 80052c0:	d508      	bpl.n	80052d4 <_printf_i+0x14c>
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	6861      	ldr	r1, [r4, #4]
 80052c6:	4299      	cmp	r1, r3
 80052c8:	bfde      	ittt	le
 80052ca:	2330      	movle	r3, #48	; 0x30
 80052cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052d4:	1b92      	subs	r2, r2, r6
 80052d6:	6122      	str	r2, [r4, #16]
 80052d8:	f8cd a000 	str.w	sl, [sp]
 80052dc:	464b      	mov	r3, r9
 80052de:	aa03      	add	r2, sp, #12
 80052e0:	4621      	mov	r1, r4
 80052e2:	4640      	mov	r0, r8
 80052e4:	f7ff fee2 	bl	80050ac <_printf_common>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d14c      	bne.n	8005386 <_printf_i+0x1fe>
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	b004      	add	sp, #16
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	4835      	ldr	r0, [pc, #212]	; (80053cc <_printf_i+0x244>)
 80052f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	680e      	ldr	r6, [r1, #0]
 8005300:	061f      	lsls	r7, r3, #24
 8005302:	f856 5b04 	ldr.w	r5, [r6], #4
 8005306:	600e      	str	r6, [r1, #0]
 8005308:	d514      	bpl.n	8005334 <_printf_i+0x1ac>
 800530a:	07d9      	lsls	r1, r3, #31
 800530c:	bf44      	itt	mi
 800530e:	f043 0320 	orrmi.w	r3, r3, #32
 8005312:	6023      	strmi	r3, [r4, #0]
 8005314:	b91d      	cbnz	r5, 800531e <_printf_i+0x196>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	f023 0320 	bic.w	r3, r3, #32
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	2310      	movs	r3, #16
 8005320:	e7b0      	b.n	8005284 <_printf_i+0xfc>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	f043 0320 	orr.w	r3, r3, #32
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	2378      	movs	r3, #120	; 0x78
 800532c:	4828      	ldr	r0, [pc, #160]	; (80053d0 <_printf_i+0x248>)
 800532e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005332:	e7e3      	b.n	80052fc <_printf_i+0x174>
 8005334:	065e      	lsls	r6, r3, #25
 8005336:	bf48      	it	mi
 8005338:	b2ad      	uxthmi	r5, r5
 800533a:	e7e6      	b.n	800530a <_printf_i+0x182>
 800533c:	4616      	mov	r6, r2
 800533e:	e7bb      	b.n	80052b8 <_printf_i+0x130>
 8005340:	680b      	ldr	r3, [r1, #0]
 8005342:	6826      	ldr	r6, [r4, #0]
 8005344:	6960      	ldr	r0, [r4, #20]
 8005346:	1d1d      	adds	r5, r3, #4
 8005348:	600d      	str	r5, [r1, #0]
 800534a:	0635      	lsls	r5, r6, #24
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	d501      	bpl.n	8005354 <_printf_i+0x1cc>
 8005350:	6018      	str	r0, [r3, #0]
 8005352:	e002      	b.n	800535a <_printf_i+0x1d2>
 8005354:	0671      	lsls	r1, r6, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0x1c8>
 8005358:	8018      	strh	r0, [r3, #0]
 800535a:	2300      	movs	r3, #0
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	4616      	mov	r6, r2
 8005360:	e7ba      	b.n	80052d8 <_printf_i+0x150>
 8005362:	680b      	ldr	r3, [r1, #0]
 8005364:	1d1a      	adds	r2, r3, #4
 8005366:	600a      	str	r2, [r1, #0]
 8005368:	681e      	ldr	r6, [r3, #0]
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	2100      	movs	r1, #0
 800536e:	4630      	mov	r0, r6
 8005370:	f7fa ff2e 	bl	80001d0 <memchr>
 8005374:	b108      	cbz	r0, 800537a <_printf_i+0x1f2>
 8005376:	1b80      	subs	r0, r0, r6
 8005378:	6060      	str	r0, [r4, #4]
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	2300      	movs	r3, #0
 8005380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005384:	e7a8      	b.n	80052d8 <_printf_i+0x150>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	4632      	mov	r2, r6
 800538a:	4649      	mov	r1, r9
 800538c:	4640      	mov	r0, r8
 800538e:	47d0      	blx	sl
 8005390:	3001      	adds	r0, #1
 8005392:	d0ab      	beq.n	80052ec <_printf_i+0x164>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	079b      	lsls	r3, r3, #30
 8005398:	d413      	bmi.n	80053c2 <_printf_i+0x23a>
 800539a:	68e0      	ldr	r0, [r4, #12]
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	4298      	cmp	r0, r3
 80053a0:	bfb8      	it	lt
 80053a2:	4618      	movlt	r0, r3
 80053a4:	e7a4      	b.n	80052f0 <_printf_i+0x168>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4632      	mov	r2, r6
 80053aa:	4649      	mov	r1, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	47d0      	blx	sl
 80053b0:	3001      	adds	r0, #1
 80053b2:	d09b      	beq.n	80052ec <_printf_i+0x164>
 80053b4:	3501      	adds	r5, #1
 80053b6:	68e3      	ldr	r3, [r4, #12]
 80053b8:	9903      	ldr	r1, [sp, #12]
 80053ba:	1a5b      	subs	r3, r3, r1
 80053bc:	42ab      	cmp	r3, r5
 80053be:	dcf2      	bgt.n	80053a6 <_printf_i+0x21e>
 80053c0:	e7eb      	b.n	800539a <_printf_i+0x212>
 80053c2:	2500      	movs	r5, #0
 80053c4:	f104 0619 	add.w	r6, r4, #25
 80053c8:	e7f5      	b.n	80053b6 <_printf_i+0x22e>
 80053ca:	bf00      	nop
 80053cc:	08005ab5 	.word	0x08005ab5
 80053d0:	08005ac6 	.word	0x08005ac6

080053d4 <_sbrk_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d06      	ldr	r5, [pc, #24]	; (80053f0 <_sbrk_r+0x1c>)
 80053d8:	2300      	movs	r3, #0
 80053da:	4604      	mov	r4, r0
 80053dc:	4608      	mov	r0, r1
 80053de:	602b      	str	r3, [r5, #0]
 80053e0:	f7fb fd12 	bl	8000e08 <_sbrk>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_sbrk_r+0x1a>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_sbrk_r+0x1a>
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	20002438 	.word	0x20002438

080053f4 <__sread>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	460c      	mov	r4, r1
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	f000 fab4 	bl	8005968 <_read_r>
 8005400:	2800      	cmp	r0, #0
 8005402:	bfab      	itete	ge
 8005404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005406:	89a3      	ldrhlt	r3, [r4, #12]
 8005408:	181b      	addge	r3, r3, r0
 800540a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800540e:	bfac      	ite	ge
 8005410:	6563      	strge	r3, [r4, #84]	; 0x54
 8005412:	81a3      	strhlt	r3, [r4, #12]
 8005414:	bd10      	pop	{r4, pc}

08005416 <__swrite>:
 8005416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541a:	461f      	mov	r7, r3
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	05db      	lsls	r3, r3, #23
 8005420:	4605      	mov	r5, r0
 8005422:	460c      	mov	r4, r1
 8005424:	4616      	mov	r6, r2
 8005426:	d505      	bpl.n	8005434 <__swrite+0x1e>
 8005428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542c:	2302      	movs	r3, #2
 800542e:	2200      	movs	r2, #0
 8005430:	f000 f9c8 	bl	80057c4 <_lseek_r>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800543a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	4632      	mov	r2, r6
 8005442:	463b      	mov	r3, r7
 8005444:	4628      	mov	r0, r5
 8005446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	f000 b869 	b.w	8005520 <_write_r>

0800544e <__sseek>:
 800544e:	b510      	push	{r4, lr}
 8005450:	460c      	mov	r4, r1
 8005452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005456:	f000 f9b5 	bl	80057c4 <_lseek_r>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	bf15      	itete	ne
 8005460:	6560      	strne	r0, [r4, #84]	; 0x54
 8005462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800546a:	81a3      	strheq	r3, [r4, #12]
 800546c:	bf18      	it	ne
 800546e:	81a3      	strhne	r3, [r4, #12]
 8005470:	bd10      	pop	{r4, pc}

08005472 <__sclose>:
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 b8d3 	b.w	8005620 <_close_r>
	...

0800547c <__swbuf_r>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	460e      	mov	r6, r1
 8005480:	4614      	mov	r4, r2
 8005482:	4605      	mov	r5, r0
 8005484:	b118      	cbz	r0, 800548e <__swbuf_r+0x12>
 8005486:	6983      	ldr	r3, [r0, #24]
 8005488:	b90b      	cbnz	r3, 800548e <__swbuf_r+0x12>
 800548a:	f7ff fbbb 	bl	8004c04 <__sinit>
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <__swbuf_r+0x98>)
 8005490:	429c      	cmp	r4, r3
 8005492:	d12b      	bne.n	80054ec <__swbuf_r+0x70>
 8005494:	686c      	ldr	r4, [r5, #4]
 8005496:	69a3      	ldr	r3, [r4, #24]
 8005498:	60a3      	str	r3, [r4, #8]
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	071a      	lsls	r2, r3, #28
 800549e:	d52f      	bpl.n	8005500 <__swbuf_r+0x84>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	b36b      	cbz	r3, 8005500 <__swbuf_r+0x84>
 80054a4:	6923      	ldr	r3, [r4, #16]
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	1ac0      	subs	r0, r0, r3
 80054aa:	6963      	ldr	r3, [r4, #20]
 80054ac:	b2f6      	uxtb	r6, r6
 80054ae:	4283      	cmp	r3, r0
 80054b0:	4637      	mov	r7, r6
 80054b2:	dc04      	bgt.n	80054be <__swbuf_r+0x42>
 80054b4:	4621      	mov	r1, r4
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f948 	bl	800574c <_fflush_r>
 80054bc:	bb30      	cbnz	r0, 800550c <__swbuf_r+0x90>
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	60a3      	str	r3, [r4, #8]
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	6022      	str	r2, [r4, #0]
 80054ca:	701e      	strb	r6, [r3, #0]
 80054cc:	6963      	ldr	r3, [r4, #20]
 80054ce:	3001      	adds	r0, #1
 80054d0:	4283      	cmp	r3, r0
 80054d2:	d004      	beq.n	80054de <__swbuf_r+0x62>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	07db      	lsls	r3, r3, #31
 80054d8:	d506      	bpl.n	80054e8 <__swbuf_r+0x6c>
 80054da:	2e0a      	cmp	r6, #10
 80054dc:	d104      	bne.n	80054e8 <__swbuf_r+0x6c>
 80054de:	4621      	mov	r1, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 f933 	bl	800574c <_fflush_r>
 80054e6:	b988      	cbnz	r0, 800550c <__swbuf_r+0x90>
 80054e8:	4638      	mov	r0, r7
 80054ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <__swbuf_r+0x9c>)
 80054ee:	429c      	cmp	r4, r3
 80054f0:	d101      	bne.n	80054f6 <__swbuf_r+0x7a>
 80054f2:	68ac      	ldr	r4, [r5, #8]
 80054f4:	e7cf      	b.n	8005496 <__swbuf_r+0x1a>
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <__swbuf_r+0xa0>)
 80054f8:	429c      	cmp	r4, r3
 80054fa:	bf08      	it	eq
 80054fc:	68ec      	ldreq	r4, [r5, #12]
 80054fe:	e7ca      	b.n	8005496 <__swbuf_r+0x1a>
 8005500:	4621      	mov	r1, r4
 8005502:	4628      	mov	r0, r5
 8005504:	f000 f81e 	bl	8005544 <__swsetup_r>
 8005508:	2800      	cmp	r0, #0
 800550a:	d0cb      	beq.n	80054a4 <__swbuf_r+0x28>
 800550c:	f04f 37ff 	mov.w	r7, #4294967295
 8005510:	e7ea      	b.n	80054e8 <__swbuf_r+0x6c>
 8005512:	bf00      	nop
 8005514:	08005a64 	.word	0x08005a64
 8005518:	08005a84 	.word	0x08005a84
 800551c:	08005a44 	.word	0x08005a44

08005520 <_write_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d07      	ldr	r5, [pc, #28]	; (8005540 <_write_r+0x20>)
 8005524:	4604      	mov	r4, r0
 8005526:	4608      	mov	r0, r1
 8005528:	4611      	mov	r1, r2
 800552a:	2200      	movs	r2, #0
 800552c:	602a      	str	r2, [r5, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	f7fb f95f 	bl	80007f2 <_write>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_write_r+0x1e>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_write_r+0x1e>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20002438 	.word	0x20002438

08005544 <__swsetup_r>:
 8005544:	4b32      	ldr	r3, [pc, #200]	; (8005610 <__swsetup_r+0xcc>)
 8005546:	b570      	push	{r4, r5, r6, lr}
 8005548:	681d      	ldr	r5, [r3, #0]
 800554a:	4606      	mov	r6, r0
 800554c:	460c      	mov	r4, r1
 800554e:	b125      	cbz	r5, 800555a <__swsetup_r+0x16>
 8005550:	69ab      	ldr	r3, [r5, #24]
 8005552:	b913      	cbnz	r3, 800555a <__swsetup_r+0x16>
 8005554:	4628      	mov	r0, r5
 8005556:	f7ff fb55 	bl	8004c04 <__sinit>
 800555a:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <__swsetup_r+0xd0>)
 800555c:	429c      	cmp	r4, r3
 800555e:	d10f      	bne.n	8005580 <__swsetup_r+0x3c>
 8005560:	686c      	ldr	r4, [r5, #4]
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005568:	0719      	lsls	r1, r3, #28
 800556a:	d42c      	bmi.n	80055c6 <__swsetup_r+0x82>
 800556c:	06dd      	lsls	r5, r3, #27
 800556e:	d411      	bmi.n	8005594 <__swsetup_r+0x50>
 8005570:	2309      	movs	r3, #9
 8005572:	6033      	str	r3, [r6, #0]
 8005574:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	f04f 30ff 	mov.w	r0, #4294967295
 800557e:	e03e      	b.n	80055fe <__swsetup_r+0xba>
 8005580:	4b25      	ldr	r3, [pc, #148]	; (8005618 <__swsetup_r+0xd4>)
 8005582:	429c      	cmp	r4, r3
 8005584:	d101      	bne.n	800558a <__swsetup_r+0x46>
 8005586:	68ac      	ldr	r4, [r5, #8]
 8005588:	e7eb      	b.n	8005562 <__swsetup_r+0x1e>
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <__swsetup_r+0xd8>)
 800558c:	429c      	cmp	r4, r3
 800558e:	bf08      	it	eq
 8005590:	68ec      	ldreq	r4, [r5, #12]
 8005592:	e7e6      	b.n	8005562 <__swsetup_r+0x1e>
 8005594:	0758      	lsls	r0, r3, #29
 8005596:	d512      	bpl.n	80055be <__swsetup_r+0x7a>
 8005598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800559a:	b141      	cbz	r1, 80055ae <__swsetup_r+0x6a>
 800559c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a0:	4299      	cmp	r1, r3
 80055a2:	d002      	beq.n	80055aa <__swsetup_r+0x66>
 80055a4:	4630      	mov	r0, r6
 80055a6:	f000 f98f 	bl	80058c8 <_free_r>
 80055aa:	2300      	movs	r3, #0
 80055ac:	6363      	str	r3, [r4, #52]	; 0x34
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	2300      	movs	r3, #0
 80055b8:	6063      	str	r3, [r4, #4]
 80055ba:	6923      	ldr	r3, [r4, #16]
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f043 0308 	orr.w	r3, r3, #8
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	b94b      	cbnz	r3, 80055de <__swsetup_r+0x9a>
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d4:	d003      	beq.n	80055de <__swsetup_r+0x9a>
 80055d6:	4621      	mov	r1, r4
 80055d8:	4630      	mov	r0, r6
 80055da:	f000 f929 	bl	8005830 <__smakebuf_r>
 80055de:	89a0      	ldrh	r0, [r4, #12]
 80055e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e4:	f010 0301 	ands.w	r3, r0, #1
 80055e8:	d00a      	beq.n	8005600 <__swsetup_r+0xbc>
 80055ea:	2300      	movs	r3, #0
 80055ec:	60a3      	str	r3, [r4, #8]
 80055ee:	6963      	ldr	r3, [r4, #20]
 80055f0:	425b      	negs	r3, r3
 80055f2:	61a3      	str	r3, [r4, #24]
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	b943      	cbnz	r3, 800560a <__swsetup_r+0xc6>
 80055f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055fc:	d1ba      	bne.n	8005574 <__swsetup_r+0x30>
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	0781      	lsls	r1, r0, #30
 8005602:	bf58      	it	pl
 8005604:	6963      	ldrpl	r3, [r4, #20]
 8005606:	60a3      	str	r3, [r4, #8]
 8005608:	e7f4      	b.n	80055f4 <__swsetup_r+0xb0>
 800560a:	2000      	movs	r0, #0
 800560c:	e7f7      	b.n	80055fe <__swsetup_r+0xba>
 800560e:	bf00      	nop
 8005610:	20000020 	.word	0x20000020
 8005614:	08005a64 	.word	0x08005a64
 8005618:	08005a84 	.word	0x08005a84
 800561c:	08005a44 	.word	0x08005a44

08005620 <_close_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d06      	ldr	r5, [pc, #24]	; (800563c <_close_r+0x1c>)
 8005624:	2300      	movs	r3, #0
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	f7fb fbb7 	bl	8000d9e <_close>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_close_r+0x1a>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_close_r+0x1a>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	20002438 	.word	0x20002438

08005640 <__sflush_r>:
 8005640:	898a      	ldrh	r2, [r1, #12]
 8005642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005646:	4605      	mov	r5, r0
 8005648:	0710      	lsls	r0, r2, #28
 800564a:	460c      	mov	r4, r1
 800564c:	d458      	bmi.n	8005700 <__sflush_r+0xc0>
 800564e:	684b      	ldr	r3, [r1, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	dc05      	bgt.n	8005660 <__sflush_r+0x20>
 8005654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	dc02      	bgt.n	8005660 <__sflush_r+0x20>
 800565a:	2000      	movs	r0, #0
 800565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005662:	2e00      	cmp	r6, #0
 8005664:	d0f9      	beq.n	800565a <__sflush_r+0x1a>
 8005666:	2300      	movs	r3, #0
 8005668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800566c:	682f      	ldr	r7, [r5, #0]
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	d032      	beq.n	80056d8 <__sflush_r+0x98>
 8005672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	075a      	lsls	r2, r3, #29
 8005678:	d505      	bpl.n	8005686 <__sflush_r+0x46>
 800567a:	6863      	ldr	r3, [r4, #4]
 800567c:	1ac0      	subs	r0, r0, r3
 800567e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005680:	b10b      	cbz	r3, 8005686 <__sflush_r+0x46>
 8005682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005684:	1ac0      	subs	r0, r0, r3
 8005686:	2300      	movs	r3, #0
 8005688:	4602      	mov	r2, r0
 800568a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800568c:	6a21      	ldr	r1, [r4, #32]
 800568e:	4628      	mov	r0, r5
 8005690:	47b0      	blx	r6
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	d106      	bne.n	80056a6 <__sflush_r+0x66>
 8005698:	6829      	ldr	r1, [r5, #0]
 800569a:	291d      	cmp	r1, #29
 800569c:	d82c      	bhi.n	80056f8 <__sflush_r+0xb8>
 800569e:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <__sflush_r+0x108>)
 80056a0:	40ca      	lsrs	r2, r1
 80056a2:	07d6      	lsls	r6, r2, #31
 80056a4:	d528      	bpl.n	80056f8 <__sflush_r+0xb8>
 80056a6:	2200      	movs	r2, #0
 80056a8:	6062      	str	r2, [r4, #4]
 80056aa:	04d9      	lsls	r1, r3, #19
 80056ac:	6922      	ldr	r2, [r4, #16]
 80056ae:	6022      	str	r2, [r4, #0]
 80056b0:	d504      	bpl.n	80056bc <__sflush_r+0x7c>
 80056b2:	1c42      	adds	r2, r0, #1
 80056b4:	d101      	bne.n	80056ba <__sflush_r+0x7a>
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	b903      	cbnz	r3, 80056bc <__sflush_r+0x7c>
 80056ba:	6560      	str	r0, [r4, #84]	; 0x54
 80056bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056be:	602f      	str	r7, [r5, #0]
 80056c0:	2900      	cmp	r1, #0
 80056c2:	d0ca      	beq.n	800565a <__sflush_r+0x1a>
 80056c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c8:	4299      	cmp	r1, r3
 80056ca:	d002      	beq.n	80056d2 <__sflush_r+0x92>
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 f8fb 	bl	80058c8 <_free_r>
 80056d2:	2000      	movs	r0, #0
 80056d4:	6360      	str	r0, [r4, #52]	; 0x34
 80056d6:	e7c1      	b.n	800565c <__sflush_r+0x1c>
 80056d8:	6a21      	ldr	r1, [r4, #32]
 80056da:	2301      	movs	r3, #1
 80056dc:	4628      	mov	r0, r5
 80056de:	47b0      	blx	r6
 80056e0:	1c41      	adds	r1, r0, #1
 80056e2:	d1c7      	bne.n	8005674 <__sflush_r+0x34>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0c4      	beq.n	8005674 <__sflush_r+0x34>
 80056ea:	2b1d      	cmp	r3, #29
 80056ec:	d001      	beq.n	80056f2 <__sflush_r+0xb2>
 80056ee:	2b16      	cmp	r3, #22
 80056f0:	d101      	bne.n	80056f6 <__sflush_r+0xb6>
 80056f2:	602f      	str	r7, [r5, #0]
 80056f4:	e7b1      	b.n	800565a <__sflush_r+0x1a>
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056fc:	81a3      	strh	r3, [r4, #12]
 80056fe:	e7ad      	b.n	800565c <__sflush_r+0x1c>
 8005700:	690f      	ldr	r7, [r1, #16]
 8005702:	2f00      	cmp	r7, #0
 8005704:	d0a9      	beq.n	800565a <__sflush_r+0x1a>
 8005706:	0793      	lsls	r3, r2, #30
 8005708:	680e      	ldr	r6, [r1, #0]
 800570a:	bf08      	it	eq
 800570c:	694b      	ldreq	r3, [r1, #20]
 800570e:	600f      	str	r7, [r1, #0]
 8005710:	bf18      	it	ne
 8005712:	2300      	movne	r3, #0
 8005714:	eba6 0807 	sub.w	r8, r6, r7
 8005718:	608b      	str	r3, [r1, #8]
 800571a:	f1b8 0f00 	cmp.w	r8, #0
 800571e:	dd9c      	ble.n	800565a <__sflush_r+0x1a>
 8005720:	6a21      	ldr	r1, [r4, #32]
 8005722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005724:	4643      	mov	r3, r8
 8005726:	463a      	mov	r2, r7
 8005728:	4628      	mov	r0, r5
 800572a:	47b0      	blx	r6
 800572c:	2800      	cmp	r0, #0
 800572e:	dc06      	bgt.n	800573e <__sflush_r+0xfe>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	f04f 30ff 	mov.w	r0, #4294967295
 800573c:	e78e      	b.n	800565c <__sflush_r+0x1c>
 800573e:	4407      	add	r7, r0
 8005740:	eba8 0800 	sub.w	r8, r8, r0
 8005744:	e7e9      	b.n	800571a <__sflush_r+0xda>
 8005746:	bf00      	nop
 8005748:	20400001 	.word	0x20400001

0800574c <_fflush_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	690b      	ldr	r3, [r1, #16]
 8005750:	4605      	mov	r5, r0
 8005752:	460c      	mov	r4, r1
 8005754:	b913      	cbnz	r3, 800575c <_fflush_r+0x10>
 8005756:	2500      	movs	r5, #0
 8005758:	4628      	mov	r0, r5
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	b118      	cbz	r0, 8005766 <_fflush_r+0x1a>
 800575e:	6983      	ldr	r3, [r0, #24]
 8005760:	b90b      	cbnz	r3, 8005766 <_fflush_r+0x1a>
 8005762:	f7ff fa4f 	bl	8004c04 <__sinit>
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <_fflush_r+0x6c>)
 8005768:	429c      	cmp	r4, r3
 800576a:	d11b      	bne.n	80057a4 <_fflush_r+0x58>
 800576c:	686c      	ldr	r4, [r5, #4]
 800576e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0ef      	beq.n	8005756 <_fflush_r+0xa>
 8005776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005778:	07d0      	lsls	r0, r2, #31
 800577a:	d404      	bmi.n	8005786 <_fflush_r+0x3a>
 800577c:	0599      	lsls	r1, r3, #22
 800577e:	d402      	bmi.n	8005786 <_fflush_r+0x3a>
 8005780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005782:	f7ff fadd 	bl	8004d40 <__retarget_lock_acquire_recursive>
 8005786:	4628      	mov	r0, r5
 8005788:	4621      	mov	r1, r4
 800578a:	f7ff ff59 	bl	8005640 <__sflush_r>
 800578e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005790:	07da      	lsls	r2, r3, #31
 8005792:	4605      	mov	r5, r0
 8005794:	d4e0      	bmi.n	8005758 <_fflush_r+0xc>
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	059b      	lsls	r3, r3, #22
 800579a:	d4dd      	bmi.n	8005758 <_fflush_r+0xc>
 800579c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800579e:	f7ff fad0 	bl	8004d42 <__retarget_lock_release_recursive>
 80057a2:	e7d9      	b.n	8005758 <_fflush_r+0xc>
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <_fflush_r+0x70>)
 80057a6:	429c      	cmp	r4, r3
 80057a8:	d101      	bne.n	80057ae <_fflush_r+0x62>
 80057aa:	68ac      	ldr	r4, [r5, #8]
 80057ac:	e7df      	b.n	800576e <_fflush_r+0x22>
 80057ae:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <_fflush_r+0x74>)
 80057b0:	429c      	cmp	r4, r3
 80057b2:	bf08      	it	eq
 80057b4:	68ec      	ldreq	r4, [r5, #12]
 80057b6:	e7da      	b.n	800576e <_fflush_r+0x22>
 80057b8:	08005a64 	.word	0x08005a64
 80057bc:	08005a84 	.word	0x08005a84
 80057c0:	08005a44 	.word	0x08005a44

080057c4 <_lseek_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d07      	ldr	r5, [pc, #28]	; (80057e4 <_lseek_r+0x20>)
 80057c8:	4604      	mov	r4, r0
 80057ca:	4608      	mov	r0, r1
 80057cc:	4611      	mov	r1, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	602a      	str	r2, [r5, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f7fb fb0a 	bl	8000dec <_lseek>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_lseek_r+0x1e>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_lseek_r+0x1e>
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	20002438 	.word	0x20002438

080057e8 <__swhatbuf_r>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	460e      	mov	r6, r1
 80057ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f0:	2900      	cmp	r1, #0
 80057f2:	b096      	sub	sp, #88	; 0x58
 80057f4:	4614      	mov	r4, r2
 80057f6:	461d      	mov	r5, r3
 80057f8:	da07      	bge.n	800580a <__swhatbuf_r+0x22>
 80057fa:	2300      	movs	r3, #0
 80057fc:	602b      	str	r3, [r5, #0]
 80057fe:	89b3      	ldrh	r3, [r6, #12]
 8005800:	061a      	lsls	r2, r3, #24
 8005802:	d410      	bmi.n	8005826 <__swhatbuf_r+0x3e>
 8005804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005808:	e00e      	b.n	8005828 <__swhatbuf_r+0x40>
 800580a:	466a      	mov	r2, sp
 800580c:	f000 f8be 	bl	800598c <_fstat_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	dbf2      	blt.n	80057fa <__swhatbuf_r+0x12>
 8005814:	9a01      	ldr	r2, [sp, #4]
 8005816:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800581a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800581e:	425a      	negs	r2, r3
 8005820:	415a      	adcs	r2, r3
 8005822:	602a      	str	r2, [r5, #0]
 8005824:	e7ee      	b.n	8005804 <__swhatbuf_r+0x1c>
 8005826:	2340      	movs	r3, #64	; 0x40
 8005828:	2000      	movs	r0, #0
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	b016      	add	sp, #88	; 0x58
 800582e:	bd70      	pop	{r4, r5, r6, pc}

08005830 <__smakebuf_r>:
 8005830:	898b      	ldrh	r3, [r1, #12]
 8005832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005834:	079d      	lsls	r5, r3, #30
 8005836:	4606      	mov	r6, r0
 8005838:	460c      	mov	r4, r1
 800583a:	d507      	bpl.n	800584c <__smakebuf_r+0x1c>
 800583c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	6123      	str	r3, [r4, #16]
 8005844:	2301      	movs	r3, #1
 8005846:	6163      	str	r3, [r4, #20]
 8005848:	b002      	add	sp, #8
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	ab01      	add	r3, sp, #4
 800584e:	466a      	mov	r2, sp
 8005850:	f7ff ffca 	bl	80057e8 <__swhatbuf_r>
 8005854:	9900      	ldr	r1, [sp, #0]
 8005856:	4605      	mov	r5, r0
 8005858:	4630      	mov	r0, r6
 800585a:	f7ff fa73 	bl	8004d44 <_malloc_r>
 800585e:	b948      	cbnz	r0, 8005874 <__smakebuf_r+0x44>
 8005860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005864:	059a      	lsls	r2, r3, #22
 8005866:	d4ef      	bmi.n	8005848 <__smakebuf_r+0x18>
 8005868:	f023 0303 	bic.w	r3, r3, #3
 800586c:	f043 0302 	orr.w	r3, r3, #2
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	e7e3      	b.n	800583c <__smakebuf_r+0xc>
 8005874:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <__smakebuf_r+0x7c>)
 8005876:	62b3      	str	r3, [r6, #40]	; 0x28
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	6020      	str	r0, [r4, #0]
 800587c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	9b00      	ldr	r3, [sp, #0]
 8005884:	6163      	str	r3, [r4, #20]
 8005886:	9b01      	ldr	r3, [sp, #4]
 8005888:	6120      	str	r0, [r4, #16]
 800588a:	b15b      	cbz	r3, 80058a4 <__smakebuf_r+0x74>
 800588c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005890:	4630      	mov	r0, r6
 8005892:	f000 f88d 	bl	80059b0 <_isatty_r>
 8005896:	b128      	cbz	r0, 80058a4 <__smakebuf_r+0x74>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	89a0      	ldrh	r0, [r4, #12]
 80058a6:	4305      	orrs	r5, r0
 80058a8:	81a5      	strh	r5, [r4, #12]
 80058aa:	e7cd      	b.n	8005848 <__smakebuf_r+0x18>
 80058ac:	08004b9d 	.word	0x08004b9d

080058b0 <__malloc_lock>:
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <__malloc_lock+0x8>)
 80058b2:	f7ff ba45 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	20002430 	.word	0x20002430

080058bc <__malloc_unlock>:
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <__malloc_unlock+0x8>)
 80058be:	f7ff ba40 	b.w	8004d42 <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	20002430 	.word	0x20002430

080058c8 <_free_r>:
 80058c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ca:	2900      	cmp	r1, #0
 80058cc:	d048      	beq.n	8005960 <_free_r+0x98>
 80058ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d2:	9001      	str	r0, [sp, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f1a1 0404 	sub.w	r4, r1, #4
 80058da:	bfb8      	it	lt
 80058dc:	18e4      	addlt	r4, r4, r3
 80058de:	f7ff ffe7 	bl	80058b0 <__malloc_lock>
 80058e2:	4a20      	ldr	r2, [pc, #128]	; (8005964 <_free_r+0x9c>)
 80058e4:	9801      	ldr	r0, [sp, #4]
 80058e6:	6813      	ldr	r3, [r2, #0]
 80058e8:	4615      	mov	r5, r2
 80058ea:	b933      	cbnz	r3, 80058fa <_free_r+0x32>
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	6014      	str	r4, [r2, #0]
 80058f0:	b003      	add	sp, #12
 80058f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058f6:	f7ff bfe1 	b.w	80058bc <__malloc_unlock>
 80058fa:	42a3      	cmp	r3, r4
 80058fc:	d90b      	bls.n	8005916 <_free_r+0x4e>
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	1862      	adds	r2, r4, r1
 8005902:	4293      	cmp	r3, r2
 8005904:	bf04      	itt	eq
 8005906:	681a      	ldreq	r2, [r3, #0]
 8005908:	685b      	ldreq	r3, [r3, #4]
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	bf04      	itt	eq
 800590e:	1852      	addeq	r2, r2, r1
 8005910:	6022      	streq	r2, [r4, #0]
 8005912:	602c      	str	r4, [r5, #0]
 8005914:	e7ec      	b.n	80058f0 <_free_r+0x28>
 8005916:	461a      	mov	r2, r3
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b10b      	cbz	r3, 8005920 <_free_r+0x58>
 800591c:	42a3      	cmp	r3, r4
 800591e:	d9fa      	bls.n	8005916 <_free_r+0x4e>
 8005920:	6811      	ldr	r1, [r2, #0]
 8005922:	1855      	adds	r5, r2, r1
 8005924:	42a5      	cmp	r5, r4
 8005926:	d10b      	bne.n	8005940 <_free_r+0x78>
 8005928:	6824      	ldr	r4, [r4, #0]
 800592a:	4421      	add	r1, r4
 800592c:	1854      	adds	r4, r2, r1
 800592e:	42a3      	cmp	r3, r4
 8005930:	6011      	str	r1, [r2, #0]
 8005932:	d1dd      	bne.n	80058f0 <_free_r+0x28>
 8005934:	681c      	ldr	r4, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	6053      	str	r3, [r2, #4]
 800593a:	4421      	add	r1, r4
 800593c:	6011      	str	r1, [r2, #0]
 800593e:	e7d7      	b.n	80058f0 <_free_r+0x28>
 8005940:	d902      	bls.n	8005948 <_free_r+0x80>
 8005942:	230c      	movs	r3, #12
 8005944:	6003      	str	r3, [r0, #0]
 8005946:	e7d3      	b.n	80058f0 <_free_r+0x28>
 8005948:	6825      	ldr	r5, [r4, #0]
 800594a:	1961      	adds	r1, r4, r5
 800594c:	428b      	cmp	r3, r1
 800594e:	bf04      	itt	eq
 8005950:	6819      	ldreq	r1, [r3, #0]
 8005952:	685b      	ldreq	r3, [r3, #4]
 8005954:	6063      	str	r3, [r4, #4]
 8005956:	bf04      	itt	eq
 8005958:	1949      	addeq	r1, r1, r5
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	6054      	str	r4, [r2, #4]
 800595e:	e7c7      	b.n	80058f0 <_free_r+0x28>
 8005960:	b003      	add	sp, #12
 8005962:	bd30      	pop	{r4, r5, pc}
 8005964:	200000c4 	.word	0x200000c4

08005968 <_read_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d07      	ldr	r5, [pc, #28]	; (8005988 <_read_r+0x20>)
 800596c:	4604      	mov	r4, r0
 800596e:	4608      	mov	r0, r1
 8005970:	4611      	mov	r1, r2
 8005972:	2200      	movs	r2, #0
 8005974:	602a      	str	r2, [r5, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f7fb f9f4 	bl	8000d64 <_read>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_read_r+0x1e>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b103      	cbz	r3, 8005986 <_read_r+0x1e>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	20002438 	.word	0x20002438

0800598c <_fstat_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d07      	ldr	r5, [pc, #28]	; (80059ac <_fstat_r+0x20>)
 8005990:	2300      	movs	r3, #0
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	602b      	str	r3, [r5, #0]
 800599a:	f7fb fa0c 	bl	8000db6 <_fstat>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	d102      	bne.n	80059a8 <_fstat_r+0x1c>
 80059a2:	682b      	ldr	r3, [r5, #0]
 80059a4:	b103      	cbz	r3, 80059a8 <_fstat_r+0x1c>
 80059a6:	6023      	str	r3, [r4, #0]
 80059a8:	bd38      	pop	{r3, r4, r5, pc}
 80059aa:	bf00      	nop
 80059ac:	20002438 	.word	0x20002438

080059b0 <_isatty_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d06      	ldr	r5, [pc, #24]	; (80059cc <_isatty_r+0x1c>)
 80059b4:	2300      	movs	r3, #0
 80059b6:	4604      	mov	r4, r0
 80059b8:	4608      	mov	r0, r1
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	f7fb fa0b 	bl	8000dd6 <_isatty>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d102      	bne.n	80059ca <_isatty_r+0x1a>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	b103      	cbz	r3, 80059ca <_isatty_r+0x1a>
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	20002438 	.word	0x20002438

080059d0 <_init>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr

080059dc <_fini>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr
